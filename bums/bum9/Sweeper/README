

    ----- HELLO BLITZ USERS! -----

  BlitzSweeper is yet one more MineSweeper clone.  But it is not
  intended too be any better than existing ones.  I wrote this thing
  just for You, Blitz Users, for source example.

  Please feel free to study this code, develop it and use it for Your
  own.  I think this kind of basic example should be available for
  everyone.

  Er, Simon said there already is minesweeper..  ok, well lets hope
  this is small enough to fit into BUM anyway..

  BlitzTris is a Tetris for Blitz just like Blitz Sweeper.  There's no
  docs but it is commented pretty well.


    ----- GENERAL HINTS -----

  Variable init must be first in the code so that arrays can be
  used in statements & functions.

  Place all possible constants to real constants, NOT variables.  It
  makes executables both smaller and faster.  Use constants names
  everywhere instead of constant numbers.

  Place all common variables to same place in the code, usually almost
  to the top of it.  Place a mousable label or a few there.

  When jumping here and there in source code, place empty mousable
  labels before going elsewhere.  Will be quicker to get back to the
  right place.

  GLOBAL statement can be simulated with a macro including SHARED
  statements.

  Use on variable to mean exactly on thing.

  Decide variable names well and early.  If You have to change names,
  that must be done VERY carefully.  My favourite mistake.

  Put most used graphics routines to macros.  They are easier to
  change.

  Put all macro parameters into parenthesis (`).


    ----- BlitzSweeper -----

  First the graphics.  They are in Data -subdirectory, so remember to
  click that CD -button on TEDs filerequester!

  The error checking (SetErr) is to prevent crashes when Debugger is
  disabled.  When toggling debugger On/Off from Compiler options,
  remember to update this line correspondigly (adding/removing ;)


    ----- ARRAYS -----

  mf.b (#MMX,#MMY) is a two-dimensional table that presents the
  minefield.  First parameter is x-position & second is y-position.
  Possible values (same for all locations) are explained in 'MineField
  Values' section of source code.

  mfs.b (32) is used to transform minefield values to shapes.  It's
  contents are also on 'MineField Values' section of source code, and
  block shapes are listed right below that.

  stack.coord ( #MMX * #MMY ) is a stack, a sort of list.  It is used
  for automatical checker that opens all spots that are 'for sure' not
  mines.  It keeps locations in it, as its type .coord tells.

  pm.coord (10) does not actually store locations.  It stores location
  Modifiers.  Few times in source we need information like 'What are
  the neighbours of (x,y)?'.  We know that on top of it it is (x,y-1)
  etc.  This table holds all eight directions' modifiers.  This way
  they can be looped through in a for-next (or some else) loop.


    ----- STATEMENTS -----

  I use a simple Grab -statement to grab graphics from previously
  loaded IFF picture / bitmap.  Grab -statement takes single line
  starting from left edge - A line of shapes which width & height are
  spesified.  It also automatically keeps count of y-position.

  The Digi -statement simply takes a string variable (& position) and
  blits out corrensponding Digit Shapes.  Char by char ASCII values
  are transformed to Shape Numbers & blitted out.


    ----- FUNCTIONS -----

  CheckMine is a function that returns 1 if there's mine in given
  direction of given position.  It is used in routine counting
  neighbouring mines.  It IS a bit useless to write function that is
  used only once in code...  It would be better to write more 'common'
  functions; this one, for exanmple, could return the minefield's
  value, not 'Yes, a mine / No mine'.


    ----- GRAPHICS -----

  I open a screen and take it's bitmap for viewing game grfxs on it.
  There's also a initialization-stage-only bitmap that is used to
  store grfx for while grabbing 'em to shapes.


    ----- THE GAME -----

  'MAIN' has only bare bones - there's no interface at all.  This
  simply sets map specs, sets some grfxs vars & calls 'Play'.

  'Play' first resets some variables & calcs more grfxs vars.
  Pre-calculate everything that You can.  Only give up if it takes too
  long.

  CheckIt checks single spot & calls automatic checker if needed.

  AutoCheck does the automatical checkings.  It uses stack () of
  locations to be checked.  When this routine is called, it puts
  starting point to stack.  Then the loop:  Takes next item from
  stack, counts it & opens it's graphics.  Checks if it is obvious
  there's no mine in neighbours (was it zero?).  If it was so, it
  places all unchecked neighbours to stack.  They are marked 'checked'
  right away so that they woudn't be placed to stack more than once.

  That's it.  Hope You like it.



                            Timo Suoranta

                            Urjalantie 34
                          31900 Punkalaidun
                               Finland


                E-Mail:  timo.suoranta@tna.nullnet.fi


