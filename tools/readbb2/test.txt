;
;  Skidmarks demo version release   27/01/94, late..
;

snd.w=#####[197]#####[2266]:med.w=#####[197]#####[2208]

pg$=""
#####[195]#####[2144]
#bars=#####[198]#####[2240]
#errs=#####[198]#####[2240]
#collisions=#####[197]#####[2208]

#serdat =$dff030
#serdatr=$dff018
#oks=30
#posx=144:#posy=74:#shad=5
#xs=123:#ys=32
#grass=1:#snow=2:#beach=4:#seal=64
master.w=0:port.w=0:connect.w=#####[198]#####[2298]:sldpitch.w=130

NEWTYPE .ShadPt
  ri0.q:rj0:ri1:rj1:ri2:rj2:ri3:rj3:ri4:rj4:ri5:rj5
  rx0.w:ry0:rx1:ry1:rx2:ry2:rx3:ry3
End NEWTYPE

g$="GFX/"
#####[1800] 2

CNIF 1=0
  If #####[2001] (0,"Skid.Readme")
    #####[1992] 0
    While #####[137]#####[320] #####[1997](0):#####[3106]#####[96] #####[2977](79):#####[193]#####[2080]
    #####[2625]:#####[1986] 0
  Else"
    #####[3106]#####[96] "Oi!  someone's nicked off with my readme!"
  #####[192]#####[2048]
CEND

;opd.w=OpenSerial ("serial.device",0,2400,0)
twin=#####[198]#####[2240]

#goff=SizeOf/.ShadPt*32 ;<sniff> kludged again
#AGAleng=440000           ;800*256     ; yeah right!?
#vsiz   =#goff+#AGAleng

Gosub InitMemory
Gosub InitCops
Gosub InitBmaps

Gosub InitSign
Gosub InitMainVars
Gosub InitMiscGfx

;DefaultOutput:NPrint "Init waz kuhl!"

Gosub LeechCar;:DefaultOutput:NPrint "Car waz kuhl!"
Gosub LeechMap;:DefaultOutput:NPrint "Map waz kuhl!"

;DefaultOutput
;NPrint "":NPrint "Everything is happy"

Gosub Bmode
QAMIGA6
VWait7 20

Free+ #####[1217] 5
;If opd.w Then CloseSerial 0
#####[4245]#####[1754]:#####[1862] #####[198]#####[2240]
End


.NTypes

NEWTYPE .quadratic ; x=at*t+bt+c :y=dt*t+et+f
  la.q:ma:lb:lc
  ld  :md:le:lf
  lb1 :lb2     ;boundaries..
  lstraight.w
  lodd1.w:lodd3.w
  langst.q:langadd.q

  ra.q:na:rb:rc
  rd  :nd:re:rf
  rb1 :rb2
  rstraight.w
  rodd1.w:rodd3.w
  rangst.q:rangadd.q
End NEWTYPE:#hquad=SizeOf/.quadratic #####[69]E 1

NEWTYPE .xtra
  cai.q:caj:cbi:cbj:midi:midj  ; just for fun
  dai  :daj:dbi:dbj:diri:dirj
  swivi:swivj
  centi:centj  ;centre or part-circle
  desti:destj  ; destination for computer cars..
End NEWTYPE

DEFTYPE3.w i,j,ipl,pl,cop,tim,sr,roll,pitch

NEWTYPE .car
     i.q:   j:k:   headi:   headj:headk:   movi:   movj
  swai.q:swaj:  swaheadi:swaheadj:      swamovi:swamovj
  ;n.b.  i:j Headi:headj, qc:qs *MUST* be in order for collisions..
  mx.q:my:sx:sy:px:py:dx:dy  ; for new scrlnslc :-)
  dir.q[0]:head.w:bdir.w:rot.q:qc:qs:jox.q

  pitch.w:roll:mpitch:mroll
  lap.w  :control.w:fr.w
  inair.w:ch.w:idle.w:drop.w:var.w
  t.q:movt.q
  spr1.l:sprnum1.w:spr2.l:sprnum2.w
  spdat.l:bnk.w:vehicle.w:carcol.l:colowner.w

  nrev.q:rev.q:vel:traction
  stime.w[12]:ftime.w[12]

  accel.q:engfric:gndfric:tyrefric:bounce:deaden:slip

  op1car.l:op2car.l:op3car.l    :; pseudo linked list

  q.l       :; Quadrilateral.. the shadow
  retard.q:steering:penalty:noise  ;bastardised
  curdt.w:side.w:top.w
  difi.q:difj.q  :; normal for is there's a collision..
  swiv            ;rotation...
  cdn.w:pcst.w:score.w
End NEWTYPE

NEWTYPE .parse
  fi.q:fj:di:dj:i:j   ; see below
  diri:dirj           ; artificial!
  boom.w              ; if impact with wall
  norm                ; normal.w at point(!) (lookup in cos/sins table)
End NEWTYPE

NEWTYPE .shcar :car.w:h:col.l    :End NEWTYPE
NEWTYPE .frend :lti.w:ltj:rti:rtj:End NEWTYPE
NEWTYPE .ij    :i.q:j:k:l        :End NEWTYPE
NEWTYPE .quad  :v0x.w:v0y:v1x:v1y:v2x:v2y:v3x:v3y:End NEWTYPE

NEWTYPE .carcol
  col.l[4]
End NEWTYPE

NEWTYPE .score
  tim.w[4]
  pos.w[4]
End NEWTYPE


.InitCops

  vmode.l=$11817:vmode2=$111
  #####[2402]#####[96]    2,35       ,128,vmode ,8,128,0 ;TWO PLAYER GAME
  #####[2402]#####[96]   13,35+131   ,  8,vmode2,8,   2,0 ;chatline
  #####[2402]#####[96]    3,35+131+11,128,vmode ,8,   2,0 ;second player

  #####[2402]#####[96]   24,44       ,256,vmode+1,8,32,34

  #####[2402]#####[96]    4,30       ,267,vmode  ,8,128,0 ;ONE player game
  #####[2402]#####[96]   14,30+270   ,  8,vmode2 ,8,   2,0 ;chatline

  #####[2402]#####[96]   20,44       ,256,     5 ,8,32, 0

  #####[2402]#####[96]   10,19+251+30,  8,$111,8,2,0 ;Title Chat Line!

  #####[2407]#####[256] 2,0,0,$ee
  #####[2407]#####[256] 3,0,0,$ee
  #####[2407]#####[256] 4,0,0,$ee

CNIF 1=0
  #####[2408]#####[288]  2,  -2,  8,   0,16,0
  #####[2408]#####[288] 13,  -4,  8,   0,16,0
  #####[2408]#####[288]  3,  -2,  8,   0,16,0

  #####[2408]#####[288] 24,  -2,  8,   0,16,0
  #####[2408]#####[288]  4,  -2,  8,   0,16,0
  #####[2408]#####[288] 14,  -4,  8,   0,16,0
CEND

  #####[2408]#####[288]  2,-4,16,0,32,-8
  #####[2408]#####[288] 13,  -4,  8,   0,16,0
;  DisplayAdjust 13,-4,16,0,32,-8
  #####[2408]#####[288]  3,-4,16,0,32,-8

  #####[2408]#####[288] 24,-4,16,0,32,-8
  #####[2408]#####[288]  4,-4,16,0,32,-8
;  DisplayAdjust 14,-4,16,0,32,-8
  #####[2408]#####[288] 14,  -4,  8,   0,16,0

Return

#bmsiz=64*64*4    + 8 +  70*8   +  96 +  1024*516*7/8
      ;bloat+map  +pts+ condt   + pal +     bitmap 0
#bmoff=64*64*4    + 8 +  70*8   +  96


.InitMemory

  #####[1218] 5,#bmsiz,2      ;       1024*516*4/8,2  ;chip mem?
  #####[1218] 0,#vsiz,0


  #maxleng=31:#shapewid=96  ;for chat line..
  Dim las.w(#maxleng),cur.w(#maxleng)    :bfirst.w=0:blast.w=0
  Dim cbuf.w(256):cfirst.w=0:clast.w=0

  #####[2337] 0,16384
  #####[2337] 1,16384

Return

.InitBmaps
  siz.l=#####[1222](5)+#bmoff
  #####[2567]  0,1024,516,7,siz   ; Main output, title screen- 263K

;  InitBank 6,SizeOf.header,2

  #####[2561] 4,320,18,1; dispmiddle credits..

  siz.l=#####[1222](5)

  ;signbmap=22
  #####[2028]#####[416] 0,23,4
  #####[2561] 24,400,16,1 ;chat.iff

Return


.InitMainVars
  #####[2626]

  laps.w=4

  Dim pracbuf.b(4096):pcst.w=0:pcnd.w=0
  Dim qsin(31),qcos(31)   :; look up table for car motion
  For cnt.w=0 To 31:qcos(cnt)=#####[3077](cnt/16*#####[186]#####[1897]):qsin(cnt)=#####[3082](cnt/16*#####[186]#####[1897]):Next
  Dim sqlup.w(2048):sqlu.l=&sqlup(0)
  For ii.f=0 To 2048:v.f=#####[3084](ii/4096)*65535:sqlup(ii)=v:Next

  Dim Pl.car(3)
   *p.car=Pl(0):*op.car=Pl(0)
  *ap.car=Pl(0):*dp.car=Pl(0)
  *cp0.car=Pl(0):*cp1.car=Pl(1):*cp2.car=Pl(2):*cp3.car=Pl(3)
  *cp1=*cp0\op1car:*cp2=*cp0\op2car:*cp3=*cp0\op3car
  *tp.car=Pl(0):*bp.car=Pl(2)
  *p0.car=Pl(0):*p1.car=Pl(1):*p2.car=Pl(2):*p3.car=Pl(3)
  *rp.car=Pl(0)

  pat.l=-1

  Dim best.score(5)

  Dim shcars.shcar(3):shcar.l=&shcars(0)

  maptr.l=#####[1222](5)
  blptr.l=maptr+64*64*2
  condt.l=blptr+64*64*2 + 8
  bigpal.l=condt+70*8

  DEFTYPE3 .w pts,pts1,pts2,pts3,pts4,pts5

  DEFTYPE3 .ij bez:io.l=&bez

  Dim q.quad(3):*s.quad=q(0)
  *sq0.quad=q(0):*sq1.quad=q(1):*sq2.quad=q(2):*sq3.quad=q(3)
  *p0\q=*sq0    :*p1\q=*sq1    :*p2\q=*sq2    :*p3\q=*sq3

  Dim edge.quadratic(70):DEFTYPE3.quadratic *e;=edge(0)
  Dim grot.xtra(70)     :DEFTYPE3.xtra      *g;=grot(0)

  test.parse\fi=0
  *par.parse=test

  #maxcols=11
  Dim cols.carcol(#maxcols)

  #####[200]#####[2336] ColMeIn
  For i.w=0 To #maxcols
    Read cols(i)\col[1]
    Read cols(i)\col[2]
    Read cols(i)\col[3]
  Next

  For pl=0 To 3
    *p.car=Pl(pl)
    *p\op1car=&Pl( (pl+1) & 3)
    *p\op2car=&Pl( (pl+2) & 3)
    *p\op3car=&Pl( (pl+3) & 3)
    *p\control=6 :  ; computer..
    *p\vehicle=pl
    *p\colowner=pl
  Next:pl=0
Return


.InitMiscGfx

  #####[2561] 1,64,80,4:Use, #####[2561] 1
  #####[2472] 0,0,0,64,80:Free+ #####[2561] 1

  #####[202]#####[2400] *p
  For pl=0 To 3 :*p=Pl.car(pl)
    \sprnum1=pl  :#####[1793] \sprnum1,0
    \sprnum2=pl+4:#####[1793] \sprnum2,0
    \spr1=#####[2882].l(#####[184]#####[1824] #####[1801](\sprnum1))
    \spr2=#####[2882].l(#####[184]#####[1824] #####[1801](\sprnum2))
  Next
  Free+ #####[2476] 0

  #####[2465] 47,g$+"flag.iff"

  #####[2506] 7,0,0,0,0:#####[2506] 7,1,15,15,15
  #####[2561] 7,1312,8,1:bmc.l=#####[2882].l(#####[184]#####[1824] #####[2561](7)+8)
  #####[2274] 7:#####[2276] 0,0:#####[2275] 1,0
  For c=32 To 32+#shapewid:#####[3105]#####[64] #####[3078]#####[232](c):Next
  #####[2472] 99,0,0,#shapewid*8,8:shc.l=#####[2882].l (#####[184]#####[1824] #####[2476](99)+14)
  #####[2020]#####[160] 0,0,1312,8,0  ;chat line
  xxoff.w=64:narrow.w=0

  If snd
    #####[1859]  3,g$+"Motor.IFF"
    #####[1859]  4,g$+"Beep.IFF"
    sndper.w=#####[2882].w (#####[184]#####[1824] #####[1860](4) +4)
    #####[1859] 10,g$+"Crash1.IFF"
    #####[1859] 11,g$+"Crash2.IFF"
    #####[1859] 12,g$+"Crash3.IFF"
    #####[1859] 13,g$+"Screech.IFF"
    cnoise.w=10
  #####[192]#####[2048]

  Use, #####[2561] 0
  #####[1603] 0,0,11:#####[1603] 1,0,11    :; set up skids..
  #####[1603] 0,1,11:#####[1603] 1,1,10:#####[2472] 15,0,0,2,2
  #####[2562] 24,g$+"Chat2.IFF"

  #menshap=40
  #####[2465] #menshap  ,g$+"1up.iff"
  #####[2465] #menshap+1,g$+"2up.iff"
  #####[2465] #menshap+2,g$+"exit.iff"
  #####[2465] #menshap+3,g$+"slow.iff"
  #####[2465] #menshap+4,g$+"fast.iff"
  For cnt.w=#menshap To #menshap+4
    #####[2566] cnt,14:Use, #####[2561] 14:#####[2024]#####[288] 16,31
    #####[2477] cnt
  Next
  #####[2471] #menshap+3,#menshap+5

  #####[2337] 2,7*200*200/8

  If snd
    If #####[2001](0,pg$+"Tune")
      If #####[4186]#####[872]($20002) > (95520+32768)
        #####[1218] 7,95520,2:med.w=#####[197]#####[2208]
        #####[2004]  0,#####[1222](7),#####[1994](0)

        #####[1187] #####[1222](7)
        #####[1323] 0,#####[1222](7)
      Else"
        med.w=#####[198]#####[2240]
      #####[192]#####[2048]
      #####[1986] 0
    Else"
      #####[3106]#####[96] "<Sniff>  if you steal my tune I'll probably crash!"
;      LoadMedModule 0,g$+"Tune3.Med"
      med.w=#####[198]#####[2240]
    #####[192]#####[2048]
  #####[192]#####[2048]
Return


CNIF #errs:#####[211]#####[2714]:CEND
Statement dosign{s.l,d.l,l.l,flip.w}
  #####[177]#####[1600] a4:#####[126]~.l a4,-(a7):#####[126]~.l d0,a0:#####[126]~.l d1,a1:#####[126]~.l d2,a2:#####[126]~ #4,a4
  #####[126]~ d3,d4:#####[122]z 80(a1),a1:#####[129]#####[67]#0,d0:#####[129]#####[67]#0,d1:#####[129]#####[67]#0,d2:#####[129]#####[67]#0,d3
  #####[130]#####[110].l d0-d3,-(a1):#####[130]#####[110].l d0-d3,-(a1):#####[130]#####[110].l d0-d3,-(a1)
  #####[130]#####[110].l d0-d3,-(a1):#####[130]#####[110].l d0-d3,-(a1)
  #####[129]#####[67]#0,d0:#####[126]~.b (a0),d0:#####[64]@#8,a0:#####[68]D#4,d0:#####[176]#####[1568] d4:#####[72]H flipped
  #####[122]z 0(a2,d0),a3:#####[130]#####[96] (a3)+,d0-d7:#####[138]#####[352] d0,(a1)+:#####[138]#####[352] d1,(a1)+
dirty:
  #####[129]#####[67]#0,d0:#####[126]~.b (a0),d0:#####[64]@#8,a0:#####[68]D#4,d0:#####[122]z 0(a2,d0),a3
  #####[138]#####[352] (a3)+,d2:#####[138]#####[352] (a3)+,d3:#####[138]#####[352] (a3)+,d4:#####[138]#####[352] (a3)+,d5:#####[138]#####[352] (a3)+,d6:#####[138]#####[352] (a3)+,d7
  #####[130]#####[96] (a3)+,d0-d1:#####[138]#####[352] d2,(a1)+:#####[138]#####[352] d3,(a1)+
  #####[129]#####[67]#0,d2:#####[126]~.b (a0),d2:#####[64]@#8,a0:#####[68]D#4,d2:#####[122]z 0(a2,d2),a3
  #####[138]#####[352] (a3)+,d4:#####[138]#####[352] (a3)+,d5:#####[138]#####[352] (a3)+,d6:#####[138]#####[352] (a3)+,d7:#####[138]#####[352] (a3)+,d0:#####[138]#####[352] (a3)+,d1
  #####[130]#####[96] (a3)+,d2-d3:#####[138]#####[352] d4,(a1)+:#####[138]#####[352] d5,(a1)+
  #####[129]#####[67]#0,d4:#####[126]~.b (a0),d4:#####[64]@#8,a0:#####[68]D#4,d4:#####[122]z 0(a2,d4),a3
  #####[138]#####[352] (a3)+,d6:#####[138]#####[352] (a3)+,d7:#####[138]#####[352] (a3)+,d0:#####[138]#####[352] (a3)+,d1:#####[138]#####[352] (a3)+,d2:#####[138]#####[352] (a3)+,d3
  #####[130]#####[96] (a3)+,d4-d5:#####[138]#####[352] d6,(a1)+:#####[138]#####[352] d7,(a1)+
  #####[129]#####[67]#0,d6:#####[126]~.b (a0),d6:#####[64]@#8,a0:#####[68]D#4,d6:#####[122]z 0(a2,d6),a3
  #####[138]#####[352] (a3)+,d0:#####[138]#####[352] (a3)+,d1:#####[138]#####[352] (a3)+,d2:#####[138]#####[352] (a3)+,d3:#####[138]#####[352] (a3)+,d4:#####[138]#####[352] (a3)+,d5
  #####[130]#####[96] (a3)+,d6-d7:#####[138]#####[352] d0,(a1)+:#####[138]#####[352] d1,(a1)+
  #####[170]#####[1379]#1,a4:#####[92]\ #0,a4:#####[80]P dirty
  #####[138]#####[352] d2,(a1)+:#####[138]#####[352] d3,(a1)+:#####[138]#####[352] d4,(a1)+:#####[138]#####[352] d5,(a1)+:#####[138]#####[352] d6,(a1)+:#####[138]#####[352] d7,(a1)+
  #####[126]~.l (a7)+,a4:#####[148]#####[640]
flipped
  #####[61]=#16,a2:#####[122]z 0(a2,d0),a3:#####[130]#####[96] -16(a3),d0-d7
  #####[117]u d0,d7:#####[117]u d1,d6:#####[117]u d2,d5:#####[117]u d3,d4:#####[138]#####[352] d0,(a1)+:#####[138]#####[352] d1,(a1)+
dirty2:
  #####[129]#####[67]#0,d0:#####[126]~.b (a0),d0:#####[64]@#8,a0:#####[68]D#4,d0:#####[122]z 0(a2,d0),a3
  #####[138]#####[352] -(a3),d2:#####[138]#####[352] -(a3),d3:#####[138]#####[352] -(a3),d4:#####[138]#####[352] -(a3),d5:#####[138]#####[352] -(a3),d6:#####[138]#####[352] -(a3),d7
  #####[130]#####[96] -4(a3),d0-d1:#####[117]u d0,d1:#####[138]#####[352] d2,(a1)+:#####[138]#####[352] d3,(a1)+
  #####[129]#####[67]#0,d2:#####[126]~.b (a0),d2:#####[64]@#8,a0:#####[68]D#4,d2:#####[122]z 0(a2,d2),a3
  #####[138]#####[352] -(a3),d4:#####[138]#####[352] -(a3),d5:#####[138]#####[352] -(a3),d6:#####[138]#####[352] -(a3),d7:#####[138]#####[352] -(a3),d0:#####[138]#####[352] -(a3),d1
  #####[130]#####[96] -4(a3),d2-d3:#####[117]u d2,d3:#####[138]#####[352] d4,(a1)+:#####[138]#####[352] d5,(a1)+
  #####[129]#####[67]#0,d4:#####[126]~.b (a0),d4:#####[64]@#8,a0:#####[68]D#4,d4:#####[122]z 0(a2,d4),a3
  #####[138]#####[352] -(a3),d6:#####[138]#####[352] -(a3),d7:#####[138]#####[352] -(a3),d0:#####[138]#####[352] -(a3),d1:#####[138]#####[352] -(a3),d2:#####[138]#####[352] -(a3),d3
  #####[130]#####[96] -4(a3),d4-d5:#####[117]u d4,d5:#####[138]#####[352] d6,(a1)+:#####[138]#####[352] d7,(a1)+
  #####[129]#####[67]#0,d6:#####[126]~.b (a0),d6:#####[64]@#8,a0:#####[68]D#4,d6:#####[122]z 0(a2,d6),a3
  #####[138]#####[352] -(a3),d0:#####[138]#####[352] -(a3),d1:#####[138]#####[352] -(a3),d2:#####[138]#####[352] -(a3),d3:#####[138]#####[352] -(a3),d4:#####[138]#####[352] -(a3),d5
  #####[130]#####[96] -4(a3),d6-d7:#####[117]u d6,d7:#####[138]#####[352] d0,(a1)+:#####[138]#####[352] d1,(a1)+
  #####[170]#####[1379]#1,a4:#####[92]\ #0,a4:#####[80]P dirty2
  #####[138]#####[352] d2,(a1)+:#####[138]#####[352] d3,(a1)+:#####[138]#####[352] d4,(a1)+:#####[138]#####[352] d5,(a1)+:#####[138]#####[352] d6,(a1)+:#####[138]#####[352] d7,(a1)+
  #####[126]~.l (a7)+,a4:#####[148]#####[640]
End Statement
CNIF #errs:#####[210]#####[2682]:CEND


.InitSign
  Dim dsign.l(1):Dim signl.w(4095)

  signx.w=729:signy.w=108
  signbmap.w=22
  signshape.w=#oks+25    ;needs two
  signflip.w=1

  For i.w=0 To 255
    e.w=i*8
    If i #####[66]B $80 Then! signl(e+0)=$8000
    If i #####[66]B $40 Then! signl(e+1)=$2000
    If i #####[66]B $20 Then! signl(e+2)=$0800
    If i #####[66]B $10 Then! signl(e+3)=$0200
    If i #####[66]B $08 Then! signl(e+4)=$0080
    If i #####[66]B $04 Then! signl(e+5)=$0020
    If i #####[66]B $02 Then! signl(e+6)=$0008
    If i #####[66]B $01 Then! signl(e+7)=$0002
  Next
  signtable.l=&signl(0)
  #####[2561] signbmap,64,16,1:ssign.l=#####[2882].l(#####[184]#####[1824] #####[2561](signbmap)+8)
  #####[2465] signshape,g$+"sign.iff"
  #####[2471] signshape,signshape+1:#####[1890] signshape
  dsign(0)=#####[2882].l(#####[184]#####[1824] #####[2476](signshape)+14)
  dsign(1)=#####[2882].l(#####[184]#####[1824] #####[2476](signshape+1)+14)
Return


.IncMe

CNIF #errs:#####[211]#####[2714]:CEND
;INCLUDE "src:AsemINC.bb"
;INCLUDE "src:SpriINC.bb"
;SM
;      Assembler routine   26/09/93
;

;  warning, FindLo, FindDif etc maybe stuffed..


;  ddistance{}{x1.w,y1.w,x2.w,y2.w}    ; Thanks Simon!
;  rdistance{x1.w,y1.w}                ; = 1/ddistance
;  angle{x1.w,y1.w}                    ; Thanks Simon!
;  hite {di.q,dj.q,oset.l}             ; raw height at di,dj (oset=maptr.l)
;  FindLo {fldtp.q,flcon.l,flbez.l}    ; WARNING!
;  FindDif {fldtp.q,flcon.l,flbez.l}   ; warning..
;  FindWid {fldtp.q,pta.w,ptb.w,ptc.w} ; simple spline
;  Closer{ri,rj,dti,dtj}               ; solves a 2x2 sys of eqn's

; !qhite , !mapx{i,j} , !mapy{i,j}

;NEEDS:
; maptr.l

;DECLARES:

;==============================================================

  ;bit 00 : right
  ;    01 : left
  ;    02 : down
  ;    03 : up
  ;    17 : play/pause
  ;    18 : reverse
  ;    19 : forward
  ;    20 : green
  ;    21 : yellow
  ;    22 : red
  ;    23 : blue
  ;
Function.l ReadJoy{b.w} ;get joystick reading into d0
  ;
  #####[122]z $bfe001,a0:#####[122]z $dff016,a1
  #####[129]#####[64] #0,d0:#####[129]#####[64] #7,d3:#####[126]~  #$4000,d4
  ;
  #####[86]V  d3,$200(a0):#####[85]U  d3,(a0):#####[126]~  #$2000,$dff034:#####[129]#####[64] #6,d1
  ;
  loop27
    #####[176]#####[1582].b (a0):#####[176]#####[1582].b (a0):#####[176]#####[1582].b (a0):#####[176]#####[1582].b (a0)
    #####[176]#####[1582].b (a0):#####[176]#####[1582].b (a0):#####[176]#####[1582].b (a0):#####[176]#####[1582].b (a0)

    #####[126]~  (a1),d2:#####[86]V d3,(a0):#####[85]U d3,(a0):#####[66]B d4,d2
    #####[80]P skip:#####[86]V  d1,d0:skip
  #####[110]n d1,loop27

  #####[126]~  #$3000,$dff034:#####[85]U d3,$200(a0):#####[61]= d0,d0:#####[172]#####[1440] d0
  ;
  #####[126]~  $dff00c,d1:#####[126]~ d1,d0:#####[125]} #1,d0:#####[115]s d0,d1:#####[66]B #$101,d1
  #####[66]B #$101,d0:#####[143]#####[526].b #1,d0:#####[143]#####[526].b #1,d1:#####[125]} #7,d0:#####[125]} #5,d1:#####[138]#####[352] d1,d0
  ;
  #####[177]#####[1600] a4:#####[148]#####[640]
End Function

;------------------------------------------------------------------

Function.w ddistance{x1.w,y1.w,x2.w,y2.w}
 #####[177]#####[1600] a4                               ;unlink (no recursion)
 #####[167]SetMaptr d2,d0:#####[81]Q xpos:#####[134]#####[224] d0:xpos        ;d0=width
 #####[167]SetMaptr d3,d1:#####[81]Q ypos:#####[134]#####[224] d1:ypos        ;d1=height
 #####[92]\ d0,d1:#####[72]H kludge                  ;kludge if equal
 #####[79]O ygtx:#####[117]u d0,d1:ygtx               ;d0=greater side
 #####[176]#####[1568] d1:#####[80]P yne:#####[148]#####[698]:yne                ;if short side 0 len=other
 #####[172]#####[1440] d1:#####[91][ d1:#####[114]r d0,d1:#####[125]}#7,d1    ;look up=short/long
 #####[61]= d1,d1:#####[172]#####[1440] d0
 #####[114]r lvals(pc,d1.w),d0:#####[148]#####[640]
 kludge:#####[132]#####[160] #27146,d0:#####[172]#####[1440] d0:#####[61]= d1,d0:#####[148]#####[672] ;multiply by sqrt(2)
 lvals:IncBin* "src:len.inc"
End Function

;------------------------------------------------------------------

Function.q rdistance{x1.w,y1.w}
 #####[177]#####[1600] a4                               ;unlink (no recursion)
 #####[176]#####[1582].w d0:#####[81]Q xpos2:#####[134]#####[224] d0:xpos2        ;d0=width
 #####[176]#####[1582].w d1:#####[81]Q ypos2:#####[134]#####[224] d1:ypos2        ;d1=height
 #####[92]\ d0,d1:#####[72]H kludge2                  ;kludge if equal
 #####[79]O ygtx2:#####[117]u d0,d1:ygtx2               ;d0=greater side
 #####[176]#####[1568] d1:#####[80]P yne2
 #####[129]#####[64] #1,d1:#####[172]#####[1440] d1:#####[113]q d0,d1:#####[126]~ d1,d0:#####[118]v.l d0:#####[148]#####[640]
; MOVEQ #1,d1:SWAP d1:DIVU d0,d1:MOVE d1,d0:EXT.l d0:RTS
 yne2                ;if short side 0 len=1/other
 #####[172]#####[1440] d1:#####[91][ d1:#####[114]r d0,d1:#####[125]}#7,d1    ;look up=short/long
 #####[61]= d1,d1:#####[118]v.l d1:#####[126]~ lvals2(pc,d1.w),d1:#####[114]r d0,d1
 #####[126]~ d1,d0:#####[118]v.l d0:#####[148]#####[640]
 kludge2:#####[132]#####[160] #27146,d0:#####[172]#####[1440] d0:#####[61]= d0,d1
 #####[129]#####[64] #1,d0:#####[172]#####[1440] d0:#####[113]q d1,d0:#####[118]v.l d0:#####[148]#####[640]
 lvals2:IncBin* "src:len.inc"
End Function

;------------------------------------------------------------------

Function.w angle{x1.w,y1.w}
  #####[177]#####[1600] a4                                     ;unlink
  #####[129]#####[67]#0,d2                                  ;d2=quadrant
  #####[176]#####[1568] d1:#####[81]Q hpos:#####[129]#####[67]#16,d2:#####[134]#####[224] d1:hpos     ;y positive
  #####[176]#####[1568] d0:#####[81]Q wpos:#####[115]s#8,d2:#####[134]#####[224] d0:wpos        ;x positive
  #####[92]\ d1,d0:#####[79]O notsteep:#####[80]P neq
  #####[126]~#$2000,d1:#####[88]X flow:neq
  #####[115]s #4,d2:#####[117]u d1,d0:notsteep
  #####[176]#####[1568] d1:#####[80]P noflow:#####[129]#####[67]#0,d1:#####[88]X flow:noflow
  #####[118]v.ld0:#####[172]#####[1440] d0:#####[114]r d1,d0:#####[125]}#6,d0:#####[66]B#1022,d0
  #####[126]~ arc(pc,d0),d1
  flow:#####[126]~.l oct(pc,d2),d0:#####[115]s d0,d1:#####[172]#####[1440] d0:#####[61]= d1,d0:#####[148]#####[640]
  oct:Dc%.w 0,0,$4000,-1,0,-1,$c000,0
      Dc%.w $8000,-1,$4000,0,$8000,0,$C000,-1
  arc:IncBin* "src:arc.inc"
End Function

;------------------------------------------------------------------

Function.q hite {di.q,dj.q,oset.l}
  #####[177]#####[1600] a4
  #####[126]~.l d2,a0
  #####[126]~.l d1,d2:#####[172]#####[1440] d2:#####[118]v.l d2:#####[68]D.l #7,d2:#####[61]=.l d2,a0
  #####[126]~.l d0,d2:#####[172]#####[1440] d2:#####[118]v.l d2:#####[68]D.l #1,d2:#####[61]=.l d2,a0

  #####[130]#####[96] (a0)+,d2-d3 ;d0-d1 xy d2-d5 p0-p3
  #####[122]z 124(a0),a0:#####[130]#####[96] (a0)+,d4-d5
         #####[126]~ d0,d6:#####[132]#####[160] d1,d6:#####[172]#####[1440] d6:#####[132]#####[160] d6,d5  ; x. y.p3
  #####[137]#####[320] d0:#####[126]~ d0,d6:#####[132]#####[160] d1,d6:#####[172]#####[1440] d6:#####[132]#####[160] d6,d4  ;-x. y.p2
  #####[137]#####[320] d1:#####[126]~ d0,d6:#####[132]#####[160] d1,d6:#####[172]#####[1440] d6:#####[132]#####[160] d6,d2  ;-x.-y.p0
  #####[137]#####[320] d0:           #####[132]#####[160] d1,d0:#####[172]#####[1440] d0:#####[132]#####[160] d3,d0   ; x.-y.p1
  #####[61]=.l d2,d0:#####[61]=.l d4,d0:#####[61]=.l d5,d0 ;total
  #####[125]}.l#6,d0:#####[148]#####[640]
End Function

Macro qhite
  hite{`1,`2,maptr}
End Macro

;------------------------------------------------------------------

Function mapx{i,j}
  Function Return (i-j)#####[68]D 4+512
End Function
Function mapy{i,j}
  Shared maptr
  temp=(i+j)#####[68]D 3-156
  Function Return temp-!qhite{i,j}
End Function

;------------------------------------------------------------------

Statement FindLo {fldtp.q,flcon.l,flbez.l}
  ;WILL ONLY WORK IN ALL19.BB2!!!!!       ; go scab Global7.bb..
  #####[177]#####[1600] a4

  #####[126]~.l d0,d3:#####[172]#####[1440] d3:#####[118]v.l d3:#####[68]D #3,d3
  #####[61]=.l d3,d1:#####[126]~.l d1,a0:#####[126]~.l d2,a1

  #####[126]~ d0,d1:       #####[132]#####[160] d1,d1:#####[172]#####[1440] d1:#####[125]} #1,d1
  #####[126]~ d0,d2:#####[137]#####[320] d2:#####[132]#####[160] d2,d2:#####[172]#####[1440] d2:#####[125]} #1,d2
  #####[126]~ d1,d0:#####[137]#####[320] d0:#####[167]SetMaptr d2,d0

  #####[130]#####[110].w (a0)+,d3-d6
  #####[132]#####[160] d2,d3:#####[132]#####[160] d2,d4:#####[132]#####[160] d2,d5:#####[132]#####[160] d2,d6
  #####[126]~.w (a0)+,d7:#####[132]#####[160] d0,d7:#####[61]=.l d7,d3
  #####[126]~.w (a0)+,d7:#####[132]#####[160] d0,d7:#####[61]=.l d7,d4
  #####[126]~.w (a0)+,d7:#####[132]#####[160] d0,d7:#####[61]=.l d7,d5
  #####[126]~.w (a0)+,d7:#####[132]#####[160] d0,d7:#####[61]=.l d7,d6
  #####[126]~.w (a0)+,d7:#####[132]#####[160] d1,d7:#####[61]=.l d7,d3
  #####[126]~.w (a0)+,d7:#####[132]#####[160] d1,d7:#####[61]=.l d7,d4
  #####[126]~.w (a0)+,d7:#####[132]#####[160] d1,d7:#####[61]=.l d7,d5
  #####[126]~.w (a0) ,d7:#####[132]#####[160] d1,d7:#####[61]=.l d7,d6
  #####[69]E.l #4,d3:#####[69]E.l #5,d3:#####[69]E.l #4,d4:#####[69]E.l #5,d4
  #####[69]E.l #4,d5:#####[69]E.l #5,d5:#####[69]E.l #4,d6:#####[69]E.l #5,d6
  #####[130]#####[110].l d3-d6,(a1):#####[148]#####[640]
End Statement

;------------------------------------------------------------------

Statement FindDif {fldtp.q,flcon.l,flbez.l}
;  to be used ONLY with all19.bb2!!!!!
  #####[177]#####[1600] a4

  #####[126]~.l d0,d3:#####[172]#####[1440] d3:#####[118]v.l d3:#####[68]D #3,d3
  #####[61]=.l d3,d1:#####[126]~.l d1,a0:#####[126]~.l d2,a1

  #####[126]~ d0,d1:#####[132]#####[160] d1,d1:#####[172]#####[1440] d1:#####[125]} #1,d1
  #####[126]~ d0,d2:#####[137]#####[320] d2:#####[132]#####[160] d2,d2:#####[172]#####[1440] d2:#####[125]} #1,d2
  #####[126]~ d1,d0:#####[137]#####[320] d0:#####[167]SetMaptr d2,d0

  #####[130]#####[110].w  (a0)+,d3-d6
  #####[132]#####[160] d2,d3:#####[132]#####[160] d2,d4:#####[132]#####[160] d2,d5:#####[132]#####[160] d2,d6
  #####[126]~.w (a0)+,d7:#####[132]#####[160] d0,d7:#####[61]=.l d7,d3
  #####[126]~.w (a0)+,d7:#####[132]#####[160] d0,d7:#####[61]=.l d7,d4
  #####[126]~.w (a0)+,d7:#####[132]#####[160] d0,d7:#####[61]=.l d7,d5
  #####[126]~.w (a0)+,d7:#####[132]#####[160] d0,d7:#####[61]=.l d7,d6
  #####[126]~.w (a0)+,d7:#####[132]#####[160] d1,d7:#####[61]=.l d7,d3
  #####[126]~.w (a0)+,d7:#####[132]#####[160] d1,d7:#####[61]=.l d7,d4
  #####[126]~.w (a0)+,d7:#####[132]#####[160] d1,d7:#####[61]=.l d7,d5
  #####[126]~.w (a0) ,d7:#####[132]#####[160] d1,d7:#####[61]=.l d7,d6
  #####[69]E.l #4,d3:#####[69]E.l #5,d3:#####[167]ScrlSlc.l   (a1),d3
  #####[69]E.l #4,d4:#####[69]E.l #5,d4:#####[167]ScrlSlc.l  4(a1),d4
  #####[69]E.l #4,d5:#####[69]E.l #5,d5:#####[167]ScrlSlc.l  8(a1),d5
  #####[69]E.l #4,d6:#####[69]E.l #5,d6:#####[167]ScrlSlc.l 12(a1),d6
  #####[130]#####[110].l d3-d6,(a1):#####[148]#####[640]
End Statement

;------------------------------------------------------------------

Function.w FindWid {fldtp.q,pta.w,ptb.w,ptc.w}
  #####[177]#####[1600] a4

  #####[126]~ d0,d4:#####[132]#####[160] d4,d4:#####[172]#####[1440] d4:#####[125]} #1,d4
  #####[126]~ d0,d6:#####[137]#####[320] d6:#####[132]#####[160] d6,d6:#####[172]#####[1440] d6:#####[125]} #1,d6
  #####[126]~ #$7fff,d5:#####[167]SetMaptr d4,d5:#####[167]SetMaptr d6,d5

  #####[131]#####[128] d6,d1:#####[172]#####[1440] d1
  #####[131]#####[128] d5,d2:#####[172]#####[1440] d2:#####[61]= d2,d1
  #####[131]#####[128] d4,d3:#####[172]#####[1440] d3:#####[61]= d3,d1
  #####[126]~ d1,d0:#####[148]#####[640]
End Statement

;------------------------------------------------------------------

Function.l Closer{ri,rj,dti,dtj}
  #####[177]#####[1600] a4
  #####[69]E.l #8,d0:#####[69]E.l #8,d1:#####[69]E.l #5,d2:#####[69]E.l #5,d3
  #####[126]~ d2,d4:#####[126]~ d3,d7
  #####[131]#####[128] d1,d4:#####[131]#####[128] d0,d7:#####[167]ScrlSlc.l d4,d7:#####[68]D.l #4,d7
  #####[131]#####[128] d2,d0:#####[131]#####[128] d3,d1:#####[61]=.l d1,d0:#####[68]D.l #4,d0
  #####[172]#####[1440] d7:#####[126]~ d7,d0:#####[148]#####[640]
End Function

;----end of AsemInc.bb-------------------------------------------------

;SM
;
;   Assembler routines for Sprite handling / car movement..
;    added 08/11/93 with AGA stuff..
;

;  Statement MoveAll{ca.l,cb.l}
;  Statement FindPos{ca.l,cb.l}
;  Statement ScrlSlc{c.l,b.l}     :; pointers to cars..
;  Statement ReDoSprite{car.l,spri.l}
;  Statement DoQuad{verts.l,spri.l,pat.l}  ;verts xy xy xy xy
;  Statement FindSprNum{shcar.l,flag.w}            ;sorts shcar


Statement MoveAll{ca.l,cb.l}
  #####[177]#####[1600] a4
  #####[126]~.l d0,a0:#####[126]~.l d1,a1:#####[129]#####[64] #3,d5

  NxCar
    #####[126]~.l SizeOf/.car\movi(a0) ,d0
    #####[61]=.l  SizeOf/.car\headi(a0),d0:#####[126]~.l d0,SizeOf/.car\headi(a0)
    #####[61]=.l  SizeOf/.car\i(a0)    ,d0:#####[126]~.l d0,SizeOf/.car\i(a0)
    #####[126]~.l SizeOf/.car\movj(a0) ,d1
    #####[61]=.l  SizeOf/.car\headj(a0),d1:#####[126]~.l d1,SizeOf/.car\headj(a0)
    #####[61]=.l  SizeOf/.car\j(a0)    ,d1:#####[126]~.l d1,SizeOf/.car\j(a0)
    #####[126]~.l SizeOf/.car\k(a0)    ,d2
    #####[61]=.l  SizeOf/.car\headk(a0),d2:#####[126]~.l d2,SizeOf/.car\k(a0)

    #####[126]~.l d0,d4:#####[167]ScrlSlc.l d1,d4:#####[68]D.l #4,d4:#####[61]=.l #$2100000,d4
;    MOVE.l d0,d4:SUB.l d1,d4:ASL.l #4,d4:ADD.l #$2000000,d4
    #####[126]~.l d4,SizeOf/.car\sx(a0)
    #####[61]=.l d1,d0:#####[68]D.l #3,d0:#####[172]#####[1440] d0
    #####[126]~.w d0,SizeOf/.shcar\h(a1):#####[172]#####[1440] d0
    #####[167]ScrlSlc.l d2,d0:#####[167]ScrlSlc.l #177*65536,d0
    #####[126]~.l d0,SizeOf/.car\sy(a0)
    #####[126]~.l SizeOf/.car\carcol(a0),SizeOf/.shcar\col(a1)
    #####[129]#####[64] #3,d0:#####[167]SetMaptr d5,d0
    #####[126]~ d0,SizeOf/.shcar\car(a1)
    #####[122]z SizeOf/.car(a0),a0:#####[122]z SizeOf/.shcar(a1),a1
  #####[111]o d5,NxCar
  #####[148]#####[640]
End Statement

;------------------------------------------------------------------

;  *p0\headi+*p0\movi:*p0\i+*p0\headi
;  *p0\headj+*p0\movj:*p0\j+*p0\headj
;                     *p0\k+*p0\headk
;  *p0\sx=(*p0\i-*p0\j) ASL 4+512
;  *p0\sy=(*p0\i+*p0\j) ASL 3-261-*p0\k

; this does finds the screen positions, but doesn't move 'em
Statement FindPos{ca.l,cb.l}
  #####[177]#####[1600] a4
  #####[126]~.l d0,a0:#####[126]~.l d1,a1:#####[129]#####[64] #3,d5

  NxCar2
    #####[126]~.l SizeOf/.car\i(a0),d0
    #####[126]~.l SizeOf/.car\j(a0),d1
    #####[126]~.l SizeOf/.car\k(a0),d2
    #####[126]~.l d2,SizeOf/.car\k(a0)
    #####[126]~.l d0,d4:#####[167]ScrlSlc.l d1,d4:#####[68]D.l #4,d4:#####[61]=.l #512 * 65536,d4
    #####[126]~.l d4,SizeOf/.car\sx(a0)
    #####[61]=.l d1,d0:#####[68]D.l #3,d0:#####[172]#####[1440] d0
    #####[126]~.w d0,SizeOf/.shcar\h(a1):#####[172]#####[1440] d0
    #####[167]ScrlSlc.l d2,d0:#####[167]ScrlSlc.l #177*65536,d0
    #####[126]~.l d0,SizeOf/.car\sy(a0)
    #####[126]~.l SizeOf/.car\carcol(a0),SizeOf/.shcar\col(a1)
    #####[129]#####[64] #3,d0:#####[167]SetMaptr d5,d0
    #####[126]~ d0,SizeOf/.shcar\car(a1)
    #####[122]z SizeOf/.car(a0),a0:#####[122]z SizeOf/.shcar(a1),a1
  #####[111]o d5,NxCar2
  #####[148]#####[640]
End Statement

;------------------------------------------------------------------

Statement ScrlSlc{c.l,b.l}     :; pointers to cars..
  #####[177]#####[1600] a4:#####[126]~.l d0,a0
  #####[92]\.l d0,d1
  #####[80]P dotwice      :  ;if *tp=*bp :; i.e. one player..
    #####[130]#####[110].l SizeOf/.car\mx(a0),d0-d5
    #####[126]~.l d2,d6:#####[167]ScrlSlc.l d4,d6:#####[69]E.l #1,d6:#####[61]=.l d6,d0:#####[69]E.l #2,d0:#####[61]=.l d0,d4
    #####[126]~.l d3,d7:#####[167]ScrlSlc.l d5,d7:#####[69]E.l #1,d7:#####[61]=.l d7,d1:#####[69]E.l #2,d1:#####[61]=.l d1,d5

;    MOVE.l d2,d6:ADD.l d6,d6:SUB.l d4,d6:SUB.l #$a80000,d6
    #####[126]~.l d2,d6:#####[61]=.l d6,d6:#####[167]ScrlSlc.l d4,d6:#####[167]ScrlSlc.l #$980000,d6

        #####[176]#####[1582].l           d6:#####[73]I th6:#####[129]#####[64]         #0,d6:#####[88]X tl6
;    th6:CMP.l #$2d00000,d6:BLE tl6:MOVE.l #$2d00000,d6:    tl6
    th6:#####[92]\.l #$2e70000,d6:#####[76]L tl6:#####[126]~.l #$2e70000,d6:    tl6

    #####[126]~.l d3,d7:#####[61]=.l d7,d7:#####[167]ScrlSlc.l d5,d7:#####[167]ScrlSlc.l #$780000,d7
        #####[176]#####[1582].l          d7:#####[73]I th7:#####[129]#####[64]        #0,d7:#####[88]X tl7
    th7:#####[92]\.l #$f90000,d7:#####[76]L tl7:#####[126]~.l #$f90000,d7:    tl7

    #####[130]#####[110].l  d0-d7,SizeOf/.car\mx(a0)
    #####[148]#####[640]
dotwice
    #####[126]~.l d1,a1

    #####[130]#####[110].l SizeOf/.car\mx(a0),d0-d5
    #####[126]~.l d2,d6:#####[167]ScrlSlc.l d4,d6:#####[69]E.l #1,d6:#####[61]=.l d6,d0:#####[69]E.l #2,d0:#####[61]=.l d0,d4
    #####[126]~.l d3,d7:#####[167]ScrlSlc.l d5,d7:#####[69]E.l #1,d7:#####[61]=.l d7,d1:#####[69]E.l #2,d1:#####[61]=.l d1,d5

;    MOVE.l d2,d6:ADD.l d6,d6:SUB.l d4,d6:SUB.l #$a80000,d6
    #####[126]~.l d2,d6:#####[61]=.l d6,d6:#####[167]ScrlSlc.l d4,d6:#####[167]ScrlSlc.l #$980000,d6
        #####[176]#####[1582].l           d6:#####[73]I uh6:#####[129]#####[64]         #0,d6:#####[88]X ul6
;    uh6:CMP.l #$2d00000,d6:BLE ul6:MOVE.l #$2d00000,d6:    ul6
    uh6:#####[92]\.l #$2e700000,d6:#####[76]L ul6:#####[126]~.l #$2e700000,d6:    ul6

    #####[126]~.l d3,d7:#####[61]=.l d7,d7:#####[167]ScrlSlc.l d5,d7:#####[167]ScrlSlc.l #$320000,d7
        #####[176]#####[1582].l           d7:#####[73]I uh7:#####[129]#####[64]         #0,d7:#####[88]X ul7
    uh7:#####[92]\.l #$1830000,d7:#####[76]L ul7:#####[126]~.l #$1830000,d7:    ul7

    #####[130]#####[110].l  d0-d7,SizeOf/.car\mx(a0)

    #####[130]#####[110].l SizeOf/.car\mx(a1),d0-d5      :; second car!
    #####[126]~.l d2,d6:#####[167]ScrlSlc.l d4,d6:#####[69]E.l #1,d6:#####[61]=.l d6,d0:#####[69]E.l #2,d0:#####[61]=.l d0,d4
    #####[126]~.l d3,d7:#####[167]ScrlSlc.l d5,d7:#####[69]E.l #1,d7:#####[61]=.l d7,d1:#####[69]E.l #2,d1:#####[61]=.l d1,d5

;    MOVE.l d2,d6:ADD.l d6,d6:SUB.l d4,d6:SUB.l #$a80000,d6
    #####[126]~.l d2,d6:#####[61]=.l d6,d6:#####[167]ScrlSlc.l d4,d6:#####[167]ScrlSlc.l #$980000,d6
        #####[176]#####[1582].l           d6:#####[73]I vh6:#####[129]#####[64]         #0,d6:#####[88]X vl6
;    vh6:CMP.l #$2d00000,d6:BLE vl6:MOVE.l #$2d00000,d6:    vl6
    vh6:#####[92]\.l #$2e70000,d6:#####[76]L vl6:#####[126]~.l #$2e70000,d6:    vl6

    #####[126]~.l d3,d7:#####[61]=.l d7,d7:#####[167]ScrlSlc.l d5,d7:#####[167]ScrlSlc.l #$320000,d7
        #####[176]#####[1582].l           d7:#####[73]I vh7:#####[129]#####[64]         #0,d7:#####[88]X vl7
    vh7:#####[92]\.l #$1830000,d7:#####[76]L vl7:#####[126]~.l #$1830000,d7:    vl7

    #####[130]#####[110].l  d0-d7,SizeOf/.car\mx(a1)
  #####[148]#####[640]

End Statement

;------------------------------------------------------------------


;SM
;
;   Assembler routines for Sprite handling / car movement..
;    added 08/11/93 with AGA stuff..
;

;  Statement MoveAll{ca.l,cb.l}
;  Statement FindPos{ca.l,cb.l}
;  Statement ScrlSlc{c.l,b.l}     :; pointers to cars..
;  Statement ReDoAGASprite{a.l,b.l,c.w}  ;dest src color = byterun to 16 color
;  Statement DoAGAQuad{verts.l,spri.l}  ;verts xy xy xy xy
;  Statement ReDoSprite{car.l,spri.l}
;  Statement DoQuad{verts.l,spri.l,pat.l}  ;verts xy xy xy xy
;  Statement FindSprNum{shcar.l,flag.w}            ;sorts shcar



Statement ReDoAGASprite{a.l,b.l,c.w}  ;dest src color = byterun to 16 color
  #####[177]#####[1600] a4
  #####[126]~.l d0,a0:#####[126]~.l d1,a1:#####[122]z space2(pc),a2:#####[122]z 768(a2),a3

  nxbyte:#####[129]#####[67]#0,d0:#####[126]~.b (a1)+,d0:#####[79]O dorept
  dodiff:#####[126]~.b (a1)+,(a2)+:#####[111]o d0,dodiff:#####[92]\.l a2,a3:#####[74]J nxbyte:#####[88]X gogo
  dorept:#####[134]#####[238].b d0:#####[126]~.b(a1)+,d1
  splat:#####[126]~.b d1,(a2)+:#####[111]o d0,splat:#####[92]\.l a2,a3:#####[74]J nxbyte

gogo:
  #####[68]D#3,d2:#####[122]z colid(pc),a2:#####[130]#####[110].l 0(a2,d2),a2-a3:#####[126]~ #31,d0
  #####[122]z space2(pc),a1
loop:
  #####[130]#####[110].l (a1)+,d1-d3
  #####[126]~.l d2,d4:#####[126]~.l d3,d5:#####[66]B.l d1,d2:#####[66]B.l d1,d3
  #####[137]#####[334].l d1:#####[66]B.l d1,d4:#####[66]B.l d1,d5
  #####[137]#####[334].l d1:#####[126]~.l a2,d6:#####[126]~.l a3,d7:#####[66]B.l d1,d6:#####[66]B.l d1,d7
  #####[138]#####[366].l d6,d4:#####[138]#####[366].l d7,d5



  #####[126]~.l d2,d6:#####[138]#####[366].l d3,d6:#####[138]#####[366].l d4,d6:#####[138]#####[366].l d5,d6
  #####[137]#####[334].l d6:#####[66]B.l 1296(a0),d6:#####[138]#####[366].l d6,d4  ;i.e. the shadow is 1288(a0)

  #####[126]~.l d3,8(a0):#####[126]~.l d4,1296(a0):#####[126]~.l d5,1304(a0):#####[126]~.l d2,(a0)+
  #####[130]#####[110].l (a1)+,d1-d3
  #####[126]~.l d2,d4:#####[126]~.l d3,d5:#####[66]B.l d1,d2:#####[66]B.l d1,d3
  #####[137]#####[334].l d1:#####[66]B.l d1,d4:#####[66]B.l d1,d5
  #####[137]#####[334].l d1:#####[126]~.l a2,d6:#####[126]~.l a3,d7:#####[66]B.l d1,d6:#####[66]B.l d1,d7
  #####[138]#####[366].l d6,d4:#####[138]#####[366].l d7,d5

  #####[126]~.l d2,d6:#####[138]#####[366].l d3,d6:#####[138]#####[366].l d4,d6:#####[138]#####[366].l d5,d6
  #####[137]#####[334].l d6:#####[66]B.l 1296(a0),d6:#####[138]#####[366].l d6,d4  ;i.e. the shadow is 1288(a0)

  #####[126]~.l d3,8(a0):#####[126]~.l d4,1296(a0):#####[126]~.l d5,1304(a0):#####[126]~.l d2,(a0)
  #####[61]= #12,a0:#####[111]o d0,loop
  #####[148]#####[640]


CNIF 1=0

  #####[126]~.l d2,d6:#####[138]#####[366].l d3,d6:#####[138]#####[366].l d4,d6:#####[138]#####[366].l d5,d6
  #####[137]#####[334].l d6:#####[66]B.l 1280(a0),d6:#####[138]#####[366].l d6,d4  ;i.e. the shadow is 1288(a0)

  #####[126]~.l d3,8(a0):#####[126]~.l d4,1280(a0):#####[126]~.l d5,1288(a0):#####[126]~.l d2,(a0)+
  #####[130]#####[110].l (a1)+,d1-d3
  #####[126]~.l d2,d4:#####[126]~.l d3,d5:#####[66]B.l d1,d2:#####[66]B.l d1,d3
  #####[137]#####[334].l d1:#####[66]B.l d1,d4:#####[66]B.l d1,d5
  #####[137]#####[334].l d1:#####[126]~.l a2,d6:#####[126]~.l a3,d7:#####[66]B.l d1,d6:#####[66]B.l d1,d7
  #####[138]#####[366].l d6,d4:#####[138]#####[366].l d7,d5

  #####[126]~.l d2,d6:#####[138]#####[366].l d3,d6:#####[138]#####[366].l d4,d6:#####[138]#####[366].l d5,d6
  #####[137]#####[334].l d6:#####[66]B.l 1280(a0),d6:#####[138]#####[366].l d6,d4  ;i.e. the shadow is 1288(a0)

  #####[126]~.l d3,8(a0):#####[126]~.l d4,1280(a0):#####[126]~.l d5,1288(a0):#####[126]~.l d2,(a0)
  #####[61]= #12,a0:#####[111]o d0,loop
  #####[148]#####[640]

CEND

colid:Dc%.l 0,0,-1,0,0,-1,-1,-1

space2:Ds&.b 768

       ; Ds.b 2048

End Statement

;-------------------------------------------------------------------

Statement DoAGAQuad{verts.l,spri.l}  ;verts xy xy xy xy
  #####[177]#####[1600] a4:#####[130]#####[110].l a4-a6,-(a7):
  #####[126]~.l #$eeeeeeee,dither2:#####[126]~.l d0,a2:#####[126]~.l d1,a1:#####[61]=.l #16,a1

  #####[61]=.l #2560,a1:#####[126]~ #9,d7
  #####[129]#####[64] #0,d0:#####[129]#####[64] #0,d1:#####[129]#####[64] #0,d2:#####[129]#####[64] #0,d3
  #####[129]#####[64] #0,d4:#####[129]#####[64] #0,d5:#####[129]#####[64] #0,d6:#####[126]~.l d0,a0
cloop:#####[130]#####[110].l d0-d6/a0,-(a1):#####[130]#####[110].l d0-d6/a0,-(a1):
      #####[130]#####[110].l d0-d6/a0,-(a1):#####[130]#####[110].l d0-d6/a0,-(a1):
      #####[130]#####[110].l d0-d6/a0,-(a1):#####[130]#####[110].l d0-d6/a0,-(a1):
      #####[130]#####[110].l d0-d6/a0,-(a1):#####[130]#####[110].l d0-d6/a0,-(a1):
      #####[111]o d7,cloop

  #####[126]~.l a2,a0

  #####[130]#####[110].l (a0),d0/d2-d4:#####[122]z 1264(a1),a0

  #####[172]#####[1440] d0: #####[124]|.w #1,d0:#####[172]#####[1440] d0 ;hi-res kludge
  #####[172]#####[1440] d2: #####[124]|.w #1,d2:#####[172]#####[1440] d2
  #####[172]#####[1440] d3: #####[124]|.w #1,d3:#####[172]#####[1440] d3
  #####[172]#####[1440] d4: #####[124]|.w #1,d4:#####[172]#####[1440] d4 ;hi-res kludge

  #####[129]#####[64] #79,d5:#####[129]#####[64] #0,d6
  #####[92]\ d5,d0:#####[79]O pb02:#####[126]~ d5,d0:#####[88]X pl02:pb02:#####[92]\ d6,d0:#####[81]Q pl02:#####[126]~ #1,d0:pl02
  #####[92]\ d5,d2:#####[79]O pb22:#####[126]~ d5,d2:#####[88]X pl22:pb22:#####[92]\ d6,d2:#####[81]Q pl22:#####[126]~ #1,d2:pl22
  #####[92]\ d5,d3:#####[79]O pb32:#####[126]~ d5,d3:#####[88]X pl32:pb32:#####[92]\ d6,d3:#####[81]Q pl32:#####[126]~ #1,d3:pl32
  #####[92]\ d5,d4:#####[79]O pb42:#####[126]~ d5,d4:#####[88]X pl42:pb42:#####[92]\ d6,d4:#####[81]Q pl42:#####[126]~ #1,d4:pl42

  #####[92]\ d0,d2:#####[81]Q notcl2:#####[117]u d0,d4:#####[117]u d0,d3:#####[117]u d0,d2
  #####[92]\ d0,d2:#####[81]Q notcl2:#####[117]u d0,d4:#####[117]u d0,d3:#####[117]u d0,d2
  #####[92]\ d0,d2:#####[81]Q notcl2:#####[117]u d0,d4:#####[117]u d0,d3:#####[117]u d0,d2:notcl2
  #####[92]\ d4,d0:#####[79]O notan2:#####[117]u d0,d2:#####[117]u d0,d3:#####[117]u d0,d4
  #####[92]\ d4,d0:#####[79]O notan2:#####[117]u d0,d2:#####[117]u d0,d3:#####[117]u d0,d4
  #####[92]\ d4,d0:#####[79]O notan2:#####[117]u d0,d2:#####[117]u d0,d3:#####[117]u d0,d4:notan2
;clr top
  #####[126]~.l d0,d6:#####[68]D#4,d6:#####[61]= d6,a1

;  MOVEQ#0,d5:MOVEQ#0,d7:MOVE d0,d6:BRA cltt2
;  clrt2:MOVEM.l d5/d7,0(a1):MOVEM.l d5/d7,8(a1)
;  MOVEM.l d5/d7,1280(a1):MOVEM.l d5/d7,1288(a1)
;  ADD#16,a1:cltt2:DBRA d6,clrt2

;pick left right
  #####[122]z tpts2+4(pc),a4:#####[122]z 4(a4),a5
  #####[126]~.l d0,d1:#####[167]SetMaptr d0,d3:#####[167]SetMaptr d0,d4:#####[167]SetMaptr d0,d2
  #####[80]P norv2:#####[126]~.l d2,d1:#####[126]~.l d3,d2:#####[64]@#4,a4:norv2
  #####[130]#####[110].l d2-d4,tpts2:#####[126]~ d7,d0:#####[126]~ d7,d1
;juggle
  #####[172]#####[1440] d0:#####[68]D#2,d0:#####[118]v.l d0:#####[84]T#31,d0:#####[172]#####[1440] d1:#####[68]D#2,d1:#####[84]T#31,d1
  #####[126]~.l d2,d6:#####[172]#####[1440] d6:#####[68]D#2,d6:#####[167]SetMaptr d1,d6:#####[68]D#6,d6:#####[118]v.l d6
  #####[176]#####[1568] d2:#####[72]H dunq2:#####[113]q d2,d6:#####[118]v.l d6:#####[143]#####[526].l#8,d6:#####[68]D#2,d6:#####[170]#####[1379]#1,d2
  #####[126]~.l d4,d7:#####[172]#####[1440] d7:#####[68]D#2,d7:#####[167]SetMaptr d0,d7:#####[68]D#6,d7:#####[118]v.l d7
  #####[176]#####[1568] d4:#####[72]H dunq2:#####[113]q d4,d7:#####[118]v.l d7:#####[143]#####[526].l#8,d7:#####[68]D#2,d7:#####[170]#####[1379]#1,d4
  #####[122]z lup3(pc),a2:#####[122]z lup4(pc),a3
drw2:
  #####[61]=.l d6,d1:#####[70]F nox32:#####[64]@#4,d1:nox32
  #####[61]=.l d7,d0:#####[70]F nox42:#####[64]@#4,d0:nox42

  #####[129]#####[67]#0,d3:#####[126]~.l 0(a2,d0),d5:#####[176]#####[1582].b d0:#####[79]O ko:#####[117]u d3,d5:#####[137]#####[334].l d5:ko
  #####[176]#####[1582].b d1:#####[79]O lmsk:#####[66]B.l 0(a3,d1),d3:#####[129]#####[64] #0,d5:#####[88]X rmsk:lmsk:#####[66]B.l 0(a3,d1),d5:rmsk
  #####[66]B.l dither2(pc),d3:#####[66]B.l dither2(pc),d5

  #####[130]#####[110].l d3/d5,1280(a1):#####[129]#####[67]#0,d3:#####[129]#####[67]#0,d5
;  MOVEM.l d3/d5,(a1):MOVEM.l d3/d5,8(a1):MOVEM.l d3/d5,1280(a1)
  #####[61]= #16,a1
;  MOVE d5,322(a1):MOVE#0,d5:MOVE d5,320(a1):SWAP d5:MOVE.ld5,(a1)+

  #####[143]#####[512] dither2:#####[143]#####[512] dither2:#####[143]#####[512] dither2+2:#####[143]#####[512] dither2+2
  #####[92]\.l a0,a1:#####[81]Q dbot2
  #####[111]o d2,nxy22:#####[126]~.l (a4)+,d2:#####[167]SetMaptr -6(a4),d2:#####[76]L dunq2
  #####[126]~.l d2,d6:#####[172]#####[1440] d6:#####[68]D#2,d6:#####[167]SetMaptr d1,d6:#####[68]D#6,d6:#####[118]v.l d6
  #####[113]q d2,d6:#####[118]v.l d6:#####[143]#####[526].l#8,d6:#####[68]D#2,d6:#####[170]#####[1379]#1,d2
nxy22:
  #####[111]o d4,addg2:#####[126]~.l-(a5),d4:#####[167]SetMaptr 6(a5),d4:#####[76]L dunq2
  #####[126]~.l d4,d7:#####[172]#####[1440] d7:#####[68]D#2,d7:#####[167]SetMaptr d0,d7:#####[68]D#6,d7:#####[118]v.l d7
  #####[113]q d4,d7:#####[118]v.l d7:#####[143]#####[526].l#8,d7:#####[68]D#2,d7:#####[170]#####[1379]#1,d4
addg2:#####[88]X drw2
dunq2:;MOVEQ#0,d0:MOVEQ#0,d1:BRA clrb2
;clrbb2:MOVEM.l d0/d1,(a1):MOVEM.l d0/d1,8(a1)
;    MOVEM.l d0/d1,1280(a1):MOVEM.l d0/d1,1288(a1)
;    ADD#16,a1
;clrb2:CMP.l a0,a1:BMI clrbb2
dbot2:#####[130]#####[110].l (a7)+,a4-a6:#####[148]#####[640]
dither2:Dc%.l 0
tpts2:Dc%.l 0,0,0

lup3:
  Dc%.l $ffffffff,$7fffffff,$3fffffff,$1fffffff
  Dc%.l $0fffffff,$07ffffff,$03ffffff,$01ffffff
  Dc%.l $00ffffff,$007fffff,$003fffff,$001fffff
  Dc%.l $000fffff,$0007ffff,$0003ffff,$0001ffff
  Dc%.l $0000ffff,$00007fff,$00003fff,$00001fff
  Dc%.l $00000fff,$000007ff,$000003ff,$000001ff
  Dc%.l $000000ff,$0000007f,$0000003f,$0000001f
  Dc%.l $0000000f,$00000007,$00000003,$00000001
  Dc%.l $ffffffff,$7fffffff,$3fffffff,$1fffffff
  Dc%.l $0fffffff,$07ffffff,$03ffffff,$01ffffff
  Dc%.l $00ffffff,$007fffff,$003fffff,$001fffff
  Dc%.l $000fffff,$0007ffff,$0003ffff,$0001ffff
  Dc%.l $0000ffff,$00007fff,$00003fff,$00001fff
  Dc%.l $00000fff,$000007ff,$000003ff,$000001ff
  Dc%.l $000000ff,$0000007f,$0000003f,$0000001f
  Dc%.l $0000000f,$00000007,$00000003,$00000001

lup4:
  Dc%.l $80000000,$c0000000,$e0000000,$f0000000
  Dc%.l $f8000000,$fc000000,$fe000000,$ff000000
  Dc%.l $ff800000,$ffc00000,$ffe00000,$fff00000
  Dc%.l $fff80000,$fffc0000,$fffe0000,$ffff0000
  Dc%.l $ffff8000,$ffffc000,$ffffe000,$fffff000
  Dc%.l $fffff800,$fffffc00,$fffffe00,$ffffff00
  Dc%.l $ffffff80,$ffffffc0,$ffffffe0,$fffffff0
  Dc%.l $fffffff8,$fffffffc,$fffffffe,$ffffffff
  Dc%.l $80000000,$c0000000,$e0000000,$f0000000
  Dc%.l $f8000000,$fc000000,$fe000000,$ff000000
  Dc%.l $ff800000,$ffc00000,$ffe00000,$fff00000
  Dc%.l $fff80000,$fffc0000,$fffe0000,$ffff0000
  Dc%.l $ffff8000,$ffffc000,$ffffe000,$fffff000
  Dc%.l $fffff800,$fffffc00,$fffffe00,$ffffff00
  Dc%.l $ffffff80,$ffffffc0,$ffffffe0,$fffffff0
  Dc%.l $fffffff8,$fffffffc,$fffffffe,$ffffffff
End Statement

;------------------------------------------------------------------

Statement FindSprNum{shcar.l};,flag.w}            ;sorts shcar
  #####[177]#####[1600] a4:#####[126]~.l d0,a0;:MOVE d1,fla
:#####[130]#####[110].l (a0),d0-d7
  #####[92]\ d0,d2:#####[79]O nos1:#####[117]u d0,d2:#####[117]u d1,d3:nos1
  #####[92]\ d0,d4:#####[79]O nos2:#####[117]u d0,d4:#####[117]u d1,d5:nos2
  #####[92]\ d0,d6:#####[79]O nos3:#####[117]u d0,d6:#####[117]u d1,d7:nos3 ;d0 biggest
  #####[92]\ d2,d4:#####[79]O nos4:#####[117]u d2,d4:#####[117]u d3,d5:nos4
  #####[92]\ d2,d6:#####[79]O nos5:#####[117]u d2,d6:#####[117]u d3,d7:nos5 ;d2 2nd biggest
  #####[92]\ d4,d6:#####[79]O nos6:#####[117]u d4,d6:#####[117]u d5,d7:nos6 ;d4 3rd biggest
  #####[130]#####[110].l d0-d7,(a0)
;  TST.w fla:BNE kuhl  ;16 col car's need no adjusts...
;  LEA $dff180,a0
;  MOVE.w d1,19*2(a0):SWAP d1:MOVE.w d1,17*2(a0)
;  MOVE.w d3,23*2(a0):SWAP d3:MOVE.w d3,21*2(a0)
;  MOVE.w d5,27*2(a0):SWAP d5:MOVE.w d5,25*2(a0)
;  MOVE.w d7,31*2(a0):SWAP d7:MOVE.w d7,29*2(a0)
;  kuhl
:#####[148]#####[640]
;fla:Dc.w 0
End Statement

;-------end of SpriInc.bb-------------------------------------------


CNIF #errs:#####[210]#####[2656] :CEND


Statement CopCon{src,dest}
  Shared condt.l
  For i.w=0 To (SizeOf/.frend-1) Step 2
    #####[2881].w condt+dest*8+i,#####[2882].w (condt+src*8+i)
  Next
End Statement

Statement GetMap{fname$}
  Shared maptr.l,condt.l,pts,pts1,pts2,pts3

    If #####[2001](0,fname$+".MAP")
      #####[1992] 0
      #####[2004] 0,maptr.l,2*64*64
      pts=#####[3085]#####[456](#####[2978](2)):pts1=pts+1:pts2=pts+2:pts3=pts+3
      For cnt.w=0 To pts
        #####[2004] 0, condt+cnt*8  ,8

;        con(cnt)\lti=Cvi(Inkey$(2))
;        con(cnt)\ltj=Cvi(Inkey$(2))
;        con(cnt)\rti=Cvi(Inkey$(2))
;        con(cnt)\rtj=Cvi(Inkey$(2))
      Next
      #####[2625]
      #####[1986] 0
    Else"
      End
    #####[192]#####[2048]
    For src=0 To 10:CopCon{src,pts1+src}:Next
    VWait7 80
  End Statement     ;GetMap


.LeechMap   ;(?)


CNIF 1=0

  If #####[2001] (0,pg$+"Map")
    #####[2004] 0,#####[1222](5),#####[1994](0)
    #####[1986] 0

    #####[1187] #####[1222](5)
    pts.w=#####[2882].w(#####[1222](5)+64*64*4)      ;?
    signx.w=#####[2882].w(#####[1222](5)+64*64*4+2)  ;?
    signy.w=#####[2882].w(#####[1222](5)+64*64*4+4)  ;?
    signflip.w=#####[2882].w(#####[1222](5)+64*64*4+6)  ;?

  Else"
    #####[2626]:#####[3106]#####[96] "AAAARRRGGHHH!! if you want to leech my map then please replace it!"
    VWait7 100:End
  #####[192]#####[2048]
  For i.w=0 To 15
    rr.w=#####[2882].w(bigpal+i*6  )&255
    gg.w=#####[2882].w(bigpal+i*6+2)&255
    bb.w=#####[2882].w(bigpal+i*6+4)&255
    #####[2506] 10,i,rr #####[69]E 4,gg #####[69]E 4,bb #####[69]E 4
  Next
CEND
  Use, #####[2561] 0:#####[1605]
  #####[2562] 0,"Cd.iff",10
  GetMap{"cd"}


  pts1.w=pts+1:pts2.w=pts+2:pts3.w=pts+3:pts4.w=pts+4

  Gosub PreProcess

Return


#ysc=3:#xsc=4:#scal=5

.LeechCar
  If #####[2001](0,pg$+"car.gag")
    #####[2004] 0,#####[1222](0)+#goff,#####[1994](0)         ;#sprleng
    #####[1986] 0
    #####[1187] #####[1222](0)+#goff
  Else"
    #####[2626]
    #####[3106]#####[96] "you silly man! don't delete my car files!"
    VWait7 100:End
  #####[192]#####[2048]

  xdim.w=18;22
  ydim.w=13
  For d=0 To 31
    qs=qsin(d):qc=qcos(d)
    *sha.ShadPt=#####[1222](0)+d*SizeOf/.ShadPt
    #####[202]#####[2400] *sha
    \ri3=(-xdim*qc+ydim*qs) #####[69]E #scal:\rj3=(-xdim*qs-ydim*qc)#####[69]E #scal
    \ri2=(-xdim*qc-ydim*qs) #####[69]E #scal:\rj2=(-xdim*qs+ydim*qc)#####[69]E #scal
    \ri1=( xdim*qc-ydim*qs) #####[69]E #scal:\rj1=( xdim*qs+ydim*qc)#####[69]E #scal
    \ri0=( xdim*qc+ydim*qs) #####[69]E #scal:\rj0=( xdim*qs-ydim*qc)#####[69]E #scal
    \ry3=\ri3 #####[68]D #ysc+\rj3 #####[68]D #ysc+25
    \ry2=\ri2 #####[68]D #ysc+\rj2 #####[68]D #ysc+25
    \ry1=\ri1 #####[68]D #ysc+\rj1 #####[68]D #ysc+25
    \ry0=\ri0 #####[68]D #ysc+\rj0 #####[68]D #ysc+25
    \rx3=#####[1930](\ri3 #####[68]D #xsc-\rj3 #####[68]D #xsc+16,0,31)
    \rx2=#####[1930](\ri2 #####[68]D #xsc-\rj2 #####[68]D #xsc+16,0,31)
    \rx1=#####[1930](\ri1 #####[68]D #xsc-\rj1 #####[68]D #xsc+16,0,31)
    \rx0=#####[1930](\ri0 #####[68]D #xsc-\rj0 #####[68]D #xsc+16,0,31)
    \ri4=(\ri0+\ri3)*0.29:\rj4=(\rj0+\rj3)*0.29
    \ri5=(\ri1+\ri2)*0.29:\rj5=(\rj1+\rj2)*0.29
  Next
Return


.
.Bmode
  BLITZ4
  #####[1569] #####[197]#####[2208]

  #####[2881].w $dff032,1477
  #####[86]V #7,$bfd200
  #####[86]V #7,$bfd000

  *tp=*p0:*bp=*p0:plyrs.w=1
  For pl.w=0 To 3:*p=Pl(pl):Gosub SetStartCar:Next

  level=14

  While level>13
    Gosub InitDispMiddle
    Gosub DispMiddle

    If level>14
      Gosub InitRace
      Gosub Race
    #####[192]#####[2048]
  #####[193]#####[2080]

  If med Then! #####[1316]
  ClrInt1 5:If twin Then! ClrInt1 11
  #####[187]#####[1946]:#####[188]#####[1952] #####[137]#####[320] #####[1570]($45)
  #####[1569] #####[198]#####[2240]

Return

.

CNIF #errs:#####[211]#####[2714]:CEND
TesTEd
Function .w TestNew{first.l,second.l}
  ;
  Macro e  SizeOf/ .quadratic\`1(a0):End Macro
  Macro pa SizeOf/ .parse\`1(a1):End Macro
  ;
  #####[177]#####[1600] a4:#####[126]~.l d0,a0:#####[126]~.l d1,a1
  #####[129]#####[64] #0,d6:#####[129]#####[64] #0,d7
  ;
  #####[89]Y strcur2:#####[74]J failsc0:#####[129]#####[64] #1,d6:failsc0:#####[61]=.l #hquad,a0:#####[137]#####[320] d7
  #####[89]Y strcur2:#####[74]J failsc1:#####[64]@  #2,d6:failsc1:#####[61]=.l #hquad,a0
  #####[89]Y strcur1:#####[74]J failsc2:#####[64]@  #4,d6:failsc2:#####[61]=.l #hquad,a0:#####[137]#####[320] d7
  #####[89]Y strcur1:#####[74]J failsc3:#####[64]@  #8,d6:failsc3
  ;
  #####[126]~ d6,d0:#####[148]#####[640]
  ;
strcur1
  #####[126]~.l !pa{fi},d0:#####[167]ScrlSlc.l !e{lc},d0:#####[69]E.l #5,d0  ;d0=ni
  #####[126]~.l !pa{fj},d1:#####[167]ScrlSlc.l !e{lf},d1:#####[69]E.l #5,d1  ;d1=nj
  #####[176]#####[1568] !e{lstraight}:#####[80]P handlestraight1:#####[88]X handlecurve
strcur2
  #####[126]~.l !pa{fi},d0:#####[167]ScrlSlc.l !e{lc},d0:#####[69]E.l #5,d0  ;d0=ni
  #####[126]~.l !pa{fj},d1:#####[167]ScrlSlc.l !e{lf},d1:#####[69]E.l #5,d1  ;d1=nj
  #####[176]#####[1568] !e{lstraight}:#####[80]P handlestraight2
  ;
handlecurve:    ;5 mults
  #####[126]~.l !e{lb},d2:#####[69]E.l #2,d2:#####[126]~.l !e{le},d3:#####[69]E.l #2,d3 ;pb,pe
  #####[131]#####[128] d0,d2:#####[131]#####[128] d1,d3:#####[61]=.l d3,d2  ;d2=dot1
  #####[126]~.l !e{la},d4:#####[69]E.l #7,d4:#####[126]~.l !e{ld},d5:#####[69]E.l #7,d5 ;pb,pe
  #####[131]#####[128] d0,d4:#####[131]#####[128] d1,d5:#####[61]=.l d5,d4  ;d4=dot2
  #####[172]#####[1440] d2:#####[131]#####[128] d2,d2:#####[68]D.l #2,d2               ;dot1*dot1
  #####[176]#####[1582].w !e{lodd1}:#####[72]H obtuse:#####[117]u d2,d4:obtuse:#####[92]\.l d4,d2:#####[148]#####[640]
  ;
handlestraight1: ;2 mults
  #####[126]~.l !e{le},d2:#####[69]E.l #2,d2:#####[126]~.l !e{lb},d3:#####[69]E.l #2,d3 ;pb,pe
  #####[131]#####[128] d0,d2:#####[131]#####[128] d1,d3:#####[176]#####[1568] d7:#####[80]P noswap1:#####[117]u d2,d3:noswap1:#####[92]\.l d2,d3:#####[148]#####[640]
  ;
handlestraight2: ;2 mults
  #####[126]~.l !e{le},d2:#####[69]E.l #2,d2:#####[126]~.l !e{lb},d3:#####[69]E.l #2,d3 ;pb,pe
  #####[131]#####[128] d0,d2:#####[131]#####[128] d1,d3:#####[176]#####[1568] d7:#####[72]H noswap2:#####[117]u d2,d3:noswap2:#####[92]\.l d2,d3:#####[148]#####[640]
  ;
End Function ;testnew

Function.w bouncenew {first.l,second.l}
  #####[177]#####[1600] a4:#####[126]~.l d0,a0:#####[126]~.l d1,a1
  #####[126]~.l !pa{fi},d0:#####[167]ScrlSlc.l !e{lc},d0:#####[69]E.l #5,d0  ;d0=ni
  #####[126]~.l !pa{fj},d1:#####[167]ScrlSlc.l !e{lf},d1:#####[69]E.l #5,d1  ;d1=nj
  #####[126]~.l !pa{di},d2:#####[69]E.l#2,d2 ;d2=b
  #####[126]~.l !pa{dj},d3:#####[69]E.l#2,d3 ;d3=d
  #####[131]#####[128] d2,d1:#####[131]#####[128] d3,d0:#####[167]ScrlSlc.l d0,d1  ;d1=top=ni.d-nj.b
  #####[126]~.l !e{lb},d4:#####[69]E.l#2,d4 ;d4=pb
  #####[126]~.l !e{le},d5:#####[69]E.l#2,d5 ;d5=pe
  #####[131]#####[128] d4,d3:#####[131]#####[128] d5,d2:#####[167]ScrlSlc.l d3,d2  ;d3=bot=pb.d-pe.b
  #####[172]#####[1440] d2:#####[69]E.l #5,d1:#####[176]#####[1568] d2:#####[72]H fail;succ?!?!?
  #####[113]q d2,d1:#####[118]v.l d1:#####[68]D.l #8,d1                     ;d1=t=any size
  #####[92]\.l !e{lb1},d1:#####[78]N fail:#####[92]\.l !e{lb2},d1:#####[74]J fail
  #####[69]E.l#8,d1:#####[126]~ d1,d0:#####[126]~ d1,d2:#####[131]#####[128] d4,d0:#####[131]#####[128] d5,d2
  #####[69]E.l #6,d0:#####[69]E.l #6,d2
  #####[61]=.l !e{lc},d0:#####[61]=.l !e{lf},d2                     ;d0=ti d2=tj

  #####[126]~.l d0,d3:#####[167]ScrlSlc.l !pa{i},d3:#####[69]E.l #5,d3:#####[131]#####[128] d3,d3
  #####[126]~.l d2,d4:#####[167]ScrlSlc.l !pa{j},d4:#####[69]E.l #5,d4:#####[131]#####[128] d4,d4:#####[61]=.l d4,d3
  #####[126]~.l !pa{di},d5           :#####[69]E.l #5,d5:#####[131]#####[128] d5,d5
  #####[126]~.l !pa{dj},d6           :#####[69]E.l #5,d6:#####[131]#####[128] d6,d6:#####[61]=.l d6,d5
  #####[92]\.l d5,d3:#####[81]Q fail

  succ:#####[126]~.l d0,!pa{fi}:#####[126]~.l d2,!pa{fj}
       #####[126]~.w !e{langst},!pa{norm}
       #####[129]#####[67]#-1,d0:#####[148]#####[640]

  fail:#####[129]#####[67]#0,d0:#####[148]#####[640]

End Function

Function.w bouncepod {zeroth.l,first.l,second.l}
  #####[177]#####[1600] a4:#####[126]~.l d0,a0:#####[126]~.l d1,a1:#####[126]~.l d2,a2
;  MOVE.l !pa{di},d0:MOVE.l !pa{dj},d1 ;changed me
  #####[126]~.l !pa{diri},d0:#####[126]~.l !pa{dirj},d1
  #####[176]#####[1582].w !e{lodd3}:#####[72]H hoppy:#####[134]#####[238].l d0:#####[134]#####[238].l d1:hoppy
  #####[69]E.l #5,d0:#####[126]~ d0,d4:#####[69]E.l #5,d1:#####[126]~ d1,d5 ;d1=d=d5 ;d0=b=d4
  #####[126]~.l !pa{i},d2:#####[167]ScrlSlc.l !e{lc},d2:#####[69]E.l #6,d2     ;d2=a
  #####[126]~.l !pa{j},d3:#####[167]ScrlSlc.l !e{lf},d3:#####[69]E.l #6,d3     ;d3=c
  #####[126]~.l !e{ma},d6:#####[69]E.l#1,d6:#####[131]#####[128] d6,d1              ;1+5
  #####[126]~.l !e{md},d7:#####[69]E.l#1,d7:#####[131]#####[128] d7,d0:#####[167]ScrlSlc.l d0,d1  ;A=d1=ma.d-md.b
  #####[126]~.l !e{lb},d6:#####[69]E.l#2,d6:#####[131]#####[128] d5,d6              ;2+5
  #####[126]~.l !e{le},d7:#####[69]E.l#2,d7:#####[131]#####[128] d4,d7:#####[167]ScrlSlc.l d7,d6  ;B=d6=lb.d-le.b
  #####[131]#####[128] d2,d5:#####[131]#####[128] d3,d4:#####[167]ScrlSlc.l d5,d4                   ;5+6 d4=C bc-ad
  #####[126]~.l d6,d0:#####[172]#####[1440] d0:#####[131]#####[128] d0,d0                     ;B*B 14
  #####[126]~.l d1,d2:#####[172]#####[1440] d2:#####[176]#####[1568] d2:#####[72]H fail2:#####[172]#####[1440] d4:#####[131]#####[128] d2,d4 ;17
  #####[68]D.l#5,d4:#####[167]ScrlSlc.ld4,d0:#####[176]#####[1582].l d0:#####[79]O fail2           ;d0=desc (14)

  ;d0=descr d1=A(6) d6=B(7) d4=C
  #####[129]#####[67]#19-9,d2:#####[126]~.l #2048,d3:#####[129]#####[67]#0,d7
  bloop:#####[92]\.l d3,d0:#####[78]N cewl
  #####[125]}.l#1,d0:#####[145]#####[579]#1,d7:#####[125]}.l#1,d0:#####[145]#####[579]#1,d7
  #####[111]o d2,bloop:cewl:#####[61]= d0,d0
  #####[130]#####[96] 0(a2,d0),d0/d5:#####[132]#####[160] d7,d5:#####[137]#####[320] d7:#####[132]#####[160] d7,d0
  #####[61]=.l d5,d0:#####[125]}.l d2,d0

  #####[176]#####[1568] !e{lodd1}:#####[80]P skipn:#####[134]#####[238].l d0:skipn:#####[167]ScrlSlc.l d6,d0 ;(9)
  #####[129]#####[67]#13-6,d7:#####[68]D.l#2,d0    ;ANDREW MAKE = 15 (actually 9)
  #####[129]#####[78].l #0,d2:#####[176]#####[1582].l d1:#####[81]Q boop:#####[134]#####[238].l d1:#####[134]#####[238].l d0:boop
  nxsh:#####[69]E.l#1,d1:#####[170]#####[1379]#1,d7:#####[126]~ d1,d2:#####[92]\.l d1,d2:#####[80]P nxsh

  #####[125]} #1,d1:#####[176]#####[1568] d1:#####[72]H fail2 ;!?!??!?!
  #####[113]q d1,d0:;BVC noflo:MOVE#-1,$dff180:noflo
  #####[118]v.l d0:#####[176]#####[1568] d7:#####[79]O doasr:#####[68]D.l d7,d0:#####[88]X dunasr
  doasr:#####[134]#####[224] d7:#####[69]E.l d7,d0:dunasr:#####[126]~.l d0,d3:#####[68]D.l #6,d3

  #####[92]\.l !e{lb1},d3:#####[78]N fail2:#####[92]\.l !e{lb2},d3:#####[74]J fail2

  #####[126]~.l !e{ma},d1:#####[126]~.l !e{md},d2:#####[69]E.l #2,d1:#####[69]E.l #2,d2
  #####[131]#####[128] d0,d1:#####[68]D.l#6,d1:#####[172]#####[1440] d1:#####[131]#####[128] d0,d2:#####[68]D.l#6,d2:#####[172]#####[1440] d2
  #####[126]~.l !e{lb},d3:#####[126]~.l !e{le},d4:#####[69]E.l #2,d3:#####[69]E.l #2,d4
  #####[61]=.l d3,d1:#####[131]#####[128] d0,d1:#####[69]E.l#8,d1:#####[61]=.l !e{lc},d1
  #####[61]=.l d4,d2:#####[131]#####[128] d0,d2:#####[69]E.l#8,d2:#####[61]=.l !e{lf},d2

  #####[126]~.l d1,d3:#####[167]ScrlSlc.l !pa{i},d3:#####[69]E.l #5,d3:#####[131]#####[128] d3,d3
  #####[126]~.l d2,d4:#####[167]ScrlSlc.l !pa{j},d4:#####[69]E.l #5,d4:#####[131]#####[128] d4,d4:#####[61]=.l d4,d3
  #####[126]~.l !pa{di},d5           :#####[69]E.l #5,d5:#####[131]#####[128] d5,d5
  #####[126]~.l !pa{dj},d6           :#####[69]E.l #5,d6:#####[131]#####[128] d6,d6:#####[61]=.l d6,d5
  #####[92]\.l d5,d3:#####[81]Q fail2

  succ2:#####[126]~.l d1,!pa{fi}:#####[126]~.l d2,!pa{fj}
        #####[126]~.l !e{langadd},d3
        #####[131]#####[128] d0,d3:#####[69]E.l #6,d3
        #####[61]=.l !e{langst},d3:#####[172]#####[1440] d3
        #####[126]~.w d3,!pa{norm}
        #####[129]#####[67]#-1,d0:#####[148]#####[640]

  fail2:#####[129]#####[67]#0,d0:#####[148]#####[640]
End Function
CNIF #errs:#####[210]#####[2656] :CEND

Statement bounce{result.w,first.l,second.l}
  Shared sqlu.l

;result obtained from TestNew..
;fi,fj are the params to be changed...
;di,dj,i,j are just for fun..

  *e.quadratic=first
  *par.parse=second
  col=3
  here.w=#####[198]#####[2272] ; in case we crash more than once?

  result+16
  #####[187]#####[1888]
    If ( (result & 1)=1)
      If *e\lstraight
        here+bouncenew{*e,*par}
      Else"
        here+bouncepod{*e,*par,sqlu}
      #####[192]#####[2048]
    #####[192]#####[2080]   ;noimpact
    result #####[69]E 1
    *e+#hquad
    *par\norm+16
  #####[188]#####[1952] (result=1) ; OR (here=On)
  *par\norm=*par\norm #####[66]B 31
  *par\boom=(here<0)
End Statement  ;end of bounce

Statement Damage{result.w,first.l,second.l}
  *e.quadratic=first:*par.parse=second

  #####[187]#####[1888]
    If ( (result & 1)=1)
      If *e\lstraight
        deli=*par\fi-*e\lc
        delj=*par\fj-*e\lf
        fac=*e\lb*deli+*e\le*delj
        *par\i=*e\lc+*e\lb*fac
        *par\j=*e\lf+*e\le*fac

;        here+bouncenew{*e,*par}
      Else"
        deli=*par\fi-*e\lc
        delj=*par\fj-*e\lf
        fac=*e\lb*deli+*e\le*delj
        *par\i=*e\lc+fac*(*e\lb+*e\ma*fac)
        *par\j=*e\lf+fac*(*e\le+*e\md*fac)
;        here+bouncepod{*e,*par,sqlu}
      #####[192]#####[2048]
    #####[192]#####[2080]   ;noimpact
    result #####[69]E 1
    *e+#hquad
  #####[188]#####[1952] (result=0)
End Statement  ;end of Damage

Statement pprint{bmc.l,shc.l,c.w}
  #####[177]#####[1600] a4:#####[126]~.l d0,a0:#####[126]~.l d1,a1
  #####[118]v d2:#####[61]= d2,a1:#####[126]~ #164,d3:#####[126]~ #shapewid,d4

  #####[126]~.b (a1),(a0):#####[126]~.b (a1),82(a0):#####[61]= d3,a0:#####[61]= d4,a1
  #####[126]~.b (a1),(a0):#####[126]~.b (a1),82(a0):#####[61]= d3,a0:#####[61]= d4,a1
  #####[126]~.b (a1),(a0):#####[126]~.b (a1),82(a0):#####[61]= d3,a0:#####[61]= d4,a1
  #####[126]~.b (a1),(a0):#####[126]~.b (a1),82(a0):#####[61]= d3,a0:#####[61]= d4,a1
  #####[126]~.b (a1),(a0):#####[126]~.b (a1),82(a0):#####[61]= d3,a0:#####[61]= d4,a1
  #####[126]~.b (a1),(a0):#####[126]~.b (a1),82(a0):#####[61]= d3,a0:#####[61]= d4,a1
  #####[126]~.b (a1),(a0):#####[126]~.b (a1),82(a0):#####[61]= d3,a0:#####[61]= d4,a1
  #####[126]~.b (a1),(a0):#####[126]~.b (a1),82(a0)
  #####[148]#####[640]
End Statement

Macro SChat
  #####[2404]#####[160] chat.w,7,xxoff.w+narrow.w,0
End Macro

#tdel=1024
Statement Ticker{}
  Shared ancient.w,chat.w
  If ancient=#tdel
    #####[2506] 7,1,15,15,15
    #####[2406]#####[224] chat,7
  #####[192]#####[2048]
  ancient.w-1
  If ancient<0
    If ancient>-256
      rr.w=(ancient+256) #####[69]E 4
      #####[2506] 7,1,rr,rr,rr
      #####[2406]#####[224] chat,7
    #####[192]#####[2048]
  #####[192]#####[2048]

End Statement

Statement ProcChatSimple{sr.w}
  Shared chat.w,xxoff.w,bmc.l,shc.l,cslide.w,narrow.w,ancient.w

  If 31<sr #####[66]B sr<127
    pprint{bmc+xxoff #####[69]E 3,shc,sr-32}
    xxoff+8:ancient.w=#tdel
    If xxoff>656 Then! xxoff-656
    If chat>-1 Then! !SChat
  #####[192]#####[2048]
  If sr=8 ;backspace
    If xxoff>7
      pprint{bmc+xxoff #####[69]E 3 -1,shc,0}
    Else"
      pprint{bmc+xxoff #####[69]E 3+79,shc,0}
    #####[192]#####[2048]
    xxoff-8:ancient.w=#tdel
    If xxoff<0 Then! xxoff+656
    If chat>-1 Then! !SChat
  #####[192]#####[2048]
  cslide=0

End Statement

Statement ProcChat{sr.w}
  Shared chat.w,xxoff.w,bmc.l,shc.l,cslide.w,narrow.w,ancient.w

  If 31<sr #####[66]B sr<127
    pprint{bmc+xxoff #####[69]E 3,shc,sr-32}
    cslide=2:ancient.w=#tdel
  #####[192]#####[2048]
  If sr=8 ;backspace
    If xxoff>8
      pprint{bmc+xxoff #####[69]E 3 -1,shc,0}
    Else"
      pprint{bmc+xxoff #####[69]E 3+79,shc,0}
    #####[192]#####[2048]
    cslide=-2:ancient=#tdel
  #####[192]#####[2048]
End Statement

Macro DispChar
  clast=(clast+1) #####[66]B 255:cbuf(clast)=`1
End Macro

Statement PrStr{s$}
Shared cbuf(),clast
  idx.w=0
  While idx<#####[3087]#####[520](s$)
    idx+1
    rrx=#####[3079]#####[264](#####[3075]#####[136](s$,idx,1))
    !DispChar{rrx}
  #####[193]#####[2080]
End Statement

Function.w DoChatSimple{}
Shared cbuf.w(),cfirst.w,clast.w,done.w,CCK.w,prequit.w
  ; Returns ALL bits of transmit ascii
  ; Requires BlitzKeys ON
  ; should be called every frame

  in$=#####[2978]:in.w=#####[3079]#####[264](in$)
  If (in>31 #####[66]B in<127) #####[138]#####[352] (in=8) #####[138]#####[352] (in=13)
    clast=(clast+1) #####[66]B 255
    cbuf(clast)=in
  #####[192]#####[2048]

  If cfirst<>clast
    cfirst=(cfirst+1) #####[66]B 255
    CCK=cbuf(cfirst)
  Else"
    CCK=-1
  #####[192]#####[2048]

  Function Return CCK
End Function

Function.w DoChat{ipl}
Shared cbuf.w(),cfirst.w,clast.w,r$(),done.w,CCK.w,prequit.w
  ; Returns next 2 bits of transmit ascii
  ; Requires BlitzKeys ON
  ; should be called every frame

  in$=#####[2978]:in.w=#####[3079]#####[264](in$)
  If (in>31 #####[66]B in<127) #####[138]#####[352] (in=8)
    clast=(clast+1) #####[66]B 255
    cbuf(clast)=in
  #####[192]#####[2048]

  If ipl=0
    If (#####[1570]($45) #####[138]#####[352] (ReadJoy{3}=$20000) ) #####[66]B (prequit=0)
      prequit=2:CCK=$ff
    Else"
      If cfirst<>clast
        cfirst=(cfirst+1) #####[66]B 255
        CCK=cbuf(cfirst)
      Else"
        CCK=0
      #####[192]#####[2048]
    #####[192]#####[2048]
  Else"
    CCK #####[69]E 2
  #####[192]#####[2048]

  Function Return CCK #####[66]B 3
End Function

Statement writeser{tb.w}
  #####[2881].w #serdat,(tb&255)+256   ;:wempty:BTST #4,serdatr:BNE wempty
End Statement

Statement writesafer{tb.w}
  wempty:#####[87]W #5,serdatr:#####[72]H wempty ;01e
  #####[2881].w #serdat,(tb&255)+256
End Statement

Statement writegam{tb.w}
  Shared bword.w,cur()
  #####[2881].w #serdat,(tb&255)+256   ;:wempty:BTST #4,serdatr:BNE wempty
  bword.w=(bword+1) #####[66]B #maxleng
  cur(bword)=tb
End Statement

Statement writeloc{tb.w}
  Shared bword.w,cur()
  bword.w=(bword+1) #####[66]B #maxleng
  cur(bword)=tb
End Statement

#defx=352 : #defy=130

.InitDispMiddle ;level=13

  sr=-1
;  level=16
  level=11
;  If twin
    Gosub InstSer



  #####[1569] #####[198]#####[2298]:#####[1569] #####[197]#####[2266]:#####[1571] -1,-1
  #####[2279]:newer.w=#####[198]#####[2240]
;  Gosub InitRace
Return


.DispMiddle ;level=14
  ClrInt1 5
  If snd
    If newer.w
      #####[1861] 15,0,0,0,0
      #####[1860] 10,15,0,0,0,0
      VWait7 2
    #####[192]#####[2048]
    newer=#####[197]#####[2208]
  #####[192]#####[2048]
  #####[187]#####[1946]:#####[188]#####[1952] #####[137]#####[320] #####[1570]($45)

  wid.w=(#defx+84+64+40) #####[66]B $fff0
  htg=#defy+50+16:hth.w=htg+72

  Use, #####[2561] 0:#####[2274] 0
  Use, #####[2561] 4:#####[1605]:hymax.w=0
  #####[200]#####[2336] Cred

  Use, #####[2561] 0
  chat.w=10:narrow.w=16
  xx=#####[1930](signx-20,0,1024-320)
  yy=#####[1930](signy-80,0,516-280)
;  Gosub Static
  ipl=0:Gosub SetGo

  For sp.w=0 To 3
    #####[2405]#####[192] 4,0,-100,50,sp*2
  Next
  #####[2404]#####[160]  4,0,xx,yy
  #####[2406]#####[224] 4,10
  #####[2406]#####[224] chat,7:!SChat
  #####[2403]#####[128]  4,chat


  VWait7

  #####[187]#####[1946]:#####[188]#####[1952] #####[1933]>50

  #####[126]~.w #$e000,$dff106

    #####[2881].w 20*2+$dff180,$000
    #####[2881].w 24*2+$dff180,$555
    #####[2881].w 28*2+$dff180,$aaa    ;set the greys..

    For pl.w=0 To 3
      For bob.w=1 To 3
        h.l=cols(Pl(pl)\colowner)\col[4-bob]
        #####[2881].w $dff180+(16+pl #####[68]D 2+bob) #####[68]D 1,h
      Next bob
    Next pl

;  For i.w=17 To 31:Poke.w i ASL 1+$dff180,0:Next:; reset the blacks...


  update=#####[197]#####[2266]:bob.w=147:hy.w=0:slide.w=#####[198]#####[2240]
  *tp=*p0:*bp=*p0
  sc.w=256:done=#####[198]#####[2298]:esc.w=0:button.w=#####[197]#####[2208]
  plyrs.w=-1:oplyrs.w=-1:master.w=0
  clkt=-1

  If med Then! #####[1314] 0:#####[1317] 7

  #####[2342] 0:#####[2342] 1:#####[2342] 2

  Use, #####[2561] 0:selmen.w=0:Gosub ReDispMen

  #####[202]#####[2400] *p:hymax=-50:level=14
  #####[187]#####[1888]
    CNIF #bars
      #####[126]~.w #$0f00,$dff180:For silly.w=0 To 2:Next:#####[126]~.w #$0444,$dff180
    CEND
    VWait7:Ticker{}:clkt-1:#####[1315]

    If hymax=-50
      Gosub MovGo
    Else"
      Gosub Credits
    #####[192]#####[2048]

    ojoy.w=joy.w:joy=#####[1930](#####[1570]($4c)-#####[1570]($4d)+#####[3042](1),-1,1)
    ojob.w=jb.w:jb=#####[1930](#####[3044](1)+#####[1570]($40)+#####[1570]($44),-1,1)
    job.w=#####[198]#####[2298]:If jb<>ojob Then! job=jb
    If ojoy<>joy Then! nu.w=#####[1930](selmen+joy,0,3)
    If nu<>selmen
      sh.w=selmen+#menshap:nx=xx+210:ny=yy+50+selmen*50
      #####[2566] sh,14:Use, #####[2561] 14:#####[2024]#####[288] 13,8
      Use, #####[2561] 0:#####[2401] sh,nx,ny
      selmen=nu
      sh.w=selmen+#menshap:nx=xx+210:ny=yy+50+selmen*50
      #####[2566] sh,14:Use, #####[2561] 14:#####[2024]#####[288] 8,13
      Use, #####[2561] 0:#####[2401] sh,nx,ny
    #####[192]#####[2048]

    sc=-1:ret.w=DoChatSimple{}
    If ret>-1 Then! writesafer{ret}

    While bfirst<>blast
      blast.w=(blast+1) #####[66]B #maxleng:sc.w=las(blast)

      If sc>0 Then! ProcChatSimple{sc}
      If sc>$fb
        nuplyrs=sc-$fd
        If (plyrs>0) #####[66]B (oplyrs<0) #####[66]B (nuplyrs>0) Then! nuplyrs=oplyrs ;modem echo!
        oplyrs=nuplyrs
        If (oplyrs>-1) #####[66]B (plyrs=-1) Then! writeser{$fd}
      #####[192]#####[2048]

;      If sc=$fc Then oplyrs=-1        ;other end is Bored!
;      If sc=$fd Then oplyrs= 0        ;other end is thinking!

;      If sc=$fe Then oplyrs= 1:writeser{$fd}   ;other end wants to play!
;      If sc=$ff Then oplyrs= 2        ;other end wants to play!

      If sc=$f0 Then! fast.w=#####[197]#####[2240] :Gosub ReDispMen; :ProcChatSimple{70}:ProcChatSimple{97}:ProcChatSimple{115}:ProcChatSimple{116}
      If sc=$f1 Then! fast.w=#####[198]#####[2298]:Gosub ReDispMen; :ProcChatSimple{83}:ProcChatSimple{108}:ProcChatSimple{111}:ProcChatSimple{119}


      Use, #####[2561] 0:#####[2339] 1

      If oplyrs>0 Then! #####[2338] 1,47,804,180:;491,186
      If oplyrs>1 Then! #####[2338] 1,47,827,182:;04,506,203

    #####[193]#####[2080]

    If #####[1570]($52) #####[138]#####[352] ((selmen=3) #####[66]B (job<>0))
      If #####[137]#####[320] plbut.w
        fast.w=#####[137]#####[320] fast:writeser{$f1+fast}
        If fast.w
          ProcChatSimple{70}:ProcChatSimple{97}:ProcChatSimple{115}:ProcChatSimple{116}
        Else"
          ProcChatSimple{83}:ProcChatSimple{108}:ProcChatSimple{111}:ProcChatSimple{119}
        #####[192]#####[2048]
        Gosub ReDispMen
        plbut=#####[197]#####[2208]
      #####[192]#####[2048]
    Else"
      plbut=#####[198]#####[2240]
    #####[192]#####[2048]

    If plyrs<1
      If #####[1570]($50) #####[138]#####[352] (selmen=0 #####[66]B job<>0)
        plyrs.w=1:writeser{$fe}:clkt=30 ;race conditions
      #####[192]#####[2048]
      If #####[1570]($51) #####[138]#####[352] (selmen=1 #####[66]B job<>0)
        plyrs.w=2:writeser{$ff}:clkt=30 ;race conditions
      #####[192]#####[2048]
      If clkt=30
        Use, #####[2561] 0
        #####[2342] 0
        #####[2338] 0,47,774,103;433,167
        If plyrs>1 Then! #####[2338] 0,47,800,114;447,167
      #####[192]#####[2048]
    #####[192]#####[2048]

    If (plyrs>0) #####[66]B (oplyrs>0) Then! level+1

    If clkt<0
      If plyrs>0
        If oplyrs=-1 Then! level+1 ;no response..
        If (oplyrs=0) #####[66]B clkt<-100 Then! plyrs=-1:#####[2339] 0:writeser{$fc}
      #####[192]#####[2048]
    #####[192]#####[2048]

    If #####[1570]($45) #####[138]#####[352] (selmen=2 #####[66]B job<>0)
      If button=#####[198]#####[2272] Then! level-1 ;quit conditions
    Else"
      button=#####[198]#####[2240]
    #####[192]#####[2048]

  #####[188]#####[1952] level<>14
  #####[2339] 0:#####[2339] 1:#####[2339] 2

  connect.w=oplyrs>-1:twin=connect

  Use, #####[2561] 0:#####[2274] 0
  ClrInt1 5:If med Then! #####[1316]:#####[1861] 0,0,0,0

Return

.ReDispMen
  #####[2339] 2:VWait7 10
  If fast Then! #####[2471] #menshap+4,#menshap+3 Else" #####[2471] #menshap+5,#menshap+3
  For ty.w=0 To 3
    nx=xx+210:ny=yy+50+ty*50:sh.w=ty+#menshap
    #####[2566] sh,14:Use, #####[2561] 14
    If selmen<>ty Then! #####[2024]#####[288] 13,8 Else" #####[2024]#####[288] 8,13
    Use, #####[2561] 0:#####[2338] 2,sh.w,nx,ny
  Next
Return

.Static
  For pl=0 To 3
    *p=Pl(pl)

    dist.w=pts3**p\lap+*p\curdt
    roll=0:pos.w=0:pitch.w=0
    For ipl=0 To 3
      If dist.w<(pts3*Pl(ipl)\lap+Pl(ipl)\curdt) Then! pos+1
      If dist.w=(pts3*Pl(ipl)\lap+Pl(ipl)\curdt)
        roll+1:If pl<ipl Then! pitch+1
      #####[192]#####[2048]
    Next

    dtp.q=pts3-pos*0.3
    FindLo{dtp,condt,io.l}:dti =(bez\i+bez\k)#####[69]E 1:dtj =(bez\j+bez\l)#####[69]E 1:dtp-0.1
    FindLo{dtp,condt,io.l}:dpri=(bez\i+bez\k)#####[69]E 1:dprj=(bez\j+bez\l)#####[69]E 1

    dj=(dtj-dprj) #####[68]D 8:di=(dti-dpri) #####[68]D 8:width=1.4
    qnorm.q=ddistance{0,0,di,dj}:di/qnorm:dj/qnorm

    mig=(pitch+1)/(roll+1)
    *p\i=(bez\i*mig+bez\k*(1-mig))
    *p\j=(bez\j*mig+bez\l*(1-mig))
    *p\k=!qhite{*p\i,*p\j}

    *p\dir=(angle{dj #####[68]D 6,di #####[68]D 6} #####[69]E 11+16) #####[66]B 31
  Next

  jox=0:FindPos{*p0,shcar}
  For ipl=0 To 3
    pl=ipl:*p=Pl(pl):*p\idle=#####[198]#####[2298]:*p\drop=#####[198]#####[2240]
    Gosub DrawShadow
  Next

  FindSprNum{shcar}
  For cnt.w=0 To 3
    *p=Pl(shcars(cnt)\car)
    #####[2405]#####[192] 4,*p\sprnum1,#####[1930](*p\sx-xx,-50,322),*p\sy-yy,cnt*2
  Next

  If bestpl.w<>-1
    *p=Pl(bestpl):pl=bestpl:quik.w=besttim.w
    #####[2274] signbmap:#####[2276] 0,0
    #####[3106]#####[96] "BEST"
    #####[2276] 0,1
    If quik<500
      If quik>0
        #####[3105]#####[64] " ",#####[1922](quik*0.02),".",(quik*0.2) #####[185]#####[1856] 10
      Else"
        #####[3105]#####[64] "--.-"
      #####[192]#####[2048]
    Else"
      If quik<3000
        #####[3105]#####[64] #####[1922](quik*0.02),".", (quik*0.2) #####[185]#####[1856] 10
      Else"
        #####[3105]#####[64] "SLOW"
      #####[192]#####[2048]
    #####[192]#####[2048]
    For signframe=0 To 3
  ;    signframe=(signframe+1)&3

      #####[2021]#####[192] 0,0,0,0,0
      dosign {ssign.l+signframe,dsign(signflip),signtable.l,signflip}
      Use, #####[2561] 23

      If signflip
        #####[2401] signshape+1,signx+signframe #####[68]D 4,signy+signframe #####[68]D 3
      Else"
        #####[2401] signshape,signx+signframe #####[68]D 4,signy-signframe #####[68]D 3
      #####[192]#####[2048]
    Next


    For pitch.w=0 To 39
      VWait7:*p=Pl(bestpl):pl=bestpl:#####[1315]
      *p\dir-1:Gosub DrawShadow
      For cnt.w=0 To 3
        *p=Pl(shcars(cnt)\car)
        #####[2405]#####[192] 4,*p\sprnum1,#####[1930](*p\sx-xx,-50,322),*p\sy-yy,cnt*2
      Next
    Next
  #####[192]#####[2048]
Return

.SetGo
  For pl=0 To 3
    *p=Pl(pl)
    *p\roll=2
    *p\pitch=2

    dist.w=pts3**p\lap+*p\curdt
    roll=0:pos.w=0:pitch.w=0
    For ipl=0 To 3
      If dist.w < (pts3*Pl(ipl)\lap+Pl(ipl)\curdt) Then! pos+1
;      If dist.w=(pts3*Pl(ipl)\lap+Pl(ipl)\curdt)
;        roll+1:If pl<ipl Then pitch+1
;      EndIf
    Next
    *p\swiv=(3-pos)*1.5
  Next
  dtf.q=pts-2

  For signframe=0 To 3
    #####[2021]#####[192] 0,0,0,0,0
    dosign {ssign.l+signframe,dsign(signflip),signtable.l,signflip}
    Use, #####[2561] 23

    If signflip
      #####[2401] signshape+1,signx+signframe #####[68]D 4,signy+signframe #####[68]D 3
    Else"
      #####[2401] signshape,signx+signframe #####[68]D 4,signy-signframe #####[68]D 3
    #####[192]#####[2048]
  Next

Return

.MovGo

  FindSprNum{shcar}
  For cnt.w=0 To 3
    *p=Pl(shcars(cnt)\car)
    #####[2405]#####[192] 4,*p\sprnum1,#####[1930](*p\sx-xx,-50,322),*p\sy-yy,cnt*2
  Next
  dtf+0.03
  If dtf>(pts3+2) Then! :hymax=-49:Gosub Static:Return

  For pl=0 To 3
    *p=Pl(pl)

    dtp=dtf +*p\swiv
    FindLo{dtp,condt,io.l}:dti =(bez\i+bez\k)#####[69]E 1:dtj =(bez\j+bez\l)#####[69]E 1:dtp-0.1
    FindLo{dtp,condt,io.l}:dpri=(bez\i+bez\k)#####[69]E 1:dprj=(bez\j+bez\l)#####[69]E 1

    dj=(dtj-dprj) #####[68]D 8:di=(dti-dpri) #####[68]D 8:width=1.4
    qnorm.q=ddistance{0,0,di,dj}:di/qnorm:dj/qnorm

    mig=(1+pl)/5
    *p\i=(bez\i*mig+bez\k*(1-mig))
    *p\j=(bez\j*mig+bez\l*(1-mig))
    *p\k=!qhite{*p\i,*p\j}
    *p\dir=(angle{dj #####[68]D 6,di #####[68]D 6} #####[69]E 11+16) #####[66]B 31
    *p\rot=0
  Next

  jox=0:FindPos{*p0,shcar}:toffee.w=1-toffee
  For ipl=0 To 3
    pl=ipl:*p=Pl(pl):*p\idle=#####[198]#####[2298]:*p\drop=#####[198]#####[2240]
    If toffee=(ipl #####[66]B 1) Then! Gosub DrawShadow
  Next
Return


Statement qprint{str.l,dest.l,src.l}
  #####[177]#####[1600] a4
  #####[126]~.l d0,a0
  #####[61]=.l #8,d1:#####[126]~.l d1,a1:#####[126]~.l (a1),d3 ;dest
  #####[61]=.l #8,d2:#####[126]~.l d2,a2:#####[126]~.l (a2),d4 ;src
  #####[64]@ #3,d3
goag
  #####[129]#####[64] #0,d0:#####[126]~.b (a0)+,d0:#####[176]#####[1582].b d0:#####[80]P more:#####[148]#####[698]:more
  #####[167]DDistance#65,d0:#####[81]Q cool1:#####[129]#####[67]#49,d0:cool1
  #####[92]\#49,d0:#####[79]O cool2:#####[129]#####[67]#49,d0:cool2
  #####[61]=.l d4,d0:#####[126]~.l d0,a2:#####[64]@ #1,d3:#####[126]~.l d3,a1
  #####[126]~ #15,d7
  kickme:#####[126]~.b (a2),(a1):#####[61]=.l #40,a1:#####[61]= #50,a2:#####[111]o d7,kickme
  #####[88]X goag
End Statement

.Credits
  If hymax<0
    hymax+1
  Else"
    hy.w=hy+1
    If hy>hymax.w
      hy=0:
      If level=16 ;racing..
        top$="ACCELERATE TO START    "
      Else"
        Read top$
      #####[192]#####[2048]
      If top$="-1" Then! #####[200]#####[2336] Cred:Read top$
      qprint{&top$,#####[184]#####[1824] #####[2561] (4),#####[184]#####[1824] #####[2561](24)}
      hymax.w=#####[3087]#####[520](top$) #####[68]D 3
    #####[192]#####[2048]
    Use, #####[2561] signbmap:#####[1601] hy,0,32,16,0,0,4
  #####[192]#####[2048]
  For signframe=0 To 3

    #####[2021]#####[192] 0,0,0,0,0
    dosign {ssign.l+signframe,dsign(signflip),signtable.l,signflip}
    Use, #####[2561] 23

    If signflip
      #####[2401] signshape+1,signx+signframe #####[68]D 4,signy+signframe #####[68]D 3
    Else"
      #####[2401] signshape,signx+signframe #####[68]D 4,signy-signframe #####[68]D 3
    #####[192]#####[2048]
  Next
  Use, #####[2561] 0
Return

Cred
;   Data.s "F\ \UP    "
;   Data.s "F^ ^UP    "
;   Data.s "F_ SPEED    "
;   Data.s "ESC TO QUIT    "
   Data.s "SKIDMARKS    "
   Data.s "DEVELOPED IN BLITZ^    "
   Data.s "THANX SIBS    "
   Data.s "[ \]]_ `abc    " ; (c) 1993 acid software
   Data.s "CD_^ VERSION COMING SOON    "
   Data.s "CODE BY ANDREW BLACKBOURN    "
   Data.s "ADDITIONAL CODE BY SIMON    "
   Data.s "GRAPHICS BY RODNEY SMITH    "
   Data.s "MUSIC BY ANTHONY MILAS    "
   Data.s "-1","-1"


.InitRace           ;level=15
  distort=0
  race.w=1

  done.w=#####[198]#####[2298]:esc.w=0
  #####[2274] 0:Use, #####[2561] 0:#####[2275] 1,0

  Select fast
    Case #####[198]#####[2298]: cmpacc=-0.6
    Case #####[197]#####[2240] :cmpacc=-1.0
  End Select
  dtp.q=((opp-1.5)*0.1)
  cmpacc+dtp

  dtp.q=pts3+0.5
  FindLo{dtp,condt,io.l}:dti =(bez\i+bez\k)#####[69]E 1:dtj =(bez\j+bez\l)#####[69]E 1:dtp-0.1
  FindLo{dtp,condt,io.l}:dpri=(bez\i+bez\k)#####[69]E 1:dprj=(bez\j+bez\l)#####[69]E 1

  dj=(dtj-dprj) #####[68]D 8:di=(dti-dpri) #####[68]D 8:width=1.4
  qnorm.q=ddistance{0,0,di,dj}:di/qnorm:dj/qnorm

  mig=0.25
  *p0\i=(bez\i*mig+bez\k*(1-mig))+(#####[1927]-0.5)*distort
  *p0\j=(bez\j*mig+bez\l*(1-mig))+(#####[1927]-0.5)*distort
  *p2\i=(bez\i*mig+bez\k*(1-mig))-2*di*width+(#####[1927]-0.5)*distort
  *p2\j=(bez\j*mig+bez\l*(1-mig))-2*dj*width+(#####[1927]-0.5)*distort

  mig=0.75
  *p1\i=(bez\i*mig+bez\k*(1-mig))+(#####[1927]-0.5)*distort
  *p1\j=(bez\j*mig+bez\l*(1-mig))+(#####[1927]-0.5)*distort
  *p3\i=(bez\i*mig+bez\k*(1-mig))-2*di*width+(#####[1927]-0.5)*distort
  *p3\j=(bez\j*mig+bez\l*(1-mig))-2*dj*width+(#####[1927]-0.5)*distort

CNIF 1=0
  *p0\i=dti+dj*width           +(#####[1927]-0.5)*distort
  *p1\i=dti-dj*width           +(#####[1927]-0.5)*distort
  *p2\i=dti+dj*width-2*di*width+(#####[1927]-0.5)*distort
  *p3\i=dti-dj*width-2*di*width+(#####[1927]-0.5)*distort
  *p0\j=dtj-di*width           +(#####[1927]-0.5)*distort
  *p1\j=dtj+di*width           +(#####[1927]-0.5)*distort
  *p2\j=dtj-di*width-2*dj*width+(#####[1927]-0.5)*distort
  *p3\j=dtj+di*width-2*dj*width+(#####[1927]-0.5)*distort
CEND

  hdif.w=16
  *p0\k=!qhite{*p0\i,*p0\j}+hdif:*p1\k=!qhite{*p1\i,*p1\j}+hdif
  *p2\k=!qhite{*p2\i,*p2\j}+hdif:*p3\k=!qhite{*p3\i,*p3\j}+hdif

  *p0\dir=(angle{dj #####[68]D 6,di #####[68]D 6} #####[69]E 11+16) #####[66]B 31
  *p1\dir=*p0\dir:*p2\dir=*p0\dir:*p3\dir=*p0\dir
  For pl=0 To 3:*p=Pl(pl):Gosub SetStartCar:Next
  ScrlSlc{*tp,*bp}:FindPos{*p0,shcar}
  For pl=0 To 3:*p=Pl(pl):Gosub SetStartCar:Next
  pl=0

  besttim=$7fff:bestpl.w=-1
  #####[202]#####[2400] *p

  .ContGame

  If connect Then! Gosub SetMod    :; n.b. keep int 5 going..

  If snd Then! ClrInt1 5

;  For i.w=17 To 31:Poke.w i ASL 1+$dff180,0:Next:; reset the blacks...
  base.w=0:If master=1 Then! base.w=2:*tp=Pl(base)
  If plyrs>1 Then! *bp=Pl(base+1) Else" *bp=*tp

  If *tp<>*bp
    chat.w=13:narrow.w=48
    #####[2406]#####[224] 2,10:#####[2406]#####[224] 3,10:#####[2403]#####[128] 2,chat,3
  Else"
    chat.w=14:narrow.w=48
    #####[2406]#####[224] 4,10:#####[2403]#####[128] 4,chat
  #####[192]#####[2048]

  !SChat:#####[2406]#####[224] chat,7
  #####[2405]#####[192] chat,\sprnum1,-64,0,0
  #####[2405]#####[192] chat,\sprnum1,-64,0,2
  #####[2405]#####[192] chat,\sprnum1,-64,0,4
  #####[2405]#####[192] chat,\sprnum1,-64,0,6

  jox=0:For ipl=0 To 3:pl=ipl:*p=Pl(pl):Gosub DrawShadow:Next
  fps.w=0:ipl=3:*cp0=Pl(ipl)
  pl=ipl:esc.w=0:done=#####[198]#####[2298]:Gosub PlaceSprites

  For pl.w=0 To 3
    Pl(pl)\control=6 ;computer - change me for serial
  Next

  Select master
    Case 0:base.w=0
    Case 1:base.w=2
    Case 2:base.w=0
  End Select

  If plyrs>0 Then! Pl(base  )\control=0
  If plyrs>1 Then! Pl(base+1)\control=0

  Select master
    Case 0:base.w=0:oplyrs=0
    Case 1:base.w=0
    Case 2:base.w=2
  End Select

  If oplyrs>0 Then! Pl(base  )\control=5
  If oplyrs>1 Then! Pl(base+1)\control=5

  For pl=0 To 3
    *p=Pl(pl):*p\cdn=130

    If *p\control=6
      *p\cdn=128
    Else"
      If *p\control<>5 Then! *p\control=0
    #####[192]#####[2048]
  Next


  If snd Then! #####[1861] 15,0,0,0,0
  ipl=3 ;hmmm..
  level=16 ;go race.
  hoppy.w=500 ;damn
Return

Macro DrawSkid
  If *p`1\traction > 0.08
    If #####[137]#####[320] *p`1\inair
      #####[2401] 15,#####[1930](*sq`1\v0x+*p`1\sx-32,0,1021),#####[1930](*sq`1\v0y+*p`1\sy,0,509)
      #####[2401] 15,#####[1930](*sq`1\v1x+*p`1\sx-32,0,1021),#####[1930](*sq`1\v1y+*p`1\sy,0,509)
    #####[192]#####[2048]
  End If
End Macro



.
.Race
hymax=0:#####[200]#####[2336] Cred
#####[187]#####[1888]
  CNIF #bars
    #####[126]~.w #$0f00,$dff180:For silly.w=0 To 2:Next:#####[126]~.w #$0444,$dff180
  CEND
  VWait7

  ipl.w=(ipl+1) #####[66]B 3
  *cp0=*cp0\op1car:*cp2=*cp0\op2car

  pl=ipl:*p=*cp0:fps.w+1
  Gosub PlaceSprites

  If \cdn<101
    \cdn=\cdn-1
    If \cdn=0 Then! \idle=#####[197]#####[2266]:\drop=#####[197]#####[2266]:\pcst=0
  Else"
    If \cdn=128
      \drop=#####[197]#####[2208]
      If (*p0\drop) #####[66]B (*p1\drop) #####[66]B (*p2\drop) #####[66]B (*p3\drop)
        If hoppy>499 Then! hoppy.w=128*3+40
;        *p0\cdn=49
;        *p1\cdn=49
;        *p2\cdn=49
;        *p3\cdn=49
      #####[192]#####[2048]
    #####[192]#####[2048]
    If \cdn=129 Then! \drop=#####[197]#####[2266]:\idle=#####[197]#####[2266]:\cdn=1
  #####[192]#####[2048]

  If hoppy=500 Then! Gosub Credits

  If (hoppy>-50) #####[66]B (hoppy<499)
    hoppy-1
    If (hoppy #####[66]B 127)=25
      dum.w=hoppy #####[69]E 7
      Select dum
        Case 0:top$=" GO "
        Case 1:top$="lmno"
        Case 2:top$="hijk"
        Case 3:top$="defg"
      End Select
      qprint{&top$,#####[184]#####[1824] #####[2561] (4),#####[184]#####[1824] #####[2561](24)}
      Use, #####[2561] signbmap
      #####[1601] 32,0,32,16,0,0,4
      If dum=3 Then! #####[2881].w (#####[184]#####[1824] #####[1860](4) +4) , sndper #####[68]D 1
      If dum=0
        #####[2881].w (#####[184]#####[1824] #####[1860](4) +4) , sndper
        *p0\idle=#####[197]#####[2266]:*p1\idle=#####[197]#####[2266]:*p2\idle=#####[197]#####[2266]:*p3\idle=#####[197]#####[2208]
        *p0\drop=#####[197]#####[2266]:*p1\drop=#####[197]#####[2266]:*p2\drop=#####[197]#####[2266]:*p3\drop=#####[197]#####[2208]
        *p0\cdn=-50:*p1\cdn=-50:*p2\cdn=-50:*p3\cdn=-50
      #####[192]#####[2048]
      If snd Then! #####[1860] 4,6,64,64
    #####[192]#####[2048]

    If (hoppy #####[66]B 127)=0
      dum.w=(hoppy #####[69]E 7)
      If dum=0
        If snd Then! #####[1863] 3,9
      Else"
        If snd Then! #####[1861] 6,8,8
        hoppy=((hoppy) #####[66]B $380)-128 +40
      #####[192]#####[2048]
    #####[192]#####[2048]
    If hoppy=-48
      If snd Then! #####[1863] 13,2,64,64
      #####[2881].w $dff0b6,sldpitch.w
    #####[192]#####[2048]
  #####[192]#####[2048]

  If connect  :; modem..
    tv.w=DoChat{ipl} #####[68]D 2
    *p=*cp2:Gosub GetY:tv=(tv+joy) #####[68]D 2
            Gosub GetX:tv=(tv+jox) #####[68]D 2
    *p=*cp0:Gosub GetX:tv=(tv+jox)
  Else"        :; local
    tv.w=0;DoChat{ipl}
    *p=*cp0:Gosub GetY:in.w=( joy) #####[68]D 2
            Gosub GetX:in=(in+jox) #####[68]D 2
    *p=*cp2:Gosub GetX:in=(in+jox)
  #####[192]#####[2048]

  If cslide<>0
    xxoff+cslide
    If xxoff>=656 Then! xxoff-656
    If xxoff<   0 Then! xxoff+656
    If (xxoff #####[66]B $fff8)=xxoff Then! cslide=0
    If chat>-1 Then! !SChat
  #####[192]#####[2048]

  If connect
    writegam{tv}

    cop.w=tim.w+20
    CNIF #bars:#####[126]~ #$0f0,$dff180:CEND
    While blast=bfirst
      If cop<tim Then! bfirst=(bfirst+1) #####[66]B #maxleng:done=#####[197]#####[2266]:connect=#####[198]#####[2240]
    #####[193]#####[2080]
    CNIF #bars:#####[126]~ #$000,$dff180:CEND

    blast.w=(blast+1) #####[66]B #maxleng
    in.w=las(blast):out.w=cur(blast)

    Ticker{}
    rrx.w #####[69]E 2
    rrx+(in #####[66]B $C0)
    If ipl=1
      If rrx.w<>0 Then! ProcChat{rrx}
      If (rrx=$ff) Then! done=#####[197]#####[2266]:level=14
      If prequit=1 Then! done=#####[197]#####[2266]:prequit=0:level=14
      If prequit=2 Then! prequit=1
      rrx=0
    #####[192]#####[2048]

    in #####[138]#####[352] out
  Else"
    rrx.w #####[69]E 2
    rrx+(tv #####[68]D 6)
    If ipl=3
      If rrx.w<>0 Then! ProcChat{rrx}
      rrx=0
    #####[192]#####[2048]

    If #####[1570]($45) #####[138]#####[352] #####[1570]($58) #####[138]#####[352] (ReadJoy{3}=$20000)Then! done=#####[197]#####[2208]
  #####[192]#####[2048]
  pl=(ipl+2)&3:*p=*cp2:jox=(in #####[66]B 3)-1:in #####[69]E 2:Gosub DrawShadow
  pl= ipl     :*p=*cp0:jox=(in #####[66]B 3)-1:in #####[69]E 2:Gosub DrawShadow
                       joy=(in #####[66]B 3)-1
        If joy=2
          If \control=7 Then! \cdn=1:joy=0 Else" \cdn=128:joy=0

        #####[192]#####[2048]
        Gosub MoveIndiv

  Use, #####[2561] 0
  !DrawSkid{0}
  !DrawSkid{1}
  !DrawSkid{2}
  !DrawSkid{3}
  If snd
    If ((*tp\traction>0.12) #####[66]B #####[137]#####[320] *tp\inair) #####[138]#####[352] ((*bp\traction>0.12) #####[66]B #####[137]#####[320] *bp\inair)
      If vol<20 Then! vol+3
    #####[192]#####[2048]
    vol-2:If vol<0 Then! vol=0
    If (hoppy<(-45)) #####[138]#####[352] (race.w=0) Then! #####[1861] 2,vol
  #####[192]#####[2048]

  CNIF #collisions
    If race>0 Then! Gosub Crash
  CEND

;  !Wave

  #####[202]#####[2400] *p
  For pl=0 To 3  ; if in a collision, \movi=\movj=0
    *p=Pl(pl)
    *p\rev+*p\nrev

    Select \side
      Case 0:impact.w=#####[198]#####[2240]
      Case 1:impact.w=(\i+\headi) >= \swai
      Case 2:impact.w=(\i+\headi) <= \swai
    End Select
    If #####[137]#####[320] impact
      Select \top
        Case 3:impact.w=(\j+\headj) >= \swaj
        Case 4:impact.w=(\j+\headj) <= \swaj
      End Select
    #####[192]#####[2048]
    If impact

      \i=\swai:\j=\swaj
      fac=(\headi*\difj-\headj*\difi)#####[68]D 1 ; do the wild vel
      \headi-(fac*\difj)
      \headj+(fac*\difi)

;      \headi=\headi; ASR 1;+(\difj ASR 12)
;      \headj=\headj; ASR 1;-(\difi ASR 12)

      If (#####[1928](\headi)>0.03) #####[138]#####[352] (#####[1928](\headj)>0.03)  ;so bounce ain't excessive..
        ro=\headi #####[68]D 7:ger=\headj #####[68]D 7
        blah=rdistance{ro,ger} #####[68]D 3
        If blah<1 Then! \headi*blah:\headj*blah
      Else"
        \headi= \difj #####[69]E 5
        \headj=-\difi #####[69]E 5
       #####[192]#####[2048]

      blah=qsin(\swiv)  ;do the wild spin after bounce..
      \dir-blah :\head #####[66]B 31
      \rot-blah ;ASL 1

      \side=0:\top=0:\swai=-1  ;reset so ain't happen 'gin
      \swiv=0:\rev*\penalty
    #####[192]#####[2048]
  Next

  MoveAll{*p0,shcar}:ScrlSlc{*tp,*bp}

  If snd
    dtp.q=(*tp\headi+*tp\headj)*60

    #####[2881].w $dff0a6,#####[1930](520-#####[1928](dtp*10),110,520);*tp\rev**tp\noise)
    #####[2881].w $dff0a8,#####[1930](30+#####[1928](dtp*200),30,64);60;20+QAbs(*tp\rev ASL 5)

    dtp.q=(*bp\headi+*bp\headj)*60

    #####[2881].w $dff0d6,#####[1930](520-#####[1928](dtp*10),110,520);*tp\rev**tp\noise)
    #####[2881].w $dff0d8,#####[1930](30+#####[1928](dtp*200),30,64);60;20+QAbs(*tp\rev ASL 5)

;    Poke.w $dff0d6,520-QAbs(*bp\rev**bp\noise)
;    Poke.w $dff0d8, 20+QAbs(*bp\rev ASL 5)
  #####[192]#####[2048]

  signframe=(signframe+1)&3
  dosign {ssign.l+signframe,dsign(signflip),signtable.l,signflip}
  Use, #####[2561] 23
  If signflip
    #####[2401] signshape+1,signx+signframe #####[68]D 4,signy+signframe #####[68]D 3
  Else"
    #####[2401] signshape,signx+signframe #####[68]D 4,signy-signframe #####[68]D 3
  #####[192]#####[2048]
  Use, #####[2561] 0

#####[188]#####[1952] done
#####[1861] 15,0,0,0,0
If connect Then! ClrInt1 5
Gosub DispTime
level=14
Return

Macro ShSp2
  *op=Pl(shcars(`1)\car)
  #####[2405]#####[192] 2,*op\sprnum1,#####[1930](*op\sx-*tp\dx,-50,322),*op\sy-*tp\dy,`2
  #####[2405]#####[192] 3,*op\sprnum1,#####[1930](*op\sx-*bp\dx,-50,322),*op\sy-*bp\dy,`2
End Macro

Macro ShSpr
  *op=Pl(shcars(`1)\car)
  #####[2405]#####[192] 4,*op\sprnum1,#####[1930](*op\sx-*tp\dx,-50,322),*op\sy-*tp\dy,`2
End Macro

PlaceSprites
  FindSprNum{shcar}
  If *tp<>*bp
    #####[2404]#####[160] 2,0,*tp\dx,*tp\dy
    #####[2404]#####[160] 3,0,*bp\dx,*bp\dy
    !ShSp2{0,0}:!ShSp2{1,2}:!ShSp2{2,4}:!ShSp2{3,6}
  Else"
    #####[2404]#####[160] 4,0,*tp\dx,*tp\dy
    !ShSpr{0,0}:!ShSpr{1,2}:!ShSpr{2,4}:!ShSpr{3,6}
  #####[192]#####[2048]
Return

.DispTime
  For pl=0 To 3
    *p=Pl(pl)
    pitch.w=0:dist.w=pts3**p\lap+*p\curdt
    roll=0
    For ipl=0 To 3
      If dist.w<(pts3*Pl(ipl)\lap+Pl(ipl)\curdt) Then! pitch+1
      If dist.w=(pts3*Pl(ipl)\lap+Pl(ipl)\curdt) Then! roll+1
    Next
    best(racemap.w)\pos[pl]=pitch
    *p\score+(3-pitch)

    time.w=$7fff
    For j=1 To 9
      btime.w=*p\ftime[j]-*p\stime[j]
      If (btime<>0) #####[66]B (time>btime)
        time=btime
      #####[192]#####[2048]
    Next
    If time=$7fff Then! time.w=0   :;1:23.4

    best(racemap)\tim[pl]=time

  Next:pl=0
Return


#mung=#####[197]#####[2267]; ff
#clip=#####[197]#####[2267]; ff

.MoveIndiv

  #####[202]#####[2400] *p
  If \control=6 Then! comp=#####[1934]:Else":comp=#####[1935]  ;computer override!

  If \idle
;    If Joyb(1)=0 Then Stop
    \movi=0:\movj=0

  CNIF #mung
    *par\fi=\i:*par\fj=\j
    *par\i =\i:*par\j =\j
    dt=\curdt
    *e=edge(dt):result.w=TestNew{*e,*par}:*g.xtra=grot(dt+1)
    If result.w>0
      If (result&5)>0
        If (*g\cai-*par\fi)**g\swivj > (*g\caj-*par\fj)**g\swivi
          result&14
        Else"
          result&11
        #####[192]#####[2048]
      #####[192]#####[2048]
      If (result&10)>0
        If (*g\cai-*par\fi)**g\swivj > (*g\caj-*par\fj)**g\swivi
          result&13
        Else"
          result&7
        #####[192]#####[2048]
      #####[192]#####[2048]

      If result>0
        Damage{result,*e,*par}
        \i=*par\i:\j=*par\j:\headi=0:\headj=0
      #####[192]#####[2048]
    #####[192]#####[2048]
    ;mung walls (fin)
  CEND

    If \inair
      \nrev=0
    Else"
      If comp
        plus.w=1
        If #####[1928](*p0\vel)>0.20 Then! plus=2
        If #####[1928](*p0\vel)>0.30 Then! plus=3
;        If QAbs(*p0\vel)>0.07 Then plus=3
        *g=grot(\curdt+plus)

  ;      \movi=0:\movj=0:Return
  ;      ni=\i-*g\centi
  ;      nj=\j-*g\centj
  ;      dum=\qc*ni+\qs*nj
  ;      \jox=Sgn(dum) ASR 1
;        dsti=

        ni=\i-*g\desti
        nj=\j-*g\destj
        dum=\qc*nj-\qs*ni
        \jox=#####[1923](dum)
        dum=\qs*nj+\qc*ni
        If dum>0 Then! joy=cmpacc:Else" joy=-0.2

;        joy=-0.1
      #####[192]#####[2048]

      \vel=\headi*\qc+\headj*\qs

                  ;  *****   HILL   ******
      tx=\i-\qc:tz=\j-\qs
      If \vel<0
        joy+(\headk #####[69]E 1)  ;hmmmm
      Else"
        joy-(\headk #####[69]E 1)  ;hmmmm
      #####[192]#####[2048]
;      joy+(!qhite{tx,tz}-\k) ASR 3
      \nrev=(\rev+joy*\accel)*(\engfric)

      \movi+(\qc*\nrev)-\headi
      \movj+(\qs*\nrev)-\headj
      \nrev=(\nrev-\rev) #####[69]E 2

      \traction=#####[1928](\qc*\movj-\qs*\movi)

      \movi*\retard
      \movj*\retard
    #####[192]#####[2048]

    ddi1=\headi #####[68]D 2+(\movi #####[68]D 2+ \movi) #####[68]D 1
    ddj1=\headj #####[68]D 2+(\movj #####[68]D 2+ \movj) #####[68]D 1
    proi=\i+ddi1
    proj=\j+ddj1

    *g=grot(\curdt)
    ni=proi-*g\midi:nj=proj-*g\midj
    If *g\dirj*ni < *g\diri*nj
      \curdt-1:If (\curdt<    2) Then! \curdt+pts1       :Gosub DrawLaps:\lap-1
    Else"
      *g=grot(\curdt+1):ni=proi-*g\midi:nj=proj-*g\midj
      If *g\dirj*ni > *g\diri*nj
        \curdt+1:If (\curdt>pts2) Then! \curdt-pts1:\lap+1:Gosub DrawLaps
        If (\curdt=pts1) #####[66]B (race.w=0)
          If (*p=*p0); AND (*p\lap>1)
            If *p1\cdn>100
              *p1\cdn=1
              hoppy=-51
            Else"
              If *p2\cdn>100
                *p2\cdn=1
              Else"
                If *p3\cdn>100 Then! *p3\cdn=1
              #####[192]#####[2048]
            #####[192]#####[2048]
          #####[192]#####[2048]
        #####[192]#####[2048]
      #####[192]#####[2048]
    #####[192]#####[2048]

CNIF #clip
    test\boom=#####[198]#####[2240]
    ddi1=-ddi1
    ddj1=-ddj1
    test\i =*p\i:test\j =*p\j
    test\fi=proi:test\fj=proj
    test\di=ddi1:test\dj=ddj1

    \side=0:\top=0
    If (#####[1928](ddi1) < 0.02) #####[66]B (#####[1928](ddj1) < 0.02) ;goslo
      \headi=0:\headj=0:\movi=0:\movj=0
      ddi1=0:ddj1=0
    Else"
      ro=ddi1 #####[68]D 6:ger=ddj1 #####[68]D 6
      qfac.q=rdistance{ro,ger} #####[68]D 7
      test\diri=ddi1*qfac
      test\dirj=ddj1*qfac

      dt=\curdt:              ;*g=grot(dt)
      *e=edge(dt)
      result.w=TestNew{*e,*par}
      If result<>0
        *par\boom=#####[198]#####[2240]
        bounce{result,*e,*par}
        If test\boom
          \swai=test\fi
          \swaj=test\fj

          \headi=-ddi1 #####[69]E 2:\movi=0
          \headj=-ddj1 #####[69]E 2:\movj=0


          \swiv=((\dir-*par\norm)*2) #####[66]B 31

          \difi=qcos(*par\norm)
          \difj=qsin(*par\norm)  ;Hooway!

          If ddi1<0 Then! \side=1 Else" \side=2
          If ddj1<0 Then! \top=3 Else" \top=4
        #####[192]#####[2048]
      #####[192]#####[2048]
    #####[192]#####[2048]
CEND

  #####[192]#####[2048]
  \vel=\headi*\qc+\headj*\qs

Return

CNIF #collisions
CNIF #errs:#####[211]#####[2714]:CEND
; cp\mti=(*p\headi-*op\headi),(*p\headj-*op\headj)
  Function.w fastcollide{p.l,op.l,sha.l}
    Macro a SizeOf/.car\`1(a0):End Macro  ;me
    Macro b SizeOf/.car\`1(a1):End Macro  ;him
    ;
    #####[177]#####[1600] a4:#####[126]~.l d0,a0:#####[126]~.l d1,a1:#####[126]~.l d2,a2
    #####[130]#####[110].l !a{headi},d5-d6         ; find TOP dti,dtj..
    #####[167]ScrlSlc.l !b{headi},d5:#####[69]E.l #8,d5
    #####[167]ScrlSlc.l !b{headj},d6:#####[69]E.l #8,d6    ;relative velocity in d5,d6
    #####[131]#####[128] d5,d5:#####[131]#####[128] d6,d6:#####[61]=.l d5,d6
    #####[69]E.l #8,d6:#####[69]E.l #1,d6:#####[61]=.w #20,d6        ;d6=relative speed
    #####[129]#####[67]#0,d5:#####[126]~.w d6,d5:#####[172]#####[1440] d5:#####[69]E.l #6,d5 ;d5=rot delta

    #####[130]#####[110].l !a{i},d0-d1:#####[167]ScrlSlc.l !b{i},d0:#####[167]ScrlSlc.l !b{j},d1
    #####[130]#####[110].l d0-d1,dti                            ;relative position

  f0:#####[89]Y docorner:#####[126]~ d0,crashed:#####[72]H f1
     #####[61]=.l d5,!a{rot}:#####[61]=.l d5,!a{dir}:#####[61]=.l d5,!a{dir}
  f1:#####[89]Y docorner:#####[176]#####[1568] d0:#####[72]H f2:#####[126]~ d0,crashed
     #####[167]ScrlSlc.l d5,!a{rot}:#####[167]ScrlSlc.l d5,!a{dir}:#####[167]ScrlSlc.l d5,!a{dir}
  f2:#####[89]Y docorner:#####[176]#####[1568] d0:#####[72]H f3 :#####[126]~ d0,crashed
     #####[61]=.l d5,!a{rot}:#####[61]=.l d5,!a{dir}:#####[61]=.l d5,!a{dir}
  f3:#####[89]Y docorner:#####[176]#####[1568] d0:#####[72]H f4:#####[126]~ d0,crashed
     #####[167]ScrlSlc.l d5,!a{rot}:#####[167]ScrlSlc.l d5,!a{dir}:#####[167]ScrlSlc.l d5,!a{dir}

  f4:#####[126]~ d6,d0:#####[69]E.w #1,d0:#####[61]= d6,d6:#####[61]= d0,d6
     #####[89]Y docorner:#####[138]#####[352] d0,crashed          ;+d6*2.5 for side bounce
     #####[89]Y docorner:#####[138]#####[352] crashed(pc),d0:#####[148]#####[640]

  crashed:Dc%.w 0
  dti:Dc%.l 0          ;relative position of 2 cars
  dtj:Dc%.l 0

  docorner: ;don't touch d5 & d6
    ;
    #####[130]#####[110].l (a2)+,d0-d1:#####[61]=.l dti(pc),d0:#####[61]=.l dtj(pc),d1 ;dist corner
    #####[130]#####[110].l !b{qc},d2-d3                                  ;his dir
    ;
    #####[69]E.l #6,d0:#####[69]E.l #6,d1:#####[69]E.l #6,d2:#####[69]E.l #6,d3
    ;
    #####[126]~ d2,d4:#####[126]~ d3,d7  ;his direction
    ;
    #####[131]#####[128] d1,d4:#####[131]#####[128] d0,d7:#####[167]ScrlSlc.l d4,d7
             #####[92]\.l # $60000,d7:#####[81]Q missed
             #####[92]\.l #-$60000,d7:#####[79]O missed
    #####[131]#####[128] d2,d0:#####[131]#####[128] d3,d1:#####[61]=.l d1,d0
             #####[92]\.l # $c0000,d0:#####[81]Q missed
             #####[92]\.l #-$c0000,d0:#####[79]O missed

  ;move cars
    #####[130]#####[110].l -8(a2),d0-d1:#####[69]E.l#8,d0:#####[69]E.l#8,d1    ;mom*pti and ptj
    #####[131]#####[128] d6,d0:#####[131]#####[128] d6,d1

    #####[61]=.l d0,!b{headi}:#####[61]=.l d1,!b{headj}
    #####[167]ScrlSlc.l d0,!a{headi}:#####[167]ScrlSlc.l d1,!a{headj}
           #####[126]~ #-1,d0:#####[148]#####[640]
    missed:#####[126]~ #0,d0:#####[148]#####[640]

  End Function

CNIF #errs:#####[210]#####[2682]: CEND

  Crash
    *sha=#####[1222](*cp0\bnk)+*cp0\head*SizeOf/.ShadPt
    crash.w=0
    For opl.w=0 To 3
      If opl<>ipl
        *rp=Pl(opl.w)
        If #####[1673](*cp0\i,*cp0\j,1,1,*rp\i,*rp\j,1,1)
          If #####[1928](*cp0\k-*rp\k)<17
            crash+fastcollide{*cp0,*rp,*sha}
          #####[192]#####[2048]
        #####[192]#####[2048]
      #####[192]#####[2048]
    Next
    If crash
      CNIF #bars:#####[126]~ #$f00,$dff180:CEND
      If snd Then! #####[1860] cnoise,4,64
      cnoise+1
      If cnoise=13 Then! cnoise=10
    #####[192]#####[2048]
  Return

CEND

.DrawLaps

  If (laps<*p\lap) #####[66]B (race.w>0) Then! done=#####[197]#####[2266]:esc=3

  roll.w=#####[1930](*p\lap,1,10)
  If roll>1
    If *p\ftime[roll-1]=*p\stime[roll-1] Then! *p\ftime[roll-1]=fps
  End If


  If (*p\control<6) #####[66]B (*p\lap>1)
    quik.w=fps-*p\stime[roll-1]
    If quik<besttim Then! besttim=quik:bestpl=ipl
    mph.q=mapdist.w*3.6/quik*50
    #####[2274] signbmap:#####[2276] 0,0
    #####[3106]#####[96] #####[1922](mph),"  "
    #####[2276] 0,1
    If quik<500
      If quik>0
        #####[3105]#####[64] " ",#####[1922](quik*0.02),".",(quik*0.2) #####[185]#####[1856] 10
      Else"
        #####[3105]#####[64] "--.-"
      #####[192]#####[2048]
    Else"
      If quik<3000
        #####[3105]#####[64] #####[1922](quik*0.02),".", (quik*0.2) #####[185]#####[1856] 10
      Else"
        #####[3105]#####[64] "SLOW"
      #####[192]#####[2048]
    #####[192]#####[2048]
    #####[2274] 0
  #####[192]#####[2048]

;  If roll<10
    roll.w=#####[1930](roll,1,9)
    *p\stime[roll]=fps
    *p\ftime[roll]=fps
;  End If

Return

Macro FindScr
  *s\v`1x=*sha\rx`1
  tx=\i+*sha\ri`1
  tz=\j+*sha\rj`1
  *s\v`1y=*sha\ry`1-!qhite{tx,tz}+oldk
End Macro



#####[202]#####[2400] *p

.GetX
;  Stop
  Select \control         ;get moves for current frame
    Case 0:jox=1
    Case 1:jox=1+#####[1570]($4f)-#####[1570]($4e)+#####[3041](1)    ;keys
    Case 2:jox=1+#####[1570]($64)-#####[1570]($66)    ;wasd
;    Case 3:jox=1+Joyx(1)
    Case 4:jox=1+#####[3041](0)
    Case 5:jox=0 ; serial port!
    Case 6:jox=0
    Case 7:*p\pcst=(*p\pcst+1)&4095:jox=pracbuf(*p\pcst)
  End Select
  If \cdn>101 Then! jox=1
  jox=#####[1930](jox,0,2)
;  If \control<5 Then *p\pcst=(*p\pcst+1)&4095:pracbuf(*p\pcst)=jox
Return

.GetY
  Select \control         ;get moves for current frame
    Case 0     ; undecided...
      If *p=*tp
        If #####[3044](1) Then! \control=1:joy=8        ;\cdn=128
        If #####[1570]($4c) Then! \control=1:joy=8  ;\cdn=128
      Else"
        If *p=*bp
          If #####[3044](0) Then! \control=4:joy=8         ;\cdn=128
          If #####[1570]($63) Then! \control=2:joy=8   ;\cdn=128
        #####[192]#####[2048]
      #####[192]#####[2048]

    Case 1:joy=1+#####[1570]($4c)-#####[1570]($4d)+#####[3042](1)-#####[3044](1):  ;keys
    Case 2:joy=1+#####[1570]($63)-#####[1570]($60): ;wasd
;    Case 3:If Joyb(1) Then joy=0 Else joy=1+Joyy(1)
    Case 4:If #####[3044](0) Then! joy=0 Else" joy=1+#####[3042](0)
    Case 5:joy=0  ; serial port
    Case 6:joy=0
    Case 7:*p\pcst=(*p\pcst+1)&4095:joy=pracbuf(*p\pcst)
  End Select

  If joy<>8
    joy=#####[1930](joy,0,2)
  Else"
    joy=3 ; I'm ready to start
  #####[192]#####[2048]

  If \control<5 Then! *p\pcst=(*p\pcst+1)&4095:pracbuf(*p\pcst)=joy
Return

.DrawShadow
  If \inair
    \rot=#####[1930](\rot,-1,1)
  Else"
    If \idle
      If \control=6
        \rot=(\rot+*p\jox*\steering) #####[69]E 1
      Else"
        \rot=(\rot+   jox*\steering) #####[69]E 1
      #####[192]#####[2048]
    #####[192]#####[2048]
  #####[192]#####[2048]

  oldk=\k
  If \drop
    \headk-0.4:newk=\k+\headk+\headk
    tx=\i+\headi+\headi:tz=\j+\headj+\headj
    soonk=!qhite{tx,tz}
    If newk >soonk
      \inair=#####[197]#####[2266]:\traction=1
      Select (#####[2882].w($dff006) #####[66]B 7)=0  ;quick random..
        Case 0:\pitch=#####[1930](\pitch+\mpitch,0,4)
        Case 1:\roll =#####[1930](\roll +\mroll ,0,4)
      End Select
    Else"
      If \inair
        \inair=#####[198]#####[2240]
        tempk=!qhite{\i,\j}
        \headk=(\headk+(tempk-soonk) #####[68]D 1)*\bounce-0.2
        If (\k-oldk+\headk+\headk)<0 Then! \headk=(soonk-oldk)#####[69]E 1
      Else"
        \headk=(soonk-oldk)#####[69]E 1
      #####[192]#####[2048]
      ntz=tz+0.2
      pitch.w=#####[1930]((!qhite{tx,ntz}-soonk)+2.5,0,4)
      \mpitch=#####[1923](pitch-\pitch):\pitch+\mpitch

      tx-0.2
      roll.w=#####[1930]((!qhite{tx,tz}-soonk)+2.5,0,4)
      \mroll=#####[1923](roll-\roll):\roll+\mroll

    #####[192]#####[2048]
  #####[192]#####[2048]

  #####[201]#####[2368] \spr1,\spr2:#####[201]#####[2368] \sprnum1,\sprnum2
  \dir+\rot:\head #####[66]B 31  :;  NB! \head.w=upper word of \dir.q
  \qc=qcos(\head):\qs=qsin(\head)

  \fr=\roll*160+\pitch #####[68]D 5+\head

  *s=\q
  *sha=#####[1222](0)+SizeOf/.ShadPt*\head
  !FindScr{0}:!FindScr{1}:!FindScr{2}:!FindScr{3}

;  DoQuad{*s,\spr1,pat.l}
;  car.l=BankLoc(0)+#goff+\fr ASL 8
;  ReDoSprite{car.l,\spr1}

    DoAGAQuad{*s,\spr1}
    car.l=#####[1222](0)+#goff+#####[2882].l(#####[1222](0)+#goff+\fr #####[68]D 2)
    ReDoAGASprite{\spr1,car,pl}

Return

;Macro FindScr2
;  *s\v`1x=*sha\rx`1:*s\v`1y=*sha\ry`1
;End Macro

.QuickRender
  #####[202]#####[2400] *p
  For pl=0 To 3
    *p=Pl(pl)
    \head=24 :\roll=2:\pitch=2
    #####[201]#####[2368] \spr1,\spr2:#####[201]#####[2368] \sprnum1,\sprnum2
    \qc=qcos(\head):\qs=qsin(\head)
    \fr=\roll*160+\pitch #####[68]D 5+\head

    *s=\q:*sha=#####[1222](0)+SizeOf/.ShadPt*\head
    *s\v0x=*sha\rx0:*s\v0y=*sha\ry0
    *s\v1x=*sha\rx1:*s\v1y=*sha\ry1
    *s\v2x=*sha\rx2:*s\v2y=*sha\ry2
    *s\v3x=*sha\rx3:*s\v3y=*sha\ry3

    DoAGAQuad{*s,\spr1}
    car.l=#####[1222](0)+#goff+#####[2882].l(#####[1222](0)+#goff+\fr #####[68]D 2)
;    car.l=BankLoc(0)+#goff+Peek.l(\spdat+\fr ASL 2)
    ReDoAGASprite{\spr1,car,pl}
;    DoQuad{*s,\spr1,pat.l}
;    car.l=BankLoc(0)+#goff+\fr ASL 8
;    ReDoSprite{car.l,\spr1}
  Next
Return

.InstSer
  ClrInt1 11:SetInt0 11
    CNIF #bars:#####[126]~#$f0f,$dff180:CEND
    sr.w=#####[2882].b(#serdatr+1):If sr<0 Then! sr=256+sr
    bfirst.w=(bfirst+1) #####[66]B #maxleng
    las(bfirst)=sr
  End SetInt0  ;read interupt
  bfirst.w=blast.w:bword.w=bfirst.w       :;<does rap thing with hands
  sr=256
Return

SetMod
  Gosub InstSer:SetInt0 5:tim.w+1:End SetInt0      :; timeout for modem!
  cop.w=tim.w+120
  #####[187]#####[1888]
    VWait7:writeser{$3f}
    If cop<tim Then! sr.w=$3f:done=#####[197]#####[2208]
  #####[188]#####[1952] (sr=$70) #####[138]#####[352] (sr=$3f)
  If #####[137]#####[320] done
    VWait7 5:tv=$70:writeser{tv}:cop.w=tim.w+60
    #####[187]#####[1888]
      If cop<tim Then! sr=$70:done=#####[197]#####[2208]
    #####[188]#####[1952] sr=$70
  #####[192]#####[2048]
  If done Then! connect=#####[198]#####[2298]:twin=#####[198]#####[2298]:ClrInt1 5:done=#####[197]#####[2208]

  VWait7 5:master.w=0
  While master=0
    trx.w=#####[1927](50)+10:writeser{trx}:VWait7 10:rrx=sr
    If rrx<trx Then! master=1
    If rrx>trx Then! master=2
  #####[193]#####[2080]


  bfirst.w=blast.w:bword.w=bfirst.w       :;<does rap thing with hands
  trx.w=0:rrx=0

  VWait7 15:writegam{$15}:VWait7:writegam{$15}
Return

HandShake
  sr=256
  For cnt= 1 To 4
    VWait7:writeser{cnt}
  Next
  VWait7 10:bcopy.w=bfirst:connect=#####[197]#####[2208]
  For cnt=0 To 3
    If (las((bcopy-cnt) #####[66]B #maxleng))<>(4-cnt) Then! connect=#####[198]#####[2298]:Goto Damage
  Next
  VWait7 10
  cnt=0
  If connect Then! writeser{12}
  While connect #####[66]B (sr<>12)
    VWait7:cnt+1
    If cnt>50 Then! connect=#####[198]#####[2298]:Goto Damage
  #####[193]#####[2080]
  connect=#####[197]#####[2208]
  If connect Then! VWait7 15
Return

.SetStartCar
  #####[202]#####[2400] *p
  \idle=#####[198]#####[2298]:\drop=#####[198]#####[2240]
  \inair=#####[197]#####[2266]:\ch=2
  \pitch=2:\roll=2:\mpitch=0:\mroll=0
  \qc=qcos(\head):\qs=qsin(\head):\rot=0:\movi=0:\movj=0
  \headi=0:\headj=0:\headk=0:\rev=0:\nrev=0:\vel=0:\traction=0
  \t=pts3+.1:\movt=0:\lap=0:\jox=0
  \qc=qcos(\head):\qs=qsin(\head)

  \swaheadi=0:\swaheadj=0
  \swamovi =0:\swamovj =0
  \curdt=pts3
  \side=0:\top=0
  \swai=0:\swaj=0 ;etc
  \difi=1:\difj=0:\swiv=0

  \mx=0:\my=0:\px=\sx+\mx:\py=\sy+\my
  \dx=#####[1930](\sx+\sx-\px-168,0,720)
  If *tp<>*bp
    \dy=#####[1930](\sy+\sy-\py- 50,0,375)
  Else"
    \dy=#####[1930](\sy+\sy-\py-120,0,235)
  End If

  For j.w=1 To 8
    \stime[j]=0
    \ftime[j]=0
  Next

  cc.w=\colowner
  h.l=cols(cc)\col[1]
  \carcol=h;(h AND $f0) ASR 4+ (h AND $f000) ASR 8 + (h AND $f00000) ASR 12
  h.l=cols(cc)\col[2]:\carcol #####[68]D 16:
  \carcol+h;(h AND $f0) ASR 4+ (h AND $f000) ASR 8 + (h AND $f00000) ASR 12

CNIF 1=0
  If fast
    \accel  = 0.0611
    \retard = 0.0323
  Else"
    \accel  = 0.0387
    \retard = 0.0538
  #####[192]#####[2048]
CEND

  If fast
    \accel  = 0.0397
    \retard = 0.0550
  Else"
    \accel  = 0.027
    \retard = 0.0700
  #####[192]#####[2048]

  \engfric= 0.9032
  \bounce =-0.2581
  \steering=0.7742

Return

#ysc=3:#xsc=4:#scal=5

.Pause

  VWait7 7:sr=-1
  #####[187]#####[1888]
    VWait7 3:cop-3
    If cop<0 Then! connect=#####[198]#####[2298]:#####[190]#####[2016] Gosub:Goto Damage
    writesafer{29}
  #####[188]#####[1952] (sr=29):sr=-1
  VWait7 7
Return

Statement flash{col.q,bol.q}
  #####[177]#####[1600] a4:#####[126]~.l #$dff180,a0:#####[66]B #$1c,d1:#####[126]~.l d0,0(a0,d1):#####[148]#####[640]
End Statement

Damage
#####[187]#####[1888]
  flash{#####[1927](32768),#####[1927]}
#####[188]#####[1952] #####[3044](0)<>0
VWait7 20:End ;unbelievably rude!


Statement CopGrot{src.w,dest.w}
Shared grot(),edge()
  *gs.xtra     =grot(src):*gd.xtra     =grot(dest)
  *es.quadratic=edge(src):*ed.quadratic=edge(dest)

  For i=0 To SizeOf/.quadratic:#####[2881].b *ed+i,#####[2882].b (*es+i):Next
  For i=0 To SizeOf/.xtra     :#####[2881].b *gd+i,#####[2882].b (*gs+i):Next

End Statement

.PreProcess
  temp.q=0:oldi=100:oldj=100
  #####[2274] 0
  For dt=0 To pts3
    If (1<dt) #####[66]B (dt<pts3)
      For dtp=dt To dt+1 Step 0.1
        FindLo {dtp,condt,io}
        numidi=(bez\i+bez\k) #####[69]E 1:numidj=(bez\j+bez\l) #####[69]E 1
        ddifi=numidi-oldi:ddifj=numidj-oldj
        If #####[1928](ddifi)<4
          temp.q=temp+#####[3084](100*ddifi*ddifi+100*ddifj*ddifj)
        #####[192]#####[2048]
        oldi=numidi:oldj=numidj
      Next
    #####[192]#####[2048]


    *g=grot(dt):*e=edge(dt)
    FindLo {dt+0.0,condt,io}:A1=bez\i:A2=bez\j:bA1=bez\k:bA2=bez\l
    FindLo {dt+0.5,condt,io}:B1=bez\i:B2=bez\j:bB1=bez\k:bB2=bez\l
    FindLo {dt+1.0,condt,io}:C1=bez\i:C2=bez\j:bC1=bez\k:bC2=bez\l

    *g\swivi=A1-bA1:*g\swivj=A2-bA2

    *g\desti=(C1+bB1)#####[69]E 1
    *g\destj=(C2+bC2)#####[69]E 1

    cai=A1:caj=A2
    cbi=C1:cbj=C2  ;keep em in - why not?
    *g\midi=B1  :*g\midj=B2
    *g\cai=A1   :*g\caj=A2
    *g\dai=A1-C1:*g\daj=A2-C2

    ni  =A1-C1:nj  =A2-C2:pdist=#####[3084](ni  *ni  +nj  *nj  )
    ni  /pdist:nj  /pdist
    difi=A1-B1:difj=A2-B2:pdist=#####[3084](difi*difi+difj*difj)
    difi/pdist:difj/pdist
    fac=(ni*difj-nj*difi)
    If #####[1928](fac)<0.1
      *e\lstraight=#####[197]#####[2208]
    Else"
      *e\lstraight=#####[198]#####[2240]
      *e\lodd1=(fac<0)
      *e\lodd3=(fac>0)
    #####[192]#####[2048]

    plussage.w=0:Gosub DoQuadratic

    *e+#hquad
    A1=bA1:A2=bA2:B1=bB1:B2=bB2:C1=bC1:C2=bC2

    *g\cbi=A1   :*g\cbj=A2
    *g\dbi=A1-C1:*g\dbj=A2-C2

    dai =A1-cai:daj =A2-caj
    dbi =C1-cbi:dbj =C2-cbj    ;ya never know.. might come in handy!
    *g\diri=B1-*g\midi:*g\dirj=B2-*g\midj

    mu=(cbj*dai-caj*dai+cai*daj-cbi*daj)/(dbi*daj-dbj*dai)
    *g\centi=cbi+mu*dbi
    *g\centj=cbj+mu*dbj

    ni  =A1-C1:nj  =A2-C2:pdist=#####[3084](ni  *ni  +nj  *nj  )
    ni  /pdist:nj  /pdist
    difi=A1-B1:difj=A2-B2:pdist=#####[3084](difi*difi+difj*difj)
    difi/pdist:difj/pdist
    fac=ni*difj-nj*difi
    If #####[1928](fac)<0.17
      *e\lstraight=#####[197]#####[2208]
    Else"
      *e\lstraight=#####[198]#####[2240]
      *e\lodd1=(fac>0)
      *e\lodd3=(fac>0)
    #####[192]#####[2048]
    plussage.w=16:Gosub DoQuadratic
  Next
  CopGrot{pts1,0}
  For src=1 To 7
    CopGrot{src,src+pts1}
  Next
  mapdist.w=temp*0.1*1.8
Return

.DoQuadratic
  If *e\lstraight  ;one straight.. comin right up!
    difi=(C1-A1)  :difj=(C2-A2)
    pdist=#####[3084](difi*difi+difj*difj)
    difi/pdist:difj/pdist:*e\lb=difi:*e\le=difj

    *e\lc=(A1+C1)#####[69]E 1:*e\lf=(A2+C2)#####[69]E 1
    b1=(A1-*e\lc)*difi+(A2-*e\lf)*difj
    b2=(C1-*e\lc)*difi+(C2-*e\lf)*difj
    mid=(b1+b2) #####[69]E 1:dif=#####[1928](b1-b2)*0.52
    b1=mid-dif:b2=mid+dif
    *e\lb1=b1:*e\lb2=b2

    *e\langst=(angle{difj #####[68]D 6,difi #####[68]D 6} #####[69]E 11+16) #####[66]B 31
    *e\langadd=0
  Else"
    pc=A1:B1-pc:B1*2:C1-pc:pa=(C1-B1)*2:pb=C1-pa
    pf=A2:B2-pf:B2*2:C2-pf:pd=(C2-B2)*2:pe=C2-pd

    t=-0.5*(pa*pb+pd*pe)/(pa*pa+pd*pd)

    ob=2*t*pa+pb:oc=t*t*pa+t*pb+pc
    oe=2*t*pd+pe:of=t*t*pd+t*pe+pf
    pdist=#####[3084](ob*ob+oe*oe)
    ob/pdist:oe/pdist
    od=-ob  :oa=oe  ; to be modified along this line..

    t+1
    tc=t*t*pa+t*pb+pc-oc
    tf=t*t*pd+t*pe+pf-of

    dot1=tc*ob+tf*oe   ;now, dot2*dot2=dot1...
    dot2=tc*oa+tf*od
    fac=(dot1*dot1/dot2)
    ma=oa/fac:md=od/fac
    oa*fac:od*fac

    *e\la=oa:*e\ld=od
    *e\ma=ma:*e\md=md
    *e\lb=ob:*e\le=oe
    *e\lc=oc:*e\lf=of

    t=0:tc=t*t*pa+t*pb+pc-oc
        tf=t*t*pd+t*pe+pf-of
        b1=tc*ob+tf*oe
    t=1:tc=t*t*pa+t*pb+pc-oc
        tf=t*t*pd+t*pe+pf-of
        b2=tc*ob+tf*oe
    dif=#####[1928](b1-b2)*0.52:mid=(b1+b2) #####[69]E 1
    b1=mid-dif:b2=mid+dif
    *e\lb1=b1:*e\lb2=b2

    t=b1
    difi=2*t*ma+ob     ;strictly optional..
    difj=2*t*md+oe     ;differientiate it
    fang=(angle{difj #####[68]D 6,difi #####[68]D 6} #####[69]E 11+16)

    t=b2
    difi=2*t*ma+ob     ;strictly optional..
    difj=2*t*md+oe     ;differientiate it
    stang =(angle{difj #####[68]D 6,difi #####[68]D 6} #####[69]E 11+16)

    dang.q=(stang-fang)
    If dang<-16 Then! dang+32
    If dang>16 Then! dang-32  ;take the smaller..

    dang/(b2-b1)

    *e\langst=fang-(b1*dang)
    *e\langadd=dang #####[69]E 4
    Use, #####[2561] 0

  #####[192]#####[2048]
Return


Event'
.ColMeIn
Data.l $c90,$fd0,$eb0  ;yellow
Data.l $b00,$f00,$d00  ;red
Data.l $04b,$08f,$06c  ;blue
Data.l $070,$0b0,$090  ;green
Data.l $111,$333,$222  ;black
Data.l $906,$c0a,$b08  ;purple
Data.l $20b,$30f,$30d  ;dk blue
Data.l $186,$3b9,$196  ;pale green
Data.l $a93,$da6,$b84  ;tan
Data.l $95b,$c9e,$a6d  ;lt purple
Data.l $447,$88b,$669  ;lt gray..
Data.l $270,$6b0,$490  ;another green

Event'


  CNIF 1=0
;  Dim tr$(7):m$="Maps:"
    tr$(0)="Hook"
    tr$(1)="Format"
    tr$(2)="Blob"
    tr$(3)="Power"
    tr$(4)="Spot"
    tr$(5)="Fold"
    tr$(6)="Track1"
;  CELSE
    tr$(0)="Cross"
    tr$(1)="Warble"
    tr$(2)="Twirl"     ;kill me
    tr$(3)="Jyro"    ;kill me
    tr$(4)="One"
    tr$(5)="Twistie"
    tr$(6)="Track2"
  CEND
