; ascii translation of /Users/simon/Google Drive/amiga/w/abcstuff/libsdev/userlibsrc/ElmoreFuncsLib.bb
+.FUNCTIONS

;
;	#elmorefuncslib=101	(rev BUM6)
;

Macro pushreg:MOVE.l `1,-(a7):End Macro
Macro pullreg:MOVE.l (a7)+,`1:End Macro
Macro pushregs:MOVEM.l `1,-(a7):End Macro
Macro pullregs:MOVEM.l (a7)+,`1:End Macro
Macro error:MOVE.l #`1,d0:TRAP#0:`1:Dc.b `2,0:Event:End Macro

!libheader{#elmorefuncslib,0,0,0,0}

!afunction{#long}
!args {#array}
!libs
!subs {_listproc,0,0}
!name {"Index","List() ;Returns index from top of LIST"}


;Misc. String functions
!afunction {#string}
!args{#long}
!libs
!subs {_space,0,0}
!name {"SPACE$","(number of spaces)"}



!afunction{#long}
!args{#string}
!libs
!subs{_checksum,0,0}
!name{"Checksum","(String$) ;Returns a unique checksum for a given string"}



!afunction{#long}
!args{#string,#byte}
!libs
!subs{_charcount,0,0}
!name{"CharCount","(String$,byte) ;Returns no. occurances of 'byte' in 'string$'"}


!afunction{#long}
!args{#string,#byte,#long}
!libs
!subs{_binstrb,0,0}
!name{"SearchEnd","(String$,byte,# from End) ;Searches string backwards for Nth byte"}


!afunction{#long}
!args{#string,#byte,#long}
!libs
!subs{_binstrf,0,0}
!name{"SearchBegin","(String$,byte,# from Begin) ;Searches string for Nth byte"}


!afunction{#string}
!args{#string}
!libs
!subs{_encrypt,0,0}
!name{"Cipher$","(String$) ;Create/Unencrypt a Cipher$() string"}


!afunction{#long}
!args{#string}
!libs
!subs{_repeats,0,0}
!name{"Repeats","(String$) ;Returns # repetitive characters at front of string"}


!libfin






._space
!pushregs{a0-a6/d1-d2}
MOVE.l (a3),pstring

;d0 holds length, d1 is temp index
MOVE.l d0,d1
MOVEQ #32,d2

spaceloop
TST.l d1
BEQ sdone
MOVE.b d2,(a3)+
SUBQ #1,d1
BRA spaceloop
sdone
MOVE.l a3,pstring
!pullregs{d1-d2/a0-a6}
MOVEA.l pstring,a3
RTS




._listproc

MOVE.l d0,a0				;list base
MOVE.l -12(a0),d0	 ;What kind of array?

CLR.l d0						;Reset counter
MOVE.l -32(a0),a0	 ;Current item

listnext
TST.l (a0)					;Empty node?
BEQ listdone				;Exit if so!
ADDQ.l #1,d0				;Add 1 to index
MOVE.l 4(a0),a0		 ;Prev LIST item...
BRA listnext

listdone
RTS












._checksum
CLR.l d2					;d2.l will contain the checksum
MOVE.l d0,a0			;string's address
MOVE.l -4(a2),d0	;Length...

checkit
MOVE.l (a0)+,d1	 ;Get byte from string
MULU.w d0,d1			;position-sensitive
ADD.l d1,d2
DBRA d0,checkit

MOVE.l d2,d0			;Return as function
RTS









._charcount
MOVE.l d0,a0			;a0=str. addr.
MOVE.l d1,d2			;d2=byte to find
MOVE.l -2(a2),d1	;d1=length of str.
CLR.l d0					;d0=number found.

countit
CMP.b (a0)+,d2
BNE notchar
ADDQ.l #1,d0
notchar:
DBRA d1,countit


RTS



._binstrb
;D0=String	 D1=Byte	 D2=Count

MOVE.l d0,a0			;Address of string
MOVE.l -4(a2),d0	;Last char in string (Length)


;Check parameters are legal:
TST.l d0
BEQ binzero			 ;Null-string?

TST.l d2
BEQ binzero			 ;Count zero??


CMP.l #1,d2			 ;Check out our "count"
BPL binsearch		 ;Is it >=0?

CMP.l d0,d2			 ;Can't be longer than the string!
BLE binsearch		 ;Is it <= length?

MOVEQ.l#1,d2			;Make it so, #1!
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


binsearch:
CMP.b 0(a0,d0),d1 ;Is it our char?
BEQ foundbin			;Yes!

binmore:
DBRA d0,binsearch ;Keep lookin'

binzero:

CLR.l d0
RTS							 ;Return with zero...


foundbin:
DBRA d2,binmore	 ;Is our counter ticked-out?

;Yes, it is!

ADDQ.l#1,d0			 ;Add "1" to position...

RTS							 ;Return with char. position!



._binstrf
;D0/A0=Pos.	D1=Byte	D2=Count	D3=Length


MOVE.l d0,a0
MOVE.l -4(a2),d3
CLR.l d0

SUBQ.l #1,d2			;Subtract 1 from count...

;Check parameters are legal:
TST.l d3
BEQ binzero			 ;Null-string?

CMP.l #1,d2			 ;Check out our "count"
BPL binfsearch		;Is it >=0?

CMP.l d3,d2			 ;Can't be longer than the string!
BLE binfsearch		;Is it <= length?

MOVEQ.l#1,d2			;Make it so, #1!


binfsearch:
CMP.b 0(a0,d0),d1	 ;Is this our guy?
BEQ foundfbin			 ;Yea! He is!

binfmore:
ADDQ.l#1,d0				 ;Go up string some more...
DBRA d3,binfsearch: ;But not further than it's length!
BRA binzero				 ;return zero!

foundfbin:
DBRA d2,binfmore		;Counter done yet?


CMP.l -4(a2),d0		 ;is result longer than string???
BLT nothigher
CLR.l d0
RTS


nothigher:
ADDQ.l#1,d0				 ;Add a one (pos. 1 in string is offset 0)
RTS






._encrypt
MOVE.l d0,a3
MOVE.l -4(a2),d0
MOVE.l d0,d1

encr:
EOR.b #255,(a3)+
DBRA d1,encr
RTS


._repeats
MOVE.l d0,a0
MOVE.l -4(a2),d1
CLR.l d0

MOVE.b (a0),d2

TST.l d1		;Is it null?
BEQ repsdone


countreps:
CMP.b (a0)+,d2
BNE repsdone
ADDQ.l#1,d0
DBRA d1,countreps

repsdone:
RTS



eztextlen:
Ds.l 1

pstring:
Ds.l 1

pstart:
Ds.l 1


listtop:
Ds.w 1

