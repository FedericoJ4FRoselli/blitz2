; ascii translation of /Users/simon/Google Drive/amiga/w/disks/crap/examples_old/examples1/darts.bb2,/Users/simon/Google Drive/amiga/w/lha/bbold/disks/crap/examples_old/examples1/darts.bb2
;
; Darts program by Simon Armstrong
;
; Please note copyright notice on the projection algorithm
;

; The following is a heavyweight example of using machine
; code with BASIC in Blitz2. Watch out for the next issue
; of AmigaFormat for a description of how it all works.

; Also a Blitz2 3D library is due out real soon with nice
; fast filled polugons, dithering, horizon, proper clipping
; marshall amplifiers etc.

; increase the dart variable if you have an accelerated
; machine

darts=8

NPrint "Setting up, please wait..."

; processor cls for extra speed

Statement mycls{a.l}
	UNLK a4:MOVE.l d0,a0:ADD.l#40*256,a0
	MOVEQ#0,d0:MOVEQ#0,d1:MOVEQ#0,d2:MOVEQ#0,d3:MOVEQ#0,d4
	MOVEQ#0,d5:MOVEQ#0,d6:MOVE.ld0,a1:MOVE.ld0,a2:MOVE.ld0,a3
	MOVE#255,d7
	loop1:MOVEM.l d0-d6/a1-a3,-(a0):DBRA d7,loop1
	RTS
End Statement

;
; high speed matrix calulation (Copyright 1993 Simon Armstrong)
;
; Please give credit if you use this in your own code, thanks,
; look at it, only 12 multiplies, no external memory access for
; temp variables, and pretty darn accurate too!
;

Macro p {SizeOf.object\`1}(a5):End Macro

Statement calcid{object.l,rottable.l}
	UNLK a4:MOVEM.l a4-a6,-(a7):MOVE.l d0,a5:MOVE.l d1,a3
	MOVEM.l!p{rotx-2},d0-d2:MOVE#4092,d3:AND d3,d0:AND d3,d1
	AND d3,d2:LEA !p{id},a4
	MOVEM 0(a3,d2.w),d4-d5
	MOVEM 0(a3,d1.w),d2-d3
	MOVEM 0(a3,d0.w),d0-d1
	MOVE d5,d6:MULS d3,d6:MOVE.l d6,a0:MOVE d4,d7:MULS d0,d7
	SWAP d7:ADD d7,d7:MOVE d7,a1:MULS d2,d7:ADD.l d6,d7:SWAP d7
	ADD d7,d7:MOVE d7,(a4)+
	MOVE d4,d7:MULS d1,d7:SWAP d7:ADD d7,d7:MOVE d7,(a4)+
	MOVE d5,d6:MULS d2,d6:MOVE.l d6,a2:MOVE a1,d7:MULS d3,d7
	SUB.l d6,d7:SWAP d7:ADD d7,d7:MOVE d7,(a4)+
	MOVE d4,d6:MULS d3,d6:MOVE.l a2,d7:SWAP d7:ADD d7,d7
	MULS d0,d7:SUB.l d6,d7:SWAP d7:ADD d7,d7:MOVE d7,(a4)+
	MOVE d5,d7:MULS d1,d7:SWAP d7:ADD d7,d7:MOVE d7,(a4)+
	MOVE d2,d6:MULS d4,d6:MOVE.l a0,d7:SWAP d7:ADD d7,d7
	MULS d0,d7:ADD.l d6,d7:SWAP d7:ADD d7,d7:MOVE d7,(a4)+
	MULS d1,d2:SWAP d2:ADD d2,d2:MOVE d2,(a4)+
	NEG d0:MOVE d0,(a4)+:MULS d1,d3:SWAP d3:ADD d3,d3:MOVE d3,(a4)+
	MOVEM.l (a7)+,a4-a6:RTS
End Statement

;
; using the z part of the id matrix we can set speed in
; direction of dart
;

Statement moveonz{object.l,shift.w}
	UNLK a4:EXG d0,a5
	MOVEM !p{id+12},d3-d5:ASL.l d1,d3:ASL.l d1,d4:ASL.l d1,d5
	MOVEM.l d3-d5,!p{vx}
;	ADD.l d3,!p{x}:ADD.l d4,!p{y}:ADD.l d5,!p{z}
	EXG d0,a5:RTS
End Statement


;
; hard case macro programming to generate super fast verticies
; of couse they all have to be 2^n but thats cool yes?
;

Macro genvert
	MOVEM.l !p{x},d0-d2:ASR.l#2,d0:ASR.l#2,d1
	CNIF `1<>0
		MOVEM !p{id+0},d3-d5:ASL.l#`1,d3:ASL.l#`1,d4:ASL.l#`1,d5
		`2.ld3,d0:`2.ld4,d1:`2.ld5,d2
	CEND
	CNIF `3<>0
		MOVEM !p{id+6},d3-d5:ASL.l#`3,d3:ASL.l#`3,d4:ASL.l#`3,d5
		`4.ld3,d0:`4.ld4,d1:`4.ld5,d2
	CEND
	CNIF `5<>0
		MOVEM !p{id+12},d3-d5:ASL.l#`5,d3:ASL.l#`5,d4:ASL.l#`5,d5
		`6.ld3,d0:`6.ld4,d1:`6.ld5,d2
	CEND
	SWAP d2:TST d2:BLE flow:DIVS d2,d0:BVS flow:DIVS d2,d1:BVS flow
	MULS#640,d0:MULS#512,d1
	SWAP d0:SWAP d1:ADD#160,d0:ADD#128,d1:MOVEM d0-d1,(a6):ADDQ#4,a6
End Macro

;
; generate verticies (projected) for shapes, note overflow
; and negative z values return false so main code doesn't
; attempt to draw the shapes
;

Function.w gendart{object.l}
	UNLK a4:MOVEM.l a4-a6,-(a7):MOVE.l d0,a5:LEA !p{v},a6
	!genvert{0,0,0,0,8,ADD}:!genvert{0,0,0,0,8,SUB}
	!genvert{8,SUB,0,0,8,SUB}:!genvert{8,ADD,0,0,8,SUB}
	!genvert{0,0,7,SUB,8,SUB}
	MOVEM.l (a7)+,a4-a6:MOVEQ#-1,d0:RTS
	flow:MOVEM.l (a7)+,a4-a6:MOVEQ#0,d0:RTS
End Statement

Function.w genstar{object.l}
	UNLK a4:MOVEM.l a4-a6,-(a7):MOVE.l d0,a5:LEA !p{v},a6
	!genvert{7,ADD,0,0,0,0}:!genvert{7,SUB,0,0,0,0}
	!genvert{0,0,7,ADD,0,0}:!genvert{0,0,7,SUB,0,0}
	!genvert{0,0,0,0,7,ADD}:!genvert{0,0,0,0,7,SUB}
	MOVEM.l (a7)+,a4-a6:RTS
End Statement

Statement genline{object.l}
	UNLK a4:MOVEM.l a4-a6,-(a7):MOVE.l d0,a5:LEA !p{v},a6
	MOVEM.l (a6),d0-d7:MOVEM.l d0-d7,4(a6)
	MOVEM.l !p{x},d0-d2
	ASR.l#2,d0:ASR.l#2,d1:SWAP d2:DIVS d2,d0:DIVS d2,d1
	MULS#640,d0:MULS#512,d1:SWAP d0:SWAP d1
	ADD#160,d0:ADD#128,d1:MOVEM d0-d1,(a6)
	MOVEM.l (a7)+,a4-a6:RTS
End Statement

;
; set up shapes, this is where Blitz2 comes into its own,
; structures save so much hassle, then you just dimension
; list arrays of structures, and note how efficient the loops
; are below for processing these lists, the machine code above
; certainly helps too :)
;
; don't worry about the assembler above just look how cool the
; BASIC is below!
;

NEWTYPE .vert
	x.w:y
End NEWTYPE

NEWTYPE .object
	x.q:y:z
	vx:vy:vz
	rotx:roty:rotz
	rvx:rvy:rvz
	v.vert[64]		;verticies go here
	id.w[9]
End NEWTYPE

Dim ##[$80B3] nme.object(darts) ;wow variable dimensioning in a compiler!
Dim ##[$80B3] bul.object(20)
Dim ##[$80B3] fire.object(5)
Dim ##[$80B3] bang.object(10)

;generate sin_cos table

Dim rots.w(2049):rt.l=&rots(0)
For i=0 To 2048 Step 2
	rots(i)=HSin(i*2*##[$80BA]/2048)*32766
	rots(i+1)=HCos(i*2*##[$80BA]/2048)*32766
Next

;
; nasty AMOS demo type effect here with 8 bitplanes of
; animation for the backplayfield, still, looks ok
;

lmaxlen 0,320,256,1
lmaxlen 1,320,256,1
For i=0 To 7
	lmaxlen 2+i,320,256,1
	BitMapOutput 2+i:Locate 2,0
	NPrint "BLITZ DARTS BY SIMON	 ESC TO EXIT"
	For r=0 To 2*##[$80BA]-##[$80BA]/32 Step ##[$80BA]/32
		j=r+i*##[$80BA]/256
		Circle 160,128,HTan(j/4)*50,1
		Line 160,128,160+HSin(j)*320,128+HCos(j)*256,1
		Circlef 160,128,12,1
	Next
Next

BLITZ:Slice 0,44,320,256,$fffa,2,8,32,320,320
Green 1,15,15,15:Green 9,2,2,6

f=2		 ;frame of anim
xo=1000 ;current laser

Mouse On:MouseArea -150,-150,120,120:BlitzKeys On

.mainloop


;
; nice tidy main loop, could have moved the firing routine
; outside to make it even cleaner
;

##[$80BB]
	VWait:ShowF db:db=1-db:Use lmaxlen db	;double buffer
	ShowB f:f+1:If f=10 Then f=2
	mycls{Peek.l (##[$80B8] lmaxlen(db)+8)}
;do you
	x=MouseX:y=MouseY
	Line x+155,y+128,x+165,y+128,1:Line x+160,y+123,x+160,y+133,1
	If Joyb(0)=1 AND reload<1 Then Gosub addfire:reload=15
	Gosub dofire:reload-1:If Joyb(0)=0 Then reload=-1
;do nme
	Gosub addnme
	Gosub movenme
	Gosub dobang
##[$80BC] RawStatus($45)

VWait

End

;
; note how we process lists in Blitz2 and can use macros for
; BASIC as well as assembler, real nice I tell ya...
;

Macro myline Line \v[`1]\x,\v[`1]\y,\v[`2]\x,\v[`2]\y,1:End Macro

##[$80CA] bang()

.dobang
	newmem bang()
	While globfree(bang())
		\x+\vx:\y+\vy:\z+\vz
		\rotx+\rvx:\roty+\rvy:\rotz+\rvz
		calcid{bang(),rt}
		If genstar{bang()}
			For i=0 To 4 Step 2:!myline {i,i+1}:Next
		Else
			freelast bang()
		EndIf
	Wend
	Return

##[$80CA] nme()

.addnme:
	newnme-1
	If newnme<0 AND globalloc(nme())
		newnme=5
		\x=Rnd(800)-400,Rnd(800)-400,10000
		\rvx=Rnd(20)-10,Rnd(20)-10,Rnd(50)-25
	EndIf
	Return

;
; watch out, the following has a very crusty collision
; detection routine, note how KillItem removes the object
; from the list, one command, would have taken heaps more
; with normal arrays and been at least 20 times as slow
;

.movenme:
	newmem nme()
	While globfree(nme())
		calcid{nme(),rt}
		moveonz{nme(),8}
		\x+\vx:\y+\vy:\z+\vz:
		\rotx+\rvx:\roty+\rvy:\rotz+\rvz
		If \z>1000
			If gendart{nme()}
				For i=1 To 4:!myline {0,i}:Next
				!myline {2,3}:!myline {1,4}
				newmem fire()
				While globfree(fire())
					If Abs(\x-fire()\x)<1000
						If Abs(\y-fire()\y)<1000
							If Abs(\z-fire()\z)<1000
								If globalloc(bang())
									bang()\x=\x,\y,\z,\vx,\vy,\vz
									bang()\rvx=100,130,90
								EndIf
								freelast nme():freelast fire():Goto popout
							EndIf
						EndIf
					EndIf
				Wend:popout
			EndIf
		Else
			freelast nme()
		EndIf
	Wend
	Return

##[$80CA] fire()

.addfire:
	If globalloc(fire())
		xo=-xo
		\x=xo,1000,1000
		calcid{fire(),rt}
		genline{fire()}:xx.w=\v[0]\x:yy.w=\v[0]\y
		For i=1 To 7:\v[i]\x=xx,yy:Next
	EndIf
	\vx=x*6.5-xo/24,y*8-32,1000
	Return

.dofire:
	newmem fire()
	While globfree(fire())
		\x+\vx:\y+\vy:\z+\vz
		If \z<16000
			genline{fire()}:!myline{0,7}
		Else
			freelast fire()
		EndIf
	Wend
	Return


;
; the following are routines you can add up above to
; draw cubes
;

;Statement genbox{object.l}
;	UNLK a4:MOVEM.l a4-a6,-(a7):MOVE.l d0,a5:LEA !p{v},a6
;	!genvert{2,ADD,2,ADD,2,ADD}:!genvert{2,SUB,2,ADD,2,ADD}
;	!genvert{2,SUB,2,SUB,2,ADD}:!genvert{2,ADD,2,SUB,2,ADD}
;	!genvert{2,ADD,2,ADD,2,SUB}:!genvert{2,SUB,2,ADD,2,SUB}
;	!genvert{2,SUB,2,SUB,2,SUB}:!genvert{2,ADD,2,SUB,2,SUB}
;	MOVEM.l (a7)+,a4-a6:RTS
;End Statement

;drawbox:
;	!myline {0,1}:!myline {1,2}:!myline {2,3}:!myline {3,0}
;	!myline {4,5}:!myline {5,6}:!myline {6,7}:!myline {7,4}
;	!myline {0,4}:!myline {1,5}:!myline {2,6}:!myline {3,7}
;	Return
