; ascii translation of /Users/simon/Google Drive/amiga/w/abc/bums/out/libs/db/dbaselib_1_02.bb2,/Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/out/libs/db/dbaselib_1_02.bb2
; +----------+-------------------------------------------------+
; | dbaselib | A simple memory based database system					 |
; +----------+----------+--------------------------------------+
; | Version	|	Date		|					modifications							 |
; +----------+----------+--------------------------------------+
; |	1.000	 | 20/02/95 | (GAK) Beta Test Version							|
; |	1.001	 | 23/02/95 | (GAK) Stopped record moving if			 |
; |					|					| updated but with no key change			 |
; |	1.002	 | 25/02/95 | (GAK) indexed add doing add at wrong |
; |					|					| position. for Alphabetic chars			 |
; +----------+----------+--------------------------------------+
#dbaselib=10

Macro anode
	{SizeOf.Node\`1}
End Macro

Macro alist
	{SizeOf.List\`1}
End Macro

NEWTYPE.DBctrl
	pad.l
	extent_p.l:;			number of records to store in primary
	extent_s.l:;			number of records to expand by
	recsize.l:;			 size of each record
	realrecs.l:;			number of real records in file
	keyed.w:;				 is database keyed
	keylength.l:;		 length of key
	memtype.l:;			 type of memory database is stored in
	recused.l:;			 number of record on file
	current.l:;			 current record
	firstlink.l:;		 first memory block
	lastlink.l:;			last memory block
	linkhdr.l:;			 header of link list
	nextfree.l:;			nextfree address
	modified.w:;
; ------------------------------------------
	srch_oset.l:;		 search offset from start of record
	srch_lnth.l:;		 search number of bytes
	srch_curr.l:;		 search, current position
	srch_strp.l:;		 search, pointer to search string
	srch_strl.l:;		 length of search string
End NEWTYPE

Macro dbc
	{SizeOf.DBctrl\`1}(a3)
End Macro

NEWTYPE.DBlink
	lastaddr.l:;			previous memory block in list
	nextaddr.l:;			next memory block in list
	baseaddr.l:;			first memory block in list
	size.l:;					size of this memory block
End NEWTYPE

Macro dbl
	{SizeOf.DBlink\`1}(a0)
End Macro

Macro dbln
	{SizeOf.DBlink\`1}
End Macro


; macros swiped from elmores libraries, very handy
Macro pushreg:MOVE.l `1,-(a7):End Macro
Macro pullreg:MOVE.l (a7)+,`1:End Macro
Macro pushregs:MOVEM.l `1,-(a7):End Macro
Macro pullregs:MOVEM.l (a7)+,`1:End Macro
Macro error:MOVE.l #`1,d0:TRAP#0:`1:Dc.b `2,0:Event:End Macro
;

.commands
#dbaselib=10

!libheader{#dbaselib,0,0,0,0}
!dumtoke{"Database","",_toke}

!afunction{#byte}
!args{#long,#long,#long}
!libs
!subs{_cmpmem,0,0}
!name{"CMPMEM","(source,dest,length) 0=same,-1 source<dest, +1 source>dest"}

!astatement
!args{#string,#varptr,#long}
!libs
!subs{_strtofls1,0,0}
!args{#string,#varptr,#long,#byte}
!libs
!subs{_strtofls,0,0}
!name{"StrToFls","string$,destvar,maxlength[,fillchar]"}

!afunction{#string}
!args{#varptr,#long}
!libs
!subs{_flstostr,0,0}
!name{"FlsToStr$","(startaddr of FLS, maxlength)"}

!afunction{#byte}
; create non keyed database
!args{#word,#long,#long,#varptr}
!libs{#dbaselib,$1380}
!subs{_dbinit1,0,0}
; creake keyed database
!args{#word,#long,#long,#varptr,#long}
!libs{#dbaselib,$1380}
!subs{_dbinit2,0,0}
!name{"DBInit","(object#,init recs, exp recs,rec struct[,keylength])"}

!afunction{#long}
!args{#word}
!libs{#dbaselib,$1380}
!subs{_laddr,0,0}
!name{"DBlistaddr","(database #) gives address of nodelist header"}

!acommand{#byte}
!args{#word}
!libs{#dbaselib,$1380}
!subs{_first,0,0}
!name{"DBfirst","(database #) set pointer to the first database entry"}

!acommand{#byte}
!args{#word}
!libs{#dbaselib,$1380}
!subs{_last,0,0}
!name{"DBlast","(database #) set pointer to the last database entry"}

!acommand{#byte}
!args{#word}
!libs{#dbaselib,$1380}
!subs{_next,0,0}
!name{"DBnext","(database #) set pointer to the next database entry"}

!acommand{#byte}
!args{#word}
!libs{#dbaselib,$1380}
!subs{_prev,0,0}
!name{"DBprev","(database #) set pointer to the previous database entry"}

!acommand{#byte}
!args{#word,#varptr}
!libs{#execlib,#la6,#dbaselib,$1380}
!subs{_dbaddl,0,0}
!name{"DBaddLast","(database #,record var) add record to database"}

!acommand{#byte}
!args{#word,#varptr}
!libs{#execlib,#la6,#dbaselib,$1380}
!subs{_dbaddf,0,0}
!name{"DBaddFirst","(database #,record var) add record to database"}

!acommand{#long}
!args{#word,#varptr}
!libs{#execlib,#la6,#dbaselib,$1380}
!subs{_dbadd,0,0}
!name{"DBadd","(database #,record var) add record to database"}

!afunction{#long}
!args{#word}
!libs{#dbaselib,$1380}
!subs{_numrecs,0,0}
!name{"DBrecs","(database #) gives number of records in database"}

!acommand{#byte}
!args{#word,#varptr}
!libs{#dbaselib,$1380}
!subs{_dbget,0,0}
!name{"DBget","(database #,record var) get current record from database"}

!astatement
!args{#word}
!libs{#dbaselib,$1380}
!subs{_dbkill,0,0}
!name{"DBkill","(database #) kill current database"}

!astatement
!args{#word}
!libs{#execlib,#la6,#dbaselib,$1380}
!subs{_dbdel,0,0}
!name{"DBdelete","database # delete current entry in database"}

!acommand{#long}
!args{#word,#long}
!libs{#dbaselib,$1380}
!subs{_dbset,0,0}
!name{"DBsetpos","database #,recs	 >sets current entry a number of records from start of database"}

!astatement
!args{#word}
!libs
!subs{_dbcasesense,0,0}
!name{"DBCasesense","On|Off	 Switch search case sensitivity on or off"}

!astatement
!args{#word,#word}
!libs{#dbaselib,$1380}
!subs{_dbkeyed,0,0}
!name{"DBsetkey","database #,On|Off	switch keying On / Off For database"}

!astatement
!args{#long}
!libs
!subs{_dbmemtype,0,0}
!name{"DBmemtype","memtype	define type of memory to store database"}

!afunction{#byte}
!args{#word,#string}
!libs{#dbaselib,$1380}
!subs{_dbfind1,0,0}
!args{#word,#string,#long,#long}
!libs{#dbaselib,$1380}
!subs{_dbfind,0,0}
!name{"DBfind","(database #,searchstring$[,length,offset])"}

!afunction{#byte}
!args{#word}
!libs{#dbaselib,$1380}
!subs{_dbfindnxt,0,0}
!name{"DBfindnext","(database #)"}

!astatement
!args{#word,#varptr}
!libs{#execlib,#la6,#dbaselib,$1380}
!subs{_dbupd,0,0}
!name{"DBupdate","database #,record variable"}

!acommand{#byte}
!args {#word,#string}
!libs {#doslib,#la6,#dbaselib,$1380}
!subs {_dbsave,0,0}
!name {"DBSave","Database#,filename$"}

!acommand{#byte}
!args {#word,#string}
!libs {#execlib,#ld5,#doslib,#la6,#dbaselib,$1380}
!subs {_dbload,0,0}
!name {"DBLoad","Database#,filename$"}

!afunction{#byte}
!args {#word}
!libs {#dbaselib,$1380}
!subs {_tnext,0,0}
!name {"DBisnext","(Database#)"}

!afunction{#byte}
!args {#word}
!libs {#dbaselib,$1380}
!subs {_tprev,0,0}
!name {"DBisprev","(Database#)"}

!afunction{#long}
!args {#word}
!libs {#dbaselib,$1380}
!subs {_dbcurr,0,0}
!name {"DBcurrent","(Database#)"}

!afunction{#byte}
!args {#word}
!libs {#dbaselib,$1380}
!subs {_dbmod,0,0}
!name {"DBmodified","(Database#)"}

!afunction{#byte}
!args
!libs
!subs {_dbgetcs,0,0}
!name {"DBgetcs","Get case sensitivity flag"}

_load:!nullsub{0,0,0}
_save:!nullsub{0,0,0}
_use:!nullsub{0,0,0}
_free:!nullsub{0,0,0}

!libfin{_toke,_load,_save,_use,_free,16,7}

; - global library stuff - -------

csenseflag:Ds.l 1
memtype:Ds.l 1

;_init
;CLR.l csenseflag:CLR.l memtype:RTS


; --------------- general purpose memory routines --------
_flstostr
!pushregs{a0-a6/d1-d2}
MOVE.l (a3),f2stemp

MOVE.l d0,a0:MOVE.l d1,d0
f2sloop:
	TST d1:BEQ f2sdone
	MOVE.b (a0)+,(a3)+
	SUBQ #1,d1
BRA f2sloop
f2sdone:MOVE.l a3,f2stemp
!pullregs{d1-d2/a0-a6}
MOVEA.l f2stemp,a3
RTS

f2stemp:Ds.l 1

; a0=string address
; a1=destination address
; d0=string length
; d1=length of fls
; d3=fill character

_strtofls1:CLR.l d3

_strtofls
MOVE.l d0,a0:MOVE.l d1,a1:MOVE.l -(a2),d0:MOVE.l d2,d1
s2flp1:
	TST.l d1:BEQ s2fdone
	TST.l d0:BEQ s2flp2
	MOVE.b (a0)+,(a1)+
	SUBQ #1,d0
	SUBQ #1,d1
BRA s2flp1
s2flp2:
	TST.l d1:BEQ s2fdone
	MOVE.b d3,(a1)+
	SUBQ #1,d1
BRA s2flp2
s2fdone:RTS

_cmpmem
MOVE.l d0,a0:MOVE.l d1,a1:SUBX d0,d0

cmpmloop:
	TST.l d2:BEQ cmpdone
	CMPM.b (a0)+,(a1)+
	BGT isgt
	BLT islt
	SUBQ #1,d2
BRA cmpmloop

isgt:MOVEQ #-1,d0:BRA cmpdone
islt:MOVEQ #1,d0

cmpdone:RTS

; ---- general purpose routines for moving round lists ---
.listroutines
; entry: (getnext & getprev)
; a0 = address of node
; return;
; d0=address of next, 0 = end of list
; d1 destroyed
getnext
MOVE.l !anode{ln_Succ}(a0),d0:BEQ exitbad
MOVE.l d0,a0:TST.l !anode{ln_Succ}(a0):BEQ exitbad
RTS

getprev
MOVE.l !anode{ln_Pred}(a0),d0:BEQ exitbad
MOVE.l d0,a0:TST.l !anode{ln_Pred}(a0):BEQ exitbad
RTS

getfirst
MOVE.l !dbc{linkhdr},a0:MOVE.l !alist{lh_Head}(a0),d0:BEQ exitbad:RTS

getlast
MOVE.l !dbc{linkhdr},a0:MOVE.l !alist{lh_TailPred}(a0),d0
CMP.l !dbc{linkhdr},d0:BEQ exitbad:RTS

.cmpdata
	!pushregs{a0-a1/d1-d3}
cmploop:
	TST.l d2:BEQ cmpeq
	MOVE.b (a0)+,d0:MOVE.b (a1)+,d1
	TST.l csenseflag:BNE cmpdo
	CMP.b #"z",d0:BHI cmpchk2
	CMP.b #"a",d0:BCS cmpchk2
	AND.b #255-32,d0
cmpchk2:
	CMP.b #"z",d1:BHI cmpdo
	CMP.b #"a",d1:BCS cmpdo
	AND.b #255-32,d1
cmpdo:
	CMP.b d0,d1
	BLT cmplt
	BGT cmpgt
	SUBQ #1,d2
	BRA cmploop
cmpeq:
	!pullregs{d1-d3/a0-a1}:CLR.l d0:RTS
cmplt
	!pullregs{d1-d3/a0-a1}:MOVEQ #2,d0:RTS
cmpgt
	!pullregs{d1-d3/a0-a1}:MOVEQ #1,d0:RTS

findrecpos
; entry
; a1 = address of search record
; d1 = offset from start of record to start search
; d2 = number of bytes to test
JSR getfirst:TST.l d0:BEQ exitbad
findloop
	!pushreg{d0}
	ADDI #{SizeOf.Node},d0:ADD.l d1,d0:MOVE.l d0,a0
	JSR cmpdata
	CMPI #2,d0:BEQ foundpos
	!pullreg{a0}:JSR getnext:TST.l d0:BEQ exitbad
BRA findloop
foundpos:!pullreg{d0}
RTS

tstvalid:TST.l d0:BEQ exitbad
MOVE.l d0,!dbc{current}:MOVEQ #1,d0:RTS

exitbad:CLR.l d0:RTS

getlinkdat:MOVE.l !dbc{linkhdr},a0:MOVE.l !dbc{nextfree},a1:RTS


; ------------ rest of the stuff -----------------
._dbcasesense
MOVE.l d0,csenseflag:RTS

._dbgetcs
MOVE.l csenseflag,d0:RTS


._dbmemtype
MOVE.l d0,memtype:RTS

._dbkeyed
TST.l (a3):BEQ exitbad
MOVE.w d1,!dbc{keyed}:RTS

._dbkill
TST.l (a3):BEQ exitbad
; get address of first memory block
MOVE.l !dbc{firstlink},d1:BEQ exitbad
dbkloop
	MOVE.l d1,a1:MOVE.l !dbln{nextaddr}(a1),d1:MOVE.l !dbln{size}(a1),d0
	ALibJsr $c003
	TST.l d1
BNE dbkloop
CLR.l (a3):RTS

._dbmod
TST.l (a3):BEQ exitbad
CLR.l d0:MOVE.w !dbc{modified},d0:RTS

._dbcurr
TST.l (a3):BEQ exitbad
MOVE.l #1,d1
JSR getfirst:TST.l d0:BEQ exitbad
currlp1:
	CMP.l !dbc{current},d0:BEQ currdone
	MOVE.l d0,a0:JSR getnext:TST.l d0:BEQ currdone
	ADD.l #1,d1:BRA currlp1
currdone:MOVE.l d1,d0:RTS

._dbset
MOVE.l d1,d2
TST.l (a3):BEQ exitbad
TST.l d1:BEQ _first:;	is it 0 if so set to first item in list
CMP.l !dbc{realrecs},d1:BGE _last:; if ># of recs, position at end of list

JSR getfirst:TST.l d0:BEQ exitbad:MOVE.l d0,!dbc{current}:SUBQ #1,d2

dbsloop1:
	JSR getnext:TST.l d0:BEQ dbsdone
	MOVE.l d0,!dbc{current}
	DBRA d2,dbsloop1
dbsdone:MOVEQ #1,d0:RTS

._first
TST.l (a3):BEQ exitbad:JSR getfirst:BRA tstvalid

._last
TST.l (a3):BEQ exitbad:JSR getlast:BRA tstvalid

._dbdel
TST.l (a3):BEQ exitbad
MOVE.w #1,!dbc{modified}
MOVE.l !dbc{current},a1:BEQ exitbad
MOVE.l !dbc{realrecs},d0:SUBQ #1,d0:MOVE.l d0,!dbc{realrecs}:BEQ lastentry
MOVE.l !anode{ln_Pred}(a1),d0:BEQ gonext
MOVE.l d0,a0:MOVE !anode{ln_Pred}(a0),d1:BEQ gonext
MOVE.l d0,!dbc{current}:BRA lastentry
gonext:
MOVE.l !anode{ln_Succ}(a1),d0:BEQ goerr
MOVE.l d0,a0:MOVE !anode{ln_Succ}(a0),d1:BEQ goerr
MOVE.l d0,!dbc{current}
lastentry:
MOVE.l a1,d0:CMP.l !dbc{srch_curr},d0:BNE doremove
MOVE.l !dbc{current},d0:MOVE.l d0,!dbc{srch_curr}
doremove:JSR {#_Remove}(a6):RTS
goerr:
MOVE.l !dbc{realrecs},d0:ADDQ #1,d0:MOVE.l d0,!dbc{realrecs}
RTS

._tnext
TST.l (a3):BEQ exitbad
MOVE.l !dbc{current},a0:JSR getnext:BEQ exitbad
MOVE.l #1,d0:RTS

._next
TST.l (a3):BEQ exitbad
; get successive node
MOVE.l !dbc{current},a0:JSR getnext:BRA tstvalid
;tstnext:TST.l d0:BEQ exitbad
;MOVE.l d0,!dbc{current}:MOVEQ #1,d0:RTS

._tprev
TST.l (a3):BEQ exitbad
MOVE.l !dbc{current},a0:JSR getprev:BEQ exitbad
MOVE.l #1,d0:RTS

._prev
TST.l (a3):BEQ exitbad
MOVE.l !dbc{current},a0:JSR getprev:BRA tstvalid

._dbget
TST.l (a3):BEQ exitbad
; get length of record variable
MOVE.l d1,a0:CLR.l d0:MOVE.w -2(a0),d0:SUBQ #8,d0

; check if there is a current record!
MOVE.l !dbc{current},d1:BEQ exitbad
ADDI #{SizeOf.Node},d1:MOVE.l d1,a1

; get length of database record and point to start of data
MOVE.l !dbc{recsize},d1

; transfer data to the output variable
dbgloop1:
	TST.l d0:BEQ dbgdone:TST.l d1:BEQ dbgblank
	MOVE.b (a1)+,(a0)+
	SUBQ #1,d0:SUBQ #1,d1:BRA dbgloop1

; if output var is bigger than record blank out rest
dbgblank:CLR.l d1
dbgloop2:MOVE.b d1,(a0)+:SUBQ #1,d0:BNE lp2store

dbgdone:MOVEQ #1,d0:RTS

storerec:
MOVE.l d1,a0:CLR.l d0:MOVE.w -2(a0),d0:SUBQ #8,d0
; calculate position for data to be stored and store in ln_Node
MOVE.l !dbc{nextfree},d1:MOVE.l d1,a1:ADDI #{SizeOf.Node},d1
MOVE.l d1,!anode{ln_Name}(a1):MOVE.l d1,a1

; store maximum record size in d1
MOVE.l !dbc{recsize},d1

; transfer data till record is full
lp1store:TST.l d1:BEQ donestore
TST.l d0:BEQ blankfill
MOVE.b (a0)+,(a1)+
SUBQ #1,d0:SUBQ #1,d1:BRA lp1store

; if record bigger than data added, blank fill rest
blankfill:CLR.l d0
lp2store:MOVE.b d0,(a1)+:SUBQ #1,d1:BNE lp2store
donestore:RTS


; set current record to point at this record and bump nextfree
bumprec:
MOVE.l !dbc{nextfree},d0:MOVE.l d0,!dbc{current}
; bump record counters
MOVE.l !dbc{realrecs},d1:ADDQ #1,d1:MOVE.l d1,!dbc{realrecs}
MOVE.l !dbc{recused},d1:ADDQ #1,d1:MOVE.l d1,!dbc{recused}

; check if database needs more memory
MOVE.l !dbc{extent_p},d2:CMP.l d1,d2:BEQ extend
; nope, so bump nextfree pointer
ADD.l !dbc{recsize},d0:ADDI #{SizeOf.Node},d0:MOVE.l d0,!dbc{nextfree}:MOVEQ #1,d0:RTS

; extend database by secondary extent records
extend
MOVE.l !dbc{extent_s},d1:ADDQ #1,d1:MOVE.l !dbc{recsize},d0
ADDI #{SizeOf.Node},d0:MULU d1,d0:ADDI #{SizeOf.DBlink},d0:MOVE.l d0,dbitemp
MOVE.l !dbc{memtype},d1
ALibJsr $c002:TST.l d0:BEQ badalloc

; new memory allocated, tie the link list together
MOVE.l !dbc{lastlink},a1:							; last memory block defined
MOVE.l d0,!dbc{lastlink}:MOVE.l d0,a0: ; new memory block
MOVE.l d0,!dbln{nextaddr}(a1):				 ; Point prev Block To new Block
ADDI #{SizeOf.DBlink},d0:MOVE.l d0,!dbc{nextfree}: ; point nextfree record to new memory
MOVE.l a1,d0:MOVE.l d0,!dbln{lastaddr}(a0):;point new block to prev block
CLR.l !dbln{nextaddr}(a0):						 ; clear next in new block
MOVE.l !dbc{firstlink},!dbln{baseaddr}(a0):; insert base address
MOVE.l dbitemp,d0:MOVE.l d0,!dbln{baseaddr}(a0):; insert blocksize

; increase primary extent size
MOVE.l !dbc{extent_p},d0:ADD.l !dbc{extent_s},d0:MOVE.l d0,!dbc{extent_p}
MOVEQ #2,d0:RTS
badalloc:CLR.l d0:RTS

._dbfindnxt
TST.l (a3):BEQ exitbad
MOVE.l !dbc{srch_curr},a0:BEQ exitbad:; get current position
MOVE.l !dbc{srch_strp},a1:; get string pointer
MOVE.l !dbc{srch_oset},d3:; current offset
MOVE.l !dbc{srch_lnth},d2:; current search length
MOVE.l !dbc{srch_strl},d1:; current string length
BRA dbfindlp1

._dbfind1:
MOVE.l #0,d3:;						default offset
MOVE.l !dbc{recsize},d2:; default length

._dbfind: ;
TST.l (a3):BEQ exitbad:; test if database is in use
CLR.l !dbc{srch_curr}:; clear search indicator
MOVE.l d1,d0:MOVE.l -(a2),d1: ; get string pointer and length
BEQ exitbad: ; can't search for null string

CMP.l !dbc{recsize},d1:BGT exitbad:; string is bigger than record

; copy string and (if ok) allocate pointer
MOVE.l d1,!dbc{srch_strl}:ALibJsr $cf01:TST.l d0:BEQ exitbad
MOVE.l d0,!dbc{srch_strp}

CMP.l !dbc{recsize},d3:BGT searchfail:; offset > length of record
MOVE.l d3,!dbc{srch_oset}:MOVE.l d2,!dbc{srch_lnth}

MOVE.l d3,d0:ADD.l d2,d0
CMP.l !dbc{recsize},d0:BGT searchfail:; offset+length > length of record

; ok lets grap the first record
JSR getfirst:TST.l d0:BEQ searchfail:; nothing to search

MOVE.l !dbc{srch_strp},a1:MOVE.l !dbc{srch_strl},d1

dbfindloop
	!pushreg{d0}:ADDI #{SizeOf.Node},d0:MOVE.l d0,a2
	JSR _search
	TST.l d0:BNE dbfindok
	!pullreg{a0}
dbfindlp1:JSR getnext:TST.l d0:BNE dbfindloop

; search failed, so clear out search variables
searchfail:
	CLR.l !dbc{srch_curr}
	MOVE.l !dbc{srch_strp},d0:BEQ exitbad
	ALibJsr $cf02:CLR.l !dbc{srch_strp}
	BRA exitbad

dbfindok:
!pullreg{d0}
MOVE.l d0,!dbc{current}:MOVE.l d0,!dbc{srch_curr}
MOVEQ #1,d0:RTS

; entry
; a1 = address of search string
; a2 = address of data record
; d1 = length of string
; d2 = length of record to search
; d3 = offset from start of record
._search:
!pushregs{a1-a6/d1-d4}
ADD.l d3,a2
slp1:
	TST.l d2:BEQ slexit
	MOVE.l d1,d0:MOVE.l a1,a0
slp2:
	MOVE.b (a0)+,d3:MOVE.b (a2)+,d4
; case sensitivity stuff
	TST.l csenseflag:BNE scmpdo
	CMP.b #"z",d3:BHI scmpchk2
	CMP.b #"a",d3:BCS scmpchk2
	AND.b #255-32,d3
scmpchk2:
	CMP.b #"z",d4:BHI scmpdo
	CMP.b #"a",d4:BCS scmpdo
	AND.b #255-32,d4
scmpdo:
	CMP.b d3,d4:BEQ smatch1
	SUBQ #1,d2
	BRA slp1

slexit:CLR.l d0:!pullregs{d1-d4/a1-a6}:RTS

smatch1:
	SUBQ #1,d0:BEQ smatched
	SUBQ #1,d2:BEQ slexit
	BRA slp2

smatched:; found string, clean up stack and return
MOVEQ #1,d0:!pullregs{d1-d4/a1-a6}:RTS

fhandle:Ds.l 1
execstore:Ds.l 1

._dbload
MOVE.l d5,execstore
TST.l (a3):BEQ dbnotused
!pushregs{a0-a6/d1-d2}:JSR _dbkill:!pullregs{d1-d2/a0-a6}
dbnotused:
	MOVE.l d1,d0:MOVE.l d0,fhandle
	MOVE.l d2,-(a7):ALibJsr ##[$BE15]:MOVE.l (a7)+,d2
	TST.l d0:BEQ exitbad
	MOVE.l fhandle,d1:MOVE.l #1005,d2:JSR {#_Open}(a6):MOVE.l d0,fhandle
	BEQ exitbad
	; read in header
	MOVE.l fhandle,d1:MOVE.l a3,d2:MOVEQ #26,d3:JSR {#_Read}(a6)
	; check it is valid
	MOVE.l !dbc{pad},d0:CMPI #4412492,d0:BNE badload

	; header is OK, so allocate memory

	; get size of records and size of each record
	MOVE.l !dbc{extent_p},d1:MOVE.l !dbc{recsize},d0
	ADDI #{SizeOf.Node},d0:ADDQ #1,d1:MULU d1,d0

	; add on control information and store in temp location
	ADDI #{SizeOf.DBlink},d0:ADDI #{SizeOf.List},d0:MOVE.l d0,dbitemp

	; set memory type and call allocation routine
	MOVE.l memtype,d1:ALibJsr $c002:TST.l d0:BEQ badload

	; set relavant pointers to memory block
	MOVE.l d0,!dbc{firstlink}:MOVE.l d0,!dbc{lastlink}
	MOVE.l d0,a0:MOVE.l d0,!dbl{baseaddr}

	; point linkhdr to list header struct in memory block
	ADDI #{SizeOf.DBlink},d0:MOVE.l d0,!dbc{linkhdr}:MOVE.l d0,a2

	; point nextfree location at first available record
	ADDI #{SizeOf.List},d0:MOVE.l d0,!dbc{nextfree}

	; move size of memory block into linkage code
	MOVE.l dbitemp,d0:MOVE.l d0,!dbl{size}

	; configure other fields
	MOVE.l !dbc{realrecs},d0:MOVE.l d0,!dbc{recused}
	CLR.l !dbc{current}:CLR.l !dbl{lastaddr}:CLR.l !dbl{nextaddr}
	CLR.l !dbc{srch_curr}
	CLR.w !dbc{modified}

	; now set up the list header
	CLR.l !alist{lh_Tail}(a2)
	MOVE.l a2,d0:MOVE.l d0,!alist{lh_TailPred}(a2)
	ADDQ #!alist{lh_Tail},d0:MOVE.l d0,!alist{lh_Head}(a2)

	; database control is set up, now load the data
	MOVE.l !dbc{realrecs},d0

.lloop:
	TST.l d0:BEQ loaddone
	MOVE.l d0,dbitemp
	MOVE.l fhandle,d1:MOVE.l !dbc{recsize},d3
	MOVE.l !dbc{nextfree},d2:MOVE.l d2,a1:ADDI #{SizeOf.Node},d2:MOVE.l d2,!anode{ln_Name}(a1)
	JSR {#_Read}(a6)
	!pushreg{a6}:MOVE.l execstore,a6
	MOVE.l !dbc{nextfree},a1:MOVE.l !dbc{linkhdr},a0:JSR {#_AddTail}(a6)
	!pullreg{a6}

; make record current and bump pointer
	MOVE.l !dbc{nextfree},d0:MOVE.l d0,!dbc{current}
	ADD.l !dbc{recsize},d0:ADDI #{SizeOf.Node},d0:MOVE.l d0,!dbc{nextfree}
	MOVE.l dbitemp,d0:SUBQ #1,d0
	BRA lloop
loaddone:
	MOVE.l fhandle,d1:JSR {#_Close}(a6):MOVE.l #1,d0:RTS
badload:
	MOVE.l fhandle,d1:JSR {#_Close}(a6)
	MOVE.l #0,!dbc{pad}:CLR.l d0:RTS
; ------

._dbsave
TST.l (a3):BEQ exitbad:; not in use
TST.l !dbc{realrecs}:BEQ exitbad:; no records to write
MOVE.l #1006,d2:JSR {#_Open}(a6):MOVE.l d0,fhandle:BEQ exitbad

; write out control Info
MOVE.l fhandle,d1:MOVE.l a3,d2:MOVEQ #26,d3:JSR {#_Write}(a6)

JSR getfirst
saveloop:
	TST.l d0:BEQ endsave
	!pushreg{d0}:ADDI #{SizeOf.Node},d0
	MOVE.l d0,d2:MOVE.l fhandle,d1:MOVE.l !dbc{recsize},d3
	JSR {#_Write}(a6):!pullreg{a0}:JSR getnext:BRA saveloop
endsave:
	MOVE.l fhandle,d1:JSR {#_Close}(a6)
	CLR.w !dbc{modified}
	MOVE.l #1,d0:RTS

chngpos:Ds.w 1
._dbupd
; update the current record
TST.l (a3):BEQ exitbad
MOVE.w #1,!dbc{modified}

TST.l !dbc{current}:BEQ _dbadd
TST.l !dbc{realrecs}:BEQ _dbadd

MOVE.l !dbc{current},a1
; first update the data in the record
MOVE.l d1,a0:CLR.l d0:MOVE.w -2(a0),d0:SUBQ #8,d0
MOVE.l !dbc{current},d1:MOVE.l d1,a1:ADDI #{SizeOf.Node},d1
MOVE.l d1,a1:MOVE.l !dbc{recsize},d1

; scan for difference in key
MOVE.w !dbc{keyed},chngpos:BEQ updlp1
!pushregs{a0-a1/d0-d2}

MOVE.l !dbc{keylength},d0
updlp0:TST.l d0:BEQ donekeyscan
MOVE.b (a0)+,d1:MOVE.b (a1)+,d2
CMP.b d1,d2
BNE isdif
SUBQ #1,d0:BRA updlp0
donekeyscan:CLR.w chngpos
isdif:
!pullregs{d0-d2/a0-a1}

; transfer data till record is full
updlp1:TST.l d1:BEQ upddone
TST.l d0:BEQ updblank
MOVE.b (a0)+,(a1)+
SUBQ #1,d0:SUBQ #1,d1:BRA updlp1

; if record bigger than data added, blank fill rest
updblank:CLR.l d0
updlp2:MOVE.b d0,(a1)+:SUBQ #1,d1:BNE updlp2
upddone:TST.w chngpos:BEQ updfin:; not keyed so thats all

; otherwise we need remove and reinsert into list
MOVE.l !dbc{current},a1:JSR {#_Remove}(a6):; remove current entry from list

MOVE.l !dbc{current},d0:ADDI #{SizeOf.Node},d0
; setup and call findrec routine
MOVE.l d0,a1:CLR.l d1:MOVE.l !dbc{keylength},d2

JSR findrecpos:TST.l d0:BNE doupd
MOVE.l !dbc{linkhdr},a0:MOVE.l !dbc{current},a1
JSR {#_AddTail}(a6):BRA updfin

doupd:
MOVE.l d0,a0:MOVE.l !anode{ln_Pred}(a0),a2
MOVE.l !dbc{linkhdr},a0:MOVE.l !dbc{current},a1
JSR {#_Insert}(a6)
updfin:RTS


._dbadd
; add record at current position or in ordered sequence if
; the database is keyed
TST.l (a3):BEQ exitbad

MOVE.w #1,!dbc{modified}

TST.w !dbc{keyed}:BNE _dbaddi
!pushregs{a0-a6/d1-d2}
JSR storerec:TST.l !dbc{current}:BEQ doaddfirst
MOVE.l !dbc{current},a2:JSR getlinkdat:JSR {#_Insert}(a6)
JSR bumprec:!pullregs{d1-d2/a0-a6}:RTS
doaddfirst:JSR getlinkdat:JSR {#_AddHead}(a6)
JSR bumprec:!pullregs{d1-d2/a0-a6}:RTS

; add in ordered position
._dbaddi
; add record in ordered sequence
!pushregs{a0-a6/d1-d2}
JSR storerec:MOVE.l !dbc{nextfree},d0:ADDI #{SizeOf.Node},d0
; setup and call findrec routine
MOVE.l d0,a1:CLR.l d1:MOVE.l !dbc{keylength},d2

JSR findrecpos:TST.l d0:BNE doinsert
JSR getlinkdat:JSR {#_AddTail}(a6):BRA doneaddi

doinsert
MOVE.l d0,a0:MOVE.l !anode{ln_Pred}(a0),a2
JSR getlinkdat:JSR {#_Insert}(a6)
doneaddi:JSR bumprec:!pullregs{d1-d2/a0-a6}:RTS


; add record at the start of the database
; if db is keyed ignore and do an indexed add
._dbaddf
TST.l (a3):BEQ exitbad
MOVE.w #1,!dbc{modified}

TST.w !dbc{keyed}:BNE _dbaddi
!pushregs{a0-a6/d1-d2}
JSR storerec
; call linkhead exec routine
JSR getlinkdat:JSR {#_AddHead}(a6):JSR bumprec
!pullregs{d1-d2/a0-a6}:RTS

; add record at the end of the database
; if db is keyed ignore and do an indexed add
._dbaddl
TST.l (a3):BEQ exitbad
MOVE.w #1,!dbc{modified}

TST.w !dbc{keyed}:BNE _dbaddi
!pushregs{a0-a6/d1-d2}
JSR storerec
; call linktail exec routine
JSR getlinkdat:JSR {#_AddTail}(a6):JSR bumprec
!pullregs{d1-d2/a0-a6}:RTS

._laddr
TST.l (a3):BEQ exitbad
MOVE.l !dbc{linkhdr},d0:RTS

._addr
TST.l (a3):BEQ exitbad
MOVE.l !dbc{firstlink},d0:RTS

._nxtfree
TST.l (a3):BEQ exitbad
MOVE.l !dbc{nextfree},d0:RTS

._numrecs
TST.l (a3):BEQ exitbad
MOVE.l !dbc{realrecs},d0:RTS

._dbinit1
; do not key the database
; check if database exists, and kill it if it does
TST.l (a3):BEQ dbnotused1
!pushregs{a0-a6/d1-d2}:JSR _dbkill:!pullregs{d1-d2/a0-a6}
dbnotused1:CLR.w !dbc{keyed}:; remove key flag
; store primary and secondary record blocks
MOVE.l d1,!dbc{extent_p}:MOVE.l d2,!dbc{extent_s}

; get record size and store in object
MOVE.l d3,a2:CLR.l d3:MOVE.w -2(a2),d3:SUBQ #8,d3
MOVE.l d3,!dbc{recsize}:MOVE.l d3,!dbc{keylength}
BRA _dbinit


._dbinit2
; check if database exists, and kill it if it does
TST.l (a3):BEQ dbnotused2
!pushregs{a0-a6/d1-d2}:JSR _dbkill:!pullregs{d1-d2/a0-a6}
dbnotused2:MOVE.l d4,!dbc{keylength}
MOVEQ #1,d4:MOVE.w d4,!dbc{keyed}

; store primary and secondary record blocks
MOVE.l d1,!dbc{extent_p}:MOVE.l d2,!dbc{extent_s}

; get record size and store in object
MOVE.l d3,a2:CLR.l d3:MOVE.w -2(a2),d3:SUBQ #8,d3:MOVE.l d3,!dbc{recsize}

._dbinit
; calculate size for each record & mult by # of recs required
MOVE.l d3,d0:ADDI #{SizeOf.Node},d0:ADDQ #1,d1:MULU d1,d0

; add on control information and store in temp location
ADDI #{SizeOf.DBlink},d0:ADDI #{SizeOf.List},d0:MOVE.l d0,dbitemp

; set memory type and call allocation routine
MOVE.l memtype,d1:MOVE.l d1,!dbc{memtype}
ALibJsr $c002:TST.l d0:BEQ exitbad

; set relavant pointers to memory block
MOVE.l d0,!dbc{firstlink}:MOVE.l d0,!dbc{lastlink}:MOVE.l d0,a0:MOVE.l d0,!dbl{baseaddr}

; point linkhdr to list header struct in memory block
ADDI #{SizeOf.DBlink},d0:MOVE.l d0,!dbc{linkhdr}:MOVE.l d0,a2

; point nextfree location at first available record
ADDI #{SizeOf.List},d0:MOVE.l d0,!dbc{nextfree}

; move size of memory block into linkage code
MOVE.l dbitemp,d0:MOVE.l d0,!dbl{size}

; zero out other fields
CLR.l !dbc{recused}:CLR.l !dbc{realrecs}:CLR.l !dbc{current}
CLR.l !dbl{lastaddr}:CLR.l !dbl{nextaddr}
CLR.l !dbc{srch_curr}:
CLR.w !dbc{modified}

; now set up the list header
CLR.l !alist{lh_Tail}(a2)
MOVE.l a2,d0:MOVE.l d0,!alist{lh_TailPred}(a2)
ADDQ #!alist{lh_Tail},d0:MOVE.l d0,!alist{lh_Head}(a2)

MOVE.l #4412492,d0:MOVE.l d0,!dbc{pad}

dbinitdone:MOVE.l #1,d0:RTS

dbitemp:Ds.l 1
