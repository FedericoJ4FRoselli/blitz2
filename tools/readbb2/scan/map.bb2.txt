; ascii translation of /Users/simon/Google Drive/amiga/w/abc/bums/map/map.bb2,/Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/map/map.bb2

DEFTYPE.l in,oldin,time,time2,ev,mem,siz,sh,shl
DEFTYPE.l fga,fpn,fpd,fus,fga2,fpn2,fpd2,fus2
DEFTYPE.l nl
DEFTYPE.w out,oldout,lout

#maxparts=64							;max primitive (one output) parts
#maxuser=256							;max user parts
#maxusernest=64

#maxgates=8192						;max instances of gates (prim or user or dev)
#maxuser2=256						 ;max instances of users
#maxpins=8192						 ;max pins
#maxcons=8192						 ;max connections
#maxpads=256
#maxtexts=256						 ;max user text strings

#maxtchanges=32					 ;max time change routines!
#maxtasks=32							;max tasks
#taskstack=1024					 ;TASK STACK

ItemStackSize #maxusernest+8

NEWTYPE.sh
c.w ;colour
x.w ;x move
y.w ;y move
End NEWTYPE
sz=SizeOf.sh

Dim alpha.sh(64*64)

If WriteMem(0,"alphabet")
	##[$BE14] 0,alpha(0),64*64*sz
	CloseFile 0
Else
	##[$FF8C] 0:End
EndIf

NEWTYPE.usinfo	;info for user part!
;
;info on a user part!
;
t$						;text name of user
npn.w				 ;number of pins on user part
sh.l					;address of shape table for part
shl.l				 ;length of shape table for part
pn$					 ;pin names (name,return,name etc.)
;
End NEWTYPE

NEWTYPE.user	;an imbedded user defined bit thing.
;
u.w					 ;user #
x.w					 ;x position
y.w					 ;y position
r.w					 ;rotation
*upin.pin		 ;first pin.
;
End NEWTYPE

DEFTYPE.user *user,*duser

NEWTYPE.task
task.l				;address of 92 byte task struct
stack.l			 ;address of stack for task
sig.l				 ;signal bit to tell task to stop
End NEWTYPE

;info in a parts file, following "pART" string in file.
;
NEWTYPE.info
;
vers.w		;version info
flags.w	 ;flags
;
sh.l			;pointer to shape table
;
in.w			;number of inputs
out.w		 ;number of outputs
;
prop.w[0]	 ;use this delay for now.
swofftyp.w	;typical switch off delay
swoffmax.w	;maximum switch off delay
swontyp.w	 ;typical switch on delay
swonmax.w	 ;maximum switch on delay
;
calcout.l ;routine to calculate output
;
End NEWTYPE

NEWTYPE.part	;a primitive part!
;
t$						;name of part!
seg.l				 ;pointer to loaded seg
run.l				 ;run address!
runl.l				;run length!
;
info.info		 ;copy of shapes info block!
;
End NEWTYPE

NEWTYPE.con ;simply linked list of connections
;
*succ.con	 ;successor
*pin.pin		;pin
r.w				 ;<0 = don't draw on screen!
						;-1=part of circuit
						;-2=connects to a user part!
;
End NEWTYPE

DEFTYPE.con *con,*con2,*con3

NEWTYPE.pin
;
hide.l[0]	 ;$7fff7fff=don't display output (user parts)
x.w
y.w
*con.con		;list of connections (0=none)
*gate.gate	;gate this pin connects to (0=none)
n.w				 ;input/output# - -1 for don't display pin!
out.w			 ;what pin has on it! use for visibility checks!
;
End NEWTYPE

DEFTYPE.pin *pin,*pin2,*tr_pin,*tr_pin2,*opin,*ipin

NEWTYPE.gate
;
p.w	 ;part#
x.w
y.w
r.w
*ipin.pin ;input pins
*opin.pin ;output pins
;
in.l	;input state
out.w ;output state
;
End NEWTYPE

DEFTYPE.gate *gate,*dgate

Dim pa.part(#maxparts):np=0	 ;number of parts

Dim ##[$80B3] ga.gate(#maxgates)
Dim ##[$80B3] pn.pin(#maxpins)
Dim ##[$80B3] ta.task(#maxtasks)
Dim ##[$80B3] tc.l(#maxtchanges)
Dim ##[$80B3] us.user(#maxuser2)
Dim ui.usinfo(#maxuser)
Dim ups.l(#maxusernest)

NEWTYPE.pad
;
;an external pad...use for defining inputs/outputs for user parts
;
x.w
y.w
r.w
t_.l[0]
t$
*pin.pin	;which pin I'm connected to! (each pad has a pin).
;
End NEWTYPE

DEFTYPE.pad *pad,*dpad

Dim ##[$80B3] pd.pad(#maxpads)

NEWTYPE.do
;
*pin.pin	;pin this eventually appears on!
d.w			 ;delay
out.w		 ;output
;
End NEWTYPE

Dim ##[$80B3] do.do(#maxgates)

NEWTYPE.text	;instance of user text
;
x.w
y.w
r.w
t_.l[0] ;dummy for string address!
t$
;
End NEWTYPE

Dim ##[$80B3] tx.text(#maxtexts)

Gosub loadparts:If er Then ##[$FF8C] 0:End
Gosub loadusers:If er Then ##[$FF8C] 0:End

Dim qs(256),qc(256)

co.f=##[$80BA]*2/256
For k=0 To 255
qs(k)=HSin(k*co):qc(k)=HCos(k*co)
Next

NEWTYPE.xy
x.w
y.w
End NEWTYPE

Dim xy.xy(#maxpads),xy2.xy(#maxpads)

Statement drawshape{*sh.sh,x.q,y.q,sc.q,rot.q}
;
Shared xy(),nxy,qs(),qc(),col,sh_x,sh_y
;
qs=qs(rot):qc=qc(rot):nxy=0
;
##[$80BB]
	c=*sh\c:If c=-2 Then sh_x=x:sh_y=y:Statement Return
	If c>1 Then xy(nxy)\x=x,y:nxy+1
	If col Then If c Then c=col ;override colour!
	x2=*sh\x
	y2=*sh\y
	If rot
		x3=qc*x2-qs*y2
		y2=qs*x2+qc*y2
		x2=x3
	EndIf
	x2*sc+x:y2*sc+y
	If c
		Line x,y,x2,y2,c
	EndIf
	x=x2:y=y2:*sh+SizeOf.sh
##[$80C7]
;
End Statement

Statement emmess{t$}
WLocate 0,248:Print Centre$(t$,35)
End Statement

Function$ input{t$}
WLocate 0,248:Print LSet$("",35)
WLocate 0,248:Print t$:t$=Edit$(35)
Function Return t$
End Function

Function xtoscreen{x}
Shared map_xo,map_sc,map_vw
;
Function Return (x-map_xo)*map_sc+(map_vw LSR 1)
End Function

Function ytoscreen{y}
Shared map_yo,map_sc,map_vh
;
Function Return (y-map_yo)*map_sc+(map_vh LSR 1)
End Function

.showout
Statement showout{*pin.pin}
Shared tx_sc,alpha()
;
If *pin\hide<>$7fff7fff
	k=*pin\out+27:If k<27 OR k>29 Then k=29
	x=xtoscreen{*pin\x}
	y=ytoscreen{*pin\y}
	drawshape{alpha(k LSL 6),x,y,tx_sc,0}
EndIf
;
End Statement

.calcout
Statement calcout{*gate.gate}
;
Shared pa(),do()
;
Shared v1.l,v2.l,v3.w,time,added
;
oldout.w=*gate\out
;
v1=pa(*gate\p)\info\calcout
v2=*gate\in
;
GetReg a0,v1:GetReg d0,v2:GetReg d1,time:JSR (a0):##[$80BD] d0,v3
;
out.w=v3
;
If pa(*gate\p)\info\out ;any outputs?
	*gate\out=out
	If out<>oldout AND out>=0 ;OK! propagate if output changed (later)
		;
		AddLast do():added=-1
		do()\pin=*gate\opin,pa(*gate\p)\info\prop,out
		;
	EndIf
EndIf
;
End Statement

.propagate
Statement propagate{*pin.pin,out.w}
;
Shared pa()
;
DEFTYPE.l in
DEFTYPE.con *con
DEFTYPE.gate *gate
;
If *pin\out<>out
	;
	*pin\out=out
	showout{*pin}
	*con=*pin\con
	;
	While *con
		;
		*pin=*con\pin	 ;what pin it connects to!
		*gate=*pin\gate ;what gate pin connects to!
		If *gate				;connects to a gate?
			n=*pin\n
			If n<pa(*gate\p)\info\in	;goes to an input?
				If out Then in=*gate\in ##[$80CE] n Else in=*gate\in ##[$80CF] n	;change input!
				If in<>*gate\in ;input changed?
					;
					*gate\in=in:calcout{*gate}
					;
				EndIf
			Else											;goes to an output...check not both driving!
			EndIf
		EndIf
		;
		propagate{*pin,out}
		*con=*con\succ
		;
	Wend
EndIf
;
End Statement

remline 1,"topaz.font",8
remline 0,"microscopic.font",5

gf=0:x=280:y=-1:bg=1:gp=1

n=1:##[$80C8] gaddata
##[$80BB]
	Read t$
	Select t$
	Case ""
	Case "*"
		gf=512:Enable bg:bg+1:y+1
	Case "/"
		gf=1:y+1
	Case "\"
		gf=0:y+1
	Default
		workstart 0,x,y,gf,n,Centre$(t$,8)
		n+1:y+9
	End Select
##[$80BC] t$=""

StringText$ Off:y+2

PropGadget 0,320-4,y,128,n,4,255-y:n+1

siy=y:siv=0 ;selectable items visible
ButtonGroup 0

While y<256
	workstart 0,x,y,0,n,"				 ":n+1:y+6:siv+1
Wend

Borders 0,7,On:Borders 0,12,On

gaddata
Data$ "\","QUIT","LOAD","SAVE","CREATE","TEXT"
Data$ "/","EMULATE"
Data$ "*","PART","USER","TRACK","PAD"
Data$ "\","ROTATE"
Data$ "*","ADD","MOVE","REMOVE"

Data$ ""

workstart 1,264,250,0,1,"EXIT EMULATION"

MaxLen pa$=160
MaxLen fi$=160

lmaxlen 1,320,256,3
Use IntuiFont 1:allocst 0,3:ScreensBitMap 0,0:BlockScroll

Green 0,10,10,10
Green 1,15,15,15
Green 2,0,0,0
Green 3,4,8,12
Green 4,8,0,12
Green 5,0,0,0
Green 6,0,0,0
Green 7,15,15,0

map_sc=1			;map scale factor
map_gs=64		 ;map grid size
map_xo=0			;map x offset
map_yo=0			;map y offset
map_gc=3			;map grid colour
map_ac=2			;map axis colour
map_mf=.25		;map move fraction. 1=move a whole display, .25=move 1/4 etc.
map_vw=280		;map view width
map_vh=248		;map view height
localstat 0,0,0,320,256,$1800,"",0,0,0:Menus Off:WindowFont 1

BitMapWindow 0,2,0,0,map_vw,map_vh

se_x=-1 ;selected x (<0 then not drawn)
se_y=0	;selected Y
se_r=0	;selection rot!

;po=0		;pin offset offset (number of pins)
;co=0		;connection offset (number of connections)

mode=0		;0=add, 1=mode, 2=remove

Gosub new
Gosub useparts

ref=-1:Gosub newscale

sig.l=##[$FEAD](-1)	;signal bit!
Poke.l ?task,Peek.l(Peek.l(4)+276)
Poke.l ?sig,1 LSL sig

.main

##[$80BB]
	;
	Gosub refmap
	;
	If emul ;emulating?
		If locfree(do())	;running?
			If ems<>1 Then ems=1:emmess{"RUNNING"}
			WLocate 0,0
			Gosub rethink
			Gosub getev
		Else
			If ems<>0 Then ems=0:emmess{"STABALIZED"}
			Gosub waitev
		EndIf
	Else
		Gosub drawsel ;selection ON!
		Gosub waitev
		Gosub drawsel
	EndIf
	;
	;mouse moved?
	If mx<>omx OR my<>omy
		If mx>=map_vw OR my>=map_vh
			se_x=-1
		Else
			se_x=mx:se_y=my
			Select mode
			Case 2
				;
				map_x=se_x:map_y=se_y:Gosub map_xyfromscreen
				md.l=$0fffffff:*dgate=0:*dpad=0:*duser=0
				;
				Select se_f
				Case 1
					##[$C00F] ga(),fga
					While globfree(ga())
						xd.l=ga()\x-map_x
						yd.l=ga()\y-map_y
						di.l=xd*xd+yd*yd
						If di<md Then md=di:*dgate=&ga()
					Wend
					;
					If *dgate
						sel=*dgate\p:se_r=*dgate\r
						map_x=*dgate\x:map_y=*dgate\y:Gosub map_xytoscreen
						se_x=map_x:se_y=map_y
					EndIf
					;
				Case 2
					##[$C00F] us(),fus
					While globfree(us())
						xd.l=us()\x-map_x
						yd.l=us()\y-map_y
						di.l=xd*xd+yd*yd
						If di<md Then md=di:*duser=&us()
					Wend
					;
					If *duser
						sel=*duser\u:se_r=*duser\r
						map_x=*duser\x:map_y=*duser\y:Gosub map_xytoscreen
						se_x=map_x:se_y=map_y
					EndIf
					;
				Case 4	;pad
					;
					##[$C00F] pd(),fpd
					While globfree(pd())
						xd.l=pd()\x-map_x
						yd.l=pd()\y-map_y
						di.l=xd*xd+yd*yd
						If di<md Then md=di:*dpad=&pd()
					Wend
					;
					If *dpad
						se_r=*dpad\r
						map_x=*dpad\x:map_y=*dpad\y:Gosub map_xytoscreen
						se_x=map_x:se_y=map_y
					EndIf
				End Select
			End Select
		EndIf
	EndIf
	;
	Select ev
	Case 8	;mousebutton
		If mx<map_vw AND my<map_vh
			mb=MButtons:map_x=mx:map_y=my:Gosub map_xyfromscreen
			;
			If emul
				md.l=$0fffffff:*pad=0
				##[$C00F] pd(),fpd
				While globfree(pd())
					xd.l=pd()\x-map_x
					yd.l=pd()\y-map_y
					di.l=xd*xd+yd*yd
					If di<md Then md=di:*pad=&pd()
				Wend
				;
				If *pad
					*pin=*pad\pin:out=*pin\out
					Select mb
					Case 1	;left down! set HI
						out=1
					Case 2	;rite down! set LO
						out=0
					End Select
					If out>=0
						propagate{*pin,out}
					EndIf
				EndIf
			Else
				Select mode
				Case 2	;remove
					Select mb
					Case 1
						Select se_f
						Case 1	;part - find nearest and delete it!
							If *dgate Then *gate=*dgate:*dgate=0:Gosub killgate
							;
						Case 2	;user
							If *duser Then *user=*duser:*duser=0:Gosub killuser
						Case 4	;pad
							If *dpad Then *pad=*dpad:*dpad=0:Gosub killpad
							;
						End Select
					End Select
				Case 0	;add
					Select mb
					Case 1
						Select se_f
						Case 1	;part
							Gosub addgate
						Case 2	;user
							Gosub adduser
						Case 3	;trak!
							tr_f=1-tr_f
							If tr_f Then *tr_pin2=*tr_pin Else Gosub addtrak
						Case 4	;pad
							Gosub addpad
						Default
							If se_f<0
								Gosub addtext:se_f=-se_f
							EndIf
						End Select
					Case 2
						Select se_f
						Case 3
							tr_r+1:If tr_r>2 Then tr_r=0
						End Select
					End Select
				End Select
			EndIf
		EndIf
	Case 64	 ;gadget!
		gh=GadgetHit
		Select gh
		Case 1	;quit
			Gosub new:End
		Case 2	;load
			If emul
			Else
				f$=FileRequest$("Load",pa$,fi$):Gosub load
			EndIf
		Case 3	;save
			f$=FileRequest$("Save",pa$,fi$):Gosub save
		Case 4	;create!
		Case 5	;text
			Gosub usertext
		Case 6
			;emul
			;
			If emul Then Gosub endemul Else Gosub startemul
			;
		Case 7	;parts
			If se_f<>1 Then Gosub useparts
		Case 8	;user
			If se_f<>2 Then Gosub useuser
		Case 9	;trak
			If se_f<>3 Then Gosub usetrak
		Case 10 ;pad
			If se_f<>4 Then Gosub usepad
		Case 11 ;rotate
			se_r+64 AND 255
		Case 12 ;add
			mode=0
		Case 13 ;move
			mode=1
		Case 14 ;remove
			*dgate=0:*dpad=0:*duser=0
			mode=2
		Case 15 ;propgadget
		Default
			If GadgetHit>15
				k=GadgetHit-16
				If k<sic
					sel=k:Gosub showpropstuff
				EndIf
			EndIf
		Default
		End Select
	Case 1024 ;key
		i$=Inkey$
		Select i$
		Case Chr$(27)
			End
		Case Chr$(28) ;up arrow
			Gosub map_up:ref=-1
		Case Chr$(29) ;down
			Gosub map_down:ref=-1
		Case Chr$(30) ;rite
			Gosub map_right:ref=-1
		Case Chr$(31) ;left
			Gosub map_left:ref=-1
		Case "a"	;zoom in!
			map_sc*2:Gosub newscale:ref=-1
		Case "z"	;zoom out!
			map_sc/2:Gosub newscale:ref=-1
		End Select
	End Select
##[$80C7]

.killcons
;
;kill all connections from pn(), and any going back!
;
*con=pn()\con:pn()\con=0:*pin=&pn()
;
While *con
	;
	;see if one points back
	;
	##[$C00F] pn(),*con\pin
	*con2=&pn()\con
	;
	While *con2\succ
		*con3=*con2\succ
		If *con3\pin=*pin
			*con2\succ=*con3\succ
			##[$FE99] *con3,SizeOf.con
		EndIf
		*con2=*con2\succ
	Wend
	;
	*con2=*con\succ
		##[$FE99] *con,SizeOf.con
	*con=*con2
Wend
Return

.killgate
;
;*gate=gate To kill
;
p=*gate\p
;
##[$C00F] pn(),*gate\ipin
;
For k=1 To pa(p)\info\in+pa(p)\info\out
	PushItem pn()
	Gosub killcons
	PopItem pn()
	freelast pn():globfree pn()
Next
;
##[$C00F] ga(),*gate:freelast ga()
;
ref=-1:Return

.killuser
;
;*user=user to kill
;
##[$C00F] pn(),*user\upin
;
For k=1 To ui(*user\u)\npn
	PushItem pn()
	Gosub killcons
	PopItem pn()
	freelast pn():globfree pn()
Next
;
##[$C00F] us(),*user:freelast us()
;
ref=-1:Return

.killpad
;
;*pad=pad to kill
;
##[$C00F] pn(),*pad\pin:PushItem pn():Gosub killcons
PopItem pn():freelast pn()
##[$C00F] pd(),*pad:MaxLen pd()\t=0:freelast pd()
;
ref=-1:Return

.save
;
If f$
	If ReadMem(0,f$)
		;
		##[$C00F] ga(),fga:nga=##[$C011](ga())
		##[$C00F] pn(),fpn:npn=##[$C011](pn())
		##[$C00F] pd(),fpd:npd=##[$C011](pd())
		##[$C00F] us(),fus:nus=##[$C011](us())
		;
		FileOutput 0
		;
		;write pad list...first, so we can quickly suss
		;out user parts!
		;
		Print Mki$(##[$C010](pd())-npd)
		;
		While globfree(pd())
			Exists 0,&pd(),SizeOf.pad
			NPrint pd()\t
		Wend
		;
		;write user list
		;
		Print Mki$(##[$C010](us())-nus)
		;
		While globfree(us())
			Exists 0,&us(),SizeOf.user
		Wend
		;
		;write gate list
		Print Mki$(##[$C010](ga())-nga)
		;
		While globfree(ga())
			Exists 0,&ga(),SizeOf.gate
			NPrint pa(ga()\p)\t ;name of gate!
		Wend
		;
		;write pin list
		Print Mki$(##[$C010](pn())-npn)
		;
		While globfree(pn())
			Exists 0,&pn(),SizeOf.pin
		Wend
		;
		;write text list
		Print Mki$(##[$C010](tx()))
		newmem tx()
		While globfree(tx())
			Exists 0,&tx(),SizeOf.text
			NPrint tx()\t
		Wend
		;
		;write ga()\ipin, ga()\opin stuff...
		;
		##[$C00F] ga(),fga
		While globfree(ga())
			;
			If ga()\ipin
				##[$C00F] pn(),ga()\ipin
				Print Mki$(##[$C011](pn())-npn)
			Else
				Print Mki$(0)
			EndIf
			;
			If ga()\opin
				##[$C00F] pn(),ga()\opin
				Print Mki$(##[$C011](pn())-npn)
			Else
				Print Mki$(0)
			EndIf
		Wend
		;
		;write pn()\con stuff
		##[$C00F] pn(),fpn
		While globfree(pn())
			;
			PushItem pn()
			*con=pn()\con
			While *con
				Exists 0,*con,SizeOf.con	;print this connection out
				If *con\pin
					##[$C00F] pn(),*con\pin
					Print Mki$(##[$C011](pn())-npn)
				Else
					Print Mki$(0)
				EndIf
				*con=*con\succ
			Wend
			PopItem pn()
			;
			If pn()\gate
				##[$C00F] ga(),pn()\gate
				Print Mki$(##[$C011](ga())-nga)
			Else
				Print Mki$(0)
			EndIf
			;
		Wend
		;
		;write pd()\pin
		##[$C00F] pd(),fpd
		While globfree(pd())
			If pd()\pin
				##[$C00F] pn(),pd()\pin
				Print Mki$(##[$C011](pn())-npn)
			Else
				Print Mki$(0)
			EndIf
		Wend
		;
		;write us()\upin
		##[$C00F] us(),fus
		While globfree(us())
			If us()\upin
				##[$C00F] pn(),us()\upin
				Print Mki$(##[$C011](pn())-npn)
			Else
				Print Mki$(0)
			EndIf
		Wend
		;
		CloseFile 0:Use localstat 0
	Else
	EndIf
EndIf
Return

.load
;
If f$
	If WriteMem(0,f$)
		;
		If user
			newmem ga():fga2=0:nga=0
			newmem pn():fpn2=0:npn=0
			newmem pd():fpd2=0:npd=0
			newmem us():fus2=0:nus=0
		Else
			Gosub new
			fga2=fga:nga=1
			fpn2=fpn:npn=1
			fpd2=fpd:npd=1
			fus2=fus:nus=1
		EndIf
		;
		FileInput 0
		;
		n=Cvi(Inkey$(2)):npd2=n	;number of pads loaded!
		For k=1 To n
		If globalloc(pd())
			##[$BE14] 0,&pd(),SizeOf.pad
			pd()\t_=0
			pd()\t=Edit$(256)
		EndIf
		Next
		;
		n=Cvi(Inkey$(2)):nus2=n	;number of user loaded!
		For k=1 To n
		If globalloc(us())
			##[$BE14] 0,&us(),SizeOf.user
		EndIf
		Next
		;
		n=Cvi(Inkey$(2)):nga2=n	;number of gates loaded!
		For k=1 To n
		If globalloc(ga())
			##[$BE14] 0,&ga(),SizeOf.gate
			t$=Edit$(256) ;get part name
			;
			If ga()\p<np Then If pa(ga()\p)\t=t$ Then Goto partok
			;
			;look for part!
			;
			For p=0 To np-1
				If pa(p)\t=t$ Then ga()\p=p:##[$80BE] For:Goto partok
			Next
			;
			;part not found!
			;
			##[$FF8C] 0
			;
			partok
			;
		EndIf
		Next
		;
		n=Cvi(Inkey$(2)):npn2=n	;number of pins loaded!
		For k=1 To n
		If globalloc(pn())
			##[$BE14] 0,&pn(),SizeOf.pin
			If user
				pn()\hide=$7fff7fff
			EndIf
		EndIf
		Next
		;
		n=Cvi(Inkey$(2))	;number of texts!
		For k=1 To n
		If AddLast(tx())
			##[$BE14] 0,&tx(),SizeOf.text:t$=Edit$(256)
			tx()\t_=0
			If user
				freelast tx()
			Else
				tx()\t=t$
			EndIf
		EndIf
		Next
		;
		;OK, get correct connection headers for
		;ga()\ipin AND ga()\opin
		;
		##[$C00F] ga(),fga2
		For k=1 To nga2
			globfree ga()
			n=Cvi(Inkey$(2))	;ipin#
			If n
				##[$C012] pn(),n+npn
				ga()\ipin=&pn()
			Else
				ga()\ipin=0
			EndIf
			n=Cvi(Inkey$(2))	;opin#
			If n
				##[$C012] pn(),n+npn
				ga()\opin=&pn()
			Else
				ga()\opin=0
			EndIf
		Next
		;
		;read pn()\con list...
		##[$C00F] pn(),fpn2
		For k=1 To npn2
			globfree pn():PushItem pn()
			con.l=&pn()\con
			While Peek.l(con)
				*con=##[$FE97](SizeOf.con,1)
				##[$BE14] 0,*con,SizeOf.con
				n=Cvi(Inkey$(2))	;pin number!
				If *con\r<>-2	 ;not a connection to a user part?
					If n
						##[$C012] pn(),n+npn
						*con\pin=&pn()
					Else
						*con\pin=0
					EndIf
					Poke.l con,*con:con=*con
				Else
					Poke.l con,Peek.l(*con):##[$FE99] *con,SizeOf.con
				EndIf
			Wend
			PopItem pn()
			n=Cvi(Inkey$(2))
			If n
				##[$C012] ga(),n+nga
				pn()\gate=&ga()
			Else
				pn()\gate=0
			EndIf
		Next
		;
		##[$C00F] pd(),fpd2
		For k=1 To npd2
			globfree pd()
			n=Cvi(Inkey$(2))	;pin#
			If n
				##[$C012] pn(),n+npn
				pd()\pin=&pn()
			Else
				pd()\pin=0
			EndIf
		Next
		;
		##[$C00F] us(),fus2
		For k=1 To nus2
			globfree us()
			n=Cvi(Inkey$(2))	;pin#
			If n
				##[$C012] pn(),n+npn
				us()\upin=&pn()
			Else
				us()\upin=0
			EndIf
		Next
		;
		CloseFile 0:Use localstat 0:ref=-1
		;
		;connect up any pads to parent user part!
		;
		If user
			##[$C00F] us(),ups(user)
			##[$C00F] pn(),us()\upin:locfree pd()
			For k=1 To ui(us()\u)\npn
				;
				*pin=pd()\pin ;pin of pad!
				;
				;connect *pin -> pn()
				;
				*con=##[$FE97](SizeOf.con,1)
				*con\succ=*pin\con:*pin\con=*con
				*con\pin=&pn():*con\r=-2
				;
				;connect pn() -> *pin
				;
				*con=##[$FE97](SizeOf.con,1)
				*con\succ=pn()\con:pn()\con=*con
				*con\pin=*pin:*con\r=-2
				;
				globfree pd():globfree pn()
			Next
		EndIf
		;
		If nus2 ;any user bits?
			##[$C00F] us(),fus2:globfree us()
			nl=nus2:Gosub loaduser
		EndIf
		;
	Else
	EndIf
EndIf
Return

.loaduser
;
;us()=user part to load from!
;nl=number to load
;
user+1
While nl
	;
	ups(user)=&us()
	;
	MOVE.l SizeOf nl(a5),-(a7):PushItem us()
	;
	f$="user/"+ui(us()\u)\t:Gosub load
	;
	PopItem us():MOVE.l (a7)+,SizeOf nl(a5)
	;
	nl-1:globfree us()
	;
Wend
user-1
;
Return

getev
mx=SMouseX:my=SMouseY:ev=Event
Return

waitev
omx=mx:omy=my
##[$80BB]
	VWait:Gosub getev
##[$80BC] mx<>omx OR my<>omy OR ev<>0
Return

.new
;
If emul Then Gosub endemul
;
ClearList ga()
;
newmem tx()
While globfree(tx())
	MaxLen tx()\t=0
Wend
ClearList tx()
;
newmem pn()
While globfree(pn())
	*con=pn()\con:pn()\con=0
	While *con
		*con2=*con\succ
		##[$FE99] *con,SizeOf.con
		*con=*con2
	Wend
Wend
ClearList pn()
;
newmem pd()
While globfree(pd())
	MaxLen pd()\t=0
Wend
ClearList pd()
;
ClearList us()
;
AddLast ga():fga=&ga()	;dummy items!
AddLast pn():fpn=&pn()
AddLast pd():fpd=&pd()
AddLast us():fus=&us()
;
ref=-1:Return

refmap
If ref
	If ref<0
		Use lmaxlen 1
		Gosub map_drawgrid
		Gosub showgates
		Gosub showusers
		Gosub showtraks
		Gosub showpads
		Gosub showpins
		Gosub showtexts
		Use lmaxlen 0
	EndIf
	Scroll 0,0,map_vw,map_vh,0,0,1
	ref=0
EndIf
Return

userdata
task:Dc.l 0
sig:Dc.l 0
sig2:Dc.l 0

.startemul
;
emul=-1:emmess{"INITIALIZING"}:time=0:ems=-1
;
ClearList ta()	;no tasks
ClearList do()	;no 'todo' list
;
newmem pn()
While globfree(pn())
	If &pn()<>fpn
		pn()\out=0
	EndIf
Wend
;
newmem ga()
While globfree(ga())
	If &ga()<>fga
		;
		*gate=&ga()
		;
		If pa(*gate\p)\info\flags&1				;need a task?
			;
			If AddLast(ta())
				task.l=##[$FE97](92,$10001)
				stack.l=##[$FE97](#taskstack,1)
				ta()\task=task,stack
				;
				Poke.l task+58,stack
				Poke.l task+62,stack+#taskstack
				Poke.l task+54,stack+#taskstack
				Poke.l task+88,?userdata
				;
				##[$FEA5] task,pa(*gate\p)\run,0
				;
				##[$FEAB](1 LSL sig)
				;
				ta()\sig=Peek.l(?sig2)
			EndIf
			;
		EndIf
		;
		*gate\in=0:*gate\out=0
		;
	EndIf
	;
Wend
;
newmem ga()
While globfree(ga())
	If &ga()<>fga
		added=0:calcout{&ga()}
		If added	;added to 'do' list?
			;
			time2=time+do()\d ;destination time
			PushItem ga()
			While time<time2 AND locfree(do())<>0
				Gosub rethink
			Wend
			ClearList do()
			PopItem ga()
			;
		EndIf
	EndIf
Wend
;
ref=-1:Return

.endemul
;
emul=0
;
newmem ta()
While globfree(ta())
	##[$FEAC] ta()\task,ta()\sig	;tell it to stop!
	;
	;how do we know when it's stopped?
	;
Wend
;
emmess{"EMULATION COMPLETE"}
;
ref=-1:Return

.rethink
;
;OK, new method...
;
;do list is a list of 'propagation' stuff!
;
mind=32767:dcnt=0
;
newmem do()
While globfree(do())
	dcnt+1:If do()\d<mind Then mind=do()\d
Wend
;
;OK, got minimum delay!
;
time+mind
;
newmem do()
While dcnt
	dcnt-1:globfree do()
	If do()\d=mind
		PushItem do()
		propagate{do()\pin,do()\out}
		PopItem do()
		freelast do()
	Else
		do()\d-mind
	EndIf
Wend
;
Return

.usepad
;
se_f=4:si0.l=0:siz=0:sic=0:Goto initpropstuff

.usetrak
;
se_f=3:tr_f=0:si0.l=0:siz=0:sic=0:Goto initpropstuff

.useuser
;
sel=0:se_f=2
;
si0.l=&ui(0)
siz=SizeOf.usinfo
sic=nu
;
Goto initpropstuff

.useparts
;
sel=0:se_f=1
;
si0.l=&pa(0)
siz=SizeOf.part
sic=np			;number of selectable items
;
.initpropstuff
;
;15=prop gadget, 16... = prop text entrys
;
;si0.l =address of item string 0
;siz	=size of one array item
;siy	= selectable item y
;sic	=number of selectable items total
;siv	=number of selectable items visible
;
pf=siv/sic:If pf>1 Then pf=1
;
SetVProp 0,15,0,pf
sit=0:Redraw 0,15
;
showpropstuff
;
;sit=top item!
;
WindowFont 0
y=siy:si.l=si0+sit*siz:sit2=sit
;
For k=1 To siv
If k>sic
	t$=""
Else
	t$=Peek$(Peek.l(si)):si+siz
	If sit2=sel Then WColour 1,0 Else WColour 2,0
EndIf
WLocate 280,y:Print LSet$(t$,9):y+6:sit2+1
Next
WindowFont 1
;
Return

.addgate
;
If AddLast(ga())
	;
	*gate=&ga()
	;
	*gate\p=sel,map_x,map_y,se_r
	*gate\ipin=0,0 ;no input/output pins yet
	;
	Use lmaxlen 1
	drawshape{pa(sel)\info\sh,se_x,se_y,se_sc,se_r}
	Use lmaxlen 0:ref=1
	;
	;add pins...
	;
	For k=0 To nxy-1
		If AddLast(pn())
			map_x=xy(k)\x:map_y=xy(k)\y:Gosub map_xyfromscreen
			pn()\x=map_x,map_y
			pn()\con=0					;no connections
			pn()\gate=*gate
			pn()\n=k
			If k=0 Then *gate\ipin=&pn()
			If k=pa(sel)\info\in Then *gate\opin=&pn()
		EndIf
	Next
	;
EndIf
;
Return

.showgates
;
##[$C00F] ga(),fga
While globfree(ga())
	map_x=ga()\x:map_y=ga()\y
	Gosub map_xytoscreen
	drawshape{pa(ga()\p)\info\sh,map_x,map_y,se_sc,ga()\r}
Wend
Return

.showpins
If emul
	##[$C00F] pn(),fpn
	While globfree(pn())
		showout{&pn()}
	Wend
EndIf
Return

showuser
;
;sh.l=shape,x,y,r=screen x,y,rot,pn$
;
drawshape{sh,x,y,us_sc,r} ;draw it!
;
;text for part!
;
showuser2
For k=0 To nxy-1
	xy2(k)\x=xy(k)\x
	xy2(k)\y=xy(k)\y
Next
;
n=0
While pn$
	k=Instr(pn$,Chr$(10))
	If k
		t$=Left$(pn$,k-1):pn$=Mid$(pn$,k+1)
		x=xy2(n)\x:y=xy2(n)\y
		If col<>-1 Then col=4
		n+1:Gosub showtext
		If col<>-1 Then col=0
	Else
		pn$=""
	EndIf
Wend
;
Return

.adduser
;
;add pins, add user struct, and call 'loaduser'
;
If AddLast(us())
	;
	Use lmaxlen 1
	sh=ui(sel)\sh:x=se_x:y=se_y:r=se_r
	pn$=ui(sel)\pn
	drawshape{sh,x,y,us_sc,r} ;draw it!
	;
	us()\u=sel,map_x,map_y,se_r
	us()\upin=0	;first pin
	;
	For k=0 To nxy-1
		If AddLast(pn())
			If k=0 Then us()\upin=&pn()
			map_x=xy(k)\x:map_y=xy(k)\y:Gosub map_xyfromscreen
			pn()\x=map_x,map_y
			pn()\con=0					;no connections
			pn()\gate=0				 ;not connected to a gate!
		EndIf
	Next
	;
	Gosub showuser2:Use lmaxlen 0:ref=1
	;
	nl=1:Gosub loaduser
	;
EndIf
Return

showusers
##[$C00F] us(),fus
While globfree(us())
	sh=ui(us()\u)\sh:pn$=ui(us()\u)\pn
	map_x=us()\x:map_y=us()\y:Gosub map_xytoscreen
	x=map_x:y=map_y:r=us()\r:Gosub showuser
Wend
Return

.drawsel
;
;draw sel at screen se_x,se_y
;
If se_x>=0
	col=-1
	Select se_f
	Case 1			;parts
		drawshape{pa(sel)\info\sh,se_x,se_y,se_sc,se_r}
	Case 2			;user
		sh=ui(sel)\sh:x=se_x:y=se_y:r=se_r
		pn$=ui(sel)\pn:Gosub showuser
	Case 3	;track
		;
		;find closest pin to se_x,se_y
		;
		map_x=se_x:map_y=se_y:Gosub map_xyfromscreen
		md.l=$0fffffff:If tr_f=0 Then *tr_pin2=0
		;
		##[$C00F] pn(),fpn
		While globfree(pn())
			If *tr_pin2<>&pn()
				xd.l=pn()\x-map_x
				yd.l=pn()\y-map_y
				di.l=xd*xd+yd*yd
				If di<md Then md=di:*tr_pin=&pn()
			EndIf
		Wend
		;
		If tr_f ;one end already done?
			;
			c=col:Gosub trakline2
			;
		Else
			;
			##[$C00F] pn(),*tr_pin
			map_x=pn()\x:map_y=pn()\y
			Gosub map_xytoscreen:x=map_x:y=map_y
			x2=se_x:y2=se_y:c=col:r=tr_r:Gosub trakline
			;
		EndIf
		;
	Case 4	;pad
		drawshape{alpha(30 LSL 6),se_x,se_y,pd_sc,se_r}
	Default
		x=se_x:y=se_y:t$=tx_t$:r=se_r:Gosub showtext
	End Select
	col=0
EndIf
;
Return

trakline2
;
;line from *tr_pin2 to *tr_pin
;
##[$C00F] pn(),*tr_pin2
map_x=pn()\x:map_y=pn()\y
Gosub map_xytoscreen:x=map_x:y=map_y
##[$C00F] pn(),*tr_pin
map_x=pn()\x:map_y=pn()\y
Gosub map_xytoscreen:x2=map_x:y2=map_y
r=tr_r
;
trakline
;
;x,y to x2,y2 colour c - r = rotation
;
Select r
Case 0
	Line x,y,x,y2,c
	Line x,y2,x2,y2,c
Case 1
	Line x,y,x2,y,c
	Line x2,y,x2,y2,c
Default
	Line x,y,x2,y2,c
End Select
;
Return

.addpad
;
col=-1
drawshape{alpha(30 LSL 6),se_x,se_y,pd_sc,se_r}
t$=UCase$(input{"PAD NAME:"})
drawshape{alpha(30 LSL 6),se_x,se_y,pd_sc,se_r}
col=0
If t$
	If AddLast(pd())
		If AddLast(pn())
			pd()\x=map_x,map_y,se_r
			pd()\t=t$,&pn()
			map_x=xy(0)\x:map_y=xy(0)\y:Gosub map_xyfromscreen
			pn()\x=map_x,map_y
			pn()\con=0					;no connections
			pn()\gate=0				 ;not connected to a gate!
			pn()\out=-1				 ;not outputting anything!
			Use lmaxlen 1
			x=se_x:y=se_y:r=se_r:Gosub showpad
			Use lmaxlen 0:ref=1
		EndIf
	EndIf
EndIf
;
Return

.showpads
##[$C00F] pd(),fpd
While globfree(pd())
	map_x=pd()\x:map_y=pd()\y:Gosub map_xytoscreen
	x=map_x:y=map_y:r=pd()\r:t$=pd()\t:Gosub showpad
Wend
Return

.showpad
;
;screen x, screen y, rot, t$
;
drawshape{alpha(30 LSL 6),x,y,pd_sc,r}
col=4:r=0:Gosub showtext:col=0:Return

.addtrak
;
;*tr_pin.pin, *tr_pin2.pin	= 2 pins to connect up!
;
;connect tr_pin -> tr_pin2
;
*con=##[$FE97](SizeOf.con,1)
*con\succ=*tr_pin\con:*tr_pin\con=*con
*con\pin=*tr_pin2
*con\r=-1
;
;connect tr_pin2 -> tr_pin
;
*con=##[$FE97](SizeOf.con,1)
*con\succ=*tr_pin2\con:*tr_pin2\con=*con
*con\pin=*tr_pin
*con\r=tr_r
;
c=7:Use lmaxlen 1:Gosub trakline2:Use lmaxlen 0:ref=1
;
Return

.showtraks
;
c=7
##[$C00F] pn(),fpn
While globfree(pn())
	map_x=pn()\x:map_y=pn()\y:Gosub map_xytoscreen:x=map_x:y=map_y
	*con=pn()\con
	While *con
		If *con\r>=0
			*pin=*con\pin
			map_x=*pin\x:map_y=*pin\y:Gosub map_xytoscreen
			x2=map_x:y2=map_y:r=*con\r
			Gosub trakline
		EndIf
		*con=*con\succ
	Wend
Wend
Return

.newscale
tx_sc=map_sc/4
pd_sc=map_sc*1.5
se_sc=map_sc
us_sc=map_sc*2
Return

.usertext
;
tx_t$=UCase$(input{"TEXT:"})
If tx_t$ Then se_f=-Abs(se_f) Else se_f=Abs(se_f)
Return

.addtext
If AddLast(tx())
	tx()\x=map_x,map_y,se_r
	tx()\t=tx_t$
	Use lmaxlen 1
	x=se_x:y=se_y:t$=tx_t$:r=se_r:col=4:Gosub showtext:col=0
	Use lmaxlen 0
	ref=1
EndIf
Return

.showtexts
;
;show all user text
;
col=4
newmem tx()
While globfree(tx())
	map_x=tx()\x:map_y=tx()\y:t$=tx()\t:r=tx()\r
	Gosub map_xytoscreen:x=map_x:y=map_y:Gosub showtext
Wend
col=0:Return

.showtext
;
;x=screen x,y=screen y,t$=text,r=rot
;
sh_x=x:sh_y=y:nf=0	;'not' flag for drawing overscore
;
For kk=1 To Len(t$)
a=Asc(Mid$(t$,kk,1))-65
If a>=0 AND a<26
	If nf
		drawshape{alpha(31 LSL 6),sh_x,sh_y,tx_sc,r}
	EndIf
	drawshape{alpha(a LSL 6),sh_x,sh_y,tx_sc,r}
Else
	If a=95-65
		nf=-1
	Else
		nf=0:drawshape{alpha(26 LSL 6),sh_x,sh_y,tx_sc,r}
	EndIf
EndIf
Next
Return

freeuser
;
For k=0 To nu-1
	If ui(k)\sh Then ##[$FE99] ui(k)\sh,ui(k)\shl:ui(k)\sh=0
Next
;
Return

.loadusers
;
InitBank 0,260,1	;examine block
b.l=Bank(0)
l.l=##[$FE0A]("user/",-2):If l=0 Then er=-1:Return
;
##[$FE0D] l,b
;
While ##[$FE0E](l,b)
	;
	t$=Peek$(b+8)
	If WriteMem(0,"user/"+t$) ;file there?
		;
		;OK, gotta load in pads and create a shape table for them!
		;
		pn$=""
		FileInput 0
		n=Cvi(Inkey$(2))		;number of pads!
		For k=0 To n-1
			AddLast pd()
			##[$BE14] 0,&pd(),SizeOf.pad	;load in pad
			pd()\t_=0
			tt$=Edit$(256)							 ;pad name
			pn$+tt$+Chr$(10)						 ;separate!
		Next
		CloseFile 0
		;
		;OK, create shape table...
		;
		;end, move, draw draw draw draw for outline
		;move, draw for each pin!
		;
		;NEWTYPE.sh
		;c.w ;colour
		;x.w ;x move
		;y.w ;y move
		;End NEWTYPE
		;
		nn=n:If nn&1 Then nn+1
		;
		shl.l=(6+(n+n))*SizeOf.sh:sh.l=##[$FE97](shl,1)
		;
		ui(nu)\t=UCase$(t$),n,sh,shl,pn$:nu+1
		;
		ClearList pd()
		;
		ys=8
												 ;y spacing between pins on user.
		;
		*sh.sh=sh
		nh=nn LSR 1			;half of pins
		;
		*sh\c=0,-8,-(nh+1)*ys ASR 1:*sh+SizeOf.sh
		*sh\c=1,16,0:*sh+SizeOf.sh
		*sh\c=1,0,nh*ys:*sh+SizeOf.sh
		*sh\c=1,-16,0:*sh+SizeOf.sh
		*sh\c=1,0,-nh*ys:*sh+SizeOf.sh
		;
		For k=1 To nh	;down pins...
			If k=1
				*sh\c=0,2,ys LSR 1:*sh+SizeOf.sh
			Else
				*sh\c=0,0,ys:*sh+SizeOf.sh
			EndIf
			*sh\c=2,0,0:*sh+SizeOf.sh
		Next
		;
		For k=1 To n-nh	;up pins
			If k=1
				*sh\c=0,12,0:*sh+SizeOf.sh
			Else
				*sh\c=0,0,-ys:*sh+SizeOf.sh
			EndIf
			*sh\c=2,0,0:*sh+SizeOf.sh
		Next
		;
		*sh\c=-2,0,0:*sh+SizeOf.sh
		;
	EndIf
	;
Wend
;
Free Bank 0
;
Return

.loadparts
;
;OK, rip through the parts directory finding all parts
;
;return er if error
;
InitBank 0,260,1	;examine block
;
b.l=Bank(0)
;
l.l=##[$FE0A]("parts/",-2):If l=0 Then er=-1:Return
;
##[$FE0D] l,b
;
While ##[$FE0E](l,b)
	t$=Peek$(b+8)
	;
	f$="parts/"+t$
	seg.l=##[$FE15](f$)
	run.l=seg LSL 2+4
	runl.l=Peek.l(run-8)
	;
	pa(np)\t=UCase$(t$),seg,run,runl
	;
	GetReg a0,seg
	ADD.l a0,a0:ADD.l a0,a0:ADDQ.l #2,a0
	;
	'loop
	ADDQ.l #2,a0:CMP.l #"pART",(a0):BNE 'loop:ADDQ.l #4,a0
	'loop2
	TST.b (a0)+:BNE 'loop2
	EXG.l a0,d0:ADDQ.l #1,d0:AND #$fffe,d0:EXG.l a0,d0
	;
	;OK, FOUND PART!
	;
	##[$80BD] a0,info.l
	;
	##[$FEDB] info,&pa(np)\info,SizeOf.info
	;
	np+1
	;
Wend
;
Free Bank 0
;
Return

;********************** MAP STUFF ***********************;

map_left
map_xo-(map_vw*map_mf)/map_sc
Return

map_right
map_xo+(map_vw*map_mf)/map_sc
Return

map_up
map_yo-(map_vh*map_mf)/map_sc
Return

map_down
map_yo+(map_vh*map_mf)/map_sc
Return

map_drawgrid
;
If map_gs*map_sc>=2
	;
	Boxf 0,0,map_vw-1,map_vh-1,0
	;
	map_x=0:map_y=0:Gosub map_xyfromscreen	;find maploc of point (0,0)
	;
	map_dx=Int(map_x/map_gs)*map_gs ;mod
	map_dy=Int(map_y/map_gs)*map_gs
	;
	##[$80BB]
		map_x=map_dx:Gosub map_xtoscreen
		If map_x<map_vw
			Line map_x,0,map_x,map_vh-1,map_gc
		EndIf
		map_dx+map_gs
	##[$80BC] map_x>=map_vw
	;
	##[$80BB]
		map_y=map_dy:Gosub map_ytoscreen
		If map_y<map_vh
			Line 0,map_y,map_vw-1,map_y,map_gc
		EndIf
		map_dy+map_gs
	##[$80BC] map_y>=map_vh
	;
Else
	;
	Boxf 0,0,map_vw-1,map_vh-1,map_gc
	;
EndIf
;
map_x=0:Gosub map_xtoscreen
If map_x>=0 AND map_x<map_vw
	Line map_x,0,map_x,map_vh-1,map_ac
EndIf
map_y=0:Gosub map_ytoscreen
If map_y>=0 AND map_y<map_vh
	Line 0,map_y,map_vw-1,map_y,map_ac
EndIf
;
Return

map_xtoscreen
map_x=(map_x-map_xo)*map_sc+(map_vw LSR 1)
Return

map_xytoscreen
Gosub map_xtoscreen
;
map_ytoscreen
map_y=(map_y-map_yo)*map_sc+(map_vh LSR 1)
Return

map_xfromscreen
map_x=(map_x-(map_vw LSR 1))/map_sc+map_xo
Return

map_xyfromscreen
Gosub map_xfromscreen
;
map_yfromscreen
map_y=(map_y-(map_vh LSR 1))/map_sc+map_yo
Return
