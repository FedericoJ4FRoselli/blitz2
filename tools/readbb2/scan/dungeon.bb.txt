; ascii translation of /Users/simon/Google Drive/amiga/w/abc/acid/eggs/simonsdemos/dungeon.bb,/Users/simon/Google Drive/amiga/w/abc/eggs/simonsdemos/dungeon.bb,/Users/simon/Google Drive/amiga/w/disks/bums/bum5/AF52_Listings/dungeon.bb,/Users/simon/Google Drive/amiga/w/disks/crap/art/af1/dungeon/dungeon.bb,/Users/simon/Google Drive/amiga/w/lha/bbold/disks/bums/bum5/AF52_Listings/dungeon.bb,/Users/simon/Google Drive/amiga/w/lha/bbold/disks/crap/art/af1/dungeon/dungeon.bb
;
; MONSTA's IN THE DUNGEON by Simon Armstrong
;

DEFTYPE .w						;all variables are integers

console=False				 ;make true to run on std console (cli)
width=128						 ;standard map size as in editor
height=64
size=width*height
dispw=32
disph=16							;display width and height
map$="map1"
nummonsters=256			 ;maximum number of monsters

If console
	home$=Chr$($9b)+"H":mycls$=home$+Chr$($9b)+"J" ;strings for consoles
Else
	FindScreen 0
	Window 0,20,20,270,170,$1400,"MONSTER GAME",1,2
	WindowInput 0:WindowOutput 0
EndIf

NEWTYPE .monstype	 ;the monster object
	x.w:y.w
End NEWTYPE

Dim List monster.monstype(nummonsters)	;loads of monsters!

Dim c$(4):c$(0)=Chr$(32):c$(1)="*":c$(2)="O":c$(3)="M":c$(4)="B"

Dim map.b(width-1,height-1)		;standard 2D array for the map

.maingame:
	turn=0:gameover=False	;reset game variables
	myx=10:myy=10					;in case no B found on the map
	Gosub readmap					;read file map$ into map array
	Gosub welcome					;do front end
	Repeat								 ;main loop
		Gosub drawmap				;refresh display
		Gosub yourmove			 ;get player's move
		Gosub monstermove		;move the monsters
	Until gameover=True
	Print "PLAY AGAIN? (Y/N)"
	If UCase$(Edit$(1))="Y" Then Goto maingame
	End

.readmap
	If WriteMem(0,map$)											;if file found
		##[$BE14] 0,&map(0,0),size:CloseFile 0	 ;raw read into array
		ClearList monster()										;find the monsters!
		For x=0 To width-1:For y=0 To height-1 ;and record all their
			If map(x,y)=3												;positions in list
				If AddItem(monster()) Then monster()\x=x,y
			EndIf
			If map(x,y)=4 Then myx=x:myy=y ;found BMan's start position!
		Next y,x
	Else
		End	;couldn't find file (we're in the wrong directory?)
	EndIf
	Return

.welcome:
	NPrint "WELCOME TO THE DUNGEON!"
	NPrint "	 HIT RETURN TO PLAY	"
	a$=Edit$(1):Return

.monstermove:
	USEPATH monster()
	ResetList monster()
	While NextItem(monster())
		map(\x,\y)=0									;clear current pos on map
		dx=Sgn(myx-\x):dy=Sgn(myy-\y) ;calc direction to move in
		oldx=\x:oldy=\y							 ;remember old pos
		If Rnd(2)<1									 ;home in on either x or y priority
			If dx<>0 Then \x+dx Else \y+dy
		Else
			If dy<>0 Then \y+dy Else \x+dx
		EndIf
		Select map(\x,\y)													;whats in new pos?
			Case 0:map(\x,\y)=3											;empty space cool!
			Case 1:\x=oldx:\y=oldy:map(\x,\y)=3			;wall back up!
			Case 2:map(\x,\y)=1:KillItem monster()	 ;down a hole!
			Case 3:\x=oldx:\y=oldy:map(\x,\y)=3			;another monster!
			Case 4:NPrint "HA GOTCHA!":gameover=True ;he got me!
		End Select
	Wend
	If NOT LastItem(monster()) Then NPrint "SUCCESS!":gameover=True
	Return

.yourmove:
	turn+1:Print "Turn #",turn," (U,D,L,R or Q) "
	map(myx,myy)=0															;rub out old position
	Select UCase$(Edit$(1))										 ;edit$=input
		Case "U":If map(myx,myy-1)<>1 Then myy-1	 ;up
		Case "D":If map(myx,myy+1)<>1 Then myy+1	 ;down
		Case "L":If map(myx-1,myy)<>1 Then myx-1	 ;left
		Case "R":If map(myx+1,myy)<>1 Then myx+1	 ;right
		Case "Q":Print "BYE NOW":End							;quit
	End Select
	If map(myx,myy)=2
		NPrint "ARRRRR YOU FELL DOWN A HOLE!":gameover=True
	Else
		map(myx,myy)=4															;place in new position
	EndIf
	Return

.drawmap:
	If console Then Print home$ Else WLocate 0,0
	posx=QLimit(myx-dispw/2,0,width-dispw)
	posy=QLimit(myy-disph/2,0,height-disph)
	For y=0 To disph-1
		For x=0 To dispw-1:Print c$(map(posx+x,posy+y)):Next:NPrint ""
	Next
	Return
