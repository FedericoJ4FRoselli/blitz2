; ascii translation of /Users/simon/Google Drive/amiga/w/fdrive/abcdoc/code/slices.bb
+Here is a simple example of setting up a basic slice driven Blitz mode display: ;BLITZ					 ;go into Blitz mode!Slice 0,44,3			;set up slice 0 MouseWait ;We wont go too deeply into how the slice command actually works just now, but this example will set up a lo-res eight colour slice - 320 pixels across by either 200 or 256 pixels down, depending on whether you are using an NTSC or PAL machine.If you type in and compile this example, you will notice that the display contains some fairly random graphics. This is because slices simply control how the display appears - they don't control what is actually to appear. To use slices to display graphics, a bitmap and some form of the Show command is required:; ; slice showing a bitmap program example ; BLITZ									 ;Go into Blitz mode!BitMap 0,320,DispHeight,3	;set up an 8 colour bitmapCls 2										;fill bitmap with colour 2Slice 0,44,3							;set up a slice Show 0								 ;show bitmap 0 in the slice MouseWait Once the bitmap is initialized and Shown in this way, any bitmap related commands may be used to render graphics. Here is an example of the Circlef command at work in a slice:; ; a functional slice program example; BLITZ									;go into Blitz mode BitMap 0,320,DispHeight,3				;set up an 8 colour bitmapSlice 0,44,3							;set up a slice Show 0 For k=1 To 100						 ;draw 100 circles. Circlef Rnd(320),Rnd(DispHeight),Rnd(10)+5,Rnd(7)+1 NextMouseWait These examples are all very simple in nature, but illustrate the minimum necessary steps involved in putting single slices to work.The form of the Slice command used in the above examples is a 'quick' form of the standard Slice command. Using Slice this way limits you to having just one slice active on the display at once. If you are wanting multiple slices, you must use the more complex Slice command.Here's a quick example of multiple slices:; ; multi slice program example ; BLITZ											;Blitz mode! Yeah!BitMap 0,320,100,3					 ;make a bitmapCls 2											;fill it with colour 2BitMapOutput 0						 ;we're going to print to it...Print "Hello - Slice Magic!"	;like so... Slice 0,44,160,100,$fff8,3,8,32,320,320 ;whew!RGB 1,15,15,15						 ;this affects slice 0's palette RGB 2,8,0,15									;so does this Show 0										 ;show the bitmapSlice 1,146,320,100,$fff9,3,8,32,320,320		;more whew! RGB 1,15,15,0							;this affects slice 1's palette RGB 2,0,8,15									;dittoShow 0										 ;show the bitmap (same one!)MouseWait Note that the text 'Hello - Slice Magic!' appears at two different places on the display, even though it was only printed once! This is because both slices are Showing the same bitmap, and it is on this bitmap that the text is rendered.Also note that the top slice is in lo-res mode, whereas the bottom slice is in hi-res mode.Finally, note that the positioning of the slices follows the rules outlined above. The slices are stacked vertically, and there is a two line gap between them. One final important word about slices - slice objects can not be individually Free'd. This means once a slice is created - it's there for good. The only way to free up slices is to free the lot of them at once using the FreeSlices command.