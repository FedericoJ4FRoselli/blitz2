; ascii translation of /Users/simon/Google Drive/amiga/w/abc/m/u/RIAmosFuncLib.bb,/Users/simon/Google Drive/amiga/w/abcstuff/dev/m/u/RIAmosFuncLib.bb
;#riamosfunclib=75

!libheader {#riamosfunclib,init,0,finit,0}

!dumtoke{"MemBank","",_toke}

!astatement
!args
!libs
!subs {_reboot,0,0}
!name {"Reboot"," -- performs a cold reboot"}

!afunction {#word}
!args
!libs
!subs {_lisa,0,0}
!name {"Lisa"," -- returns Lisa chip version"}

!afunction {#byte}
!args {#string}
!libs
!subs {_makedir+1,0,0}
!name {"MakeDir","(dirname$)"}

!afunction {#byte}
!args {#string,#string}
!libs
!subs {_rename+1,0,0}
!name {"Rename","(oldfilename$,newfilename$)"}

!afunction {#long}
!args
!libs
!subs {_memfree,0,0}
!name {"MemFree",""}

!afunction {#long}
!args
!libs
!subs {_gttags,0,0}
!args {#long}
!libs
!subs {_gttags2,0,0}
!name {"GTTagValue","([tagvalue])"}


!afunction {#word}
!args
!libs
!subs {_timer,0,0}
!name {"Timer"," -- returns number of 50ths since machine startup"}

!afunction {#long}
!args {#long,#long}
!libs
!subs {_min,0,0}
!name {"Min","(a,b)	-- returns lower number"}

!astatement
!args {#long,#long,#long}
!libs
!subs {_copybyte,0,0}
!name {"CopyByte","sourceaddr,destaddr,bytes"}

!astatement
!args {#long,#long,#long}
!libs
!subs {_copyword,0,0}
!name {"CopyWord","sourceaddr,destaddr,words"}

!astatement
!args {#long,#long,#long}
!libs
!subs {_copylong,0,0}
!name {"CopyLong","sourceaddr,destaddr,longs"}

!afunction {#long}
!args {#long,#long}
!libs
!subs {_max,0,0}
!name {"Max","(a,b)	-- returns higher number"}

!afunction {#long}
!args {#string}
!libs
!subs {_filesize+1,0,0}
!name {"FileSize","(filename$)"}

!afunction {#long}
!args {#string,#long}
!libs
!subs {_bload1+1,0,0}
!args {#string,#long,#long}
!libs
!subs {_bload0+1,0,0}
!args {#string,#long,#long,#long}
!libs
!subs {_bload+1,0,0}
!args {#string,#long,#long,#long,#long}
!libs
!subs {_bload2+1,0,0}
!name {"BLoad","(filename$,address[,length,offset,memtype])"}

!afunction {#long}
!args {#string,#long}
!libs
!subs {_bsave2+1,0,0}
!args {#string,#long,#long}
!libs
!subs {_bsave+1,0,0}
!name {"BSave","(filename$,address/bank[,length])"}

!afunction {#long}
!args {#byte}
!libs
!subs {_start,0,0}
!name {"Start","(bank)"}

!afunction {#long}
!args {#byte}
!libs
!subs {_length,0,0}
!name {"Length","(bank)"}

!astatement
!args {#byte}
!libs
!subs {_erase,0,0}
!name {"Erase","(bank)"}

!astatement
!args
!libs
!subs {_eraseall,0,0}
!name {"EraseAll",""}

!afunction {#byte}
!args {#byte,#long}
!libs
!subs {_allocmem1,0,0}
!args {#byte,#long,#long}
!libs
!subs {_allocmem,0,0}
!name {"Reserve","(bank,length[,requirements])"}

!afunction {#byte}
!args
!libs
!subs {_findfreebank,0,0}
!args {#long}
!libs
!subs {_findfreebank,0,0}
!name {"NextBank","[startbank]"}

!astatement
!args {#long}
!libs
!subs {_cacheoff,0,0}
!name {"Cache","On|Off"}

!afunction {#long}
!args {#string,#long}
!libs
!subs {_pload+1,0,0}
!name {"PLoad","(filename$,address)"}

!astatement
!args {#long,#long}
!libs
!subs {fillmemzeros,0,0}
!args {#long,#long,#long}
!libs
!subs {fillmem,0,0}
!name {"FillMem","address,length[,value]"}

!afunction {#word}
!args
!libs
!subs {_keycode,0,0}
!name {"KeyCode",""}

finit:!nullsub{_libfinit,0,0}
init:!nullsub{_libinit,0,0}
!libfin


_gttags:
	MOVE.l	#0,d0
_gttags2:
	ADDI.l	#$80080000,d0
	RTS


.fillmemzeros:
	MOVEQ.l #0,d2
.fillmem:
	ANDI.l #$ff,d2
	CMP.l #50,d0					; Did we specify bank or address
	BGE notalloc3					; ADDRESS
	MOVE.l d0,banknum
	BSR _start
	TST.l d0
	BEQ notfoundit
notalloc3:
	MOVE.l d0,a0
floop:
	MOVE.b d2,(a0)+
	SUBQ.l #1,d1
	BNE floop
	RTS

._max:
	CMP.l d0,d1
	BLT big1
	MOVE.l d1,d0
big1: RTS

._min:
	CMP.l d0,d1
	BGT big2
	MOVE.l d1,d0
big2: RTS
temp: Dc.l	0

._copybank:			; On entry - D0=Sourcebank D1=Dest
	MOVE.l	d0,temp								 ;Make copy of sourcebank num
	MOVE.l	d1,destbank						 ;Make copy of destbank num
	BSR		 _length								 ;Find length of source
	TST.l	 d0											;
	BEQ		 'oops									 ; If 0 then not exists!
	MOVE.l	d0,lengthmem						; Store length of bank
	MOVE.l	destbank,banknum				; Put dest
	MOVE.l	banknum,d0							; into d0
	BSR		 _start									; find start
	TST.l	 d0
	BEQ		 'okok1									; Is it there?
	MOVE.l	banknum,d0							; put banknum (dest)
	BSR		 eraseit								 ; erase it
'okok1:
	MOVE.l	banknum,d0
	MOVE.l	lengthmem,d1
	BSR		 _allocmem1							; Allocate the RAM
	TST.l	 d0
	BEQ		 'oops									 ; OK?
	MOVE.l	banknum,d0
	BSR		 _start
	MOVE.l	d0,d1
	MOVE.l	temp,d0
	BSR		 _start
	TST.l	 d0
	BEQ		 'oops
	MOVE.l	lengthmem,d2
	BSR		 _copybyte
	MOVE.l	#-1,d0
	RTS
'oops:
	MOVE.l	#0,d0
	RTS


.FindFreeBank
_findfreebank:
afloop:
	MOVE.l	#50,maxbanks
	TST.l d4
	BEQ	 'okok
	MOVE.l	#70,maxbanks
'okok:
	MOVE.l d0,banknum
	BSR _start
	TST.l d0
	BEQ foundit
	MOVE.l banknum,d0
	CMP.l maxbanks,d0
	BGT notfoundit
	ADDQ.l #1,d0
	BRA afloop
foundit:
	MOVE.l banknum,d0
	RTS
notfoundit:
	MOVEQ.l #-1,d0
	RTS

_keycode:
	MOVEQ.l #0,d0
	MOVE.b $bfec01,d0
	RTS

_xorlong:
	EOR.l d1,d0
	RTS

.Start
_start:
	ANDI.l #$000000ff,d0
	MOVE.l	#50,maxbanks
	TST.l d4
	BEQ	 'okok
	MOVE.l	#70,maxbanks
'okok:
	CMP.l maxbanks,d0
	BGT	 'oops
	LEA starttable(pc),a0
	ASL.l #2,d0
	ADD.l d0,a0
	MOVE.l (a0),d0
	RTS
'oops:
	MOVE.l	#0,d0
	RTS

.Length
_length:
	ANDI.l #$000000ff,d0
	MOVE.l	#50,maxbanks
	TST.l d4
	BEQ	 'okok
	MOVE.l	#70,maxbanks
'okok:
	CMP.l maxbanks,d0
	BGT	 'oops
	LEA lengthtable(pc),a0
	ASL.l #2,d0
	ADD.l d0,a0
	MOVE.l (a0),d0
	RTS
'oops:
	MOVE.l	#0,d0
	RTS

_libinit
	BSR dosopen
_libfinit:
	BSR _eraseall
	RTS

Event
banknum: Dc.l 0
lengthmem: Dc.l 0
Event
reqmem: Dc.l 0
destbank: Dc.l	0

.Erase
_erase:
	MOVE.l d0,banknum
	BSR _start
	TST.l d0
	BEQ endit
	BSR eraseit
endit:
	RTS


.EraseAll
_eraseall:
	MOVE.l #-1,d4
	MOVE.l #50,banknum
	MOVE.l banknum,d0
eloop:
	MOVE.l d0,banknum
	BSR _start
	TST.l d0
	BEQ empty2
	BSR eraseit
empty2:	MOVE.l banknum,d0
	DBRA d0,eloop
	RTS

eraseit:
	LEA starttable(pc),a0
	MOVE.l banknum,d2
	ASL.l #2,d2
	ADD.l d2,a0
	MOVE.l (a0),a1
	MOVE.l #0,(a0)
	LEA lengthtable(pc),a0
	MOVE.l banknum,d2
	ASL.l #2,d2
	ADD.l d2,a0
	MOVE.l (a0),d0
	MOVE.l #0,(a0)
	CLR.l d2
	MOVE.l 4,a6
	JSR -210(a6)

	RTS

.AllocMem
_allocmem1:
	MOVE.l #%1,d2
_allocmem:
	ANDI.l #$000000ff,d0
	MOVE.l d0,banknum
	MOVE.l d1,lengthmem
	BSR _start
	TST.l d0
	BEQ empty
	MOVE.l d2,-(a7)
	BSR eraseit
	MOVE.l (a7)+,d2
empty:
	MOVE.l 4,a6
	MOVE.l lengthmem,d0
	MOVE.l d2,d1
	CLR.l d2
	JSR -198(a6)
	TST.l d0
	BNE ok
	MOVE.l #0,d0
	RTS
ok:
	MOVE.l banknum,d1
	LEA starttable(pc),a0
	ASL.l #2,d1
	ADD.l d1,a0
	MOVE.l d0,(a0)
	MOVE.l banknum,d1
	MOVE.l lengthmem,d0
	LEA lengthtable(pc),a0
	ASL.l #2,d1
	ADD.l d1,a0
	MOVE.l d0,(a0)
	MOVE.l #-1,d0
bye:
	RTS

	Event
starttable:
Dcb.l 70,0
lengthtable:
Dcb.l 70,0

	Event
ver: Dc.l 0


_reboot:
MOVE.l 4,a6
JSR -726(a6)
RTS

_lisa:
MOVE.w $dff07c,d0
RTS

dosname: Dc.b "dos.library",0

dosbase: Dc.l 0

_makedir:
	 MOVE.l d0,d6
	 TST.l dosbase
	 BNE skip1
	 BSR dosopen
	 TST.l d0
	 BNE skip1
	 BEQ dosnotopen
skip1:
	 MOVE.l dosbase,a6
	 MOVE.l d6,d1
	 JSR -120(a6)
	 TST.l d0
	 BEQ dosnotopen
	 JSR -90(a6)
	 MOVE.l #-1,d0
	 RTS

dosnotopen:
	 MOVE.l #0,d0
	 RTS

dosopen:
	 MOVE.l 4,a6
	 LEA dosname(pc),a1
	 MOVE.l #37,d0
	 JSR -552(a6)
	 TST.l d0
	 BEQ dosnotopen
	 MOVE.l d0,dosbase
	 RTS

_rename:
	MOVE.l d0,d4
	MOVE.l d1,d5
	TST.l dosbase
	BNE renamedosopen
	BSR dosopen
	TST.l d0
	BEQ dosnotopen
renamedosopen:
	MOVE.l d4,d1
	MOVE.l d5,d2
	MOVE.l dosbase,a6
	JSR -78(a6)
	RTS

_palmode:
	MOVE.w #32,$dff1dc
	RTS

_ntscmode:
	MOVE.w #0,$dff1dc
	RTS

_timer
MOVEQ.l #0,d0
MOVE.b $bfea01,d0
ROL.l #8,d0
MOVE.b $bfe901,d0
ROL.l #8,d0
MOVE.b $bfe801,d0
RTS



_resettimer
MOVE.b #0,$bfea01
MOVE.b #0,$bfe901
MOVE.b #0,$bfe801
RTS

_copybyte:
	MOVE.l d0,a0
	MOVE.l d1,a1
	MOVE.l d2,d0
	SUBQ.l #1,d0
memloop:
	MOVE.b (a0)+,(a1)+
	DBRA d0,memloop
	RTS

_copyword:
	MOVE.l d0,a0
	MOVE.l d1,a1
	MOVE.l d2,d0
	SUBQ.l #1,d0
memloop2:
	MOVE.w (a0)+,(a1)+
	DBRA d0,memloop2
	RTS

_copylong:
	MOVE.l d0,a0
	MOVE.l d1,a1
	MOVE.l d2,d0
	SUBQ.l #1,d0
memloop3:
	MOVE.l (a0)+,(a1)+
	DBRA d0,memloop3
	RTS

reserved:
	RTS

Event
fileinfoblock: Dc.l 0
Event
lock: Dc.l 0
filehandle: Dc.l 0

.FileSize
_filesize:
	MOVE.l d0,d6
	TST.l dosbase
	BNE skip3
	BSR dosopen
	TST.l d0
	BNE skip3
	BEQ dosnotopen
skip3:
	MOVE.l #2,d1
	MOVE.l #$80000000+2000,d2
	MOVE.l dosbase,a6
	JSR -228(a6)
	TST.l d0
	BEQ dosnotopen
	MOVE.l d0,fileinfoblock
	MOVE.l d6,d1
	MOVE.l #1005,d2
	CLR.l d0
	MOVE.l dosbase,a6
	JSR -84(a6)
	TST.l d0
	BEQ freedosobject
	MOVE.l d0,lock
	MOVE.l dosbase,a6
	MOVE.l lock,d1
	CLR.l d0
	MOVE.l fileinfoblock,d2
	JSR -102(a6)
	CLR.l d0
	MOVE.l lock,d1
	MOVE.l dosbase,a6
	JSR -90(a6)
	MOVE.l fileinfoblock,a0
	MOVE.l 124(a0),d0
	RTS

freedosobject:
	MOVE.l fileinfoblock,d2
	MOVE.l #2,d1
	MOVE.l dosbase,a6
	JSR -234(a6)
	MOVE.l #0,d0
	RTS

fileclose:
	MOVE.l dosbase,a6
	MOVE.l d0,d1
	CLR.l d0
	JSR -36(a6)
	RTS

	Event
filename:
	Dc.l 0
spos:		 Dc.l	0


.BLoad
; On entry : D0=*filename	D1=Address/BankNumber	[D2=Length] [D3=Offset]
_bload2:
	MOVE.l	d4,d5
	BRA	 _bload3
_bload0:
	MOVE.l #0,d3					; No Offset
	BRA _bload
_bload1:								; No Length or Offset
	MOVE.l #0,d2
	MOVE.l #0,d3
_bload:
	CLR.l	d5
_bload3:
	MOVE.l	d3,spos
	MOVE.l #50,maxbanks
	TST.l	d4
	BEQ		'okok
	MOVE.l #70,maxbanks
'okok:
	MOVE.l d0,filename
	MOVE.l d1,banknum
	TST.l d2							; Have we specified length?
	BNE _okok						 ; YES
	BSR _filesize				 ; Get file size
	MOVE.l d0,d2
	TST.l d0							; is it >0
	BNE _okok						 ; YES
	MOVE.l #0,d0
	RTS									 ; ERROR
_okok:
	MOVE.l d2,lengthmem
	MOVE.l banknum,d1
	CMP.l maxbanks,d1					; Did we specify bank or address
	BGE notalloc					; ADDRESS
	MOVE.l d1,d0					; Store Bank Number param
	BSR _length					 ; Find Length of bank
	TST.l d0							; Is it allocated?
	BEQ notalloc1				 ; Not allocated
	MOVE.l lengthmem,-(a7)
	MOVE.l d0,lengthmem
	BSR eraseit					 ; erase bank
	MOVE.l (a7)+,lengthmem
	MOVE.l lengthmem,d0
notalloc1:
	CLR.l d0
	MOVE.l d5,d2
	BSR empty						 ; Allocate It
	TST.l d0
	BNE ok4
uh:
	MOVE.l #0,d0
	RTS
ok4:
	MOVE.l banknum,d0		 ; Store bank number
	BSR _start						; Find start address
	TST.l d0
	BEQ uh
	MOVE.l d0,banknum		 ; Store new address (banknum => address)
notalloc:
	CLR.l d0
	MOVE.l #1005,d2				; READ MODE
	MOVE.l filename,d1
	MOVE.l dosbase,a6
	JSR -30(a6)					 ; Open file
	MOVE.l d0,filehandle
	TST.l d0							; Success?
	BNE ok2							 ; Yes
	MOVE.l #0,d0
	RTS
ok2:
	MOVE.l	spos,d3
	TST.l d3
	BEQ ok6
	MOVE.l dosbase,a6
	MOVE.l filehandle,d1
	MOVE.l d3,d2
	MOVE.l #-1,d3
	JSR -66(a6)
ok6:
	MOVE.l dosbase,a6
	CLR.l d0
	MOVE.l filehandle,d1		; File handle
	MOVE.l banknum,d2			 ; Address
	MOVE.l lengthmem,d3		 ; Length
	JSR -42(a6)
	TST.l d0
	BNE ok3
	MOVE.l filehandle,d0
	BSR fileclose
	MOVE.l #0,d0
	RTS
ok3:
	MOVE.l filehandle,d0
	BSR fileclose
	MOVE.l #-1,d0
	RTS

.PLoad
; On entry : D0=*filename	D1=Address/BankNumber	[D2=Length]
_pload:
	MOVE.l d0,filename
	MOVE.l d1,banknum
	MOVE.l #0,d2
	MOVE.l #32,d3
	TST.l d2							; Have we specified length?
	BNE '_okok						 ; YES
	BSR _filesize				 ; Get file size
	MOVE.l d0,d2
	TST.l d0							; is it >0
	BNE '_okok						 ; YES
	MOVE.l #0,d0
	RTS									 ; ERROR
'_okok:
	MOVE.l d2,lengthmem
	MOVE.l banknum,d1
	CMP.l #50,d1					; Did we specify bank or address
	BGE 'notalloc					; ADDRESS
	MOVE.l d1,d0					; Store Bank Number param
	BSR _length					 ; Find Length of bank
	TST.l d0							; Is it allocated?
	BEQ 'notalloc1				 ; Not allocated
	MOVE.l lengthmem,-(a7)
	MOVE.l d0,lengthmem
	BSR eraseit					 ; erase bank
	MOVE.l (a7)+,lengthmem
	MOVE.l lengthmem,d0
'notalloc1:
	CLR.l d0
	MOVE.l #%1,d2				 ; Any memory
	BSR empty						 ; Allocate It
	TST.l d0
	BNE 'ok4
'uh:
	MOVE.l #0,d0
	RTS
'ok4:
	MOVE.l banknum,d0		 ; Store bank number
	BSR _start						; Find start address
	TST.l d0
	BEQ 'uh
	MOVE.l d0,banknum		 ; Store new address (banknum => address)
'notalloc:
	CLR.l d0
	MOVE.l #1005,d2				; READ MODE
	MOVE.l filename,d1
	MOVE.l dosbase,a6
	JSR -30(a6)					 ; Open file
	MOVE.l d0,filehandle
	TST.l d0							; Success?
	BNE 'ok2							 ; Yes
	MOVE.l #0,d0
	RTS
'ok2:
	TST.l d3
	BEQ 'ok6
	MOVE.l dosbase,a6
	MOVE.l filehandle,d1
	MOVE.l d3,d2
	MOVE.l #-1,d3
	JSR -66(a6)
'ok6:
	MOVE.l dosbase,a6
	CLR.l d0
	MOVE.l filehandle,d1		; File handle
	MOVE.l banknum,d2			 ; Address
	MOVE.l lengthmem,d3		 ; Length
	JSR -42(a6)
	TST.l d0
	BNE 'ok3
	MOVE.l filehandle,d0
	BSR fileclose
	MOVE.l #0,d0
	RTS
'ok3:
	MOVE.l filehandle,d0
	BSR fileclose
	MOVE.l #-1,d0
	RTS


.BSave
_bsave2:
	MOVEQ.l #0,d2
_bsave:
	MOVE.l #50,maxbanks
	TST.l	d4
	BEQ		'okok
	MOVE.l #70,maxbanks
'okok:
	MOVE.l d0,filename
	MOVE.l d1,banknum
	TST.l d2
	BNE	 'okok2
	CMP.l maxbanks,d1
	BGE	 uh2
	MOVE.l	banknum,d0
	BSR	 _length
	MOVE.l	d0,d2
'okok2:
	MOVE.l d2,lengthmem
	MOVE.l banknum,d1
	CMP.l maxbanks,d1					; Did we specify bank or address
	BGE notabank					; ADDRESS
	MOVE.l d1,d0					; Store Bank Number param
	BSR _start						; Find Length of bank
	TST.l d0							; Is it allocated?
	BEQ uh2							 ; Not allocated
	BRA yesabank
uh2:
	MOVE.l #0,d0
	RTS
yesabank:
	MOVE.l d0,banknum
notabank:
	CLR.l d0
	MOVE.l #1006,d2				; WRITE MODE
	MOVE.l filename,d1
	MOVE.l dosbase,a6
	JSR -30(a6)					 ; Open file
	MOVE.l d0,filehandle
	TST.l d0							; Success?
	BNE ok12							 ; Yes
	MOVE.l #0,d0
	RTS
ok12:
	MOVE.l dosbase,a6
	CLR.l d0
	MOVE.l filehandle,d1		; File handle
	MOVE.l banknum,d2			 ; Address
	MOVE.l lengthmem,d3		 ; Length
	JSR -48(a6)
	CMP.l #-1,d0
	BNE okwrite
errwrite:
	MOVE.l filehandle,d0
	BSR fileclose
	MOVE.l #0,d0
	RTS
okwrite:
	MOVE.l filehandle,d0
	BSR fileclose
	MOVE.l #-1,d0
	RTS

_cacheoff:
	CMP.l #-1,d0
	BEQ _cacheon
	MOVE.l 4,a6
	MOVE.l #%10,d0
	MOVE.l #%0,d1
	JSR -648(a6)
	RTS

_cacheon:
	MOVE.l 4,a6
	MOVE.l #%10,d0
	MOVE.l #%1,d1
	JSR -648(a6)
	RTS

_memfree:
	MOVE.l a6,-(a7)
	MOVE.l 4,a6
	MOVE.l #%1,d1
	JSR -216(a6)
	MOVE.l (a7)+,a6
	RTS

maxbanks: Dc.l	50

version: Dc.b "$VER: Func-Library v1.0 (1.7.1994)",0
		Event
libnum: Dc.b "Libnumber : ",#misclib,0
		Event
