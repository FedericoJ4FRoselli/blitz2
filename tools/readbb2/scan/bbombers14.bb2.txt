; ascii translation of /Users/simon/Google Drive/amiga/w/lha/bbold/bomb/bbombers14.bb2
; BlitzBombers (C)1994 Leading Edge Software
; Design AND Programming
;						 -
;								 Stephen McNamara
;								 Steve Matty
;
; Additional Code
;						 -
;								 Steven Green	(hmmmm........)
;
; Graphics		-
;								 Robert Brennan
; Additional graphics
;								 Steve Matty
;								 Steven Green
;
; Music			 -
;								 Stuart Gray
;
; Sound FX		-
;								 Steve Matty
;								 Stephen McNamara
;

; - Additions:
;12/11/94
;				 Added player configuration to save config
;				 Added Player Configuration
;18/10/94
;				 Set all copperlists to use FMODE 3
;					 Speeds everything up, including Pang which runs in
;					 a frame!
;4/10/94
;				 Added Team 17 introductory screen
;2/10/94
;				 Fixed bug that caused no winner after a normal game
;26/9/94
;				 Fixed freeze bomb block - wrong coordinates!
;20/9/94
;				 Removed sprite on main menu - should mean that no
;					sprites are used at all
;16/9/94
;				 Start putting in a First To... mode of play
;				 Found Anim bug!	Was caused by Anim library finding
;					an extra frame after the end of the anim.	Solved
;					temporarily by putting a dc.l 0,0 just after the
;					anim in memory.
;				 Anim library fixed!
;14/9/94
;				 Bugs: Gameboy bug seems to have disappeared (Blitz
;					v1.9???).	But its still recoverable alerting....
;				 Changed bombmove newtype - removed TUNNEL since it
;					was not needed
;				 Changed ALL (hopefully) '\x=x : \y=y' etc... to be
;					\x=x,y (just look at the code!)
;				 Moved map along 4 pixels in MapConfig
;12/8/94
;				 Problem: Occassional crashes getting too often
;				 Main game changed back to 5 bitplanes
;				 Pang: zone cludging replaced with faster setzone
;				 Fixed scores being trashed when using ESCAPE from STARTMATCH
;9/8/94
;				 Sorted out main menu so works better
;				 MeshShapes{} statement moved into library
;				 #harddisk constant removed
;				 MainGame.shapes has changed - status bar shapes
;				 Fixed bouncing bombs crash when bomb()\y-bounceheight<0
;				 Fault in 1 explode animation - col 9 used instead of 8
;8/8/94
;				 Constant - #staticshapes - changed startmatch
;				 Constant - #blokesAGA - changed Endmatch,speedresult,calcwinner
;				 Fixed: Fuse is corrupt in game level and Speedtrial
;				 Fixed: MenuControl doesn't corrupt game shapes
;				 Changed loadwait for hard drives
;				 Tag level deosn't now crash
;				 Graphics corruption in Pang game sorted
;				 Bombs bouncing off the bottom of the screen sorted

;==========================================================
;Definitions and constants
;==========================================================

DEFTYPE.w
DEFTYPE.w ar,ag,ab,sparkytimer
DEFTYPE.b jv,jh,jf,option,exit_option,d_option,exit_program
DEFTYPE.b reload_main,escape,dbuffer,winner,mainmenushown
DEFTYPE.b keyboard4,speedtrialnext,f,owner,b,disp
DEFTYPE.b mapnumber,fbuffer,a
DEFTYPE.b playerstatus
DEFTYPE.l suc,powerup_active

;======
; GAME CONTROL!
;=======

#maindeep=5
#maincols=32

#animplay=1
#offsetvalue=68*40

#mapcount=20
#powerups=23

;Palettes
#pal32=2 : #pal256=3

; Keyboard control
keyu.b=76 : keyd.b=77 : keyl.b=79 : keyr.b=78
keyfire.b=0
#keyf=63
#keyf2=61

#plyleft=8
#plyright=0
#plyup=24
#plydown=16
#colourmaps=2						 ;No. of different background block cols

;shape constants
#playershapes		 =200
#pangshapes			 =500		;Pang shapes
#bombmoveanim		 =80		 ;Animation for moving bomb
#bonusshapes			=17		 ;First bonus shape image
#buttonshape			=63		 ;Button for info screens
#greybar					=64		 ;Gradient filled bar for top of game screen
#statusbarpics		=44		 ;Shrunken bomb/flame/shield images
#smallnumbers		 =48		 ;Small numbers: 0-9
#bigredcross			=47		 ;A big red cross for player dead
#sparkyshapes		 =59		 ;Animation for timer spark
#timershape			 =58		 ;Shape for timer down side of screen
#tunnelshapes		 =65		 ;Start of tunnel shapes
#tleftexit				=66		 ;Left tunnel exit
#trightexit			 =68		 ;Right tunnel exit
#tupexit					=75		 ;Up tunnel exit
#tdownexit				=74		 ;Down tunnel exit

;CHANGED
#backgroundshapes =100		;Background shape start
#backgroundnum		=12		 ;Number of background shapes
#nondestructblocks=#backgroundshapes+#backgroundnum
#nondestructnum	 =9			;Number of non-destructable blocks
#destructblocks=#nondestructblocks+#nondestructnum

#freezebomb			 =43		 ;Freezebomb shape
#freezebombback	 =199		;Freezebomb shape with background
#flamebombshapes	=440		;Storage area for flame & bomb shapes
#blockdestruct		=430		;Block destruct animation

;NEW
#staticshapes		 =470		;Shapes for use in the getready screen
#blokesAGA				=460		;AGA block shapes
#mainmenushapes	 =490		;Shapes the main menu can corrupt
#destructnum			=7			;Number of destruct block anims
#statusbarx			 =0
#statusy_bomb		 =8			;Y position for bomb status bar
#statusy_flame		=16		 ;Y position for flame status bar
#statusy_shield	 =24		 ;Y position for shield status bar

;FNS fonts
#font	 =1
#lush1	=2
#oswald =3

;==========================================================
;Newtypes
;==========================================================

NEWTYPE .blockblow
	x.w : y.w : fram.b
End NEWTYPE

NEWTYPE .updateblock
	x.w : y.w : num.w
End NEWTYPE

NEWTYPE .bombstatus
	x.w : y.w : btimer.w : player.b : tunnel.b : frozen.w
End NEWTYPE

NEWTYPE .bombmovestatus
	x.w : y.w : btimer.w : player.b					 ; : tunnel.b
	array.b : xmove.b : ymove.b :animframe.b
	owner.b : rot.b
End NEWTYPE

NEWTYPE .explosions
	x.b : y.b : count.b : left.b : right.b : up.b : down.b
End NEWTYPE

NEWTYPE.bullet
	x.w : y.w : owner.b
End NEWTYPE

NEWTYPE.pangbomb
	x.w : y.w : spd.q : dir.b : hits.b
End NEWTYPE

NEWTYPE .colour
	r.w : g.w : b.w
End NEWTYPE

NEWTYPE.move
	xmove.b : ymove.b
End NEWTYPE

NEWTYPE.wall
	left.b : right.b : up.b : down.b
End NEWTYPE

;==========================================================
;Arrays
;==========================================================

Dim temp.b(4)
Dim invisible.w(4),bombcount.b(4)
Dim posx.w(4),posy.w(4),pmove.w(4),bombdrop.b(4),bomblimit.b(4)
Dim teleport.b(4),pstatus.w(4)
Dim pl_frame.b(4),plength.b(4),active.b(4),shapeoffset.w(4)
Dim pl_dir.b(4),bombframe.b(26),channel.b(4)
Dim startx.w(4),starty.w(4)
Dim mapxy.b(18,13),mapxy2.b(18,13),staticx.w(4),staticy.w(4)
Dim nomovemap.b(18,13),canthrow.b(4)
Dim playercol(4),score.b(4),conwins.b(4),LModule.b(4)
Dim player_spd.w(4),ingame.w(4)
Dim powerup$(30),powerdesc.l(30),powx.w(30),powy.w(30)
Dim List bomb.bombstatus(50)
Dim List bombmove.bombmovestatus(50)
Dim List blck.blockblow(99)
Dim List explode.explosions(19)
Dim List doblock.updateblock(100)
Dim buttonx.w(9),buttony.w(9)
Dim win.colour(4),bitptr.l(1),canfire.b(4)
Dim maparray.b(#mapcount)

;Default player settings
Dim defshields.b(4)
Dim defbombs.b(4)
Dim defflames.b(4)

; 'Kill Yer Friends' subgame
Dim player_b.b(4)
Dim pang.pangbomb(4)
Dim List act_bullet.bullet(99)

Dim menu$(5)
Dim quadx.b(4),quady.b(4)
Dim bombheight.b(26)
Dim bombmovedir.move(3)
Dim tunnelwall.wall(15)

;==========================================================
;Interrupts
;==========================================================

.Interrupts
QAMIGA											; AMIGA mode for loading animation
SetInt 5
	If loading=1
		DisplayBitMap 0,fbuffer
		fbuffer=1-fbuffer
		##[$9C82] fbuffer
	End If
	If medplay Then PlayMed
End SetInt

BLITZ
SetInt 5
	kk.b=##[$A59A]
	If keyfire AND (kk=#keyf-1 OR kk=#keyf2-1) Then keyfire=0
	If keyfire=0 AND (kk=#keyf OR kk=#keyf2) Then keyfire=-1
End SetInt

;==========================================================
;Statements and functions
;==========================================================

.Statements
BLITZ
Statement ClearMap{x.w,y.w}
	Shared mapxy()
	If mapxy(x,y)<#tunnelshapes Then mapxy(x,y)=0
End Statement

Statement SyncBitmaps {disp.b}
	Shared dbuffer
	VWait : DisplayBitMap disp,dbuffer
	If dbuffer=1 Then ShapesBitMap 1,0
	VWait
	DisplayBitMap disp,0
	If dbuffer=0 Then ShapesBitMap 0,1
End Statement

Statement ShowBonus{ad.l}
	Shared nextbonusgame.b
	StopCycle 0,1,0,0,0
	DisplayBitMap 0,0
	DisplayPalette 0,0
	Use BitMap 0 : BlockScroll : VWait
	suc=##[$A483](ad,0)
	For h=1 To 255 Step 4
		AGAGreen 0,1,h,h,h
		DisplayPalette 0,0
		VWait
	Next h
	VWait 30
	For h=255 To 1 Step -4
		AGAGreen 0,1,h,h,h
		DisplayPalette 0,0
		VWait
	Next h
	BlockScroll
	VWait
End Statement

Statement ClearPalette {pal,numcols}
	StopCycle pal,numcols-1,0,0,0
	##[$A08A] pal,0,0,0,0,numcols-2
End Statement

Statement PalFade {display,pal,numcols}
	##[$A084] pal
	For anq.q=0 To 1.0 Step 0.05
		##[$A088] 0,anq,0,numcols-1
		DisplayPalette display,0
		VWait
	Next anq
	DisplayPalette display,pal
End Statement

Statement PalFadeOut {display,pal,numcols}
	##[$A084] pal
	For anq.q=1.0 To 0 Step -0.05
		##[$A088] 0,anq,0,numcols-1
		DisplayPalette display,0
		VWait
	Next anq
End Statement

Statement DrawPowerUps {bitm,x2,y2,powerup_active.l}
	Shared powx(),powy()
	Use BitMap bitm
	x=x2 : y=y2
	n.w=#powerups/9
	num.w=0
	For h=0 To n-1
		For a.w=0 To 8
			Blit #bonusshapes+num,x,y
			If (powerup_active BitTst num)=0 Then ##[$8F04] bitm,x,y
			powx(num)=x : powy(num)=y : x+32
			num+1
		Next a
		x=x2 : y2+26 : y=y2
	Next h
	h=#powerups MOD 9
	If h
		x+(9-h)*16
		For a=0 To h-1
			Blit #bonusshapes+num,x,y
			If (powerup_active BitTst num)=0 Then ##[$8F04] bitm,x,y
			powx(num)=x : powy(num)=y : x+32
			num+1
		Next a
	EndIf
End Statement

BLITZ
;shp=shape number
;num=number of bombs (if form=0 then num=for map else per player)
;form=format (0=map,1=quadrant)
;chance=chance of it occuring on this map (1=always)
PutPowerUp
Statement PutPowerUp{shp.b,num.b,form.b,chance.b}
	Shared mapxy(),mapxy2(),quadx(),quady(),players,active()
	Shared powerup_active

	If powerup_active BitTst (shp-2)
		If (Int(Rnd(chance*100))/100)+1=chance
			If form=0
				For ploop=1 To num
					count.b=0
					Repeat
						x.w=Int(Rnd(17))+1:y.w=Int(Rnd(11))+1
						count+1
					Until (mapxy(x,y)=1 AND mapxy2(x,y)=0) OR count=10
					If count<10 Then mapxy2(x,y)=shp
				Next ploop
			Else
				For ploop=1 To players
					For playerloop=1 To num
						count.b=0
						Repeat
							x.w=quadx(active(ploop))+Int(Rnd(10)) : y.w=quady(active(ploop))+Int(Rnd(7))
							count+1
						Until (mapxy(x,y)=1 AND mapxy2(x,y)=0) OR count=10
						If count<10 Then mapxy2(x,y)=shp
					Next playerloop
				Next ploop
			EndIf
		EndIf
	EndIf
End Statement

Statement joystickwait{}
	g.b=0
	Repeat
		g+1
		VWait
	Until (##[$A008](1)=0 AND ##[$A007](1)=0 AND ##[$A006](1)=0) OR g=10
End Statement

Statement DrawButton {x.w,y.w,a$}
	Shared font
	Blit #buttonshape,x,y
	##[$AE81] #font,x+22,y+6,a$,1,16
End Statement

Statement HighlightButton {oldb.w,newb.w}
	Shared buttonx(),buttony()
	Shared bwidth,bheight

	If oldb<>-1 Then Box buttonx(oldb),buttony(oldb)-2,buttonx(oldb)+bwidth+1,buttony(oldb)-2+bheight,0
	If newb<>-1 Then Box buttonx(newb),buttony(newb)-2,buttonx(newb)+bwidth+1,buttony(newb)-2+bheight,18
End Statement

Statement DoTitle{t$}
	##[$AE85] %1,28
	##[$AE83] 0,1
	##[$AE81] #lush1,160,1,t$
	Line 0,18,319,18,28
End Statement

Statement MovePointer{}
	Shared os,option,ytext

	##[$AE83] 7
	VWait
	##[$AE81] #font,102,ytext+(os ASL 4),"[",0,0
	##[$AE81] #font,102,ytext+(option ASL 4),"[",0,1
End Statement

;==========================================================
;Startup and array initialisation
;==========================================================

QAMIGA
WBStartup
err$=""
If ##[$B387]=0 Then err$="Sorry, you need an AGA Amiga!"
If ##[$B582]<800000 Then err$="Sorry, you need 0.8Mb of contiguous Chip RAM!"
If ##[$A586]<1000000 Then err$="Sorry, you need 1Mb RAM!"
If err$<>"" Then ##[$B58D] "Blitzbombers",err$,"Abort" : End

shieldtime.w=72
saving.b=0

delay_timer.w=150
load_frame.b=0

NoCli

##[$B593] 0
path$=""
lookfile$="Graphics/Shapes/Players.shapes"
If ##[$BE15](path$+lookfile$)=0
	path$="BlitzBombers:"
	If ##[$BE15](path$+lookfile$)=0
		path$=""
	EndIf
EndIf
##[$B593] 1
If ##[$BE15](path$+"/floppy")
	loadwait.l=200
Else
	loadwait.l=50
EndIf
iffpath$=path$+"graphics/iff/"
shapepath$=path$+"graphics/shapes/"
palpath$=path$+"palette/"
soundpath$=path$+"sound/"
If ##[$BE15](path$+lookfile$)=0
	reply.l=##[$B58D]("BlitzBombers","Sorry, but I cannot locate my files in |'BlitzBombers:'|'PROGDIR:'|Current Directory"," OK ")
	End
EndIf

timeleft.w=0
powerup_active=-1

startx(1)=16 : starty(1)=16 : shapeoffset(1)=#playershapes
startx(2)=272 : starty(2)=16 : shapeoffset(2)=#playershapes+56
startx(3)=16 : starty(3)=176 : shapeoffset(3)=#playershapes+112
startx(4)=272 : starty(4)=176 : shapeoffset(4)=#playershapes+168
channel(1)=%1000 : channel(2)=%100
channel(3)=%1 : channel(4)=%10
game.b=0
g.b=0

For h=0 To #mapcount-1
	maparray(h)=h
Next h

Restore colourdata
For n=0 To 4
	Read win(n)\r,win(n)\g,win(n)\b
Next n
colourdata:
	Data.w 0,-1,0							;Green
	Data.w -1,-1,-1						;White
	Data.w -1,0,0							;Red
	Data.w 0,-1,-1						 ;Light blue
	Data.w 0,0,-1							;Blue

Restore Powerupinfo
For h=0 To #powerups-1
	Read powerup$(h)
Next h
ad.l=?Poweruptext
For h=1 To #powerups
	powerdesc(h)=ad
	a$=Peek$(ad)
	ad+Len(a$)+1
Next h

Restore bombframedata
For h=0 To 25
	Read bombframe(h)
Next h
bombframedata:
	Data.b 3,4,5,6,7,8,9,8,7,6,5,4,3,4,5,6,7,8,9,8,7,6,5,4,3,4

Restore playercolours
For h=1 To 4
	Read playercol(h)
Next h
playercolours: Data 28,2,21,7

Restore menu_text
Read options.b : Dim menu$(5)
For n=1 To options
	Read menu$(n)
Next n
menu_text:
	Data.b 5
	Data$ "GAME START","GAME INFO","CONFIGURATION","ABOUT","EXIT TO DOS"

Restore map_quadsdata
For h=1 To 4
	Read quadx(h),quady(h)
Next h
map_quadsdata:
Data.b 0,0,8,0,0,6,8,6

Restore heightdata:
For h=0 To 25 : Read bombheight(h) : Next h
heightdata: Data.b 0,2,3,5,7,10,12,13,13,12,10,7,5,3,2,0
						Data.b -1,0,2,3,4,4,3,2,0,-1

Restore bombmovedata:
For h=0 To 3
	Read bombmovedir(h)\xmove,bombmovedir(h)\ymove
Next h
bombmovedata: Data.b 2,0,-2,0,0,2,0,-2

#wleft=%0100
#wright=%1000
#wup=%0001
#wdown=%0010
For n=0 To 14
	walldata.b=Peek.b(?walldatas+n)
	If (walldata BitTst 0) Then tunnelwall(n)\up=-1
	If (walldata BitTst 1) Then tunnelwall(n)\down=-1
	If (walldata BitTst 2) Then tunnelwall(n)\left=-1
	If (walldata BitTst 3) Then tunnelwall(n)\right=-1
Next n

##[$8F01] &mapxy(0,0),&nomovemap(0,0),&tunnelwall(0)\left,#tunnelshapes

For h=1 To 4
	defbombs(h)=1
	defflames(h)=2
	defshields(h)=0
Next h

;==========================================================
;Misc initialisations
;==========================================================

; initialise some 5 bitplane bitmaps for use in program
; bitmap 0 = current shown bitmap
; bitmap 1 = hidden bitmap
BLITZ
InitCopList 0,44,256,$13000|#maindeep,8,#maincols,0		 ; 32 lores
InitCopList 1,44,256,$13008,8,256,0										 ; 256 lores
InitCopList 2,44,256,$13102,0,4,0											 ; 4 Hires
InitCopList 3,44,31,$13000|#maindeep,0,#maincols,0			; 32 lores (31 high)
InitCopList 4,44+34,222,$13000|#maindeep,0,#maincols,0	; 32 lores (222 high)
InitCopList 5,44,256*4,$13000|#maindeep,2,#maincols,1784; Special

BitMap 0,320,256,#maindeep
BitMap 1,320,256,#maindeep
BitMap 3,320,256,8
BitMap 6,320,32,#maindeep

DisplayBitMap 3,6

Buffer 0,30000
Buffer 1,30000
Queue 0,50
Queue 1,50

suc=##[$A595](0,70000)
If suc=0 Then End

a=##[$AE82](1,?lush2_font)
a=##[$AE82](2,?lush1_font)

CreateDisplay 0
DisplayBitMap 0,0

;=========== Main Loop Begins Here :-						========

.MainProgram
hit.b=0
exit_program=0 : reload_main=1
d_option=1
main_module=0
playmode.b=1
StopCycle 0,255,0,0,0
StopCycle 2,31,0,0,0
StopCycle 3,255,0,0,0
##[$A484] ?defpalpal,1

mapstatus.l=-1
selectedmaps.w=#mapcount
deepmenu.b=0

;Gosub LoadFiles : Gosub GameStart : EraseAll : End
Repeat
	If reload_main
		Gosub LoadFiles
		reload_main=0
	EndIf
	If main_module=0 Then main_module=1 : StartMedModule 1 : medplay=1
	exit_option=0
	option=d_option : Gosub MenuControl : d_option=1

	Use BitMap 0 : ##[$AE83] 0
	ClearPalette{0,31} : DisplayPalette 0,0 : BlockScroll : VWait

	If deepmenu=0
		On option Gosub GameStart,PowerInfo,Options,About,ExitProgram
	Else
		On option Gosub Options,MapConfig,PlyConfig,SaveConfig
	EndIf
Until exit_program=1

##[$A594]
AMIGA
End

;======================= GAME START ===================
BLITZ
GameStart:
	Gosub haltmed
	main_module=0
	Gosub GameLoad
	Gosub Play
Return

BLITZ
.PowerInfo:
	DoTitle{"Blitz Bombers Information"}
	ad.l=?GameInfo
	Gosub PrintInfo
	DoTitle{"Power-up Information"}
	x.w=0 : y.w=27
	##[$AE85] 0
	For h=0 To #powerups-1
		If h=(#powerups/2)+1 Then x=176 : y=27
		BlitColl #bonusshapes+h,x,y
		##[$AE81] #font,x+20,y+4,powerup$(h) : y+18
	Next h
	Gosub ButtonPress
	d_option=2
Return

GameInfo:
	Dc.w 30
	Dc.b "Blitz Bombers supports upto 4 players,",10
	Dc.b "all using joysticks.	For players 3 and 4",10
	Dc.b "to be able to play you must own a four",10
	Dc.b "player adaptor and have it plugged",10
	Dc.b "into your parallel port.",10
	Dc.b "Player 4 can be optionally controlled",10
	Dc.b "via the keyboard.	Use cursor keys",10
	Dc.b "for movement and <SHIFT> for fire.",10
	Dc.b " ",10
	Dc.b "The object of the game is to kill your",10
	Dc.b "opponents within a time-limit.",10
	Dc.b "Various kinds of power-ups are scattered",10
	Dc.b "around the level and can either be used",10
	Dc.b "against your enemies or improve your",10
	Dc.b "overall strength.",10
	Dc.b " ",10
	Dc.b "If you manage to win 3 games in succession",10
	Dc.b "you will be transported to the Speed-Trial.",10
	Dc.b "You will have a limited amount of time to",10
	Dc.b "locate the GOLDEN-SHIELD. Collecting this",10
	Dc.b "will boost your shield strength to its",10
	Dc.b "maximum limit.",0

	Event
Powerupinfo:
	Data$ "Flame extend (max=8)"
	Data$ "Golden flamer"
	Data$ "Extra bomb (max=8)"
	Data$ "Golden bomb"
	Data$ "Freeze bombs"
	Data$ "New block"
	Data$ "All drop"
	Data$ "All explode"
	Data$ "Random power-up"
	Data$ "Gameboy"
	Data$ "Dark bulb"
	Data$ "Light bulb"
	Data$ "Fast speed"
	Data$ "Slow speed"
	Data$ "Invisibility"
	Data$ "Teleport"
	Data$ "Shield"
	Data$ "De-Shield"
	Data$ "Golden shield"
	Data$ "Bonus game"
	Data$ "Throw bombs"
	Data$ "Bomb to block"
	Data$ "All same colour"

Poweruptext:
	Dc.b "Increases the length of your bomb",10,"explosions. The current length is shown"
	 Dc.b 10,"in the yellow status bar.",0
	Dc.b "Boosts your bomb explosion length",10,"to the max of 8.",0
	Dc.b "Gives you an extra bomb to drop.",10,"The number of bombs available to you"
	 Dc.b 10,"is shown in the red status bar.",0
	Dc.b "Gives you the max of 8 bombs to drop.",0
	Dc.b "Freezes all bombs on screen except your",10,"own and each players very",10,"last bomb.",0
	Dc.b "Creates a random, destructible, block",10,"on the game map.",0
	Dc.b "All other players drop a bomb as soon",10,"as you collect this power-up.",10
	 Dc.b "They cannot drop bombs they don't have.",0
	Dc.b "Causes all bombs on screen, except yours,",10,"to explode instantly. This can be a game",10
	 Dc.b "winner if well timed!",0
	Dc.b "Produces a random power-up effect.",10,"NB: Not all effects are available.",0
	Dc.b "Causes all other players to turn",10,"into a gameboy!",0
	Dc.b "Turns the lights down low.",0
	Dc.b "Turns the lights up high.",0
	Dc.b "Increase your speed for 10 seconds of","play.",0
	Dc.b "Decrease every other players speed for",10,"10 seconds of play.",0
	Dc.b "Makes you invisible for 5 seconds of play.",0
	Dc.b "Teleports you to a random starting",10,"position.",0
	Dc.b "Gives you an extra second of invincibility.",10,"This is shown in the white status bar",10
	 Dc.b "and is limited to a max of 4.",0
	Dc.b "Reduces other players shield strength",10,"by 1.",0
	Dc.b "Collect this to complete the Speed Trial",10,"level and earn full shield power.",0
	Dc.b "Collect this power up to be transported",10,"to a bonus game at the end of the",10,"level.",0
	Dc.b "Allows you to throw bombs around the",10,"play area.",0
	Dc.b "Turns all current bombs into destructable",10,"blocks.",0
	Dc.b "Sets all other players colours to a random",10,"colour.",0

	Event
#buttonY=105
.Options:
	BLITZ
	bwidth.w=ShapeWidth(#buttonshape)+3
	bheight.w=ShapeHeight(#buttonshape)+3
	buttonx(1)=87
	buttonx(2)=231
	For h=1 To 2 : buttonx(h)-(bwidth ASR 1) : Next h
	hit=0
	DoTitle{"Power-up Configuration"}

	DrawButton{65,#buttonY,"USE"}
	DrawButton{209,#buttonY,"ABORT"}

	##[$AE84] 28
	DrawPowerUps {0,24,30,powerup_active}

	opow.b=0 : pow.b=0 : Gosub AboutPowerup
	##[$AE81] #font,160,245,"Press FIRE to select/deselect"
	Repeat : Until ##[$A006](1)=0

	PalFade{0,1,32}
	powerbackup.l=powerup_active
	rowpos1.w=0
	currow.b=0
	Repeat
		opow.b=pow
		jv=##[$A007](1)
		jh=##[$A008](1)
		If jv=-1 AND currow>0
			If currow>1
				a=(9-(#powerups MOD 9))/2
				pow-9+a
				currow-1
			Else
				currow-1

				pow-9
				If pow<0 Then pow=#powerups-1
			EndIf
		EndIf
		If jv=1
			If currow<2
				If currow=0 Then pow+9

				If currow=1
					b=pow MOD 9
					a=(9-(#powerups MOD 9))/2
					If b<2 Then pow+9-b
					If b>5 Then pow+9
					If b>1 AND b<6 Then pow+9-a
				EndIf
				If pow>=#powerups Then pow=#powerups-1
				currow+1
			Else
				Gosub Button
			EndIf
		EndIf
		If jh=-1 AND pow>0 Then pow-1
		If jh=1 AND pow<#powerups-1 Then pow+1

			If pow<9 Then currow=0
			If pow>8 AND pow<18 Then currow=1
			If pow>17 Then currow=2

		If hit=0
			If opow<>pow Then Gosub AboutPowerup
			jf=##[$A006](1)
			If jf
				powerup_active BitChg pow : opow=pow
				If powerup_active BitTst pow
					Blit #bonusshapes+pow,powx(pow),powy(pow)
				Else
					##[$8F04] 0,powx(pow),powy(pow)
				EndIf
				Gosub AboutPowerup
				joystickwait{}
			EndIf
			If pow<>opow
				joystickwait{}
			EndIf
		EndIf
	Until hit=1
	hit=0
	PalFadeOut{0,0,32}
	d_option=1
Return

Button:
	opow=pow
	Box powx(opow)-5,powy(opow)-5,powx(opow)+20,powy(opow)+20,0
	Box buttonx(1),#buttonY-2,buttonx(1)+bwidth,#buttonY-2+bheight,18
	button=1
	Repeat
		jh=##[$A008](1)
		jv=##[$A007](1)
		jf=##[$A006](1)
		ob=button
		If jh=1 Then button+1
		If jh=-1 Then button-1
		If button=0 Then button=2
		If button=3 Then button=1
		If ob<>button
			Box buttonx(ob),#buttonY-2,buttonx(ob)+bwidth,#buttonY-2+bheight,0
			Box buttonx(button),#buttonY-2,buttonx(button)+bwidth,#buttonY-2+bheight,18
			joystickwait{}
		EndIf
		ob=button
	Until jf OR jv=-1
	Box buttonx(button),#buttonY-2,buttonx(button)+bwidth,#buttonY-2+bheight,0

	If jf
		hit.b=1
		If button=2
			powerup_active=powerbackup
		EndIf
	Else
		Gosub AboutPowerup
	EndIf
	jv=0
	jh=0
	joystickwait{}
Return

AboutPowerup
	Box powx(opow)-5,powy(opow)-5,powx(opow)+20,powy(opow)+20,0
	Box powx(pow)-5,powy(pow)-5,powx(pow)+20,powy(pow)+20,18
	Use BitMap 1
	Boxf 0,201,319,236,0
	##[$AE85] %1,28
	##[$AE83] 1
	##[$AE81] #font,160,201,powerup$(pow)
	y2.w=210
	##[$AE81] #font,160,210,powerdesc(pow+1)
	Use BitMap 0
	##[$AE83] 0
	##[$B206] 0,201,320,36,0,201,1
	##[$A103] 0,0,##[$A10B](0,powx(pow),powy(pow)),5376,16,16
Return

#buttonY2=67
.MapConfig:
	##[$A484] ?defpalpal,1
	CopyShape #backgroundshapes,0
	CopyShape #nondestructblocks,2
	CopyShape #destructblocks,1

	bwidth.w=ShapeWidth(#buttonshape)+3
	bheight.w=ShapeHeight(#buttonshape)+3
	buttonx(1)=47
	buttonx(2)=159
	buttonx(3)=271
	buttonx(4)=107
	buttonx(5)=211
	For h=1 To 5
		If h<4 Then buttony(h)=#buttonY2 Else buttony(h)=#buttonY2+26
		buttonx(h)-(bwidth ASR 1)
	Next h

	DoTitle{"Game Map Configuration"}

	oldmapstatus.l=mapstatus
	oldselected.l=selectedmaps

	DrawButton {26,#buttonY2,"USE"}
	Gosub MapStatusButton
	DrawButton {249,#buttonY2,"ABORT"}

	DrawButton {86,#buttonY2+26,"PREV"}
	DrawButton {189,#buttonY2+26,"NEXT"}

	button=1

	##[$AE84] 28
	##[$AE81] #font,160,40,"Total maps: "+Str$(#mapcount)
	##[$AE81] #font,160,50,"Number selected: "+Str$(selectedmaps)

	conmap.b=0
	condisp.b=0
	Gosub Drawthemap

	condisp=1
	PalFade{0,1,32}

	HighlightButton{-1,button}

	lastdir.b=0
	Repeat
		jh=##[$A008](1)
		jv=##[$A007](1)
		jf=##[$A006](1)

		ob=button
		If jh=1 Then button+1 : lastdir=0 : If button>5 Then button=1
		If jh=-1 Then button-1 : lastdir=0 : If button=0 Then button=5
		If jv=-1 OR jv=1
			Select button
				Case 1
					button=4
					lastdir=0
				Case 2
					If lastdir<>0 Then button=lastdir Else button=4
				Case 3
					button=5
					lastdir=0
				Case 4
					button=2
					lastdir=4
				Case 5
					button=2
					lastdir=5
			End Select
		EndIf

		If ob<>button
			HighlightButton{ob,button}
			joystickwait{}
		EndIf

		If jf AND ob=4 AND conmap>0
			conmap-1
			Gosub MapStatusButton
			condisp=1
			Gosub Drawthemap
		EndIf
		If jf AND ob=5 AND conmap<#mapcount-1
			conmap+1
			Gosub MapStatusButton
			condisp=2
			Gosub Drawthemap
		EndIf

		If jf AND ob=2
			mapstatus BitChg conmap
			If (mapstatus BitTst conmap)
				selectedmaps+1
			Else
				selectedmaps-1
			EndIf
			Gosub MapStatusButton

			Use BitMap 0
			Boxf 80,50,239,57,0
			##[$AE81] #font,160,50,"Number selected: "+Str$(selectedmaps)
			condisp=3
			Gosub Drawthemap
		EndIf

		If jf AND button=1
			If selectedmaps=0 Then jf=0
		EndIf

	Until jf AND (button=1 OR button=3)
	If button=3
		selectedmaps=oldselected
		mapstatus=oldmapstatus
	EndIf

	n=-1
	s.w=0
	While s<selectedmaps
		n+1
		If (mapstatus BitTst n)
			maparray(s)=n
			s+1
		EndIf
	Wend

	PalFadeOut{0,1,32}
	d_option=2
Return

MapStatusButton:
	If (mapstatus BitTst conmap)
		DrawButton {137,#buttonY2,"OFF"}
	Else
		DrawButton {137,#buttonY2,"ON"}
	EndIf
Return

Drawthemap:
	ad.l=?maps+(conmap*247)
	Use BitMap 1
	BlockScroll
	status.b=(mapstatus BitTst conmap)
	For y=0 To 12
		For x=0 To 18
			If Peek.b(ad) Then BlitColl Peek.b(ad)-1,x ASL 4,y ASL 4
			ad+1
		Next x
	Next y

	##[$A10C] 1,1,0,0,320,208
	Boxf 0,104,160,120,0
	Use BitMap 0

	If status=0
		##[$A59E]
		For y=0 To 6
			For x=0 To 9
				##[$8F04] 1,x ASL 4,y ASL 4
			Next x
		Next y
	EndIf

	Use BitMap 1
	Boxf 80,118,239,125,0
	##[$AE85] %1,28
	##[$AE83] 1,1
	##[$AE81] #font,160,118,"Viewing map "+Str$(conmap+1)+" of "+Str$(#mapcount)
	##[$AE83] 0
	Use BitMap 0
	Scroll 80,118,160,8,80,118,1

	Select condisp
		Case 0
			Scroll 0,0,160,104,80+4,128,1
		Case 1
			For h=0 To 9
				VWait
				Scroll h*16,0,16,104,84+h*16,128,1
			Next h
		Case 2
			For h=9 To 0 Step -1
				VWait
				Scroll h*16,0,16,104,84+h*16,128,1
			Next h
		Case 3
			For h=0 To 6
				VWait
				Scroll 0,h*16,160,16,84,128+h*16,1
			Next h
	End Select
Return

Statement DrawSlider{x.w,y.w,w.w,num}
	Shared ingame(),temp(),player
	Use BitMap 0
	ya.w=w*15
	VWait
	Scroll 0,ya,160,14,x,y,1

	x3.w=ingame(player)
	ya=8*num
	ik.b=2
	If num=1 Then ik=6
	If num=2 Then ik=28
	If temp(num)<>0
		Boxf x3,38+ya,x3+temp(num) ASL 1,39+ya,ik
	Else
		x3-1
	EndIf
	If temp(num)<8
		Boxf x3+(temp(num)ASL 1)+1,38+ya,x3+16,39+ya,12
	EndIf
End Statement

BLITZ
.PlyConfig:
	bwidth.w=ShapeWidth(#buttonshape)+3
	bheight.w=ShapeHeight(#buttonshape)+3
	DoTitle{"Player Configuration"}

	x=79 : y=70 : num=19
	For h=0 To 2
		Blit num,x-21,y
		Box x,y,x+161,y+15,28
		Line x+1,y+15,x+161,y+15,26
		Line x+161,y,x+161,y+14,26
		y+24
		If h=0 Then num=17
		If h=1 Then num=33
	Next h

	##[$A483] ?gradientbars,1

	Use BitMap 0
	wide.w=304 ASR 2
	x=(wide ASR 1)-19
	For h=1 To 4
		pstatus(h)=defshields(h)
		plength(h)=defflames(h)
		bomblimit(h)=defbombs(h)

		buttonx(h)=x-1 : buttony(h)=38
		ingame(h)=x+26
		Blit shapeoffset(h)+16,x+5,47
		x+26
		Blit #statusbarpics,x-13,36
		Boxf x,38,x+2,39,2
		Boxf x,46,x+4,47,6
		If pstatus(h)
			x2.w=pstatus(h)/18
			Boxf x,54,x+x2,55,28
		EndIf
		x+wide-26
	Next h

	DrawButton{5,69,"Bomb"}
	buttonx(5)=5 : buttony(5)=69
	DrawButton{5,93,"Flame"}
	buttonx(6)=5 : buttony(6)=93
	DrawButton{5,117,"Shield"}
	buttonx(7)=5 : buttony(7)=117

	DrawButton{65,230,"USE"}
	buttonx(8)=65 : buttony(8)=230
	DrawButton{209,230,"ABORT"}
	buttonx(9)=209 : buttony(9)=230

	For h=1 To 9
		buttonx(h)-2
	Next h

	##[$AE81] #font,160,60,"<Default levels>",%1,28

	player=1
	temp(0)=bomblimit(player)
	temp(1)=plength(player)
	temp(2)=pstatus(player)
	Box buttonx(player)-1,buttony(player)-3,buttonx(player)+bwidth+2,buttony(player)-1+bheight,28
	Gosub DrawBars

	button=8
	HighlightButton{-1,button}
	player=1

	PalFade{0,1,32}
;	QAMIGA
;	SaveBitmap 0,"Ram:Test.iff",1
;	End
;	BLITZ
	Repeat
		jh=##[$A008](1)
		jv=##[$A007](1)
		jf=##[$A006](1)

		ob=button
		If jh=-1 AND (button<5 OR button>8) Then button-1
		If jh=1
			If button<4 OR button=8 Then button+1
		EndIf
		If jv=-1
			If button=5
				button=player
			Else
				If button>7
					button=7
				Else
					If button>1 Then button-1
				EndIf
			EndIf
		EndIf
		If jv=1
			If button<5
				button=5
			Else
				If button<8 Then button+1
			EndIf
		EndIf

		If ob<>button
			Gosub DrawBars
			HighlightButton{ob,button}
			joystickwait{}
		EndIf

		If jf AND button<5 AND button<>player
			bomblimit(player)=temp(0)
			plength(player)=temp(1)
			pstatus(player)=temp(2)
			Box buttonx(player)-1,buttony(player)-3,buttonx(player)+bwidth+2,buttony(player)-1+bheight,0
			player=button
			Box buttonx(player)-1,buttony(player)-3,buttonx(player)+bwidth+2,buttony(player)-1+bheight,28
			temp(0)=bomblimit(player)
			temp(1)=plength(player)
			temp(2)=pstatus(player)
			Gosub DrawBars
		EndIf
		If jf AND button>4 AND button<8
			Repeat
				jh=##[$A008](1)
				jf=##[$A006](1)
				If jh
					If jh=-1
						If button=7					 ; Shield
							If temp(button-5)>0 Then temp(button-5)-1
						Else
							If temp(button-5)>1 Then temp(button-5)-1
						EndIf
					EndIf
					If jh=1
						If temp(button-5)<8 Then temp(button-5)+1
					EndIf
					DrawSlider{80,71+(button-5)*24,temp(button-5),button-5}
					joystickwait{}
				EndIf
			Until jf=0
		EndIf
	Until jf AND button>7
	If button=8
		bomblimit(player)=temp(0)
		plength(player)=temp(1)
		pstatus(player)=temp(2)
		For h=1 To 4
			defshields(h)=pstatus(h)
			defflames(h)=plength(h)
			defbombs(h)=bomblimit(h)
		Next h
	EndIf
	PalFadeOut{0,1,32}
	d_option=3
Return

DrawBars:
	DrawSlider{80,71,temp(0),0}
	DrawSlider{80,95,temp(1),1}
	DrawSlider{80,119,temp(2),2}
Return

BLITZ
.About:
	BitMap 2,640,256+64,2
	ad.l=Addr BitMap(2)+8
	For h=0 To 1
		bitptr(h)=Peek.l(ad+(h*4))
	Next h

	DisplayBitMap 2,2
	DisplayPalette 2,0
	CreateDisplay 2

	##[$FEDB] ?oswald_font,##[$A591](0),?BonusIff-?oswald_font
	CrMDecrunch ##[$A591](0)

;	CrMDecrunch ?oswald_font,Start(0)
	a=##[$AE82](#oswald,##[$A591](0))

	##[$AE83] 2,1

	Restore Aboutinfo
	Read num.w
	BitPlanesBitMap 2,4,%1
	BitPlanesBitMap 2,5,%10

	##[$AE85] %1,1
	ClearPalette{0,32}
	bitm.b=4 : cll.b=1
	AGAGreen 0,3,252,252,252
	aboutexit.b=False
	For loop=1 To num
		##[$AE83] bitm : Use BitMap bitm
		BlockScroll : VWait:##[$A59E]
		Read aa.w
		y=128-(aa*28)
		For n=1 To aa
			Read a$
			##[$AE81] #oswald,320,64+y,a$
			y+56
		Next n

		For h=0 To 252 Step 4
			VWait
			If cll=1
				Poke.l ad,bitptr(0)+(h/4)*80
				Poke.l ad+4,bitptr(1)+(63-h/4)*80
			Else
				Poke.l ad,bitptr(0)+(63-h/4)*80
				Poke.l ad+4,bitptr(1)+(h/4)*80
			EndIf
			DisplayBitMap 2,2
			AGAGreen 0,cll,h,h,h
			AGAGreen 0,3-cll,252-h,252-h,252-h
			DisplayPalette 2,0
			aboutexit=##[$A006](1) : If aboutexit Then Pop For
		If aboutexit=False Then Next h
		bitm=9-bitm : cll=3-cll
		t.l=0
		While t<50 AND aboutexit=False
			t+1
			VWait
			aboutexit=##[$A006](1)
		Wend
		If aboutexit Then Pop For
	If aboutexit=False Then Next loop

	If aboutexit AND loop<>num Then PalFadeOut{2,0,4}

	d_option=4
	CreateDisplay 0
	For h=0 To 1
		Poke.l ad+(h*4),bitptr(h)
	Next h

	##[$AE89] oswald
	Free BitMap 2
Return

Aboutinfo:
	Data.w 10
	Data.w 2 : Data$ "BlitzBombers","AGA"
	Data.w 2 : Data$ "Written by","Leading Edge Software"
	Data.w 2 : Data$ "Written during","1 9 9 4"
	Data.w 2 : Data$ "Program design,","code and sound fx"
	Data.w 2 : Data$ "Stephen McNamara","Steve Matty"
	Data.w 2 : Data$ "Graphics:","Robert Brennan"
	Data.w 2 : Data$ "Additional","graphics"
	Data.w 3 : Data$ "Steve Green","Steve Matty","Stephen McNamara"
	Data.w 3 : Data$ "Music:","Stuart Gray","Steven Innell"
	Data.w 1 : Data$ ""
	Data.w 1 : Data$ ""

SaveConfig:
	suc=##[$A595](2,20)
	If suc=0 Then Return
	Poke.l ##[$A591](2),powerup_active
	Poke.l ##[$A591](2)+4,mapstatus
	ad.l=##[$A591](2)+8
	For h=1 To 4
		Poke.b ad,defbombs(h)
		Poke.b ad+1,defflames(h)
		Poke.b ad+2,defshields(h)
		ad+3
	Next h

	DoTitle{"Save Configuration"}

	##[$AE81] #font,160,120,"Saving game preferences..."
	PalFade{0,1,32}

	QAMIGA
	##[$B593] 0
	f=0
	Repeat
		suc=##[$A590](path$+"BombPrefs",2)
		If suc=0 AND f=0
			f=1
			Box 1,129,318,190,0 : Box 0,128,319,191,28
			Boxf 2,130,317,189,28
			##[$AE85] %1,0 : ##[$AE81] #lush1,160,152,"Remove Write-Protect!"
		EndIf
	Until suc
	Boxf 0,128,319,191,0
	VWait loadwait
	##[$B593] 1
	BLITZ
	PalFadeOut{0,1,32}
	BLITZ
	Gosub AboutPowerup
	d_option=4
Return

ExitProgram:
	BLITZ :Gosub haltmed:main_module=0
	exit_program=1
Return

;=========== End Of Program ===========

.MenuControl:
	BLITZ
	Free BitMap 4 : Free BitMap 5
	BitPlanesBitMap 3,4,%1000000
	BitPlanesBitMap 0,5,%1
	BitPlanesBitMap 3,7,%10000000

	##[$A485] ?titlescreenice,3,#pal256
	##[$A084] #pal256

	suc=##[$A483](?agapiccy,4)
	ClearPalette{0,256}
	DisplayPalette 0,0

	DisplayPalette 1,0
	DisplayBitMap 1,3
	##[$AE83] 3,1 : Use BitMap 3
	ytext.w=107
	##[$AE85] %1,31
	##[$AE81] #font,160,96,"SELECT AN OPTION"
	##[$AE81] #font,161,3,"Leading Edge Software Test Version"
	##[$AE84] 63
	##[$AE81] #font,160,2,"Leading Edge Software Test Version"

	##[$AE83] 7,1
	##[$AE85] 0,1
	For n=1 To options
		##[$AE81] #font,120,ytext+(n ASL 4),menu$(n)
	Next n

	os=option
	MovePointer{}

	BlitzKeys On
	CreateDisplay 1
	suc=##[$A483](?agapiccy,5)

	If deepmenu=2 Then deepmenu=1
	If mainmenushown=0
		For anq.q=0 To 1.0 Step 0.02
			##[$A088] 0,anq,32,63
			DisplayPalette 1,0
			VWait
		Next anq
		VWait 10
		For anq.q=0 To 1.0 Step 0.02
			##[$A088] 0,anq,1,31
			##[$A088] 0,anq,64,255
			DisplayPalette 1,0
			VWait
		Next anq
		DisplayPalette display,#pal256

		##[$A088] 0,1
		##[$A088] 0,1.2,64,127
		DisplayPalette 1,0
		For h=96 To 1 Step -1
			##[$A104] 5,4,#offsetvalue,#offsetvalue,h,132
		Next h
		gfdir.q=0.001
		gf.q=1.2
	Else
		PalFade{1,#pal256,256}
		gfdir.q=0.001
		gf.q=1
	EndIf

menujump:
	escape=0
	Repeat : Until ##[$A006](1)=0

	mainmenushown=1
	Repeat
		VWait
		gf+gfdir
		If gf<1 OR gf>=1.75 Then gfdir=-gfdir
		##[$A088] 0,gf,64,127
		DisplayPalette 1,0

		os=option
		jv=##[$A007](1)
		If RawStatus(69) Then escape=1

		If jv=-1 AND g=0 Then option-1
		If jv=1 AND g=0 Then option+1
		If escape Then option=options
		If option>options Then option=1
		If option<=0 Then option=options
		If os<>option
			MovePointer{}
			g=10
		EndIf
		If g>0 Then g-1
	Until ##[$A006](1) OR escape

	y=ytext+(option ASL 4)
	##[$AE83] 7
	ik=0
	For n=1 To 4
		##[$AE84] ik : ik=1-ik
		##[$AE81] #font,120,y,menu$(option)
		VWait 10
	Next n

	If option=3 AND deepmenu=0
		deepmenu=1
		menu$(1)="POWERUP CONFIG"
		menu$(2)="MAP CONFIG"
		menu$(3)="PLAYER CONFIG"
		menu$(4)="SAVE CONFIG"
		menu$(5)="CONTINUE"
		options=5
		option=1
		Gosub Updatemenus
		Goto menujump
	EndIf

	If deepmenu=1
		If option=options
			deepmenu=0
			menu$(1)="GAME START"
			menu$(2)="GAME INFO"
			menu$(3)="CONFIGURATION"
			menu$(4)="ABOUT"
			menu$(5)="EXIT TO DOS"
			options=5
			option=3
			Gosub Updatemenus
			Goto menujump
		EndIf
	EndIf

	If option=options AND gf>1.1
		For h=1 To 96
			##[$A104] 5,4,#offsetvalue,#offsetvalue,h,132
		Next h
		Use BitMap 5
		BlockScroll
	EndIf

	Free BitMap 7
	Free BitMap 4 : Free BitMap 5
	PalFadeOut {1,#pal256,128}
	DisplayBitMap 0,0
	DisplayPalette 0,2
	CreateDisplay 0
Return

Updatemenus:
	##[$A084] #pal256
	For h=1 To 127
		##[$A08B] 0,#pal256,h,128+h
	Next h

	For anq=0 To 1 Step 0.04
		##[$A088] 0,anq,128,255
		DisplayPalette 1,0
		VWait
	Next anq

	Use BitMap 7
	BlockScroll 0
	VWait
	##[$AE83] 7
	For n=1 To options
		##[$AE81] #font,120,ytext+(n ASL 4),menu$(n)
	Next n

	MovePointer{}

	For anq=1 To 0 Step -0.04
		##[$A088] 0,anq,128,255
		DisplayPalette 1,0
		VWait
	Next anq

	##[$A089] #pal256,0,0,0,128,255
Return

; Print out some info text and then wait for a joystick button
; to be pressed.
; ad.l holds address of text
PrintInfo:
	BLITZ
	ytext=Peek.w(ad)
	ad+2
	##[$AE81] #font,160,ytext,ad
ButtonPress:
	DrawButton{137,230,"OKAY"}
	bwidth.w=ShapeWidth(#buttonshape)+3
	bheight.w=ShapeHeight(#buttonshape)+3
	PalFade{0,1,32}
	Box 135,228,135+bwidth,228+bheight,18
	Repeat : Until ##[$A006](1)=0
	Repeat : Until ##[$A006](1)
	Box 135,228,135+bwidth,228+bheight,0
	PalFadeOut{0,0,32}
	BlockScroll : VWait
Return

.Play:
BLITZ
For h=1 To 4 : score(h)=0 : conwins(h)=0 : pstatus(h)=0 : Next h
DisplayPalette 0,1
winnerfade.b=0
nextgameplayer.b=0
nextgamepowerup.b=0
nextbonusgame.b=Int(Rnd(2))+1
speedtrialstatus=(powerup_active BitTst 18)
mapnumber=-1

;If playmode=1 Then Goto PlayFirstTo
Repeat
	If speedtrialnext AND speedtrialstatus
		player=speedtrialnext
		gametype.b=1
		Gosub haltmed
		Gosub MapDraw
		Gosub SpeedTrial
		Gosub SpeedResult
	EndIf
	speedtrialnext=0

	bonusgame=False
	Gosub StartMatch : escape2.b=escape : escape=0
	playersold.b=players
	If players>1 AND escape2=0
		gametype.b=0
		Gosub MapDraw
		Gosub PlayLevel
		If escape=0
			Gosub EndMatch
			If bonusgame=True
				Gosub haltmed
				ShowBonus{?BonusIff}
				If nextbonusgame=1 Then Gosub KillYerFriends
				If nextbonusgame=2 Then Gosub ControlTag
				nextbonusgame=3-nextbonusgame
			EndIf
		EndIf
	EndIf
Until players<2 OR escape2
Gosub CalcWinner
Return

.PlayFirstTo:
	speedtrialstatus=0
	Gosub StartMatch
	If players>1
		playerstatus=0
		For h=1 To 4
			If pmove(h) Then playerstatus BitSet h
		Next h
		Repeat
			For h=1 To 4
				If (playerstatus BitTst h)
					pstatus(h)=1
				Else
					pstatus(h)=0
				EndIf
			Next h
			gametype.b=0
			Gosub MapDraw
			Gosub PlayLevel
			Gosub CurrentScores
		Until score(winner)=3 OR escape
	EndIf
	Gosub CalcWinner
Return

Statement LoadColls {num.b,ad.l,pal.b}
LoadColls:
	Restore pal_entries
	ad+(num*18)
	For h=0 To 2
		Read a.b
		AGAGreen pal,a,Peek.w(ad),Peek.w(ad+2),Peek.w(ad+4)
		ad+6
	Next h
	Statement Return
pal_entries:
	Data.b	1,19,31
End Statement

.MapDraw:
	BLITZ
	mapnumber.b=0

	;8=grey
	;9=orange
	Use BitMap 1

	a=Rnd(#backgroundnum)
	CopyShape #backgroundshapes+a,0
	CopyShape #nondestructblocks+Rnd(#nondestructnum),2
;	If a<>9
		dblck.b=Int(Rnd(#destructnum))*9
;	Else
;		dblck=9
;	EndIf

	cset.b=Int(Rnd(#colourmaps))
	If dblck=36 Then cset=1

	LoadColls{cset,?levelcols,1}

	CopyShape #destructblocks+dblck,1

	For h=0 To 13
		BlitColl 0,0,0
		Blit #flamebombshapes+h,0,0
		GetaShape 3+h,0,0,16,16
	Next h
	For h=0 To 8
		BlitColl 0,0,0
		Blit #destructblocks+dblck+h,0,0
		GetaShape #blockdestruct+h,0,0,16,16
	Next h

	BlitColl 0,0,0
	Blit #freezebombback,0,0
	GetaShape #freezebomb,0,0,16,16

	shapeoffset(1)=#playershapes
	shapeoffset(2)=#playershapes+56
	shapeoffset(3)=#playershapes+112
	shapeoffset(4)=#playershapes+168

	If gametype=0
		m=mapnumber
		Repeat
			mapnumber.b=maparray(Rnd(selectedmaps))
		Until mapnumber<>m
	Else
		mapnumber=0
	EndIf

	If taggame Then mapnumber=#mapcount

	address.l=?maps+(mapnumber*247)
	Use BitMap 1
	BlockScroll

	; store map in array
	For y=0 To 12
		For x=0 To 18
			mapxy(x,y)=Peek.b(address)-1
			mapxy2(x,y)=0
			address+1

			If mapxy(x,y)=0
				mapxy(x,y)=1
				nomovemap(x,y)=True
			EndIf
		Next x
	Next y

	ClearMap{1,1}	 : ClearMap{2,1}	 : ClearMap{1,2}
	ClearMap{17,1}	: ClearMap{16,1}	: ClearMap{17,2}
	ClearMap{1,11}	: ClearMap{2,11}	: ClearMap{1,10}
	ClearMap{17,11} : ClearMap{16,11} : ClearMap{17,10}

	k=0
	Repeat
		x=Int(Rnd(17))+1
		y=Int(Rnd(11))+1
		If mapxy(x,y)=1
			mapxy(x,y)=0
			k+1
		EndIf
	Until k=15

	; draw map
	For y=0 To 12
		For x=0 To 18
			a.b=mapxy(x,y)
			nomovemap(x,y)=False
			If a>0 AND a<3 Then nomovemap(x,y)=True
			If a>=0 Then BlitColl a,x ASL 4,y ASL 4
		Next x
	Next y

	ClearPalette{0,32}
	DisplayPalette 4,0
	DisplayPalette 0,0
	DisplayBitMap 4,0

	##[$AE85] %1,28
	##[$AE83] 0,1
	Gosub atimer
	For a=1 To players
		For h=a To players
			If h<>a AND active(h)<active(a)
				b.b=active(a)
				active(a)=active(h)
				active(h)=b
			EndIf
		Next h
	Next a

	Gosub StatusBar
	ShapesBitMap 1,0
	VWait

	If gametype=1
		Repeat
			x=Int(Rnd(17))+1 : y=Int(Rnd(11))+1
		Until mapxy(x,y)=1
		mapxy2(x,y)=20
		Return
	EndIf


.PutPowerUpsDown:

;shp=shape number
;num=number of bombs (if form=0 then num=for map else per player)
;form=format (0=map,1=quadrant)
;chance=chance of it occuring on this map (1=always)

	PutPowerUp{2,players*4,0,1}		 ; flames
	PutPowerUp{3,1,0,2}						 ; golden
	PutPowerUp{4,players*4,0,1}		 ; bombs
	PutPowerUp{5,1,0,2}						 ; golden bomb
	PutPowerUp{6,5,0,1}						 ; freeze bomb
	PutPowerUp{7,4,0,1}						 ; new block
	PutPowerUp{8,players,0,1}			 ; all drop
	PutPowerUp{9,1,0,2}						 ; all explode
	PutPowerUp{10,4,0,1}						; random
	PutPowerUp{11,2,0,3}						; gameboy
	PutPowerUp{12,2,0,2}						; darkbulb
	PutPowerUp{13,2,0,1}						; lightbulb
	PutPowerUp{14,2,0,1}						; fast speed
	PutPowerUp{15,2,0,1}						; slow speed
	PutPowerUp{16,1,0,2}						; invisible
	PutPowerUp{17,2,0,1}						; teleport
	PutPowerUp{18,1,1,3}						; shield
	PutPowerUp{19,1,0,3}						; unshield
																	; 20=speed trial icon
	PutPowerUp{21,1,0,5}						; bonus level
	PutPowerUp{22,1,1,1}						; Throw
	PutPowerUp{23,2,0,1}						; Bomb to block
	PutPowerUp{24,2,0,2}						; Same colour players
Return

.Displaylevel:
	Use BitMap 3 : BlockScroll

	StopCycle 0,255,0,0,0
	##[$A084] 1
	##[$A088] 0,1
	For h=64 To 127
		##[$A08B] 1,0,h-64,h
	Next h

	Use BitMap 3
	Scroll 0,0,320,31,0,0,6
	Scroll 0,0,320,220,0,34,0
	VWait 2

	##[$A089] 0,0,0,0,0,63
	DisplayBitMap 1,3
	DisplayPalette 1,0
	VWait
	CreateDisplay 1

	VWait 2
	Free BitMap 5
	BitMap 5,320,256,1
	##[$A483] ?getready2,5
	BitPlanesBitMap 3,4,%1000000

	##[$A084] 1
	rad.q=0
	h=50
	ad.l=##[$A10B](5,0,79)
	Repeat
		##[$A104] 5,4,0,ad,h,145
		##[$A088] 0,rad,0,63
		DisplayPalette 1,0
		If h>1 Then h-1
		rad+0.01
		VWait
	Until rad>1

	DisplayPalette 4,1
	DisplayBitMap 4,0
	CreateDisplay 3,4
	VWait
	Free BitMap 4 : Free BitMap 5
	ClearPalette{0,256}
Return

;======================================================

; Main loop for playing one level
.PlayLevel
BLITZ

; set number of alive players to number of actual players
players_left=players
deathsound=0 : escape=0 : shade.w=0

Use BitMap 0
For h=1 To players
	cur=active(h)
	invisible(cur)=0
	posx(cur)=startx(cur) : posy(cur)=starty(cur)
	pl_frame(cur)=0 : pl_dir(cur)=16
	bombdrop(cur)=0 : plength(cur)=defflames(cur)
	bomblimit(cur)=defbombs(cur) : player_spd(cur)=0
	pmove(cur)=1
	teleport(cur)=0 : canthrow(cur)=0
	canfire(cur)=0
	shield.w=defshields(cur)*(shieldtime/2)
	If pstatus(cur)<shield Then pstatus(cur)=shield
Next h

;nextgameplayer=1 : nextgamepowerup=9
If nextgameplayer
	x=startx(nextgameplayer) : y=starty(nextgameplayer)
	mapxy2(x/16,y/16)=nextgamepowerup+2
	nextgameplayer=0
	If mapxy(x/16,y/16)<#tunnelshapes
		Use BitMap 1
		BlitColl #bonusshapes+nextgamepowerup,x,y
		Use BitMap 0
		BlitColl #bonusshapes+nextgamepowerup,x,y
	EndIf
EndIf

Gosub StatusBar

For h=1 To players
	cur=active(h)
	If mapxy(posx(cur)ASR4,posy(cur)ASR4)<#tunnelshapes
		BBlit 0,shapeoffset(cur)+16,posx(cur)+7,posy(cur)+8
	EndIf
Next h
shade=0

Gosub Displaylevel

Time50=0 : sparkytimer=75
dbuffer.b=0
##[$A084] 1
fadish.q=1 : fadishdir.q=0

Repeat
	VWait
	Time50+1
	DisplayBitMap 4,dbuffer
	If fadishdir<>0
		fadish+fadishdir : If fadish<-0.9 OR fadish>3.5 Then fadishdir=-fadishdir
		afad.q=fadish
		If afad<0.1 Then afad=0.1
		If afad>2.5 Then afad=2.5
		If fadish>0.997 AND	fadish<1.002 Then fadishdir=0 : fadish=1
		##[$A088] 0,afad,0,31
		DisplayPalette 4,0
	EndIf

	dbuffer=1-dbuffer
	Use BitMap dbuffer
	UnBuffer dbuffer

	ResetList doblock()
	While NextItem(doblock())
		BlitColl doblock()\num,doblock()\x,doblock()\y
		KillItem doblock()
	Wend

	ResetList bomb()
	While NextItem(bomb())
		bf.w=bomb()\frozen
		If bf<-1 Then bomb()\frozen+1
		If bf=-1
			If bomb()\tunnel=0 Then BlitColl bombframe(bomb()\btimer/4),bomb()\x,bomb()\y
			bomb()\frozen=250
		EndIf
		If bomb()\btimer>0 AND (bf<-1 OR bf=0)
			bomb()\btimer-1
		EndIf
		btim.b=bomb()\btimer
		If nomovemap(bomb()\x ASR 4,bomb()\y ASR 4)=False Then bomb()\btimer=0:bomb()\frozen=0
		If btim=0
			Gosub Explodebomb
			bombdrop(bomb()\player)-1
			KillItem bomb()
			Goto label
		EndIf
		If (bf<-1 OR bf=0) AND bomb()\tunnel=0 AND btim>0
			BlitColl bombframe(btim ASR 2),bomb()\x,bomb()\y
		EndIf
		If bf>0 Then bomb()\frozen-1
	Wend

label:
	ResetList blck()
	While NextItem(blck())
		blck()\fram+1
		x.w=blck()\x : y.w=blck()\y
		If blck()\fram>=32
			AddItem doblock()
			a.b=mapxy2(x ASR 4,y ASR 4)
			If a>1
				num=#bonusshapes-2+a
				BlitColl #bonusshapes-2+a,x,y
			Else
				num=0
				BlitColl 0,x,y
			EndIf
			doblock()\x=x,y,num
			nomovemap(x ASR 4,y ASR 4)=False
			mapxy(x ASR 4,y ASR 4)=0 : KillItem blck()
		Else
			BlitColl #blockdestruct+(blck()\fram ASR 2),x,y
		EndIf
	Wend

	ResetList explode()
	While NextItem(explode())
		explode()\count-1
		If explode()\count=0
			Gosub RemoveExplode
			KillItem explode()
		EndIf
	Wend

	If RawStatus(25)
		 Repeat
		 Until RawStatus(25)=0
		 Repeat
		 Until RawStatus(25)
		 Repeat
		 Until RawStatus(25)=0
	EndIf

	For curry=1 To players
		cur=active(curry)
;Speed up player if he's going slow
		If player_spd(cur)<0 Then player_spd(cur)+1
;Joystick testing for player
		If pmove(cur)=1 AND teleport(cur)=0
			; check movement for player CUR
			player=cur
			Gosub Joysticktest
			If pmove(cur)=1 AND player_spd(cur)>=0 Then Gosub Joysticktest
			If pmove(cur)=1 AND player_spd(cur)>0 Then Gosub Joysticktest : player_spd(cur)-1
			Gosub Joystickfiretest
		EndIf
;Gameboy mode
		If pmove(cur)>1
			pmove(cur)-1
			BBlit dbuffer,shapeoffset(cur)+45-(pmove(cur) MOD 12)/3,posx(cur)+7,7+posy(cur)
		EndIf
;Player is teleporting
		If teleport(cur)
			teleport(cur)-1
			If teleport(cur)>13 Then pl_frame(cur)+1
			If teleport(cur)<13 Then pl_frame(cur)-1
			If pl_frame(cur)<46 Then pl_frame(cur)=46
			If pl_frame(cur)>55 Then pl_frame(cur)=55
			If teleport(cur)=13
				h=Int(Rnd(4))+1
				posx(cur)=startx(h) : posy(cur)=starty(h)
			EndIf
			If invisible(cur)=0 Then BBlit dbuffer,shapeoffset(cur)+pl_frame(cur),posx(cur)+7,7+posy(cur)
			If teleport(cur)=0 Then pl_dir(cur)=16 : pl_frame(cur)=0
		EndIf
;Player is dying
		If pmove(cur)=-1
			pl_frame(cur)+1
			If pl_frame(cur)=40
				pmove(cur)=0 : players_left-1
				pstatus(cur)=0
				Use BitMap 6 : Blit #bigredcross,ingame(cur)-16,0
				Use BitMap dbuffer
			Else
				BBlit dbuffer,32+shapeoffset(cur)+(pl_frame(cur) ASR 2),posx(cur)+7,posy(cur)+7
			EndIf
		EndIf
	Next curry

;Redraw timer spark
	Gosub Sparky
;Update all players pics
	For curyr=1 To players
		cur=active(curyr)
		If invisible(cur)=0
;If not teleporting or gameboyed
			If pmove(cur)=1 AND teleport(cur)=0
				BBlit dbuffer,shapeoffset(cur)+pl_dir(cur)+(pl_frame(cur) ASR 2),posx(cur)+7,8+posy(cur)
			EndIf
		Else
			invisible(cur)-1
		EndIf
		px.w=posx(cur) : py.w=posy(cur)
		x=px ASR 4 : y=py ASR 4
		If mapxy(x,y)>=#tunnelshapes Then BlitColl mapxy(x,y),x ASL 4,(y ASL 4)
		If (py AND $f)=0
			If mapxy(x+1,y)>=#tunnelshapes Then BlitColl mapxy(x+1,y),(x ASL 4)+16,(y ASL 4)
		Else
			If mapxy(x,y+1)>=#tunnelshapes Then BlitColl mapxy(x,y+1),x ASL 4,16+(y ASL 4)
		EndIf

	Next curyr

	ResetList bombmove()
	While NextItem(bombmove())
		If bombmove()\btimer>1 Then bombmove()\btimer-1
		x.w=(bombmove()\x+8) ASR 4 : y.w=(bombmove()\y+8) ASR 4

		If bombheight(bombmove()\array)<>-1
			bombmove()\x+bombmove()\xmove
			bombmove()\y+bombmove()\ymove
		Else
			If nomovemap(x,y)<>0 OR mapxy(x,y)>=#tunnelshapes
				bombmove()\array=17
				bombmove()\x+bombmove()\xmove
				bombmove()\y+bombmove()\ymove
			EndIf
		EndIf

		If bombmove()\x=288
			bombmove()\x=0
		Else
			If bombmove()\x=0 Then bombmove()\x=288
		EndIf
		If bombmove()\y=0
			bombmove()\y=192
		Else
			If bombmove()\y=192 Then bombmove()\y=0
		EndIf

		If bombheight(bombmove()\array)<>-1
			bombmove()\animframe+1
			If bombmove()\animframe=32 Then bombmove()\animframe=0
			f.b=bombmove()\animframe ASR 2
			If bombmove()\rot=0 Then f=7-f
			y=bombmove()\y-bombheight(bombmove()\array)
			If y<0 Then y=0
			BBlit dbuffer,#bombmoveanim+f,bombmove()\x,y
			bombmove()\array+1
		Else
			cur=bombmove()\player
			canthrow(bombmove()\owner)+1
			bombdrop(cur)-1
			Gosub Putbombdown
			bomb()\btimer=bombmove()\btimer
			If mapxy2(x,y)=1 Then bomb()\btimer=1
			KillItem bombmove()
		EndIf
	Wend

	escape.b=RawStatus(69)
Until players_left<2 OR escape OR timeleft<56

winner=0
If escape=0 AND players_left=1
	For h=1 To players
		If pmove(active(h))>=1 Then winner=active(h)
	Next h
	For h=1 To 4
		If h<>winner Then conwins(h)=0
	Next h
EndIf

Gosub ResetGame
Return

.ResetGame:
	SyncBitmaps{4}
	game=0

	##[$A084] 1
	For anq.q=fadish To 0 Step -0.05
		##[$A088] 0,anq,0,63
		DisplayPalette 4,0
		VWait
	Next anq

	Use BitMap 0 : BlockScroll
	Use BitMap 6 : BlockScroll

	FlushBuffer 0
	FlushBuffer 1
	DisplayPalette 4,1

	;Clear all linked lists
	ClearList blck()
	ClearList doblock()
	ClearList bomb()
	ClearList bombmove()
	ClearList explode()
Return

;========================================================
atimer:
	timeleft.w=230
	Line 312,196,312,1,11
	BlitColl #sparkyshapes+(spark ASR 1),304,231-timeleft
	Blit #timershape,306,191
Return

BLITZ
; Main loop for playing one level for 1 player
.SpeedTrial
players_left=1
deathsound=0 : escape=0 : shade.w=0 : gotit.b=0
players=1 : active(1)=player
Gosub StatusBar

x3.w=ingame(cur)
Use BitMap 6
Boxf x3,#statusy_flame,x3+16,#statusy_flame+1,6
Boxf x3,#statusy_bomb,x3+16,#statusy_bomb+1,2

Use BitMap 0
cur=active(player)
invisible(player)=0
posx(player)=startx(player) : posy(player)=starty(player)
pl_frame(player)=0 : pl_dir(player)=16
bombdrop(player)=0 : plength(player)=8
bomblimit(player)=8 : player_spd(player)=0
pmove(player)=1 : canthrow(player)=0
teleport(player)=0
BBlit 0,shapeoffset(player)+16,posx(player)+7,posy(player)+8
shade=0
canfire(player)=0

Gosub Displaylevel

Time50=0 : sparkytimer=23
dbuffer.b=0
players_left=1
Repeat
	VWait
	Time50+1
	DisplayBitMap 4,dbuffer
	dbuffer=1-dbuffer
	Use BitMap dbuffer
	UnBuffer dbuffer

	ResetList doblock()
	While NextItem(doblock())
		BlitColl doblock()\num,doblock()\x,doblock()\y
		KillItem doblock()
	Wend

	ResetList bomb()
	While NextItem(bomb())
		If nomovemap(bomb()\x ASR 4,bomb()\y ASR 4)=0 Then bomb()\btimer=1
		If bomb()\btimer>=0
			bomb()\btimer-1
			If bomb()\btimer=0
				Gosub Explodebomb
				bombdrop(bomb()\player)-1
				KillItem bomb()
				Goto label2
			Else
				If bomb()\tunnel=0 Then BlitColl bombframe(bomb()\btimer/4),bomb()\x,bomb()\y
			EndIf
		EndIf
	Wend

label2:
	ResetList blck()
	While NextItem(blck())
		blck()\fram+1
		x.w=blck()\x : y.w=blck()\y
		If blck()\fram>=32
			AddItem doblock()
			doblock()\x=x,y,0
			BlitColl 0,x,y
			If mapxy2(x ASR 4,y ASR 4)>1
				doblock()\num=#bonusshapes-2+mapxy2(x ASR 4,y ASR 4)
				BlitColl #bonusshapes-2+mapxy2(x ASR 4,y ASR 4),x,y
			EndIf
			nomovemap(x ASR 4,y ASR 4)=False
			mapxy(x ASR 4,y ASR 4)=0 : KillItem blck()
		Else
			BlitColl #blockdestruct+blck()\fram/4,x,y
		EndIf
	Wend

	ResetList explode()
	While NextItem(explode())
		explode()\count-1
		If explode()\count=0
			Gosub RemoveExplode
			KillItem explode()
		EndIf
	Wend

	If RawStatus(25)
		 Repeat
		 Until RawStatus(25)=0
		 Repeat
		 Until RawStatus(25)
		 Repeat
		 Until RawStatus(25)=0
	EndIf

	cur=player
	If pmove(player)>1
		pmove(player)-1
		BBlit dbuffer,shapeoffset(player)+45-(pmove(player) MOD 12)/3,posx(player)+7,7+posy(player)
	EndIf
	If player_spd(player)<0 Then player_spd(player)+1
	If pmove(player)=1 AND teleport(player)=0
		; check movement for player
		Gosub Joystickfiretest
		Gosub Joysticktest
		If pmove(player)=1 AND player_spd(player)>=0 Then Gosub Joysticktest
		If pmove(player)=1 AND player_spd(player)>0 Then Gosub Joysticktest : player_spd(player)-1
	EndIf
	If pmove(player)=-1
		pl_frame(player)+1
		If pl_frame(player)=40
			pmove(player)=0 : players_left-1
			pstatus(player)=0
			Use BitMap 6 : Blit #bigredcross,ingame(player)-16,0
			Use BitMap dbuffer
		Else
			BBlit dbuffer,32+shapeoffset(player)+(pl_frame(player) ASR 2),posx(player)+7,posy(player)+7
		EndIf
	EndIf

	Gosub Sparky
	If pmove(player)=1 AND teleport(player)=0
		BBlit dbuffer,shapeoffset(player)+pl_dir(player)+(pl_frame(player) ASR 2),posx(player)+7,8+posy(player)
	EndIf

	escape.b=RawStatus(69)
Until players_left=0 OR timeleft<56 OR gotit=1
fadish=1
Gosub ResetGame
Return

;===================================================

BLITZ
; Test joystick attached to player CUR & move player
.Joysticktest:
	px.w=posx(cur)+8 : py.w=posy(cur)+8

	x=px ASR 4 : y=py ASR 4
	pldird.b=pl_dir(cur) ASR 3

	Gosub JTest
	map2.b=mapxy2(x,y)
	If map2=1 AND teleport(cur)=0
		pstatus(cur)-1
		If pstatus(cur) MOD 18=0 Then Gosub UpdateShield
		If pstatus(cur)<0
			pmove(cur)=-1
			pl_frame(cur)=0 : bomblimit(cur)=0 : Sound deathsound,channel(cur):deathsound=3-deathsound
		EndIf
	EndIf
	If map2>1
		mapxy2(x,y)=0
		If mapxy(x,y)<#tunnelshapes
			AddItem doblock()
			doblock()\x=x ASL 4,y ASL 4,0
			BlitColl 0,x ASL 4,y ASL 4
		EndIf
		If map2=10 Then map2=Int(Rnd(5))+2
			m=map2-1
			On m Gosub llength,Gflamer,Addbomb,GoldBomb,FreezeBomb,Newblock,Alldropbomb,Explodeall,Random
			On m-9 Gosub Gameboy,Dark,Light,Spd1,Spd2,Invisible,Teleport,Shield,Unshield,SLevel,Bonus,CanThrow,BombBlock,AllSameCol
	EndIf

	If jv OR jh Then pl_frame(cur)+1:pl_frame(cur)=pl_frame(cur) AND %11111

	##[$8F03] posx(cur),posy(cur),jh,jv,pldird
	x=(posx(cur)+8) ASR 4
	y=(posy(cur)+8) ASR 4

	If jh=-1
		pl_dir(cur)=8
		If nomovemap(x-1,y)=1 Then bx=x-1 : by=y : Gosub ThrowBomb
	EndIf
	If jh=1
		pl_dir(cur)=0
		If nomovemap(x+1,y)=1 Then bx=x+1 : by=y : Gosub ThrowBomb
	EndIf
	If jv=1
		pl_dir(cur)=16
		If nomovemap(x,y+1)=1 Then bx=x : by=y+1 : Gosub ThrowBomb
	EndIf
	If jv=-1
		pl_dir(cur)=24
		If nomovemap(x,y-1)=1 Then bx=x : by=y-1 : Gosub ThrowBomb
	EndIf
Return

; Test joystick fire buttons for status and drop bomb
.Joystickfiretest:
	jf=##[$A006](player)
	If player=4 AND keyboard4 Then jf=keyfire
	If jf AND canfire(cur) Then Return
	If jf=0 Then canfire(cur)=0 : Return

	x=(posx(cur)+8) ASR 4 : y=(posy(cur)+8) ASR 4
	cb.w=nomovemap(x,y)
	If bombdrop(cur)<bomblimit(cur) AND cb=0 AND mapxy2(x,y)=0
.Putbombdown:
		bombdrop(cur)+1
		AddItem bomb()
		If Int(Rnd(1000))<10
			bomb()\frozen=-(Int(Rnd(50))+50)
		Else
			bomb()\frozen=0
		EndIf
		If mapxy(x,y)=0
			BlitColl bombframe(13),x ASL 4,(y ASL 4)
			bomb()\tunnel=0
		Else
			bomb()\tunnel=True
		EndIf
		nomovemap(x,y)=1
		bomb()\x=x ASL 4,y ASL 4,100,cur
	EndIf
Return

.ThrowBomb:
	jf=##[$A006](player)
	If player=4 AND keyboard4 Then jf=keyfire
	If jf=0 Then Return
	canfire(cur)=1
	If mapxy(bx,by)>=#tunnelshapes OR canthrow(cur)=0 Then Return

	ResetList bomb()
	found.b=0
	While NextItem(bomb()) AND found=0
		If ((bomb()\x+8)ASR 4)=bx AND ((bomb()\y+8)ASR 4)=by
			canthrow(cur)-1
			AddItem bombmove()
			pldird.b=pl_dir(cur) ASR 3
			bombmove()\xmove=bombmovedir(pldird)\xmove
			bombmove()\ymove=bombmovedir(pldird)\ymove

;x,y,btimer,player,array,xmove,ymove,animfram,owner,rot
			bombmove()\x=bomb()\x,bomb()\y,Abs(bomb()\btimer),bomb()\player,0
			bombmove()\animframe=0,cur
			If bombmove()\xmove<0 OR bombmove()\ymove<0
				bombmove()\rot=1
			Else
				bombmove()\rot=0
			EndIf

			nomovemap(bx,by)=0
			AddItem doblock()
			doblock()\x=bomb()\x,bomb()\y,0
			BlitColl 0,bomb()\x,bomb()\y

			KillItem bomb()
			found=True
		EndIf
	Wend
Return

BLITZ
.StatusBar
	Use BitMap 6
	Blit #greybar,0,0
	If taggame OR players<1 Then Return
	wide.w=304/players
	x=(wide ASR 1)-19
	For h=1 To players
		cur=active(h)
		ingame(cur)=x+26
		Blit shapeoffset(cur)+16,x+5,15
		ink=playercol(cur)
		If score(cur)<10
			Blit #smallnumbers+score(cur),x-8,9
		Else
			Blit #smallnumbers+(score(cur)/10),x-10,9
			Blit #smallnumbers+(score(cur) MOD 10),x-6,9
		EndIf
		If conwins(cur)<10
			Blit #smallnumbers+conwins(cur),x-8,18
		Else
			Blit #smallnumbers+(conwins(cur)/10),x-10,18
			Blit #smallnumbers+(conwins(cur) MOD 10),x-6,18
		EndIf
		x+26
		Blit #statusbarpics,x-13,6
		Boxf x,8,x+bomblimit(cur)ASL 1,9,2
		Boxf x,16,x+plength(cur)ASL 1,17,6
		If pstatus(cur)
			x2.w=pstatus(cur)/18
			Boxf x,24,x+x2,25,28
		EndIf
		x+wide-26
	Next h
	Use BitMap 0
Return

.PowerUPs:
Bonus:
	Sound 6,channel(cur)
	bonusgame=True
Return

llength:
;This will increase the length of bombs by 1
	If plength(cur)<8 Then plength(cur)+1
	Sound 9,channel(cur)
	x3.w=ingame(cur)
	Use BitMap 6 : Boxf x3,#statusy_flame,x3+plength(cur)*2,#statusy_flame+1,6
	Use BitMap dbuffer
Return

Gameboy:
;This will make players non-movable and die-proof for 5 secs
For h=1 To players
 hry=active(h)
 If hry<>cur AND pmove(hry)=1 Then pmove(hry)=250
Next h
Return

Addbomb:
;This increases the number of bombs you can drop
	If bomblimit(cur)<8 Then bomblimit(cur)+1
	Sound 7,channel(cur)
	x3.w=ingame(cur)
	Use BitMap 6 : Boxf x3,#statusy_bomb,x3+bomblimit(cur)*2,#statusy_bomb+1,2
	Use BitMap dbuffer
Return

Gflamer:
;This sets the length of bombs to maximum
	plength(cur)=8
	Sound 4,channel(cur)
	x3.w=ingame(cur)
	Use BitMap 6 : Boxf x3,#statusy_flame,x3+16,#statusy_flame+1,6
	Use BitMap dbuffer
Return

Newblock:
;This places a new block on the map at random
	Sound 5,channel(cur)
	Repeat
		x2.w=Int(Rnd(17))+1 : y2.w=Int(Rnd(11))+1
		notplayer.b=0
		For h2=1 To players
			cur2.b=active(h2)
			If (posx(cur2)+8) ASR 4=x2 AND (posy(cur2)+8) ASR 4=y2 Then notplayer=1
		Next h2
		For h=1 To 4
		 If x2=startx(h) ASR 4 AND y2=starty(h) ASR 4 Then notplayer=1
		Next h
	Until nomovemap(x2,y2)=0 AND mapxy(x2,y2)<#tunnelshapes AND mapxy2(x2,y2)=0 AND notplayer=0
	nomovemap(x2,y2)=True
	mapxy(x2,y2)=1
	BlitColl 1,x2 ASL 4,y2 ASL 4
	AddItem doblock()
	doblock()\x=x2 ASL 4,y2 ASL 4,1
;	doblock()\y=y2 ASL 4 : doblock()\num=1
Return

Alldropbomb:
;This makes everyone else drop a bomb (if they can)
	Sound 6,channel(cur)
	For h=1 To players
		n=active(h)
		x2=(posx(n)+7) AND $fff0 : y2=(posy(n)+8) AND $fff0
		xb.w=x2 ASR 4 : yb.w=y2 ASR 4
		If pmove(n)>0 AND n<>cur AND bombdrop(n)<bomblimit(n) AND nomovemap(xb,yb)=0 AND mapxy2(xb,yb)=0
			If mapxy(xb,yb)=0
				bombdrop(n)+1
				BlitColl bombframe(13),x2,y2
			EndIf
			AddItem bomb()
;x,y,timer,player,tunnel,frozen
			bomb()\x=x2,y2,100,n,(mapxy(xb,yb)>=#tunnelshapes),0
			nomovemap(xb,yb)=1
		EndIf
	Next h
Return

Explodeall
; This will explode all bombs (except the current players)
	Sound 1,channel(cur)
	ResetList bomb()
	While NextItem(bomb())
		If bomb()\player<>cur Then bomb()\btimer=1
	Wend
Return

Dark:
;This makes the screen 1 shade darker (Bright -> Normal -> Dark)
;for 10 seconds
	Sound 1,channel(cur)
	fadishdir.q=-0.01
Return

Light:
;This makes the screen 1 shade lighteer (Dark -> Normal -> Bright)
;for 10 seconds
	Sound 1,channel(cur)
	fadishdir.q=0.01
Return

Random
;A random effect
Return

SLevel
;Sets flag so that player has done speed trial
	gotit=1
	pstatus(player)=shieldtime*4
	Sound 8,channel(cur)
Return

Spd1
;Increases player speed for 10 secs
	Sound 1,channel(cur)
	player_spd(cur)+500
Return

Spd2
;Slows down all players speed (except you that is)
	Sound 1,channel(cur)
	For h=1 To 4
		If h<>cur Then player_spd(h)-500
	Next h
Return

GoldBomb:
;Increase max. bombs to 8
	Sound 10,channel(cur)
	bomblimit(cur)=8
	x3.w=ingame(cur)
	Use BitMap 6 : Boxf x3,#statusy_bomb,x3+16,#statusy_bomb+1,2
	Use BitMap dbuffer
Return

Shield:
;Add approx 1 explosion (small) worth of invincibility to
;player
	Sound 1,channel(cur)
	pstatus(cur)+shieldtime
	s2=shieldtime ASL 2
	If pstatus(cur)>s2 Then pstatus(cur)=s2
	x2.w=pstatus(cur)/18
	x3.w=ingame(cur)
	Use BitMap 6 : Boxf x3,#statusy_shield,x3+x2,#statusy_shield+1,28
	If pstatus(cur)<shieldtime ASL 2 Then Boxf x3+x2+1,#statusy_shield,x3+16,#statusy_shield+1,12
	Use BitMap dbuffer
Return

FreezeBomb:
;Will stop all currently laid bombs from ticking down
;(Except if the players have no more to drop (e.g. their
;last one has gone) and if it is you)
	Sound 6,channel(cur)
	For h=1 To 4 : bombcount(h)=0 : Next h
	ResetList bomb()
	While NextItem(bomb())
		owner=bomb()\player
		bombcount(owner)+1
		If owner<>cur AND bombcount(owner)<bomblimit(owner) AND bomb()\btimer>0
			If mapxy(bomb()\x ASR 4,bomb()\y ASR 4)=0
				AddItem doblock()
				doblock()\x=bomb()\x,bomb()\y,#freezebomb
				BlitColl #freezebomb,bomb()\x,bomb()\y
			EndIf
			bomb()\btimer=-bomb()\btimer
		EndIf
	Wend
Return

Unshield:
	For h=1 To players
		If active(h)<>cur AND pmove(active(h))=1
			h2=active(h)
			pstatus(h2)-shieldtime
			If pstatus(h2)<0 Then pstatus(h2)=0
			x3=ingame(h2)
			Use BitMap 6 : Boxf x3,24,x3+16,25,12
			If pstatus(h2)
				x2.w=pstatus(h2)/18
				Boxf x3,24,x3+x2,25,28
			EndIf
			Use BitMap dbuffer
		EndIf
	Next h
Return

Invisible:
	Sound 5,channel(cur)
	invisible(cur)=250
Return

Teleport:
	pl_frame(cur)=46
	pl_dir(cur)=16
	teleport(cur)=26
Return

CanThrow:
	canthrow(cur)+1
Return

BombBlock:
	ResetList bomb()
	While NextItem(bomb())
		x2=bomb()\x ASR 4 : y2=bomb()\y ASR 4
		notplayer=0
		For h2=1 To players
			cur2.b=active(h2)
			If (posx(cur2)+8) ASR 4=x2 AND (posy(cur2)+8) ASR 4=y2 Then notplayer=1
		Next h2
		If bomb()\tunnel=0 AND notplayer=0
			bombdrop(bomb()\player)-1
			nomovemap(x2,y2)=True
			mapxy(x2,y2)=1
			x=bomb()\x
			y=bomb()\y
			BlitColl 1,x,y
			AddItem doblock()
			doblock()\x=x,y,1
			KillItem bomb()
		EndIf
	Wend
Return

AllSameCol:
	shapeoffset(cur)=#playershapes+(cur-1)*56
	suc=False
	While suc=False
		h=Int(Rnd(4))+1
		If shapeoffset(h)<>shapeoffset(cur) Then suc=True
	Wend
	shp.w=shapeoffset(h)
	For h=1 To players
		If active(h)<>cur Then shapeoffset(active(h))=shp
	Next h
Return

;========================================================

BLITZ
UpdateShield:
	x3=ingame(cur)
	If pmove(cur)=1
		Use BitMap 6
		If pstatus(cur)
			x2.w=pstatus(cur)/18
			Boxf x3,24,x3+x2,25,28
			If pstatus(cur)<shieldtime ASL 2 Then Boxf x3+x2+1,#statusy_shield,x3+16,#statusy_shield+1,12
		Else
			Boxf x3,#statusy_shield,x3+16,#statusy_shield+1,12
		EndIf
		Use BitMap dbuffer
	EndIf
Return

BLITZ
.Explodebomb
	bmx.w=bomb()\x : bmy.w=bomb()\y
	x=bmx ASR 4 : y=bmy ASR 4
	nomovemap(x,y)=0
	mapxy2(x,y)=1
	blength.b=plength(bomb()\player)
	AddItem explode()
	explode()\count=32
	explode()\x=x : explode()\y=y
	If mapxy(x,y)=0
		AddItem doblock()
		doblock()\x=bmx,bmy,10 ; : doblock()\y=bmy
		BlitColl 10,bmx,bmy
	EndIf
	Sound 2,channel(bomb()\player)

	USEPATH explode()

;Left of bomb
Left:
	num.w=0
	map2.b=mapxy(x,y)
	For h=x-1 To x-blength Step-1
		map.b=mapxy(h,y)
		If map2>=#tunnelshapes AND map<#tunnelshapes AND map2<>#tleftexit Then Pop For : Goto Right
		If map>=#tunnelshapes AND map2<#tunnelshapes AND map<>#trightexit Then Pop For : Goto Right
		map2=map
		If map=1
			AddItem blck()
			blck()\x=h ASL 4,bmy,0
			Pop For
			mapxy(h,y)=2 : Goto Right
		EndIf
		If mapxy2(h,y)>1 AND map=0
			mapxy(h,y)=1 : mapxy2(h,y)=0 : AddItem blck()
			blck()\x=h ASL 4,bmy,16
			Pop For : Goto Right
		EndIf
		If map=2 Then Pop For : Goto Right
		If nomovemap(h,y)=1 Then Pop For : nomovemap(h,y)=0 : mapxy2(h,y)=1 : Goto Right
		If mapxy2(h,y)=1 Then Pop For : Goto Right
		If map=0
			AddItem doblock()
			If h<>x-blength Then doblock()\x=h ASL 4,bmy,12 : BlitColl 12,h ASL 4,bmy
			If h=x-blength Then doblock()\x=h ASL 4,bmy,11 : BlitColl 11,h ASL 4,bmy
			mapxy2(h,y)=1
		EndIf
		If map>=#tunnelshapes Then mapxy2(h,y)=1
		num+1 : Next h
;Right of bomb
Right:
	explode()\left=num
	num=0
	map2=mapxy(x,y)
	For h=x+1 To x+blength
		map.b=mapxy(h,y)
		If map2>=#tunnelshapes AND map<#tunnelshapes AND map2<>#trightexit Then Pop For : Goto Up
		If map>=#tunnelshapes AND map2<#tunnelshapes AND map<>#tleftexit Then Pop For : Goto Up
		map2=map
		If map=1
			AddItem blck()
			blck()\x=h ASL 4,bmy,0
			Pop For : mapxy(h,y)=2 : Goto Up
		EndIf
		If mapxy2(h,y)>1 AND map=0
			mapxy(h,y)=1 : mapxy2(h,y)=0 : AddItem blck()
			blck()\x=h ASL 4,bmy,16
			Pop For : Goto Up
		EndIf
		If map=2 Then Pop For : Goto Up
		If nomovemap(h,y)=1 Then Pop For : nomovemap(h,y)=0 : mapxy2(h,y)=1 : Goto Up
		If mapxy2(h,y)=1 Then Pop For : Goto Up
		If map=0
			AddItem doblock()
			If h<>x+blength Then doblock()\x=h ASL 4,bmy,12 : BlitColl 12,h ASL 4,bmy
			If h=x+blength Then doblock()\x=h ASL 4,bmy,13 : BlitColl 13,h ASL 4,bmy
			mapxy2(h,y)=1
		EndIf
		If map>=#tunnelshapes Then mapxy2(h,y)=1
		num+1 : Next h
;Up of bomb
Up:
	explode()\right=num
	num=0
	map2=mapxy(x,y)
	For h=y-1 To y-blength Step -1
		map=mapxy(x,h)
		If map2>=#tunnelshapes AND map<#tunnelshapes AND map2<>#tupexit Then Pop For : Goto Down
		If map>=#tunnelshapes AND map2<#tunnelshapes AND map<>#tdownexit Then Pop For : Goto Down
		map2=map
		If map=1
			AddItem blck()
			blck()\x=bmx,h ASL 4,0
			Pop For : mapxy(x,h)=2 : Goto Down
		EndIf
		If mapxy2(x,h)>1 AND map=0
			mapxy(x,h)=1 : mapxy2(x,h)=0 : AddItem blck()
			blck()\x=bmx,h ASL 4,16
			Pop For : Goto Down
		EndIf
		If map=2 Then Pop For : Goto Down
		If nomovemap(x,h)=1 Then Pop For : nomovemap(x,h)=0 : mapxy2(x,h)=1 : explode()\right+1: Goto Down
		If mapxy2(x,h)=1 Then Pop For : Goto Down
		If map=0
			AddItem doblock()
			If h<>y-blength Then doblock()\x=bmx,h ASL 4,15 : BlitColl 15,bmx,h ASL 4
			If h=y-blength Then doblock()\x=bmx,h ASL 4,14 : BlitColl 14,bmx,h ASL 4
			mapxy2(x,h)=1
		EndIf
		If map>=#tunnelshapes Then mapxy2(x,h)=1
		num+1 : Next h
;Down of bomb
Down:
	explode()\up=num,0
	map2=mapxy(x,y)
	For h=y+1 To y+blength
		map=mapxy(x,h)
		If map2>=#tunnelshapes AND map<#tunnelshapes AND map2<>#tdownexit Then Pop For : Return
		If map>=#tunnelshapes AND map2<#tunnelshapes AND map<>#tupexit Then Pop For : Return
		map2=map
		If map=1
			AddItem blck()
			blck()\x=bmx,h ASL 4,0
			Pop For : mapxy(x,h)=2 : Return
		EndIf
		If mapxy2(x,h)>1 AND map=0
			mapxy(x,h)=1 : mapxy2(x,h)=0 : AddItem blck()
			blck()\x=bmx,h ASL 4,16
			Pop For : Return
		EndIf
		If map=2 Then Pop For : Return
		If nomovemap(x,h)=1 Then Pop For : nomovemap(x,h)=0 : mapxy2(x,h)=1 : Return
		If mapxy2(x,h)=1 Then Pop For : Return
		If map=0
			AddItem doblock()
			If h<>y+blength Then doblock()\x=bmx,h ASL 4,15 : BlitColl 15,bmx,h ASL 4
			If h=y+blength Then doblock()\x=bmx,h ASL 4,16 : BlitColl 16,bmx,h ASL 4
			mapxy2(x,h)=1
		EndIf
		If map>=#tunnelshapes Then mapxy2(x,h)=1
		explode()\down+1 : Next h
Return

BLITZ
.RemoveExplode:
	x.w=explode()\x : y.w=explode()\y
	x22.w=x ASL 4 : y22.w=y ASL 4
;Left and right of bomb
	a.b=x-explode()\left
	b.b=x+explode()\right
	For h=a To b
		If mapxy2(h,y)=1
			mapxy2(h,y)=0
			If mapxy(h,y)<#tunnelshapes
				BlitColl 0,h ASL 4,y22
				AddItem doblock()
				doblock()\x=h ASL 4,y22,0
			EndIf
		EndIf
	Next h
;Up and down of bomb
	a.b=y-explode()\up
	b.b=y+explode()\down
	For h=a To b
		If mapxy2(x,h)=1 AND h<>y
			mapxy2(x,h)=0
			If mapxy(x,h)<#tunnelshapes
				BlitColl 0,x22,h ASL 4
				AddItem doblock()
				doblock()\x=x22,h ASL 4,0
			EndIf
		EndIf
	Next h
Return

;=====================================

.StartMatch
	Restore playertextdata
	For h=1 To 4 : Read posx(h),posy(h),staticx(h),staticy(h) : Next h
	BLITZ
	If medplay=0
		StartMedModule 0
		medplay=1
	EndIf
	##[$AE83] 3,1 : Use BitMap 3
	BlockScroll : VWait
	##[$A485] ?getreadypbm,3,#pal256
	ClearPalette{0,256}

	##[$A084] #pal256
	##[$8F05] #pal256,32,32,win(winnerfade)\r,win(winnerfade)\g,win(winnerfade)\b

	winnerfade=0

	DisplayPalette 1,0
	DisplayBitMap 1,3
	##[$AE85] %1,0
	players=0 : Time=1000
	For h=1 To 4
		pmove(h)=0 : active(h)=0 : pl_frame(h)=h-1
		If pstatus(h)<0 Then pstatus(h)=0
		##[$AE81] #font,posx(h)+23,posy(h)+2,Str$(score(h))+" : "+Str$(conwins(h))
	Next h

	escape=0 : frame.b=0 : keyboard4=0
	CreateDisplay 1
	PalFade {1,#pal256,64}

	Repeat
		If RawStatus(25)
			 Repeat
			 Until RawStatus(25)=0
			 Repeat
			 Until RawStatus(25)
			 Repeat
			 Until RawStatus(25)=0
		EndIf
		jhor.b=0

		For player=1 To 4
			If pmove(player)=0
				Blit #staticshapes+pl_frame(player),staticx(player),staticy(player)
				pl_frame(player)+1
				pl_frame(player) AND %111
			EndIf

			jf=##[$A006](player)
			If player=4 AND jf=0 AND pmove(player)=0
				jf=keyfire
				If jf Then keyboard4=1
			EndIf

			If pmove(player)=0 AND jf
				players+1
				pmove(player)=1 : active(players)=player
				Blit #staticshapes+7+player,staticx(player),staticy(player)
			EndIf

			If pmove(player)=1
				Gosub JTest
				If jv=1 Then jhor+1
			EndIf
		Next player
		VWait
		If (players>1 AND jhor=players) Then Time-15
		Time-1
		Boxf 153,121,168,132,29
		##[$AE81] #font,161,121,Str$(Time/100)
		escape.b=RawStatus(69)
	Until Time<=0 OR escape OR players=4

	If escape=0
		If players=4 Then VWait 15
		If players>1
			For h=1 To 4
				If pmove(h)=0
					score(h)=0 : conwins(h)=0 : pstatus(h)=0
				EndIf
			Next h
		EndIf
	EndIf

	PalFadeOut {1,#pal256,256}
	DisplayBitMap 0,0
	DisplayPalette 0,2
	CreateDisplay 0
	Use BitMap 0 : ##[$AE83] 0
	Gosub haltmed
Return

playertextdata:
	Data.w 82,76,16,81
	Data.w 193,76,241,81
	Data.w 82,163,16,130
	Data.w 193,163,241,130

haltmed:
	BLITZ
	medplay=0
	VWait
	StopMed
Return

.CurrentScores:
	ClearPalette{0,256}
	DisplayPalette 1,0
	VWait
	CreateDisplay 1
	CrMDecrunch ?firsttoaga,##[$A591](0)
	##[$A485] ##[$A591](0),3,#pal256
	Use BitMap 3 : ##[$AE83] 3
	##[$AE85] %1,0
	##[$AE81] #font,161,3,"F I R S T	 TO	 3	 G A M E S"
	##[$AE81] #font,160,2,"F I R S T	 TO	 3	 G A M E S",%1,31

	players=0
	For h=1 To 4
		If (playerstatus BitTst h) Then players+1
	Next h

	wide=320/players
	x=(wide ASR 1)-23

	y=16
	For h=1 To 4
		If (playerstatus BitTst h)
			Blit #blokesAGA-1+h,x,y
			If score(h)
				For s=1 To score(h)
					Blit #blokesAGA+6,x+6,y+64+s*22
				Next s
			EndIf
			If h=winner Then x2=x
			x+wide
		EndIf
	Next h

	##[$AE81] #font,161,244,"Press FIRE to continue"
	##[$AE81] #font,160,243,"Press FIRE to continue",%1,31

	PalFade{1,#pal256,256}
	VWait 20
	If winner<>0
		score(winner)+1 : conwins(winner)+1
		Sound 2,%1111
		Blit #blokesAGA+6,x2+6,y+64+score(winner)*22
		VWait 20
	EndIf
	Gosub WaitFireAll
	PalFadeOut {1,0,256}
	##[$AE83] 0,1
	CreateDisplay 0
Return

.EndMatch
	BLITZ
	DisplayBitMap 0,0
	winnerfade.b=winner
	StartMedModule 0
	medplay=1
	score(winner)+1 : conwins(winner)+1

	CrMDecrunch ?wingameice,##[$A591](0)
	##[$A485] ##[$A591](0),3,#pal256

	ClearPalette{0,256}
	DisplayBitMap 1,3
	DisplayPalette 1,0
	Use BitMap 3 : ##[$AE83] 3,1

	If winner
		Blit #blokesAGA-1+winner,138,97
		Blit #blokesAGA+6,145,81
		If conwins(winner) MOD 3<>0 AND speedtrialstatus
			winsleft.b=3-(conwins(winner) MOD 3)
			##[$AE85] %1,33
			If winsleft<>1
				##[$AE81] #lush1,160,34,Str$(winsleft)+" MORE WINS UNTIL SPEED TRIAL"
			Else
				##[$AE81] #lush1,160,34,"1 MORE WIN UNTIL SPEED TRIAL!"
			EndIf
		Else
			If speedtrialstatus=0
				If conwins(winner)=1
					a$="WE HAVE A WINNER!"
				Else
					a$="YOU'VE GOT "+Str$(conwins(winner))+" WINS IN A ROW!"
				EndIf
				##[$AE81] #lush1,160,34,a$
			Else
				##[$AE81] #lush1,160,34,"YOU'VE GOT A SPEED TRIAL NEXT!"
				speedtrialnext.b=winner
			EndIf
		EndIf
	Else
		##[$AE85] %1,33
		##[$AE81] #lush1,160,83,"DRAWN"
		Blit #blokesAGA+6,143,117
		##[$AE81] #lush1,160,153,"GAME"
	EndIf

	##[$AE84] 0
	##[$AE81] #font,160,240,"ANY FIRE BUTTON TO CONTINUE"
	CreateDisplay 1
	PalFade{1,#pal256,256}
	Gosub WaitFireAll
	PalFadeOut {1,0,256}
	##[$AE83] 0,1
	CreateDisplay 0
Return

.SpeedResult:
	DisplayBitMap 0,0
	##[$AE85] %1,28
	Use BitMap 3 : ##[$AE83] 3,1

	CrMDecrunch ?wingameice,##[$A591](0)
	##[$A485] ##[$A591](0),3,#pal256
	Scroll 118,163,85,18,118,172
	##[$8F05] #pal256,136,24,255,255,0

	If gotit=1
		Blit #blokesAGA+5,143,79
		Blit #blokesAGA-1+player,138,106
		##[$AE81] #lush1,160,40,"CONGRATULATIONS!"
	Else
		Blit #blokesAGA-1+player,138,106
		##[$AE81] #lush1,160,40,"BETTER LUCK NEXT TIME!"
	EndIf

	##[$AE84] 0
	##[$AE81] #font,160,240,"ANY FIRE BUTTON TO CONTINUE"
	DisplayBitMap 1,3
	ClearPalette{0,256}
	DisplayPalette 1,0
	CreateDisplay 1
	PalFade {1,#pal256,256}
	Gosub WaitFireAll
	PalFadeOut {1,0,256}
	DisplayBitMap 0,0
	CreateDisplay 0
	##[$AE83] 0,1
Return

.CalcWinner:
	BLITZ
	winner=0 : score(0)=0
	For h=1 To 4
		If score(winner)<score(h) Then winner=h
	Next h

	If winner
		h=1
		Repeat
			If score(winner)=score(h) AND winner<>h Then winner=0
			h+1
	 Until h=5 OR winner=0
	EndIf

	DisplayBitMap 0,0

	CrMDecrunch ?drawbackice,##[$A591](0)
	##[$A485] ##[$A591](0),3,#pal256

	Use BitMap 3 : ##[$AE83] 3,1
	##[$AE85] %1,0
	If winner
		suc=##[$A484](?winbackpal,#pal256)
		Blit #blokesAGA+7,160,211
		Blit #blokesAGA-1+winner,135,127
		Blit #blokesAGA+4,131,93
	Else
		##[$AE81] #lush1,160,120,"DRAWN CONTEST!"
	EndIf

	ClearPalette{0,256}
	DisplayPalette 1,0
	##[$AE81] #lush1,160,30,"GAME OVER PLAYERS"
	##[$AE81] #font,160,240,"PRESS FIRE TO CONTINUE"
	DisplayBitMap 1,3
	CreateDisplay 1
	PalFade{1,#pal256,256}

	Repeat
		n=0
		If ##[$A009] Then n=1
		If keyfire Then n=1
	Until n
	Gosub haltmed
	PalFadeOut {1,0,256}
	Use BitMap 0 : ##[$AE83] 0,1
	CreateDisplay 0
	VWait 5
Return

.Sparky:
	If Time50>=sparkytimer Then timeleft-1:Time50=0
	BlitColl #sparkyshapes+(spark ASR 1),304,231-timeleft
	spark+1
	spark AND %111
Return

LoadSamples:
	LoadSound 0,soundpath$+"laugh.spl"
	LoadSound 1,soundpath$+"pickup.spl"
	LoadSound 2,soundpath$+"boom.spl"
	LoadSound 3,soundpath$+"laugh2.spl"
	LoadSound 4,soundpath$+"goldenflamer.spl"
	LoadSound 5,soundpath$+"uh-oh.spl"
	LoadSound 6,soundpath$+"suckers.spl"
	LoadSound 7,soundpath$+"yes.spl"
	LoadSound 8,soundpath$+"goldenshield.spl"
	LoadSound 9,soundpath$+"flamer.spl"
	LoadSound 10,soundpath$+"goldenbomb.spl"
	LoadSound 13,soundpath$+"gunshot.spl"
Return

.LoadFiles:
	If LModule(0)=0
		Gosub Loading
		QAMIGA
		If ##[$BE15](path$+"bombprefs")
			suc=##[$A58F](path$+"bombprefs",2)

			If suc
				powerup_active=Peek.l(##[$A591](2))
				mapstatus=Peek.l(##[$A591](2)+4)

				selectedmaps=0
				For h=0 To #mapcount-1
					If (mapstatus BitTst h) Then selectedmaps+1
				Next h

				n=-1
				s.w=0
				While s<selectedmaps
					n+1
					If (mapstatus BitTst n)
						maparray(s)=n
						s+1
					EndIf
				Wend

				ad.l=##[$A591](2)+8
				For h=1 To 4
					defbombs(h)=Peek.b(ad)
					defflames(h)=Peek.b(ad+1)
					defshields(h)=Peek.b(ad+2)
					ad+3
				Next h

			EndIf
		EndIf
		LoadShapes 0,shapepath$+"maingame.shapes"
		LoadShapes 200,shapepath$+"players.shapes"
		LoadShapes 100,shapepath$+"blocks2.shapes"
		For h=0 To 13
			CopyShape 3+h,#flamebombshapes+h
		Next h
		CopyShape #freezebomb,#freezebombback
		LoadMedModule 1,soundpath$+"titletune.med" : LModule(0)=1
	EndIf
	VWait 15
	Gosub LoadingEnd
Return

; load game files
GameLoad:
	QAMIGA
	If LModule(1)=0
		Gosub Loading
		Gosub LoadSamples
		LoadMedModule 0,soundpath$+"getready.med" : LModule(1)=1
		LoadShapes #blokesAGA,shapepath$+"blokes.shapes"
		LoadShapes #staticshapes,shapepath$+"static.shapes"
		LoadShapes 500,shapepath$+"Pang.shapes"
	EndIf
	Gosub LoadingEnd
Return

;==================================================

BLITZ
WaitFireAll:
	Repeat
		jf=##[$A009]
		If keyfire Then jf+%10000
		escape=RawStatus(69)
	Until jf OR escape
	Repeat
		jf=##[$A009]
		If keyfire Then jf+%10000
		escape=RawStatus(69)
	Until jf=0 OR escape
Return

BLITZ
JTest:
	If player=4 AND keyboard4>0
		jv=0 : jh=0
		If RawStatus(keyu) Then jv=-1
		If RawStatus(keyd) Then jv=1
		If RawStatus(keyl) Then jh=-1
		If RawStatus(keyr) Then jh=1
	Else
		jv=##[$A007](player) : jh=##[$A008](player)
	EndIf
Return

.Loading:
	BLITZ
	ClearPalette{0,32}
	DisplayPalette 0,0
	CrMDecrunch ?loadinganim,##[$A591](0)
	##[$9C81] ##[$A591](0),0,#pal32
	DisplayBitMap 0,0 : Use BitMap 0
	PalFade {0,#pal32,32}
	DisplayPalette 0,0
	##[$9C83] Off
	ShapesBitMap 0,1 : VWait
	fbuffer=1
	For h=0 To 27
		##[$9C82] fbuffer
		VWait
		DisplayBitMap 0,fbuffer
		fbuffer=1-fbuffer
	Next h

	ShapesBitMap 1-fbuffer,fbuffer
	VWait 2

	QAMIGA

	##[$9C83] On
	##[$9C81] ?loadinganim2,fbuffer,#pal32,##[$A10B](0,144,104)
	VWait
	DisplayBitMap 0,fbuffer
	ShapesBitMap fbuffer,1-fbuffer
	fbuffer=1-fbuffer
	VWait 1
	loading=1
	QAMIGA
Return

LoadingEnd:
	QAMIGA
	If loadwait>50
		For h=0 To 1
			##[$AE83] h,1
			##[$AE85] %1,31
			##[$AE81] #font,160,240,"Waiting for floppy stop."
		Next h
	EndIf
	VWait loadwait
	loading=0
	VWait
	BLITZ
	PalFadeOut{0,#pal32,32}
	DisplayBitMap 0,0
	Use BitMap 0 : BlockScroll
	VWait
Return

;====================
;= Kill Yer Friends =
;====================
;(C) 1994 Stephen McNamara
;		and	Steven Matty
;(C) 1994 Leading Edge Software
;
;15/5/1994
;v0.9

#pangblock=508
#num=4
#hitmax=40
.KillYerFriends:
BLITZ
Free BitMap 2
BitPlanesBitMap 3,2,%111111
##[$A484] ?defpalpal,#pal32

Use BitMap 2 : ##[$AE83] 2

BlockScroll 0
For x.w=0 To 19
	Blit #pangblock,(x*16)+8,8
	Blit #pangblock,(x*16)+8,232
Next x
For y.w=1 To 14
	Blit #pangblock,8,(y*16)+8
	Blit #pangblock,312,(y*16)+8
Next y

ClearPalette{0,32}
DisplayBitMap 5,0
DisplayPalette 5,0
CreateDisplay 5
#r2=91
#g2=191
#b2=55
rs.q=(#r2/240.0)
gs.q=(#g2/240.0)
bs.q=(#b2/240.0)
rc.q=0
gc.q=0
bc.q=0

For h=16 To 235	Step 1
	AGAGreen 0,0,Int(rc),Int(gc),Int(bc)
	CustomColors 5,(h-16)*8,h,0,0,1
	rc+rs
	gc+gs
	bc+bs
Next h

StopCycle 0,0,0,0,0
CustomColors 5,(236-16)*8,240,0,0,1

;PaletteInfo #pal32
;For anq.q=0 To 1 Step 0.02
;	PalAdjust 0,anq
;	VWait
;	DisplayPalette 5,0
;Next anq

DisplayPalette 5,#pal32

Boxf 0,240,319,255,0
VWait : ##[$A59E]
##[$AE81] #font,160,246,"K I L L	Y E R	F R I E N D S",%1,28
Use BitMap 1
Scroll 0,0,320,256,0,0,2
ShapesBitMap 1,0
Use BitMap 0

For h=1 To #num
	pang(h)\x=36+(h-1)*60
	pang(h)\y=40+(10*Int(Rnd(5)))
	If Rnd(1)>0.5
		pang(h)\dir=4
	Else
		pang(h)\dir=-4
	EndIf
	pang(h)\spd=4
	pang(h)\hits=#hitmax
Next h

For h=1 To #num
	posx(h)=40+h*16
	pl_frame(h)=0
Next h

dbuffer.b=0
##[$A001] 0,3

num_players.b=players
For h=1 To 4
	If active(h) Then pang(active(h))\hits=0
Next h

exit_loop=50
Repeat
	VWait
	DisplayBitMap 5,dbuffer
	dbuffer=1-dbuffer
	Use BitMap dbuffer
	UnQueue dbuffer,2

	ResetList act_bullet()
	While NextItem(act_bullet())
		owner=act_bullet()\owner
		x.w=act_bullet()\x : y.w=act_bullet()\y
		bombhit.b=##[$A004](0,3,x,y)
		If bombhit<>-1
			player_b(owner)-1
			KillItem act_bullet()
			pang(bombhit+1)\hits+1
			If pang(bombhit+1)\hits=#hitmax
				num_players-1 : Sound 2,%1100
			EndIf
		Else
			act_bullet()\y-6 : y-6
			If y<20
				player_b(owner)-1 : KillItem act_bullet()
			Else
				QBlit dbuffer,#pangshapes+3+owner,x+6,y
			EndIf
		EndIf
	Wend

	For h=1 To #num
		If pang(h)\hits<#hitmax
			jh.b=##[$A008](h) : jf=##[$A006](h)
			If h=4 AND keyboard4
				jf=keyfire
				jh=0
				If RawStatus(keyl) Then jh=-1
				If RawStatus(keyr) Then jh=1
			EndIf
			sframe.w=shapeoffset(h)+24
			If canfire(h)>0 Then canfire(h)-1

			If jf AND player_b(h)<5 AND canfire(h)=0
				Sound 13,%0001,10
				AddItem act_bullet()
				act_bullet()\x=posx(h),212,h
;				act_bullet()\y=212
;				act_bullet()\owner=h
				player_b(h)+1
				canfire(h)=10
			EndIf
			If jh=-1
				If posx(h)>16 Then posx(h)-2
				sframe=shapeoffset(h)+8
				pl_frame(h)+1
			EndIf
			If jh=1
				If posx(h)<288 Then posx(h)+2
				sframe=shapeoffset(h)
				pl_frame(h)+1
			EndIf
			pl_frame(h) AND %11111
			QBlit dbuffer,sframe+pl_frame(h) ASR 2,posx(h)+7,216

			newx.w=pang(h)\x+pang(h)\dir
			newy.w=pang(h)\y+pang(h)\spd

			If newx<=32 OR newx>=288
				pang(h)\dir=-pang(h)\dir
			EndIf
			If newy<=32 OR newy=>208
				spd.q=pang(h)\spd
				pang(h)\spd=-spd
				If spd<0 Then pang(h)\spd+1 Else pang(h)\spd-1
			EndIf

			pang(h)\x=newx,newy
;			pang(h)\y=newy

			If pang(h)\spd<8 Then pang(h)\spd+0.3

			QBlit dbuffer,#pangshapes+h-1,newx,newy
			Blit #pangshapes+9+(pang(h)\hits/3),newx,newy+1

			##[$A002] h-1,newx-16,newy-16,newx+16,newy+16
		Else
			##[$A001] h-1
		EndIf
	Next h

	If num_players<2 Then exit_loop-1
Until exit_loop=0

For h=1 To 4
	If pang(h)\hits<#hitmax Then winner=h
Next h

SyncBitmaps{disp}
Use BitMap 2
ClearList act_bullet()
FlushQueue 0
FlushQueue 1
disp.b=5

.choosepup
Use BitMap 2 : BlockScroll 16
VWait : ##[$A59E]
##[$AE83] 2,1 : ##[$AE85] %1,28
If num_players=0
	a$="Drawn Bonus Game!"
Else
	a$="Congratulations Player "+Str$(winner)+"!"
EndIf
##[$AE81] #lush1,160,120,a$

dbuffer=0
For x=0 To 60 Step 4
	Use BitMap 0
	Line 159-x,134,160+x,134,16
	VWait
Next x
For y=1 To 55
	VWait
	DisplayBitMap disp,dbuffer
	dbuffer=1-dbuffer
	Use BitMap dbuffer
	Scroll 60,100,200,y,60,135-y,2
Next y
VWait
DisplayBitMap disp,dbuffer
VWait 25

If num_players=1
	player=winner
	Restore WinKillYF_data
	Read num
	Use BitMap 2 : BlockScroll 16
	VWait
	##[$AE81] #lush1,160,20,"Congratulations Player "+Str$(player)+"!"
	For h=0 To num-1
		Read a$
		##[$AE81] #font,160,60+h*12,a$
	Next h
	For h=0 To (num)*12+60
		If h=90 Then VWait 50
		VWait
		DisplayBitMap disp,dbuffer
		dbuffer=1-dbuffer
		Use BitMap dbuffer
		Scroll 60,h,200,54,60,80,2
	Next h
	VWait
	DisplayBitMap disp,dbuffer
	If dbuffer=1 Then ShapesBitMap 1,0
	VWait
	DisplayBitMap disp,0
	Use BitMap 0
	For y=0 To 41
		Line 18,180-y,301,180-y,16
		Line 18,181+y,301,181+y,16
		VWait
	Next y
	BGPowers.l=powerup_active
	BGPowers AND %1111111000111111111110111111
	DrawPowerUps {0,24,148,BGPowers}
	opow=0 : pow=0
	##[$AE83] 0,1
	Gosub KYF_About
	Boxf 60,128,259,136,16
	VWait
	##[$AE81] #font,160,128,powerup$(pow)
	currow=0
	Repeat
		opow.b=pow
		Gosub JTest
		If jv=-1 AND currow>0
			If currow=2
				a=(9-(#powerups MOD 9))/2
				pow-9+a
				currow-1
			Else
				currow-1
				pow-9
				If pow<0 Then pow=#powerups-1
			EndIf
		EndIf
		If jv=1 AND currow<2
			If currow=0 Then pow+9

			If currow=1
				b=pow MOD 9
				a=(9-(#powerups MOD 9))/2
				If b<2 Then pow+9-b
				If b>5 Then pow+9
				If b>1 AND b<6 Then pow+9-a
			EndIf
			If pow>=#powerups Then pow=#powerups-1
			currow+1
		EndIf
		If jh=-1 AND pow>0 Then pow-1
		If jh=1 AND pow<#powerups-1 Then pow+1

		If pow<9 Then currow=0
		If pow>8 AND pow<18 Then currow=1
		If pow>17 Then currow=2

		If pow<>opow
			Gosub KYF_About
			Boxf 60,128,259,136,16
			##[$AE81] #font,160,128,powerup$(pow)
			VWait 10
		EndIf
		jf=##[$A006](winner) : If winner=4 AND keyboard4 Then jf=keyfire

	Until jf AND BGPowers BitTst pow

	nextgamepowerup=pow
	##[$A107] 0,0,##[$A10B](0,powx(pow),powy(pow)),3692,16,16
	##[$A107] 0,0,##[$A10B](0,powx(pow),powy(pow)),3704,16,16

	For y=41 To 0 Step -1
		Use BitMap 0
		Line 18,180-y,301,180-y,16
		Line 18,181+y,301,181+y,16
		VWait
	Next y

	x=104
	For h=1 To 4
		Blit shapeoffset(h)+16,x+8,181
		powx(h-1)=x : powy(h-1)=173
		x+32
	Next h

	opow=0 : pow=0
	Gosub KYF_About
	Repeat
		opow.b=pow
		Gosub JTest
		If jh=-1 Then pow-1 : If pow<0 Then pow=3
		If jh=1 Then pow+1 : If pow>3 Then pow=0
		If pow<>opow
			Gosub KYF_About
			VWait 10
		EndIf
		jf=##[$A006](winner) : If winner=4 AND keyboard4 Then jf=keyfire

	Until jf
	nextgameplayer=pow+1
EndIf

PalFadeOut {disp,#pal32,32}
ClearPalette{0,32}
If disp<>0
	DisplayPalette 0,0
	DisplayBitMap 0,0
	CreateDisplay 0
	VWait
	disp=0
EndIf
Use BitMap 0 : BlockScroll
VWait : ##[$A59E]
Free BitMap 2
Return

KYF_About:
	Box powx(opow)-5,powy(opow)-5,powx(opow)+20,powy(opow)+20,16
	Box powx(pow)-5,powy(pow)-5,powx(pow)+20,powy(pow)+20,18
	##[$A107] 0,0,##[$A10B](0,powx(pow),powy(pow)),3698,16,16
Return

WinKillYF_data:
	Data.w 6
	Data$ "You've won","a bonus powerup","","Select a powerup"
	Data$ "and then select the","player to give it to..."

.ControlTag:
##[$A084] 1
##[$A088] #pal32,1

;BitMap 2,320,256,5
Free BitMap 2
BitPlanesBitMap 3,2,%11111
playersold=players
escape=0
For k=1 To 4
	temp(k)=active(k)
Next k
escape=0

address.l=?maps+(#mapcount*247)

ClearPalette{0,32}
DisplayPalette 0,0
VWait
Use BitMap 0
BlockScroll
Blit #greybar,0,0

; store5 map in array and draw it
For y=0 To 12
	For x=0 To 18
		mapxy(x,y)=Peek.b(address)-1
		If mapxy(x,y)>0 AND mapxy(x,y)<3
			nomovemap(x,y)=True
		Else
			nomovemap(x,y)=False
		EndIf
		mapxy2(x,y)=0
		address+1
		BlitColl mapxy(x,y),x ASL 4,32+(y ASL 4)
	Next x
Next y
Gosub atimer

Scroll 304,0,16,224,304,32
Boxf 304,0,319,31,16
##[$AE83] 0
##[$AE81] #font,160,246,"B L O W	 U P	 Y E R	 F R I E N D S",%1,28
Use BitMap 2
Scroll 0,0,320,256-32,0,0,0
ShapesBitMap 0,1

PalFade{0,1,32}

taggame=2
Repeat
	Gosub Tag
	players-1
	For h=1 To 4
		If active(h)=bomber Then cur=h
	Next h
	If cur<4
		For h=cur To 3
			active(h)=active(h+1)
		Next h
	EndIf
	escape=0
	active(players+1)=0
Until players=1 OR escape
players=playersold
If escape=0
	winner=active(1)
	disp=0
	Gosub choosepup
EndIf
taggame=0
For k=1 To 4
	active(k)=temp(k)
Next k
Return

Tag:
BLITZ
If players<2 Then Return
If taggame=1
	Use BitMap 0
	Scroll 0,0,320,256-32,0,0,2
	timeleft=230
	PalFade{0,1,32}
EndIf
taggame=1

Time50=0 : sparkytimer=12
##[$AE83] 0
##[$AE81] #lush1,6,8,"Round "+Str$(players-1),%0,0
##[$AE81] #lush1,298,8,"Round "+Str$(players-1),%1000,0
ShapesBitMap 0,1

; set number of alive players to number of actual players
deathsound=0 : escape=0 : shade.w=0

dbuffer.b=0

Use BitMap 0
For h=1 To players
	cur=active(h)
	invisible(cur)=0
	posx(cur)=startx(cur) : posy(cur)=starty(cur)
	pl_frame(cur)=0 : pl_dir(cur)=0
	bombdrop(cur)=0 : plength(cur)=2
	bomblimit(cur)=1 : player_spd(cur)=0
	pmove(cur)=1
	teleport(cur)=0
	BBlit 0,shapeoffset(cur)+pl_dir(cur)+(pl_frame(cur) ASR 2),posx(cur)+7,posy(cur)+40
Next h

iters.w=10
iters+Int(Rnd(10))
h=0
dbuffer=0 : gotit=0 : fadish.q=1.0 : fadishdir.q=-0.01

For n=1 To iters
	h+1
	If h>players Then h=1
	If active(h)
		h2.w=active(h)
		bomber=h2
		posx=startx(h2) : posy=starty(h2)
		Use BitMap 1
		Blit shapeoffset(h2)+16,152,16
		Use BitMap 0
		Blit shapeoffset(h2)+16,152,16
		BBlit 1,9,posx,posy+32

		VWait 25-(iters-n+1)
		UnBuffer 1
	EndIf
Next n

trut.l=0
Use BitMap 0
##[$A084] 1

Repeat
	VWait
	Time50+1
	DisplayBitMap 0,dbuffer
	##[$A088] 0,fadish,0,31
	fadish+fadishdir : If fadish<0.3 OR fadish>1.8 Then fadishdir=-fadishdir
	DisplayPalette 0,0
	dbuffer=1-dbuffer
	Use BitMap dbuffer
	UnBuffer dbuffer

	If RawStatus(25)
		 Repeat
		 Until RawStatus(25)=0
		 Repeat
		 Until RawStatus(25)
		 Repeat
		 Until RawStatus(25)=0
	EndIf
	For curry=1 To players
		cur=active(curry)
		If pmove(cur)>1
			pmove(cur)-1
			BBlit dbuffer,shapeoffset(cur)+45-(pmove(cur) MOD 12)/3,posx(cur)+7,39+posy(cur)
		EndIf
		If trut=0 AND gotit=0
			bx.w=Abs(posx(bomber)-posx(cur))
			by.w=Abs(posy(bomber)-posy(cur))
			If bx<8 AND by<8 AND bomber<>cur AND pmove(bomber)=1
				Sound 5,%1111
				Use BitMap 1-dbuffer
				Blit shapeoffset(cur)+16,152,16
				Use BitMap dbuffer
				Blit shapeoffset(cur)+16,152,16
				bomber=cur
				trut=150
			EndIf
		Else
			trut-1
		EndIf

		If pmove(cur)=1 AND teleport(cur)=0
			; check movement for player CUR
			player=cur
			Gosub Joysticktest
			If pmove(cur)=1 AND player_spd(cur)>=0 Then Gosub Joysticktest
			If bomber=cur AND dbuffer=0 Then Gosub Joysticktest
		EndIf
		If pmove(cur)=-1
			pl_frame(cur)+1
			If pl_frame(cur)=40
				pmove(cur)=0 : gotit=2
			Else
				BBlit dbuffer,32+shapeoffset(cur)+(pl_frame(cur) ASR 2),posx(cur)+7,posy(cur)+39
			EndIf
		EndIf
	Next curry

	For curyr=1 To players
		cur=active(curyr)
		If pmove(cur)>0
			If teleport(cur)=0 AND bomber<>cur
				BBlit dbuffer,shapeoffset(cur)+pl_dir(cur)+(pl_frame(cur) ASR 2),posx(cur)+7,40+posy(cur)
			EndIf
			If bomber=cur AND (trut=0 OR (dbuffer=0 AND trut>0))
				BBlit dbuffer,shapeoffset(cur)+pl_dir(cur)+(pl_frame(cur) ASR 2),posx(cur)+7,40+posy(cur)
			EndIf
		EndIf
	Next curyr

	If timeleft<56 AND gotit=0
		pmove(bomber)=-1 : pl_frame(bomber)=0
		gotit=1
		Sound deathsound,%1100
	Else
		Gosub Sparky
	EndIf
Until gotit=2

SyncBitmaps{0}
If players>2
	Repeat
		VWait
		##[$A088] 0,fadish,0,31
		fadish-Abs(fadishdir)
		DisplayPalette 0,0
	Until fadish<0
Else
	If fadish>1 Then fadishdir=-0.05
	If fadish<1 Then fadishdir=0.05
	Repeat
		VWait
		##[$A088] 0,fadish,0,31
		fadish+fadishdir
		DisplayPalette 0,0
	Until fadish>0.95 AND fadish<1.05
EndIf

cur=bomber
UnBuffer 0
UnBuffer 1
VWait 10
num_players=1
Return

;==========================================================
; Includes (Level maps, Fonts, Iffs, Anims and Palettes)
;==========================================================

Event
;INCDIR "FNS:"
lush2_font:			 IncBin "lush2.fns"
									Event
lush1_font:			 IncBin "lush1.fns"
									Event

INCDIR "Graphics/IFF/"
oswald_font:			IncBin "/oswald.crm"
									Event
BonusIff:				 IncBin "BonusGame.Iff"
									Event
drawbackice:			IncBin "drawback.crm"
									Event
wingameice:			 IncBin "wingame.crm"
									Event
titlescreenice:	 IncBin "AGATitle2.iff"
									Event
getreadypbm:			IncBin "getready64.iff"
									Event
getready2:				IncBin "getready2bpl.iff"
									Event
agapiccy:				 IncBin "aga.iff"
									Event
loadinganim:			IncBin "diskloading.anim.crm"
									Event
loadinganim2:		 IncBin "diskloading3.anim"
									Event
gradientbars:		 IncBin "gradientbars.iff"
									Event
firsttoaga:
									Event
INCDIR "bomberman:palette/"
defpalpal:				IncBin "defpal.pal"
									Event
winbackpal:			 IncBin "winback.pal"
									Event
drawbackpal:			IncBin "drawback.pal"
									Event

INCDIR "bomberman:maps/"
maps:
IncBin "level1.map"
IncBin "tunnel1.map"
IncBin "level2.map"
IncBin "tunnel2.map"
IncBin "level3.map"
IncBin "tunnel3.map"
IncBin "level4.map"
IncBin "tunnel4.map"
IncBin "level5.map"
IncBin "tunnel5.map"
IncBin "level6.map"
IncBin "tunnel6.map"
IncBin "level7.map"
IncBin "tunnel7.map"
IncBin "level8.map"
IncBin "tunnel8.map"
IncBin "level9.map"
IncBin "tunnel9.map"
IncBin "level10.map"
IncBin "level11.map"
IncBin "taglevel.map"

 Event
;Data for tunnel walls
walldatas:
	Dc.b	#wup|#wdown
	Dc.b	#wup|#wdown
	Dc.b	#wup
	Dc.b	#wup|#wdown
	Dc.b	#wleft
	Dc.b	#wdown
	Dc.b	#wright
	Dc.b	0
	Dc.b	#wleft|#wright
	Dc.b	#wleft|#wright
	Dc.b	#wleft|#wright
	Dc.b	#wright|#wdown
	Dc.b	#wleft|#wup
	Dc.b	#wright|#wup
	Dc.b	#wleft|#wdown

	Event

levelcols:
	Dc.w	154,96,110,168,110,122,159,101,113		; Pink
	Dc.w	0,99,0,38,128,17,5,122,14						 ; Green

version:
Dc.b	"$VER: BlitzBombers (14.9.94) (C)1994 Leading Edge Software",0
NPrint "Cudd"
