; ascii translation of /Users/simon/Google Drive/amiga/w/sega/shit/bakup/sprite2.bb,/Users/simon/Google Drive/amiga/w/sega/shit/sprite2.bb


NEWTYPE .segasp					 ;sort points here
	dpth.w:car.w						;car=0 for car or numsprites for bridge
	binfo.l[0]							;ptr to bridge info in rom
	shady:rshady						;
	sx.q:sy.q:spdata.w			;bridge
End NEWTYPE

Macro car SizeOf .segasp\`1(a2):End Macro

Statement doSortSprites{cars.l}
	MOVE.l d0,d1
	sortem:MOVEQ#0,d0:MOVE.l d1,a1:MOVE.l(a1)+,a2:MOVE (a2),d2
	nxvals:MOVE.l a2,a3:MOVE d2,d3
	wowo:MOVE.l (a1)+,d7:BEQ endlist:MOVE.l d7,a2:MOVE dpth(a2),d2
	CMP d2,d3:BPL nxvals
	flip:MOVEM.l a2-a3,-8(a1):MOVEQ#-1,d0:BRA wowo
	endlist:TST d0:BNE sortem:AsmExit
End Statement

Statement doSegaSprites{vp.l,cars.l,vram.l}
	;
	MOVEM.l a4-a6,-(a7)		 ;a0=vp a1=carptr a2=car a4=vram d6=link
	MOVE.l d0,a0:MOVE.l d1,a1:MOVE.l d2,a4:MOVEQ#1,d6
nxcar:
	MOVE.l (a1)+,d0:BEQ duncars:MOVE.l d0,a2
	MOVEQ#1,d5:BSR dovp:LEA 16(a0),a0
	MOVEQ#0,d5:BSR dovp:LEA -16(a0),a0
	BRA nxcar
	;
dovp:																					; a3/a5/a6 d3/d7
	MOVE !car{car},d7:SUBQ#1,d7:BMI docar
	MOVEM.l !car{sx},a5/a6:MOVE.l !car{binfo},a3
	MOVE !car{spdata},d4
	;
bridgepart:
	MOVEM (a3)+,d0-d3:ADD d4,d3:MOVEM d3/d7,-(a7)
	EXG d6,d2:MOVEQ#0,d7:MOVE.b d6,d7:MOVE.b d2,d6
	SWAP d0:ADD.l a5,d0:SWAP d1:ADD.l a6,d1:ADD.l#$60000,d1:SUB.l #$80000,d0
	;
	SUB.l 4(a0),d1:BTST#0,d5:BNE lefto2
righto2:
	SUB.l (a0),d0:CMP.l #-32*65536,d0:BMI clipt2			 ;off left
	CMP.l 8(a0),d0:BPL clipt2:TST.l d0:BPL doit2
plop2:
	SUB#$400,d6:BMI clipt2:ADD d7,d4:ADD.l#$80000,d0:BMI plop2:BRA doit2

lefto2:
	SUB.l (a0),d0:CMP.l #-24*65536,d0:BMI clipt2
	MOVE.l 8(a0),d2:CMP.l d2,d0:BPL clipt2
	BTST #10,d6:BEQ clu1:SUB.l #8*65536,d2:clu1
	BTST #11,d6:BEQ clu2:SUB.l #16*65536,d2:clu2
clop2:
	CMP.l d2,d0:BMI doit2:SUB#$400,d6:BMI clipt2:ADD.l#$80000,d2:BRA clop2

doit2:
	SWAP d0:ADD 12(a0),d0:SWAP d1:ADD 14(a0),d1:MOVE d1,d2
	CMP #-64,d2:BGT fine2:MOVE #-64,d2
fine2:
	MOVE d2,(a4)+:MOVE d6,(a4)+:MOVE d4,(a4)+:MOVE d0,(a4)+:ADDQ#1,d6
clipt2:
	MOVEM (a7)+,d4/d7:DBRA d7,bridgepart:RTS
	;
docar:
	AND#$ff,d6:OR #$a00,d6
	MOVEM.l !car{sx},d0-d1:ADD.l#$60000,d1:SUB.l #$80000,d0
	SUB.l 4(a0),d1:MOVE !car{spdata},d4:BTST#0,d5:BNE lefto
righto:
	SUB.l (a0),d0:CMP.l #-24*65536,d0:BMI clipt
	CMP.l 8(a0),d0:BPL clipt:TST.l d0:BPL doit
plop:
	SUB#$400,d6:BMI clipt:ADDQ#3,d4:ADD.l#$80000,d0:BMI plop:BRA doit
lefto:
	SUB.l (a0),d0:CMP.l #-16*65536,d0:BMI clipt
	MOVE.l 8(a0),d2:CMP.l d2,d0:BPL clipt
	SUB.l #16*65536,d2
clop:
	CMP.l d2,d0:BMI doit:SUB#$400,d6:BMI clipt:ADD.l#$80000,d2:BRA clop
doit:
	SWAP d0:ADD 12(a0),d0:SWAP d1:ADD 14(a0),d1:MOVE d1,d2
	CMP #-64,d2:BGT fine:MOVE #-64,d2
fine:
	MOVE d2,(a4)+:MOVE d6,(a4)+:MOVE d4,(a4)+:MOVE d0,(a4)+:ADDQ#1,d6
	ADD !car{shady},d1:MOVE.w !car{rshady},d2:TST.w d2:BEQ usenorm
	CMP #$ffff,d2:BNE boring:MOVE d1,!car{rshady}:BRA usenorm
boring:
	MOVE.w d2,d1:usenorm:ADD#9,d4:OR #$6000,d4
	MOVE d1,(a4)+:MOVE d6,(a4)+:MOVE d4,(a4)+:MOVE d0,(a4)+:ADDQ#1,d6
clipt:
	RTS

duncars:
	MOVEQ#0,d0:MOVE.l d0,(a4)+:MOVE.l d0,(a4)+:MOVEM.l (a7)+,a4-a6:AsmExit

End Statement
