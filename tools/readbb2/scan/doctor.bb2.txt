; ascii translation of /Users/simon/Google Drive/amiga/w/lha/games/af/Doctor/DoctorSource/Doctor.bb2
;Doctor Strange's Pet Project
;by Ian West and Jonathan Eggelton


;Pre-Game
WBStartup



.LoadFiles
;Load Game Files
;Shapes
;0		DocWalk
;10	 StatusPanel
;11	 DocDig
;35	 DocClimb
;38	 Creature1Walk
;54	 Creature1Climb
;58	 Creature1Hang
;62	 Bash
;66	 Explosion
;74	 Creature2Walk
;90	 Creature2Climb
;98	 Creature2Hang
;106	Creature3Walk
;122	Creature3Climb
;130	Creature3Hang
;138	Creature4Walk
;154	Creature4Climb
;162	Creature4Hang
;170	Morph1to2
;176	Morph2to3
;182	Morph3to4
;188	TitlePic
;189	DocDeath
;199	Doc'sLift
;216	StoryBoard
;220	BashBrick
;224	GameOver
;226	BashBrown
;230	BONUS
;231	Logo
;232	Level_Titles
;235	Ladders
;239	Solid
;242	Digable
;258	BlackBoard
;259	Caption1
;260	Caption2
;261	Objects
;269	MultiObject
;275	Scenery

LoadShapes 0,"Shapes.shapes"



;Palettes
LoadPalette 0,"DocShapes.palette"
LoadPalette 1,"StatusPanel.palette"
LoadPalette 2,"Title.palette"

;Sounds
LoadSound 0,"AxeSwing.sound"
LoadSound 1,"Creak.sound"
LoadSound 2,"DogBark.sound"
LoadSound 3,"Atmos1.sound"
LoadSound 4,"HitWood.sound"
LoadSound 5,"Explosion.sound"
LoadSound 6,"HitMetal.sound"
LoadSound 7,"MonsterScream.sound"
LoadSound 8,"Time.sound"
LoadSound 9,"Shield.sound"
LoadSound 10,"Parts.sound"
LoadSound 11,"Drip.sound"
LoadSound 12,"Wolf.sound"
LoadSound 13,"Atmos2.sound"
LoadSound 14,"MonsterCollide.sound"
LoadSound 15,"Tap.sound"
LoadSound 16,"ExtraLife.sound"
LoadSound 17,"Atmos3.sound"
LoadSound 18,"Clunk.sound"
LoadSound 19,"Buzz.sound"
LoadSound 20,"Blip.sound"
LoadSound 21,"Squelch.sound"
LoadSound 22,"MetalSqueak.sound"
LoadSound 23,"Dipple.sound"
LoadSound 24,"Klank.sound"
LoadSound 25,"Blanker.sound"
LoadSound 26,"SmartBottle.sound"
LoadSound 27,"Thunder.sound"
LoadSound 28,"Electric.sound"
LoadSound 29,"Fart.sound"

;Music
LoadMedModule 0,"DrTheme.med"
LoadMedModule 1,"HighScore.med"

;Animations
LoadAnim 0,"CastleZoom.anim"




;Activate Blitz Mode
VWait 150
BLITZ
BlitzKeys On



;Setup Animation Buffers
Buffer 0,16384
Buffer 1,16384



;General Variables
a.l=0
b.l=0
c.l=0
d.l=0
e.l=0
f.l=0
g.l=0



.SetupTypes
;SetUp Game Types

;Screen Position Type
NEWTYPE .Position
	x.w
	y.w
	animspeed.w
	animcount.w
	startx.w
	starty.w
	blockx.w
	blocky.w
End NEWTYPE

;SoundTrack
NEWTYPE .SoundTrack
	sampletrack$
	sampletime.w
	samplemark.w
	sampleloop.w
End NEWTYPE

;Monster
NEWTYPE .Monster
	x.w
	y.w
	movex.b
	movey.b
	animspeed.w
	animcount.w
	animframe.w
	montype.b
	active.b
	state.b
	lives.b
	holetime.w
	falltime.w
	bonustime.w
	morph.b
	movecount.b
	blockx.w
	blocky.w
	frame.b
	first.b
End NEWTYPE



.DimVariables

;HighScore List
Dim highscore$(5)
Dim highscore.l(5)
For a=0 To 4
	Read highscore$(a)
	Read highscore(a)
Next a
Data.s "IAN"
Data.l 10000
Data.s "JON"
Data.l 8000
Data.s "DRT"
Data.l 5000
Data.s "MAT"
Data.l 2000
Data.s "SIM"
Data.l 1000

;High Score Entry
Dim entry$(2)

;Logical Map of Platforms
;(8 Pixels Horizontal and 16 Vertical)
Dim screenlayout.b(20,12)

;Sample Lengths and SoundTrack
Dim samplelength.l(5)

;Hole Digging
Dim holedig.w(3)
Dim monsterdig.w(3)

;Doctor/Monster Collisions
Dim collision(3,2)

;Bashing Monster
Dim bash(3,1)
bash(0,0)=62
bash(1,0)=63
bash(2,0)=64
bash(3,0)=65

;Monsters
Dim monster.Monster(3)

;Monster Movement Change
Dim monsterchange(5)

;Monster Animation
;States
;0 = Normal
;1 = Climbing
;2 = Hanging
;3 = Falling
;4 = Dying
;5 = Transforming
;6 = Transform Down
;7 = Objects
;8 = Multiplier
Dim monsteranim.w(3,8,7)
For a=0 To 3
	For b=0 To 8
		For c=0 To 7
			Read monsteranim(a,b,c)
		Next c
	Next b
Next a
;Monster Type One
Data.w 38,39,40,41,42,43,44,45
Data.w 54,55,56,57,57,56,55,54
Data.w 58,59,60,61,61,60,59,58
Data.w 170,0,0,0,0,0,0,0
Data.w 66,67,68,69,70,71,72,73
Data.w 170,171,172,173,174,175,0,0
Data.w 170,170,170,170,170,170,0,0
Data.w 261,262,263,264,265,266,267,268
Data.w 269,270,271,272,273,274,0,0
;Monster Type Two
Data.w 74,75,76,77,78,79,80,81
Data.w 90,91,92,93,94,95,96,97
Data.w 98,99,100,101,102,103,104,105
Data.w 176,0,0,0,0,0,0,0
Data.w 66,67,68,69,70,71,72,73
Data.w 176,177,178,179,180,181,0,0
Data.w 175,174,173,172,171,170,0,0
Data.w 261,262,263,264,265,266,267,268
Data.w 269,270,271,272,273,274,0,0
;Monster Type Three
Data.w 106,107,108,109,110,111,112,113
Data.w 122,123,124,125,126,127,128,129
Data.w 130,131,132,133,134,135,136,137
Data.w 182,0,0,0,0,0,0,0
Data.w 66,67,68,69,70,71,72,73
Data.w 182,183,184,185,186,187,0,0
Data.w 181,180,179,178,177,176,0,0
Data.w 261,262,263,264,265,266,267,268
Data.w 269,270,271,272,273,274,0,0
;Monster Type Four
Data.w 138,139,140,141,142,143,144,145
Data.w 154,155,156,157,158,159,160,161
Data.w 162,163,164,165,166,167,168,169
Data.w 187,0,0,0,0,0,0,0
Data.w 66,67,68,69,70,71,72,73
Data.w 187,187,187,187,187,187,0,0
Data.w 187,186,185,184,183,182,0,0
Data.w 261,262,263,264,265,266,267,268
Data.w 269,270,271,272,273,274,0,0



.Statements
ASyncFade On
Statement BackFade{a.b,b.b,back.b}
	If b=0
		FadeIn a
	Else
		FadeOut a
	EndIf
	c.b=0
	For c=1 To 25
		DoFade
		If back
			Green 0,0,3,0
		Else
			Green 0,0,0,0
		EndIf
		VWait
	Next c
End Statement


Statement BlackOut{}
	a.b=0
	For a=0 To 15
		Green a,0,0,0
	Next a
End Statement


Statement PanelRestore{fadenum.b}
	While FadeStatus OR fadenum=1
		If FadeStatus=0
			Use Slice 1
			If fadenum
				FadeIn 1
			Else
				FadeOut 1
			EndIf
			fadenum=1-fadenum
			Use Slice 0
		EndIf
		DoFade
	Wend
End Statement


Statement SpeedDisplay{gamespeed.b}
	;Print Speed
	Colour 1,0
	Locate 31,22
	If gamespeed=2
		Print "Standard"
	EndIf
	If gamespeed=3
		Print "	Fast	"
	EndIf
End Statement


Statement TextDisplay{textx.b,texty.b,text$,mode.b}
	If mode=1
		Locate textx,texty
		Print text$
	EndIf

	If mode=2
		Locate textx-Len(text$),texty
		Print text$
	EndIf

	If mode=3
		Locate textx-Len(text$)/2,texty
		Print text$
	EndIf
End Statement



Statement JoyWait{a.w}
	While Joyb(1)=0 AND a>0
		a-1
		VWait
	Wend
End Statement






.PreGameVariables
;SetUp Game Variables


;Animation Lists

;Doctor Walking
Dim List docwalkanim.l(7)
While AddItem(docwalkanim())
	Read a
	docwalkanim()=a
Wend
Data.l 0,4,3,4,2,1,3,1
a=FirstItem(docwalkanim())

;Doctor Digging
Dim List docdiganim.l(11)
While AddItem(docdiganim())
	Read a
	docdiganim()=a
Wend
Data.l 11,12,13,14,15,16
Data.l 17,18,19,20,21,22
a=FirstItem(docdiganim())

;Doctor Climbing
Dim List docclimbanim.l(3)
While AddItem(docclimbanim())
	Read a
	docclimbanim()=a
Wend
Data.l 35,36,37,36
a=FirstItem(docclimbanim())

;Doctor Dying
Dim List docdeathanim.l(32)
While AddItem(docdeathanim())
	Read a
	docdeathanim()=188+a
Wend
Data.l 1,3,2,1,2,4,2,1,4,3,2,4,2,1,2,4,2,4,1,2
Data.l 5,6,7,8,9,10,10,10,10,32,33,34,35

a=FirstItem(docdeathanim())

;Doctor's Lift
Dim List docliftanim.l(14)
While AddItem(docliftanim())
	Read a
	docliftanim()=a
Wend
Data.l 199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214
a=FirstItem(docliftanim())



;Samples
samplelength(0)=0
samplelength(1)=45
samplelength(2)=35
samplelength(3)=110
samplelength(4)=10
samplelength(5)=0

;Specials for Initial Startup
score.l=0
lives.b=3
level.b=0
reallevel.l=0
timer.l=0
time$="00:00"

;Speed of Game
SetInt 5
	a+1
End SetInt
a=0
For b=1 To 10000
	c=0
	d=0
Next b
ClrInt 5
gamespeed.b=3

DEFTYPE .SoundTrack samples


;Start of Main Program Looping
Gosub GameScreen

.PrePlay
Gosub TitleSequence



.PrePlayVariables
;Score
score.l=0
prevscore.l=0

;Lives
lives.b=3
livestarget.l=100000

;Level of Play
level=0
reallevel=level

;Multiplier
multiplier.b=1

;First Time Kills
firsttime.b=0

;Time Bonus
timebonus.l=0

;Level Name (0=none, 1=Dungeon, 2=Labs, 3=Tower)
levelname.b=0







.PreLevelVariables
;Doctor Starting Position and Animation
doctor.Position\x=160,96,4,0

;Screen to Double Buffer
dblbuffer.b=0

;Doctor Shapes Flipped (-1=No, 1=Yes)
docflip.b=-1

;Doctor Falling
docfall.b=0

;Doctor Digging
docdig.b=0
holedig(0)=0

;Doctor Climbing
ladder.b=0

;Movement Checker
doclastmove.b=8


;Doctor Moving
docmove.b=0

;Doctor Dying
docdeath.b=0

;Timer
timer.l=0
prevtime.l=9999
time$="00:00"
timelimit.l=0
samples\sampletime=0

;Shape Number of Levels Primary Ground Block
groundshape.w=0

;Bashing Monster
bash=0

;Doc Lift In
doclift=1
liftblit=0

;Invincibility
invincible=250

;Sound Playing
nosound.b=0
monnosound.b=0

;Fading
fadenum=0

;Flashing
flash=0



.LevelBegin
;Initialise Bitmaps and Slice for Use
Use Slice 0
Show dblbuffer,32,32
Use BitMap dblbuffer

Gosub LevelLayout
Gosub MonsterSetup

Colour 12,11
Locate 30,2
Print lives
Colour 8,13

a$=Str$(reallevel+1)
While Len(a$)<3
	a$="0"+a$
Wend
Locate 19,4
Print a$

BackFade{0,0,0}

LoopSound samples\sampleloop,1,30


;Main loop
Repeat

	.DoubleBuffer
	;Wait for Display Update and Show Most Recently
	;Updated Screen
	VWait
	timer+1
	monsterturn+1
	If monsterturn=4
		monsterturn=0
	EndIf
	If flash>0
		flash-1
		If flash=0
			Green 0,0,0,0
		EndIf
	EndIf

	Show dblbuffer,32,32

	;Update Double Buffer Variable
	dblbuffer=1-dblbuffer

	;Initialise Double Buffer Screen
	Use BitMap dblbuffer
	UnBuffer dblbuffer



	.BlockStore
	;Calculate Monster and Doctor Block X and Y
	USEPATH doctor
	\blockx=\x/16
	\blocky=\y/16
	USEPATH monster(a)
	For a=0 To gamespeed
		\blockx=\x/16
		\blocky=\y/16
	Next a



	.HoleDisplay
	;Display Hole
	If holedig(3)
		BlitColl groundshape+holedig(2)-1,32+holedig(0),32+holedig(1)
		holedig(3)-1
	EndIf
	If monsterdig(3)
		BlitColl groundshape+monsterdig(2)-1,32+monsterdig(0),32+monsterdig(1)
		monsterdig(3)-1
	EndIf



	;Display and Move Monsters
	.MonsterDisplay
	USEPATH monster(a)
	For a=0 To gamespeed
		If \active
			Gosub MonsterMove
			If \state=0 AND \movex=-1
				BBlit dblbuffer,monsteranim(\montype,\state,\animframe)+8,32+\x,31+\y
			Else
				BBlit dblbuffer,monsteranim(\montype,\state,\animframe),32+\x,31+\y
			EndIf
		EndIf
	Next a



	.DoctorDisplay
	;Display Doctor
	a=(docflip+1)/2
	If docdig+ladder+docdeath+doclift=0
		b=docwalkanim()+a*5
	Else
		If docdig
			b=docdiganim()+a*12
		EndIf
		If ladder
			b=docclimbanim()
		EndIf
		If docdeath
			b=docdeathanim()
		EndIf
		If doclift
			If liftblit=0
				b=docliftanim()
				doctor\animcount+1
				If doctor\animcount=\animspeed
					If NOT NextItem(docliftanim())
						a=FirstItem(docliftanim())
						liftblit=2
					EndIf
					doctor\animcount=0
				EndIf
			Else
				b=docwalkanim()+a*12
				Blit 214,32+doctor\x,31+doctor\y
				liftblit-1
				If liftblit=0
					doclift=0
				EndIf
			EndIf
		EndIf
	EndIf
	If invincible=0 OR doclift>0
		BBlit dblbuffer,b,32+doctor\x,31+doctor\y
	Else
		invincible-1
		If invincible/3*3<>invincible OR invincible<50
			BBlit dblbuffer,b,32+doctor\x,31+doctor\y
		EndIf
	EndIf


	.BashDisplay
	;Display Bash
	If bash>3
		BBlit dblbuffer,bash(4-bash/4,0),bash(0,1),bash(1,1)
		bash-1
	EndIf




	.CollisionStore
	;Store Doctor Collisions for Later Action
	USEPATH monster(b)
	For b=0 To gamespeed
		If \active=1
			collision(b,0)=SpritesHit(18,32+doctor\x,31+doctor\y,monsteranim(\montype,\state,\animframe),32+\x,31+\y)
			collision(b,1)=doctor\x-\x
			collision(b,2)=doctor\y-\y
			If collision(b,0) AND Abs(collision(b,1))<8 AND Abs(collision(b,2))<12
				If invincible=0
					If \state<2 OR (doctorfall=1 AND \state=2)
						docdeath=1
					EndIf
				EndIf
				If \state=7
					\active=0
					nosound=25
					Select \animframe
						Case 0
							score+1000
							Sound 10,4
						Case 1
							score+2000
							Sound 10,4
						Case 2
							score+3000
							Sound 10,4
						Case 3
							timer-3000
							Sound 8,4
						Case 4
							invincible=1500
							Sound 9,4
						Case 5
							For c=0 To gamespeed
								If monster(c)\state<2
									monster(c)\morph=monster(c)\montype-1
									monster(c)\animcount=0
									monster(c)\animframe=0
									If monster(c)\morph<0
										monster(c)\montype=0
										monster(c)\state=4
										monster(c)\animspeed=5
										score+10000
										monster(c)\y-1
									Else
										monster(c)\state=6
										monster(c)\animspeed=6
									EndIf
								EndIf
							Next c
							Sound 26,4
							Green 0,15,15,15
							flash=10
							nosound=75
						Case 6
							score+10000
							Sound 10,4
						Case 7
							lives+1
							Sound 10,4
							Colour 12,11
							Locate 30,2
							Print lives
							Colour 8,13
					End Select
				EndIf
				If \state=8
					\active=0
					nosound=25
					multiplier+1
					Sound 16,4
				EndIf
			EndIf
		EndIf
	Next b



	;Set Up Path for Following Doctor Bits
	USEPATH doctor


	;Doctor Dying
	If docdeath=0 AND doclift=0

		.DoctorFall
		;Update Doctor as Falling
		If doctorfall
			b=screenlayout(\blockx,\blocky)
			If b=0 OR b=5 OR b=6
				\y+1
			Else
				doctorfall=0
			EndIf



		;Non-falling Actions
		Else


			.DoctorDig
			;Animate Doctor Digging
			If docdig
				\animcount+1

				;Next Animation Frame
				If \animcount=\animspeed
					If NOT NextItem(docdiganim())
						a=FirstItem(docdiganim())
						docdig=0
					EndIf
					\animcount=0

					;Axe Swing Sound
					If docdiganim()=15
						Sound 0,4
						Goto ExitPoint1
					EndIf

					;Doc Hitting Ground
					If docdiganim()=18

						;Place Hole on Screen if Ground Diggable
						b=screenlayout((\x-16*docflip)/16,\blocky)
						If b>1 AND b<5
							holedig(0)=(\x-16*docflip)/16*16
							holedig(1)=\blocky*16
							holedig(2)=b
							holedig(3)=2
							screenlayout((\x-16*docflip)/16,\blocky)+1
							bash=16
							bash(0,1)=32+\x-16*docflip
							bash(1,1)=31+\y
							bash(0,0)=226
							bash(1,0)=227
							bash(2,0)=228
							bash(3,0)=229
							Goto ExitPoint1
						EndIf

						;Produce Sound if Undiggable
						If b=1
							Sound 6,4
							bash=16
							bash(0,1)=32+\x-16*docflip
							bash(1,1)=31+\y
							bash(0,0)=220
							bash(1,0)=221
							bash(2,0)=222
							bash(3,0)=223
						EndIf

						;Produce Bash if Monster Hit in Hole
						USEPATH monster(b)
						For b=0 To gamespeed
							If collision(b,0) AND \state=2 AND docflip=Sgn(collision(b,1)) AND Abs(collision(b,1))>8 AND collision(b,2)<4
								bash=16
								bash(0,1)=32+\x
								bash(1,1)=31+\y
								bash(0,0)=62
								bash(1,0)=63
								bash(2,0)=64
								bash(3,0)=65
								\lives-1
								\holetime-50
								score+500
								Sound 7,4
								nosound=50
								If \lives=0
									screenlayout(\blockx,\blocky)=2
									holedig(0)=\blockx*16
									holedig(1)=\blocky*16
									holedig(2)=1
									holedig(3)=2
									\state=3
									\animcount=0
									\animframe=0
									\movey=1
									\y+16
									\falltime=0
								EndIf
							EndIf
						Next b
						USEPATH doctor
					EndIf

				EndIf
			EndIf
			ExitPoint1:



			If docdig=0

				;Start Digging if Fire Button Been Pressed
				If Joyb(1) AND ladder=0 AND \x-docflip*16>0 AND \x-docflip*16<320
					docdig=1
					\animcount=0
					a=FirstItem(docdiganim())
					Goto TimeBits
				EndIf



				.DoctorMove
				;Joystick Movement Detection

				;Horizontal Movement
				a=Joyx(1)
				b=Joyy(1)
				If a OR b

					;Is doctor on Empty Space?
					;If Yes Make Him Fall
					c=screenlayout(\blockx,\blocky)
					If c=0 OR c=5 AND Abs(\blockx*16+8-\x)<3
						doctorfall=1
						\y+1

						;Store Docs Direction
						If a=docflip
							docflip=-docflip
						EndIf

						;Make Doctor Stand Still
						d=FirstItem(docwalkanim())
						docmove=0
						doclastmove=Sgn(doclastmove)*8

						Goto TimeBits
					EndIf


					;Check Joystick Movement
					;If doclastmove=0 Check y First, 1 Check x First
					e=doclastmove
					Repeat
						e=-e

						;Horizontal Movement
						If e>0 AND a
							d=\x+a
							If screenlayout(d/16,\blocky)<6 AND Abs((\y+3)/16*16-\y)<4 AND d>8 AND d<312
								If screenlayout((\x-16)/16,(\y+3)/16)>0 OR screenlayout((\x+16)/16,(\y+3)/16)>0
									\x+a
									docmove=1
									ladder=0

									If \blocky*16<>\y
										\y=(\y+6)/16*16
									EndIf

									;Store Docs Direction
									If a=docflip
										docflip=-docflip
									EndIf

									;Animate Walking Doctor Strange
									\animcount+1
									If \animcount=\animspeed
										If NOT NextItem(docwalkanim())
											d=FirstItem(docwalkanim())
										EndIf
										If (docwalkanim()=2 OR docwalkanim()=0) AND nosound=0
											Sound 15,4,50
										EndIf
										\animcount=0
									EndIf

									If doclastmove<0
										doclastmove+1
										If doclastmove=0
											doclastmove=8
										EndIf
									EndIf

									Goto TimeBits
								EndIf
							EndIf
						EndIf


						If e<0 AND b
							;Vertical Movement
							If Abs(\blockx*16+8-\x)<4 AND \y+b>16 AND \y+b<184
								d=screenlayout(\blockx,((b-1)/2+\y+16)/16)
								If d=1 OR d=2
									d=screenlayout(\blockx,(\y+b)/16)
									If d=1 OR d=2
										\y+b
										ladder=1

										;Return to Centre of Ladder
										If \blockx*16+8<>\x
											\x+Sgn(\blockx*16+8-\x)
										EndIf

										;Animate Climbing Doctor Strange
										\animcount+1
										If \animcount=\animspeed
											If NOT NextItem(docclimbanim())
												d=FirstItem(docclimbanim())
											EndIf
											\animcount=0
										EndIf

										If doclastmove>0
											doclastmove-1
											If doclastmove=0
												doclastmove=-8
											EndIf
										EndIf

										Goto TimeBits
									EndIf
								EndIf
							EndIf
						EndIf

					Until e=doclastmove

				EndIf

				;Standing Still
				If ladder=0
					d=FirstItem(docwalkanim())
					docmove=0
					doclastmove=Sgn(doclastmove)*8
				EndIf

			EndIf
		EndIf
	EndIf

	.DocDeath
	If docdeath=1
		;Doctor Dying
		If screenlayout(\blockx,\blocky+1)=0 AND screenlayout(\blockx,\blocky)>0 AND screenlayout(\blockx,\blocky)<5
			If \blocky*16<>\y
				\y=\blocky*16
			EndIf
		Else
			If Abs(\blockx*16+8-\x)<3
				\y+2
			EndIf
		EndIf

		;Animate Falling Doctor Strange
		\animcount+1
		If \animcount=\animspeed
			\animcount=0
			If docdeathanim()=193
				Sound 29,4
			EndIf
			If docdeathanim()<193
				Sound 28,4
			EndIf
			If NOT NextItem(docdeathanim())
				a=FirstItem(docdeathanim())
				lives-1
				Colour 12,11
				Locate 30,2
				Print lives
				Colour 8,13
				doctor\x=doctor\startx,doctor\starty,4,0
				docdeath=0
				docdig=0
				ladder=0
				docfall=0
				invincible=250
				timer=0
				prevtime=9999
				PanelRestore{fadenum}
				fadenum=0
			EndIf
		EndIf
	EndIf




	;Cycle 0
	If dblbuffer=0

		.TimeBits
		;Display Clock
		a=timer/50
		If timelimit-a<21
			If FadeStatus=0
				Use Slice 1
				If fadenum
					FadeIn 1
				Else
					FadeOut 1
				EndIf
				fadenum=1-fadenum
				Use Slice 0
			EndIf
			DoFade
		EndIf
		If a<>prevtime AND timelimit-a>=0
			prevtime=a
			a=timelimit-a
			a$=Str$(a/60)
			If Len(a$)=1
				a$="0"+a$
			EndIf
			b$=Str$(a-a/60*60)
			If Len(b$)=1
				b$="0"+b$
			EndIf
			time$=a$+":"+b$
			Locate 18,2
			Print time$

			If a=0
				docdeath=1
			EndIf
		EndIf



		.KeyboardBits
		;KeyBoard Input
		If RawStatus(69) AND doclift=0
			lives=0
		EndIf
		If RawStatus(37)
			a=timer
			VWait 20
			While RawStatus(37)=0
			Wend
			VWait 10
			timer=a
		EndIf

	EndIf



	;Cycle 1
	If dblbuffer=1

		;Score
		If prevscore<>score
			Gosub ScoreDisplay
		EndIf



		.SoundTrack
		;Play Sound track
		USEPATH samples

		If timer>\sampletime
			;Select Position in Soundtrack
			b=Val(Mid$(\sampletrack,\samplemark,2))
			c=Val(Mid$(\sampletrack,\samplemark+2,3))

			\samplemark+5
			If \samplemark>Len(\sampletrack)
				\samplemark=1
			EndIf

			;Play Required Sample or Pause
			If b
				Sound b,2,20
			EndIf
			If c
				\sampletime+c
			Else
				\sampletime+samplelength(b)
			EndIf
		EndIf

	EndIf



	;Sound Play Update
	If nosound>0
		nosound-1
	EndIf
	If monnosound>0
		monnosound-1
	EndIf



	.LevelEnd
	a=0
	For b=0 To gamespeed
		a+monster(b)\active
	Next b
	If a=0
		timebonus+(timelimit-timer/50)
		level+1
		reallevel+1
		PanelRestore{fadenum}
		fadenum=0
		BackFade{0,1,0}
		Use BitMap 0
		BlockScroll 0
		Use BitMap 1
		BlockScroll 0
		VWait
		If level=9
			level=0
		EndIf
		Goto PreLevelVariables
	EndIf

Until lives=0



.GameOver
;Game Over Bits
Sound 25,15,0,0,0,0

;Start Music
StartMedModule 1
SetInt 5
	PlayMed
End SetInt


Gosub GameOverIn
Gosub HighScoreUpdate

;End Music
For a=64 To 0 Step -1
	SetMedVolume a
	VWait
Next a
StopMed
ClrInt 5

Goto PrePlay

End


;Sub Routines

;Setup Play Screen
.GameScreen

	;Setup Slices, One for the Main Area,
	;the Other for the Status Panel
	Slice 0,44,320,200,$fff8,4,0,16,384,384
	BlackOut{}
	Slice 1,244,320,56,$fff8,4,0,16,320,320
	BlackOut{}


	;Setup 2x 16 Colour Bitmap for Double Buffering
	BitMap 0,384,264,4
	BitMap 1,384,264,4


	;Assign Bitmap
	Use Slice 0
	Show 1,32,32

	;Display Startup Message
	Blit 231,114,72


	;Setup Control Panel
	Use Slice 1
	BitMap 2,320,56,4
	Show 2
	Blit 10,0,1

	;Activate Blitz Font and Bitmap for Printing
	BitMapOutput 2

	;Bits on Control Panel
	Colour 12,11
	Locate 2,2
	Print "0000000000"
	Colour 12,11
	Locate 30,2
	Print lives
	Colour 8,13
	Locate 18,2
	Print time$
	a$=Str$(reallevel+1)
	While Len(a$)<3
		a$="0"+a$
	Wend
	Locate 19,4
	Print a$

	;Fade in Screen
	BackFade{1,0,0}
	Use Slice 0
	BackFade{2,0,1}

	a=1
	While a<200 AND Joyb(1)=0
		VWait
		a+1
	Wend
	VWait 10

	Return



;Play Castle and Music
.TitleSequence

	Restore TitleData

	;Set Up Output Screen
	Use Slice 0
	Use BitMap 0
	BitMapOutput 0
	BlockScroll 0


	;Print Titles
	Blit 188,104,16
	VWait
	Use SetCycle 2
	Show 0,0,0
	VWait


	;Set Up Music
	StartMedModule 0

	SetInt 5
		PlayMed
	End SetInt


	;Wait for Joystick Button to be Pressed
	a=0
	b=1
	c=-1
	e=725
	f=2
	g=0
	While Joyb(1)=0
		If Joyb(0)
			VWait
			End
		EndIf
		a+1
		If a>e

			Use BitMap b

			Select c

				Case -2
					BlockScroll 0
					Blit 188,104,16
					c+1
					e=725

				Case -1
					Restore TitleData
					BlockScroll 0
					BitMapOutput b
					Gosub HighScoreTable
					c+1
					e=450

				Default
					BitMapOutput b
					Read a$
					BlockScroll 0
					Blit 216+c,80,32
					If c=0
						Blit 259,80,32
					EndIf
					If c=1
						Blit 260,80,32
					EndIf
					Box 75,27,244,111,4
					Box 76,28,245,112,13
					Box 77,29,246,113,13
					Box 78,30,247,114,13
					Box 79,31,248,115,14
					Blit 332,74,26
					Blit 333,239,26
					Blit 334,74,106
					Blit 335,239,106
					If a$<>"" AND a$<>"END"
						d=0
						g=0
						Colour Val(Mid$(a$,1,1)),0
						a$=Mid$(a$,2,Len(a$)-1)
						TextDisplay{20,18+d,a$,3}
						g+Len(a$)
						While Len(a$)>32
							d+1
							Read a$
							TextDisplay{20,18+d,a$,3}
							g+Len(a$)
						Wend
					EndIf
					If a$="END"
						c+1
						If c=4
							c=-2
						EndIf
					EndIf
					e=g*10
					If e<75
						e=75
					EndIf


			End Select

			Show b,0,0
			If c=-1
				Use SetCycle 2
				f=2
			Else
				Use SetCycle 0
				f=0
			EndIf
			b=1-b
			a=0

		EndIf

		VWait
	Wend


	;Fade Out Music
	For a=64 To 0 Step -1
		SetMedVolume a
		VWait
	Next a
	StopMed
	ClrInt 5


	;Close Bits
	BackFade{f,1,0}
	Use BitMap 0
	BlockScroll 0
	Use BitMap 1
	BlockScroll 0



	;Set Control Panel for Output
	BitMapOutput 2
	Colour 8,13

	Colour 12,11
	Locate 2,2
	Print "0000000000"
	Colour 8,13


	;TitleScreen Words Data
	TitleData:
				;"12345678901234567890123456789012"
	Data.s "","1Vell, Igor, I'm off to bed."
	Data.s "1Votch zose readings, und voteffer"
	Data.s "you do vile I'm avay..."
	Data.s "1Don't touch zat svitch!"
	Data.s "2Yes, master."
	Data.s "END"
	Data.s "","1Vot's ze matter Igor?! Can't you see"
	Data.s "I'm trying to sleep?"
	Data.s "2Master, we have a problem..."
	Data.s "1Vot! You pulled the svitch, didn't you!",""
	Data.s "2Well, I, er..that is..."
	Data.s "1Neffer mind zat now...vot happened?",""
	Data.s "2It was terrible, master..."
	Data.s "2There's nasty, smelly creatures all"
	Data.s "over the castle!!"
	Data.s "1Mein Gott! Zen zer's only one sing","ve can do..."
	Data.s "END"
	Data.s "","1Zat fixed zis stupid machine."
	Data.s "1I neffer should haf built it in ze"
	Data.s "first place!"
	Data.s "END"
	Data.s "","1Now to deal viz zose creatures...",""
	Data.s "1before zey escape ze castle und take"
	Data.s "over ze vorld!!"
	Data.s "1...or somezing."
	Data.s "END"


	Return



;Create Layout for Level
.LevelLayout:

	;Clear Screens
	Use BitMap 1
	UnBuffer 1
	BlockScroll 0
	Use BitMap 0
	UnBuffer 0
	BlockScroll 0


	;Restore Level Data
	Select level
		Case 0
			Restore Level0
		Case 1
			Restore Level1
		Case 2
			Restore Level2
		Case 3
			Restore Level3
		Case 4
			Restore Level4
		Case 5
			Restore Level5
		Case 6
			Restore Level6
		Case 7
			Restore Level7
		Case 8
			Restore Level8
	End Select


	;Display Bonuses
	Read levelname
	If levelname>0 AND reallevel<>0
		Sound 25,15,0,0,0,0
		BitMapOutput 0
		Colour 1,0
		Blit 230,126,64
		Show 0,32,32
		Colour 15,0
		TextDisplay{7,14,"Time Bonus",1}
		TextDisplay{24,14,Str$(timebonus),2}
		TextDisplay{25,14,"x	 10 = ",1}
		TextDisplay{40,14,Str$(timebonus*10),2}
		Colour 2,0
		TextDisplay{7,16,"Lives Bonus",1}
		TextDisplay{24,16,Str$(lives),2}
		TextDisplay{25,16,"x 1000 = ",1}
		TextDisplay{40,16,Str$(lives*1000),2}
		Colour 9,0
		TextDisplay{7,18,"First Kills",1}
		TextDisplay{24,18,Str$(firsttime),2}
		TextDisplay{25,18,"x	100 = ",1}
		TextDisplay{40,18,Str$(firsttime*100),2}
		Colour 10,0
		TextDisplay{7,20,"Multiplier",1}
		TextDisplay{40,20,"x "+Str$(multiplier),2}
		Colour 1,0
		b=(timebonus*10+lives*1000+firsttime*100)*multiplier
		TextDisplay{7,23,"Total",1}
		TextDisplay{40,23,Str$(b),2}

		BackFade{0,0,1}
		JoyWait{100}

		c=10
		Repeat
			score+10
			b-10
			c+10
			BitMapOutput 2
			Colour 8,13
			Gosub ScoreDisplay
			BitMapOutput 0
			Colour 1,0
			TextDisplay{40,23," "+Str$(b),2}
			If score/100*100=score
				Sound 20,9
			EndIf
			If Joyb(1)<>0
				score+b
				BitMapOutput 2
				Colour 8,13
				Gosub ScoreDisplay
				BitMapOutput 0
				Colour 1,0
				TextDisplay{40,23,"		 0",2}
				b=-10
			EndIf
		Until b<=0

		If b=0
			JoyWait{100}
		EndIf

		BackFade{0,1,0}
		BlockScroll 0
		VWait
		BitMapOutput 2
		Colour 8,13
		timebonus=0
		firsttime=0
		multiplier=1
	EndIf



	;Display Castle Zoom
	If levelname>0
		Sound 25,15,0,0,0,0
		a=0
		InitAnim 0,1
		Show dblbuffer,36,10
		BackFade{0,0,1}
		dblbuffer=1-dblbuffer
		Use BitMap dblbuffer

		Repeat
			NextFrame 0
			Select a
				Case 0
					Sound 27,1
				Case 6
					Sound 27,2
				Case 17
					Sound 27,4
				Case 21
					Sound 27,8
			End Select
			VWait
			Show dblbuffer,36,10
			VWait 4
			dblbuffer=1-dblbuffer
			Use BitMap dblbuffer
			a+1
			If Joyb(1)<>0
				a=29
			EndIf
		Until a>27

		If a=28
			BlockScroll 0
			VWait
			Blit 232+levelname-1,108,103
			Show dblbuffer,32,32
			JoyWait{150}
			dblbuffer=1-dblbuffer
		EndIf

		BackFade{0,1,0}

		Use BitMap 1
		BlockScroll 0
		VWait
		Use BitMap 0
		BlockScroll 0
		VWait
		Show 0,32,32
		dblbuffer=0

	EndIf




	;Read Level Specific Variables
	Read doctor\x,doctor\y
	doctor\startx=doctor\x
	doctor\starty=doctor\y

	Read timelimit


	;Set Up Background
	Read a
	For b=0 To 11
		For c=0 To 19
			BlitColl 274+a,c*16+32,b*16+32
		Next c
	Next b


	;Read Primary Block Type
	Read groundshape,f,g


	;Read Data and Produce Screen
	For a=0 To 11
		For b=0 To 19
			Read c

			;Place Block on Screen and Store Type
			If c
				Select c
					Case 1
						e=f
						d=1
					Case 2
						e=groundshape
						d=2
					Case 3
						e=g
						d=3
				End Select

				BlitColl e,b*16+32,a*16+32
				screenlayout(b,a)=d
			EndIf

			If c=0
				screenlayout(b,a)=0
			EndIf

		Next b
	Next a


	;Specials
	For a=0 To 11
		For b=0 To 19
			If screenlayout(b,a)=3
				If screenlayout(b-1,a)>0 OR screenlayout(b+1,a)>0
					BlitColl g+1,b*16+32,a*16+32
				EndIf
				If screenlayout(b,a-1)=0
					BlitColl g,b*16+32,(a-1)*16+32
				EndIf
				If screenlayout(b,a+1)=2
					screenlayout(b,a+1)=1
					BlitColl f,b*16+32,(a+1)*16+32
				EndIf
				screenlayout(b,a)=1
			EndIf
		Next b
	Next a


	;Place Other Scenery
	d=274
	Repeat
		Read a,b,c
		If a<999
			b=b*16+32
			c=c*16+32
			If a<0
				Select a

					Case -1 ;Torch
						Blit d+4,b,c
						Blit d+5,b+16,c
						Blit d+6,b+32,c
						Blit d+7,b,c+16
						Blit d+8,b+16,c+16
						Blit d+9,b+32,c+16

					Case -2 ;Table
						For e=0 To 2
							Blit d+10+e,b+16*e,c
						Next e

					Case -3 ;Messy Table
						For e=0 To 2
							Blit d+13+e,b+16*e,c
						Next e

					Case -4 ;Slab
						Blit d+16,b,c
						Blit d+17,b+16,c

					Case -5 ;Pillar One
						Blit d+18,b,c
						Blit d+19,b,c+16
						Blit d+20,b,c+32

					Case -6 ;Pillar Two
						Blit d+18,b,c
						Blit d+19,b,c+16
						Blit d+19,b,c+32
						Blit d+20,b,c+48

					Case -7 ;Armour
						Blit d+21,b,c
						Blit d+22,b,c+16

					Case -8 ;Clock
						Blit d+33,b,c
						Blit d+34,b,c+16

					Case -9 ;Computer Short
						Blit d+35,b,c
						Blit d+36+Int(Rnd(3)),b+16,c
						Blit d+39,b+32,c

					Case -10 ;Computer Long
						Blit d+35,b,c
						Blit d+36+Int(Rnd(3)),b+16,c
						Blit d+36+Int(Rnd(3)),b+32,c
						Blit d+39,b+48,c

					Case -11 ;Painting
						Blit d+54,b,c
						Blit d+55,b+16,c
						Blit d+56,b,c+16
						Blit d+57,b+16,c+16

					Case -12 ;Window One
						Blit d+1,b,c
						Blit d+2,b,c+16
						Blit d+3,b,c+32

					Case -13 ;Window Two
						Blit d+1,b,c
						Blit d+2,b,c+16
						Blit d+2,b,c+32
						Blit d+3,b,c+48

					Case -14 ;Bookcase Short
						Blit d+23+Int(Rnd(3)),b,c
						Blit d+26+Int(Rnd(4)),b+16,c
						Blit d+30+Int(Rnd(3)),b+32,c

					Case -15 ;Bookcase Long
						Blit d+23+Int(Rnd(3)),b,c
						Blit d+26+Int(Rnd(4)),b+16,c
						Blit d+26+Int(Rnd(4)),b+32,c
						Blit d+30+Int(Rnd(3)),b+48,c

				End Select
			Else
				Blit d+a,b,c
			EndIf
		EndIf
	Until a=999


	;SoundTrack Information
	Read a$
	Read c
	samples\sampletrack=a$,1,1
	samples\sampleloop=c


	;Copy Platforms onto Other Bitmap
	ShapesBitMap 0,1


	;Level Date
	Level0:
	Data.b 1
	Data.w 184,32
	Data.l 120
	Data.l 40
	Data.w 242
	Data.l 239
	Data.l 235
	Data.l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	Data.l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	Data.l 0,1,2,2,2,2,2,2,3,2,1,1,1,2,3,2,2,2,1,0
	Data.l 0,0,0,0,0,0,0,0,3,0,0,0,0,0,3,0,0,0,0,0
	Data.l 0,0,0,0,0,0,0,0,3,0,0,0,0,0,3,0,0,0,0,0
	Data.l 1,2,2,2,2,3,2,2,3,2,2,3,2,2,3,2,2,2,1,0
	Data.l 0,0,0,0,0,3,0,0,3,0,0,3,0,0,3,0,0,0,0,0
	Data.l 0,0,0,0,0,3,0,0,3,0,0,3,0,0,3,0,0,0,0,0
	Data.l 1,2,3,2,2,1,2,2,3,2,2,1,0,0,1,2,3,2,1,0
	Data.l 0,0,3,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0
	Data.l 0,0,3,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0
	Data.l 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	Data.l 42,1,1,42,18,1,18,5,9,20,5,10,18,14,9,20,14,10
	Data.l 18,0,9,20,0,10,18,18,9,20,18,10
	Data.l 18,11,9,20,11,10,49,18,4
	Data.l 999,999,999
	Data.s "11200112001120011200112001110021100"
	Data.l 17



	Level1:
	Data.b 0
	Data.w 160,96
	Data.l 120
	Data.l 40
	Data.w 242
	Data.l 239
	Data.l 235
	Data.l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	Data.l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	Data.l 2,2,3,1,1,1,2,3,2,2,2,1,3,2,1,1,1,3,2,2
	Data.l 0,0,3,0,0,0,0,3,0,0,0,0,3,0,0,0,0,3,0,0
	Data.l 0,0,3,0,0,0,0,3,0,0,0,0,3,0,0,0,0,3,0,0
	Data.l 1,1,3,0,0,0,0,3,0,0,0,0,3,0,0,0,0,3,0,0
	Data.l 0,0,3,0,0,0,3,1,2,1,1,3,1,1,2,2,2,3,2,2
	Data.l 0,0,3,0,0,0,3,0,0,0,0,3,0,0,0,0,0,3,0,0
	Data.l 1,1,2,3,2,1,2,0,0,0,0,3,0,0,0,0,2,1,3,2
	Data.l 0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,3,0
	Data.l 0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,3,0
	Data.l 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	Data.l -1,13,8,-1,7,8,-1,3,3,-1,14,3,45,15,1,46,1,10
	Data.l 999,999,999
	Data.s "11200112001120011200112001110021100"
	Data.l 17



	Level2:
	Data.b 0
	Data.w 160,176
	Data.l 120
	Data.l 40
	Data.w 242
	Data.l 239
	Data.l 235
	Data.l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	Data.l 0,0,0,0,0,0,3,2,2,1,1,3,1,3,0,0,0,0,0,0
	Data.l 0,0,0,0,0,0,3,0,0,0,0,3,0,3,0,0,0,0,0,0
	Data.l 1,2,2,2,2,2,3,0,0,0,0,3,0,1,2,1,3,2,2,1
	Data.l 0,0,0,0,0,0,3,0,0,0,0,3,0,0,0,0,3,0,0,0
	Data.l 1,1,2,1,1,0,1,2,3,2,2,1,2,0,0,2,3,2,1,1
	Data.l 0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0
	Data.l 0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0
	Data.l 1,1,1,2,2,3,2,1,1,2,2,2,1,2,3,2,2,0,1,1
	Data.l 0,0,0,0,0,3,0,0,0,0,0,0,0,0,3,0,0,0,0,0
	Data.l 0,0,0,0,0,3,0,0,0,0,0,0,0,0,3,0,0,0,0,0
	Data.l 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	Data.l -1,1,0,-1,16,0,-3,1,10,45,16,10,46,18,10
	Data.l -4,18,7,49,3,4
	Data.l 999,999,999
	Data.s "00200182001850022600"
	Data.l 17



	Level3:
	Data.b 2
	Data.w 192,80
	Data.l 180
	Data.l 40
	Data.w 250
	Data.l 241
	Data.l 237
	Data.l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	Data.l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	Data.l 1,1,1,3,1,1,1,1,2,2,2,1,1,1,1,1,3,2,2,2
	Data.l 0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0
	Data.l 0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0
	Data.l 2,2,2,3,1,0,0,1,1,3,1,1,1,2,2,2,3,2,2,2
	Data.l 0,0,0,3,0,0,0,0,0,3,0,0,0,0,0,0,3,0,0,0
	Data.l 0,0,0,3,0,0,0,0,0,3,0,0,0,0,0,0,3,0,0,0
	Data.l 2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2
	Data.l 0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0
	Data.l 0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0
	Data.l 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	Data.l -10,4,1,-10,11,1,43,7,4,-9,7,10
	Data.l 48,9,0,48,10,0,48,8,0,42,13,10,44,14,10
	Data.l 999,999,999
	Data.s "00100191502005020050201502310020100"
	Data.l 13



	Level4:
	Data.b 0
	Data.w 128,32
	Data.l 180
	Data.l 40
	Data.w 250
	Data.l 241
	Data.l 237
	Data.l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	Data.l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	Data.l 2,2,3,2,2,2,1,1,1,0,1,1,2,2,2,2,2,3,2,2
	Data.l 0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0
	Data.l 0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0
	Data.l 2,2,3,2,2,1,0,0,0,0,0,0,0,0,1,2,2,3,2,2
	Data.l 0,0,3,0,0,0,0,2,2,2,3,2,2,0,0,0,0,3,0,0
	Data.l 0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,3,0,0
	Data.l 2,2,3,2,3,1,2,2,1,3,1,1,2,2,1,3,2,3,2,2
	Data.l 0,0,3,0,3,0,0,0,0,3,0,0,0,0,0,3,0,3,0,0
	Data.l 0,0,3,0,3,0,0,0,0,3,0,0,0,0,0,3,0,3,0,0
	Data.l 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	Data.l -10,10,10,43,5,4,-10,12,1,-14,7,5,-14,7,4
	Data.l -10,5,10,-8,14,3
	Data.l 999,999,999
	Data.s "00100191502005020050201502310020100"
	Data.l 13



	Level5:
	Data.b 0
	Data.w 176,128
	Data.l 180
	Data.l 40
	Data.w 250
	Data.l 241
	Data.l 237
	Data.l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	Data.l 2,3,2,2,2,2,2,1,1,2,1,1,2,1,1,2,2,2,3,2
	Data.l 0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0
	Data.l 0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0
	Data.l 0,3,0,0,2,2,2,3,0,0,0,0,0,0,3,2,2,2,3,0
	Data.l 0,3,0,0,0,0,0,3,0,0,0,0,0,0,3,0,0,0,3,0
	Data.l 0,3,0,2,2,2,2,3,0,0,0,0,0,0,3,2,2,2,3,2
	Data.l 0,3,0,0,0,0,0,3,0,0,0,0,0,0,3,0,0,0,3,0
	Data.l 0,3,0,2,2,2,2,2,3,2,1,1,2,3,2,2,2,2,3,0
	Data.l 0,3,0,0,0,0,0,0,3,0,0,0,0,3,0,0,0,0,3,0
	Data.l 0,3,0,0,0,0,0,0,3,0,0,0,0,3,0,0,0,0,3,0
	Data.l 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	Data.l -15,9,3,-15,9,4,-15,9,5,-15,9,6,-15,9,7
	Data.l -10,3,10,48,5,9,45,16,10,47,14,0,47,7,0
	Data.l -1,2,2
	Data.l 999,999,999
	Data.s "00100022500120024100015000410018050"
	Data.l 13



	Level6:
	Data.b 3
	Data.w 192,80
	Data.l 240
	Data.l 40
	Data.w 246
	Data.l 239
	Data.l 237
	Data.l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	Data.l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	Data.l 2,2,2,3,2,2,2,2,2,3,2,2,2,2,2,2,3,2,2,2
	Data.l 0,0,0,3,0,0,0,0,0,3,0,0,0,0,0,0,3,0,0,0
	Data.l 0,0,0,3,0,0,0,0,0,3,0,0,0,0,0,0,3,0,0,0
	Data.l 2,2,2,3,2,2,2,2,2,3,2,1,1,2,2,2,3,2,2,2
	Data.l 0,0,0,3,0,0,0,0,0,3,0,0,0,0,0,0,3,0,0,0
	Data.l 0,0,0,3,0,0,0,0,0,3,0,0,0,0,0,0,3,0,0,0
	Data.l 2,2,2,3,2,2,2,2,2,3,2,2,2,2,2,2,3,2,2,2
	Data.l 0,0,0,3,0,0,0,0,0,3,0,0,0,0,0,0,3,0,0,0
	Data.l 0,0,0,3,0,0,0,0,0,3,0,0,0,0,0,0,3,0,0,0
	Data.l 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	Data.l -14,5,0,-14,5,1,-14,5,3,-14,5,4,-14,5,6,-14,5,7
	Data.l -14,5,9,-14,5,10
	Data.l -14,11,0,-14,11,1,-14,11,3,-14,11,4,-14,11,6,-14,11,7
	Data.l -14,11,9,-14,11,10
	Data.l 45,1,10,45,18,10,-8,0,3,-3,17,7
	Data.l 999,999,999
	Data.s "00700212001250012500"
	Data.l 3



	Level7:
	Data.b 0
	Data.w 80,64
	Data.l 240
	Data.l 40
	Data.w 246
	Data.l 240
	Data.l 235
	Data.l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	Data.l 0,0,0,0,0,0,2,1,2,2,3,1,2,0,0,0,0,0,0,0
	Data.l 0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,2,2,3,2,0
	Data.l 0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,3,0,0
	Data.l 2,2,2,3,1,1,2,2,2,3,1,2,2,1,2,2,2,3,2,2
	Data.l 0,0,0,3,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0
	Data.l 0,0,0,3,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0
	Data.l 2,2,2,3,2,0,3,2,2,1,2,2,3,0,2,3,2,1,1,1
	Data.l 0,0,0,3,0,0,3,0,0,0,0,0,3,0,0,3,0,0,0,0
	Data.l 0,0,0,3,0,0,3,0,0,0,0,0,3,0,0,3,0,0,0,0
	Data.l 0,0,0,3,0,0,3,0,0,0,0,0,3,0,0,3,0,0,0,0
	Data.l 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	Data.l -11,1,1,-1,8,8,-1,0,8,-1,17,8,-7,13,2
	Data.l 999,999,999
	Data.s "00500125002110012100"
	Data.l 3



	Level8:
	Data.b 0
	Data.w 48,176
	Data.l 240
	Data.l 40
	Data.w 246
	Data.l 240
	Data.l 235
	Data.l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	Data.l 0,1,3,2,2,2,0,2,3,2,2,3,1,0,2,2,2,3,1,0
	Data.l 0,0,3,0,0,0,0,0,3,0,0,3,0,0,0,0,0,3,0,0
	Data.l 0,0,3,0,0,0,2,3,1,2,2,1,3,2,0,0,0,3,0,0
	Data.l 0,0,3,0,0,0,0,3,0,0,0,0,3,0,0,0,0,3,0,0
	Data.l 0,0,3,0,0,0,0,3,0,0,0,0,3,0,0,0,0,3,0,0
	Data.l 0,0,3,0,0,2,3,1,2,2,2,2,1,3,2,0,0,3,0,0
	Data.l 1,3,1,2,0,0,3,0,0,0,0,0,0,3,0,0,2,1,3,1
	Data.l 0,3,0,0,0,0,3,0,0,0,0,0,0,3,0,0,0,0,3,0
	Data.l 0,3,0,0,2,2,1,2,2,1,1,2,2,1,2,2,0,0,3,0
	Data.l 0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0
	Data.l 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	Data.l -13,0,2,-13,4,2,-13,15,2,-13,19,2
	Data.l 999,999,999
	Data.s "00500125002110012100"
	Data.l 3




	Return




.MonsterSetup
;Set Up Monsters for Each Level
	USEPATH monster(a)

	Select level
		Case 0
			Restore MonsterLevel0
		Case 1
			Restore MonsterLevel1
		Case 2
			Restore MonsterLevel2
		Case 3
			Restore MonsterLevel3
		Case 4
			Restore MonsterLevel4
		Case 5
			Restore MonsterLevel5
		Case 6
			Restore MonsterLevel6
		Case 7
			Restore MonsterLevel7
		Case 8
			Restore MonsterLevel8
	End Select

	;Set Up to 4 Monsters
	For a=0 To gamespeed

		;Monster Position
		Read \x
		\x+a
		Read \y

		;Animation
		\animspeed=3
		\animcount=0
		\animframe=0

		;Movement
		Read \movex
		Read \movey

		;Flags
		Read \montype
		Read \active
		\state=0

		\lives=\montype+1
		\falltime=0
		\holetime=0
		\morph=0
		\movecount=0
		\first=0


	Next a


	;Monster Data
	MonsterLevel0:
	Data.w 16,32
	Data.b 1,0,0,1
	Data.w 80,176
	Data.b 1,0,0,1
	Data.w 208,176
	Data.b -1,0,0,1
	Data.w 0,0
	Data.b 0,0,0,0


	MonsterLevel1:
	Data.w 192,32
	Data.b -1,0,0,1
	Data.w 48,32
	Data.b 1,0,1,1
	Data.w 16,128
	Data.b 1,0,0,1
	Data.w 272,128
	Data.b -1,0,1,1


	MonsterLevel2:
	Data.w 96,16
	Data.b 1,0,1,1
	Data.w 144,16
	Data.b 1,0,1,1
	Data.w 16,80
	Data.b -1,0,1,1
	Data.w 160,80
	Data.b 1,0,0,1


	MonsterLevel3:
	Data.w 32,32
	Data.b 1,0,0,1
	Data.w 32,176
	Data.b 1,0,2,1
	Data.w 288,32
	Data.b -1,0,2,1
	Data.w 288,176
	Data.b -1,0,2,1


	MonsterLevel4:
	Data.w 80,80
	Data.b -1,0,2,1
	Data.w 112,96
	Data.b 1,0,1,1
	Data.w 208,96
	Data.b -1,0,1,1
	Data.w 240,80
	Data.b 1,0,2,1


	MonsterLevel5:
	Data.w 16,16
	Data.b 1,0,2,1
	Data.w 304,16
	Data.b -1,0,2,1
	Data.w 64,64
	Data.b 1,0,1,1
	Data.w 256,64
	Data.b -1,0,1,1


	MonsterLevel6:
	Data.w 32,32
	Data.b 1,0,0,1
	Data.w 32,176
	Data.b 1,0,2,1
	Data.w 288,32
	Data.b -1,0,2,1
	Data.w 288,176
	Data.b -1,0,3,1


	MonsterLevel7:
	Data.w 16,176
	Data.b 1,0,3,1
	Data.w 304,176
	Data.b -1,0,3,1
	Data.w 32,64
	Data.b -1,0,2,1
	Data.w 144,16
	Data.b 1,0,1,1


	MonsterLevel8:
	Data.w 128,16
	Data.b 1,0,3,1
	Data.w 208,16
	Data.b -1,0,3,1
	Data.w 128,144
	Data.b 1,0,3,1
	Data.w 208,144
	Data.b 1,0,3,1


	Return



;Monster Movement Pattern One
.MonsterMove


	If (\movey AND \y/4*4<>\y) OR (\movex AND \x/4*4<>\x)
		;Do Movement if Monster Not Hanging
		If \state<2

			;Horizontal Movement
			If \movex

				;Update Animation
				Gosub MonsterAnimation
				Select \montype

					Case 1
						If \animframe<3
							\x+\movex
							\movecount=0
						EndIf

					Default
						\x+\movex
						\movecount=0

				End Select
				Return
			EndIf


			;Vertical Movement
			If \movey
				;Update Animation
				Gosub MonsterAnimation

				Select \montype

					Case 0
						If \animframe>4
							\y+\movey
							\movecount=0
						EndIf

					Case 2
						If \animframe>2
							\y+\movey
							\movecount=0
						EndIf

					Default
						\y+\movey
						\movecount=0

				End Select
				Return
			EndIf

		EndIf

	EndIf






	;Do Hanging Monster Things
	If \state=2
		;Update Animation
		Gosub MonsterAnimation

		;Increase Holetime
		\holetime+1
		If \holetime>500
			\state=5
			\animcount=0
			\animframe=0
			\animspeed=6
			\y+12
			If monnosound=0
				Sound 14,8
				monnosound=25
			EndIf
		Else
			Return
		EndIf
	EndIf


	;Do Falling Monster
	If \state=3
		;Update Position
		b=screenlayout(\blockx,(\y+\movey)/16)
		If b=0 OR b=5 OR (b=6 AND (\blocky+1)*16<>\y+\movey)
			\y+\movey
			\falltime+1

		Else

		 ;Detection Collision
			e=0
			For b=0 To gamespeed
				If monster(b)\state<>2 AND monster(b)\active AND b<>a AND monster(b)\state<7
					If Abs(\y-monster(b)\y)<3 AND Abs(\x-monster(b)\x)<16
						If monster(b)\montype+1>e
							e=monster(b)\montype+1
						EndIf
						If \montype<monster(b)\montype
							monster(b)\morph=monster(b)\montype-\montype-1
							monster(b)\state=6
							monster(b)\animspeed=6
						Else
							monster(b)\state=4
							monster(b)\animspeed=5
							monster(b)\y=monster(b)\blocky*16-1
							score+10000
							e=99
						EndIf
						monster(b)\animframe=0
						monster(b)\animcount=0
					EndIf
				EndIf
			Next b

			;Update Monster Type
			\morph=\montype-e-\falltime/16


			;Distance Fallen Check
			If \morph<0
				;SetUp Monster if Dead
				\montype=0
				\state=4
				\animspeed=5
				If \first=0
					firsttime+1
				EndIf
				If monnosound=0
					Sound 5,8
					monnosound=25
				EndIf
				score+1000*(\falltime/16)

			Else
				;Set Up Monster if OK
				\y+1
				\movey=0
				\movex=Int(Rnd(2))*2-1

				If \morph=\montype
					\state=0
				Else
					\state=6
					\animspeed=6
					If monnosound=0
						Sound 14,8
						monnosound=25
					EndIf
				EndIf
			EndIf

			\lives=\montype+1

			;Has Monster Fallen on Another
			If screenlayout(\blockx,\blocky+1)=6
				USEPATH monster(b)
				For b=0 To gamespeed
					If \blockx=monster(a)\blockx AND \blocky=monster(a)\blocky+1
						screenlayout(\blockx,\blocky)=2
						monsterdig(0)=\blockx*16
						monsterdig(1)=\blocky*16
						monsterdig(2)=1
						monsterdig(3)=2
						\state=3
						\animcount=0
						\animframe=0
						\movey=1
						\y+16
						\falltime=0
					EndIf
				Next b
				USEPATH monster(a)
			EndIf

		EndIf
		Return
	EndIf


	;Exploding Monster
	If \state=4
		Gosub MonsterAnimation
		If \animframe=7 AND \animcount=\animspeed-1
			If Int(Rnd(4))+\falltime/32>2
				\bonustime=500
				If Int(Rnd(2))=0 AND \falltime/32>1
					\state=8
					\animcount=4
					\animframe=0
				Else
					\state=7
					\animcount=0
					\animframe=Int(Rnd(8))+Int(Rnd(\falltime/32))
					If \animframe>7
						\animframe=7
					EndIf
				EndIf
			Else
				\active=0
			EndIf
		EndIf
		Return
	EndIf


	;Transforming Monster Up
	If \state=5
		If \y=\blocky*16
			screenlayout(\blockx,\blocky)=2
			monsterdig(0)=\blockx*16
			monsterdig(1)=\blocky*16
			monsterdig(2)=1
			monsterdig(3)=2
			\movey=0
			\state=0
			\movex=Int(Rnd(2))*2-1
			\animspeed=3
			\animcount=0
			\animframe=0
			\first=1
			If \montype<3
				\montype+1
			EndIf
			\lives=\montype+1
		Else
			Gosub MonsterAnimation
			If \animcount=0 OR \animcount=3
				\y-1
			EndIf
		EndIf
		Return
	EndIf


	;Transforming Monster Down
	If \state=6
		If \animframe=5 AND \animcount=\animspeed-1
			\montype-1
			\animcount=0
			\animframe=0
			\first=1
			If \montype=\morph
				If \movey
					\state=1
				Else
					\state=0
				EndIf
				\animspeed=3
				\montype=\morph
				\lives=\montype+1
			EndIf
		Else
			Gosub MonsterAnimation
		EndIf
		Return
	EndIf


	;Bonus Object
	If \state=7
		\bonustime-1
		If \bonustime=0
			\active=0
		EndIf
	EndIf


	;Bonus Object
	If \state=8
		Gosub MonsterAnimation
		If \animframe=6
			\animframe=0
		EndIf
		\bonustime-1
		If \bonustime=0
			\active=0
		EndIf
	EndIf


	;Do Movement if Monster Not Hanging
	If \state<2

		;Check for Hole
		b=screenlayout(\blockx,\blocky)
		If b=5 AND Abs(\blockx*16+8-\x)<5
			If \montype>1	AND Sgn(doctor\x-\x)=\movex AND Abs(doctor\y-\y)<16
				\movex=-\movex
			Else
				\x=\blockx*16+8
				\state=2
				\movex=0
				screenlayout(\blockx,\blocky)=6
				\holetime=0
				Return
			EndIf
		EndIf



		;Check for Direction Change
		If \movecount=0
			c=0

			;Change Direction to Vertical
			If \movey=0 AND (\x-8)/16*16=\x-8
					b=screenlayout(\blockx,(\y-1)/16)
					If b=1 OR b=2
						If \montype=1
							If Sgn(doctor\y-\y)=-1
								monsterchange(c)=-1
								c+1
								monsterchange(c)=-1
								c+1
							EndIf
						Else
							monsterchange(c)=-1
							c+1
						EndIf
					EndIf

					b=screenlayout(\blockx,(\y+16)/16)
					If b=1 OR b=2
						If \montype=1
							If Sgn(doctor\y-\y)=1
								monsterchange(c)=1
								c+1
								monsterchange(c)=1
								c+1
							EndIf
						Else
							monsterchange(c)=1
							c+1
						EndIf
					EndIf

					b=Int(Rnd(c+1))
					If b
						\movex=0
						\movey=monsterchange(b-1)
						\state=1
					EndIf

					\movecount=8

			EndIf



			;Change Movement to Horizontal
			If \movex=0 AND c=0 AND (\y)/16*16=\y

					c=0

					b=screenlayout((\x-16)/16,\blocky)
					If b>0 AND b<5
						If \montype>0
							If Sgn(doctor\x-\x)=-1
								monsterchange(c)=-1
								c+1
								monsterchange(c)=-1
								c+1
							EndIf
						Else
							monsterchange(c)=-1
							c+1
						EndIf
					EndIf

					b=screenlayout((\x+16)/16,\blocky)
					If b>0 AND b<5
						If \montype>0
							If Sgn(doctor\x-\x)=1
								monsterchange(c)=1
								c+1
								monsterchange(c)=1
								c+1
							EndIf
						Else
							monsterchange(c)=1
							c+1
						EndIf
					EndIf

					d=screenlayout(\blockx,(\y+\movey)/16)
					e=screenlayout(\blockx,(\y+\movey+15)/16)
					If (d<>1 AND d<>2) OR (e<>1 AND e<>2)
						b=Int(Rnd(c+1))+1
						If b>c
							b-1
						EndIf
					Else
						b=Int(Rnd(c+1))
					EndIf

					If b
						\movex=monsterchange(b-1)
						\movey=0
						\state=0
					EndIf

					\movecount=1

			EndIf

		EndIf


		;Spider Specials
		If \montype=3
			If screenlayout((\x+4*\movex)/16,\blocky)=6
				For c=0 To 3
					If (\x+4*\movex)/16=monster(c)\blockx AND \blocky=monster(c)\blocky AND monster(c)\state=2
						monster(c)\holetime=500
					EndIf
				Next c
			EndIf
		EndIf



		;Horizontal Movement
		If \movex
			If screenlayout(\blockx,\blocky)<>6
				b=screenlayout((\x+4*\movex)/16,\blocky)
				If b=0 OR b=6 OR \x+\movex<8 OR \x+\movex>312
					\movex=-\movex
				EndIf
			EndIf

			;Update Animation
			Gosub MonsterAnimation
			Select \montype

				Case 1
					If \animframe<3
						\x+\movex
						\movecount=0
					EndIf

				Default
					\x+\movex
					\movecount=0

			End Select
			Return
		EndIf


		;Vertical Movement
		If \movey
			b=screenlayout(\blockx,(\y+\movey)/16)
			c=screenlayout(\blockx,(\y+\movey+15)/16)
			If (b<>1 AND b<>2) OR (c<>1 AND c<>2)
				\movey=-\movey
			EndIf

			;Update Animation
			Gosub MonsterAnimation

			Select \montype

				Case 0
					If \animframe>4
						\y+\movey
						\movecount=0
					EndIf

				Case 2
					If \animframe>2
						\y+\movey
						\movecount=0
					EndIf

				Default
					\y+\movey
					\movecount=0

			End Select
			Return
		EndIf

	EndIf

	Return



.MonsterAnimation
;Animate Monster

	;Update Animation
	\animcount+1
	If \animcount=\animspeed
		\animcount=0
		\animframe+1
		If \animframe=8
			\animframe=0
		EndIf
	EndIf

	Return


.HighScoreUpdate

	;Is Score a High Score
	If score<=highscore(4)
		Return
	EndIf

	;Set Up Score Entry
	Use BitMap 0
	BlockScroll 0
	Show 0,0,0
	Colour 1,0
	BitMapOutput 0
	Locate 7,2
	Print "Please Select Your Initials"
	Blit 258,91,38

	a$="ABCDEFGHIJKLMNOPQRSTUVWXYZ!?& <*"
	a=0
	Colour 1,3
	Repeat
		Locate 13+(a-a/8*8)*2,7+(Int(a/8))*2
		Print Mid$(a$,a+1,1)
		a+1
	Until a+1>Len(a$)

	Colour 1,0
	For a=0 To 2
		entry$(a)="_"
		Locate 19+a,19
		Print entry$(a)
	Next a

	a=8
	b=4
	c=0

	Colour 2,3
	Locate 11+a*2,5+b*2
	Print Mid$(a$,a+8*(b-1),1)

	VWait
	BackFade{0,0,1}

	While c<4
		d=Joyx(1)
		e=Joyy(1)
		f=Joyb(1)
		If Abs(d)+Abs(e)>0
			Colour 1,3
			Locate 11+a*2,5+b*2
			Print Mid$(a$,a+8*(b-1),1)
		EndIf
		If d<>0
			a+d
			If a>8
				a=1
			EndIf
			If a<1
				a=8
			EndIf
			e=0
		EndIf
		If e<>0
			b+e
			If b>4
				b=1
			EndIf
			If b<1
				b=4
			EndIf
		EndIf
		If Abs(d)+Abs(e)>0
			Colour 2,3
			Locate 11+a*2,5+b*2
			Print Mid$(a$,a+8*(b-1),1)
			VWait 10
			f=0
		EndIf
		If f<>0
			If Mid$(a$,a+8*(b-1),1)="*"
				c=4
			EndIf
			If Mid$(a$,a+8*(b-1),1)="<" AND c>0
				c-1
				If c<3
					entry$(c)="_"
				EndIf
			EndIf
			If Mid$(a$,a+8*(b-1),1)<>"<" AND Mid$(a$,a+8*(b-1),1)<>"*" AND c<3
				entry$(c)=Mid$(a$,a+8*(b-1),1)
				c+1
			EndIf
			For g=0 To 2
				Colour 1,0
				Locate 19+g,19
				Print entry$(g)
			Next g
			VWait 10
		EndIf

	Wend

	b$=""
	For a=0 To 2
		If entry$(a)<>"_"
			b$=b$+entry$(a)
		Else
			b$=b$+" "
		EndIf
	Next a
	If b$="	 "
		b$="???"
	EndIf



	;Process Score and Enter into Table
	highscore(5)=score
	highscore$(5)=b$
	a=5
	Repeat
		If highscore(a)>highscore(a-1)
			Exchange highscore(a),highscore(a-1)
			Exchange highscore$(a),highscore$(a-1)
		EndIf
		a-1
	Until a=0


	;Print High Score Table
	Use BitMap 1
	BitMapOutput 1
	Gosub HighScoreTable


	;Display High Score Table
	Show 1,0,0
	JoyWait{250}


	;End Music
	For a=64 To 0 Step -1
		SetMedVolume a
		VWait
	Next a
	StopMed
	ClrInt 5

	Return



.GameOverIn
	;Restore Status Panel to Correct Colours
	PanelRestore{fadenum}

	;X and Y Position of Game Over
	a=136
	b=2
	c=204
	d=232
	e=0
	f=400
	z.f=.5040


	;Game Over In Bits
	While Joyb(1)=0 AND f>0

		;Double Buffer Screen
		VWait
		Show dblbuffer,32,32
		dblbuffer=1-dblbuffer
		f-1
		Use BitMap dblbuffer
		UnBuffer dblbuffer

		;Show Game Over
		BBlit dblbuffer,225,a,b
		BBlit dblbuffer,224,c,d


		If e=0
			;Update Position
			If b=117 AND d=117
				e=1
			EndIf
			If b<>117
				b+1
			EndIf
			If d<>117
				d-1
			EndIf
		EndIf

		If e=1
			If z<=1
				a=170+HCos(Pi*2*z)*34
				b=117-HSin(Pi*2*z)*34
				c=170-HCos(Pi*2*z)*34
				d=117+HSin(Pi*2*z)*34
				z+.0040
			EndIf
		EndIf


	Wend


	;Final Bits
	BackFade{0,1,0}
	Use BitMap 0
	BlockScroll 0
	Use BitMap 1
	BlockScroll 0
	VWait

	Return



.HighScoreTable
	;Print High Score Table
	BlockScroll 0
	Blit 258,91,38
	d=0
	Colour 1,3
	Repeat
		TextDisplay{13,8+d,highscore$(d),1}
		TextDisplay{28,8+d,Str$(highscore(d)),2}
		d+1
	Until d>=5
	Return



.ScoreDisplay
	a$=Str$(score)
	While Len(a$)<10
		a$="0"+a$
	Wend
	Colour 12,11
	Locate 2,2
	Print a$
	prevscore=score
	Colour 8,13
	If score>livestarget
		lives+1
		livestarget+100000
		Sound 10,4
		Colour 12,11
		Locate 30,2
		Print lives
		Colour 8,13
	EndIf
	Return




