; ascii translation of /Users/simon/Google Drive/amiga/w/abcstuff/libsdev/userlibsrc/AaronsIconLib.bb
+;============================================================
;
; TOOLTYPES COMES TO BLITZ2!!!!!!!!!!!!
;
; added by aaron koolen
;
; #aaronsiconlib=62
;
; Functions:
;	 IconTool$(#,tool$)		Returns the Tooltype matching tool$
;	 GetIconInfo(#,name$)	Examines a file's .info file.
;	 IconType(#)					 Returns the type of the icon
;	 IconSubTool$(#,$,$)		 Is basically a MatchToolType() interface
;
; Statements:
;	 Free IconInfo #					Frees an examined icon
;
; To Add:
;	 IconDefTool(#)				Returns default tool of icon.
;	 IconStack(#)
;	 IconX(#)
;	 IconY(#)
;
;	 Possible creation/saving of icons
;
; Object structure
; 0.l Pointer to disk object
;
;============================================================

!libheader{#aaronsiconlib,0,0,0,errors}

!dumtoke{"IconInfo","",_toke}

!afunction{#word}
!args{#word,#string}
!libs{#iconlib,#la6,#aaronsiconlib,#ia2|#pd0}
!subs{IInfo,0,0}
!name{"GetIconInfo","	success.w=GetIconInfo(Info#,filename$)	-1=ok, 0=fail" }

!afunction{#string}
!args{#word,#string}
!libs{#iconlib,#la6,#aaronsiconlib,#ia0|#pd0}
!subs{GetTType,CheckOKIcon,0}
!name{"IconTool$","	tool$=IconTool$(Info#,type$)	Empty string=NOT FOUND." }

!afunction{#word}
!args{#word}
!libs{#iconlib,#la6,#aaronsiconlib,#ia0|#pd0}
!subs{GetIconType,CheckOKIcon,0}
!name{"IconType","	type.w=IconType(Info#)	Returns the icon type. #WBDRAWER,#WBTOOL etc.." }

!afunction{#string}
!args{#word}
!libs{#aaronsiconlib,#ia0|#pd0}
!subs{GetDefTool,CheckOKIcon,0}
!name{"IconDefTool$","	deftool$=IconDefTool$(Info#)	Returns the icons default tool." }

!afunction{#long}
!args{#word}
!libs{#aaronsiconlib,#ia0|#pd0}
!subs{GetIconStack,CheckOKIcon,0}
!name{"IconStack","	stackSize.l=IconType(Info#)	Returns the stack size set in the icon." }

!afunction{#word}
!args{#string,#string}
!libs{#iconlib,#la6}
!subs{GetSubType,0,0}
!name{"IconSubTool$","	boolean.w=IconSubTool$(type$,sub$) -1=Found	0=Not found." }

_init:!nullsub{0,0,0}
_load:!nullsub{0,0,0}
_save:!nullsub{0,0,0}
_free:!nullsub{FreeIcon,0,0,#iconlib,#la6}
_use:!nullsub{0,0,0}
;_finit:!nullsub{FinitIT,0,0,#iconlib,#la6,#tooltypeslib,#ba2,#tooltypeslib,#md2}


!libfin{_toke,_load,_save,_use,_free,1,2}

#_GetDiskObject=-78
#_FreeDiskObject=-90
#_FindToolType=-96
#_MatchToolValue=-102


NEWTYPE.MyDiskObject
do_Magic.w ;/* a magic number at the start of the file */
do_Version.w ;/* a version number, so we can change it */
do_Gadget.Gadget;/* a copy of in core gadget */
do_Type.b
do_AARONPAD.b
*do_DefaultTool.b
*do_ToolTypes.do_ToolTypes
do_CurrentX.l
do_CurrentY.l
*do_DrawerData.DrawerData
*do_ToolWindow.b ;/* only applies to tools */
do_StackSize.l ;/* only applies to tools */
End NEWTYPE



;=====================================================
; type=IconStack(#)
; Accepts:		a0 Points to diskobject pointer we are getting
; Returns:		Stack of the disk object
.GetIconStack
	MOVE.l	(a0),a0				 ; Get diskobject pointer
	MOVE.l	SizeOf.MyDiskObject\do_StackSize(a0),d0
	RTS

;=====================================================
; type=IconType(#)
; Accepts:		a0 Points to diskobject pointer we are getting
; Returns:		Type of the disk object
.GetIconType
	MOVE.l	(a0),a0				 ; Get diskobject pointer
	MOVE.b	SizeOf.MyDiskObject\do_Type(a0),d0
'NoIcon
	RTS

;=====================================================
; tool$=IconDefTool$(#)
; Accepts:		a0 Points to diskobject pointer we are getting
; Returns:		default tool
.GetDefTool
	MOVE.l	(a0),a0
	MOVE.l	SizeOf.MyDiskObject\do_DefaultTool(a0),a0
	BSR		 MoveString
	RTS

;=====================================================
; GetIconTool$(#,name$)
;
; Accepts: d1 Pointer to name of tool to find
;					d0 Number supplied
;					a6 Icon lib base
;					a0 Address of object #d0
;					d2 Maximum object numbers
; Returns: String containing the tool value

.GetTType
	MOVEM.l	a0-a2/a4-a6/d1-d7,-(a7)

	MOVE.l	d1,temp			 ; Address of name
	MOVE.l	d1,a1				 ; Name of tool to find
	MOVE.l	(a0),a0			 ; Pointer to disk info
	MOVE.l	SizeOf.MyDiskObject\do_ToolTypes(a0),a0
	JSR		 _FindToolType(a6)

	TST.l	 d0
	BEQ		 NoToolType
; Got a tool type so copy it in
	MOVE.l	d0,a0
	MOVE.l	temp,a3
	BSR		 MoveString
NoToolType
	MOVEM.l	(a7)+,a0-a2/a4-a6/d1-d7
	RTS
temp:	Dc.l	0

;======================================================
; Accepts:	a0 source
;					 a3 Dest
; Returns:	d0 holds length
;					 a3 points to null
MoveString
	MOVEQ	 #0,d0
'Loop
	MOVE.b	(a0)+,(a3)+
	BEQ		 'Done
	ADDQ.l	#1,d0
	BRA		 'Loop
'Done
	SUBQ.w	#1,a3
	RTS
;=====================================================
;=====================================================
; GetSubTool$(#,tool$,name$)
;
; Accepts: d0 Pointer to name of string to search
;					d1 Pointer to sub tool to find
;					d0 Number supplied
;					a6 Icon lib base
; Returns: Boolean in d0 whether found
.GetSubType
	MOVE.l	d0,a0
	MOVE.l	d1,a1
	JSR		 _MatchToolValue(a6)
	TST.l	 d0
	BEQ		 'Over
	MOVE.w	#-1,d0
'Over
	RTS

;=====================================================
; Reads an info file
; success=GetIconInfo(#,name$)
;
; Accepts d1 Points to the name of the file we are going to examine
;				 d0 Number of object
;				 a2 Address of object #d0
;				 a6 Icon library
;				 d2 Maximum object numbers
;
; This filename is null terminated
.IInfo
	BSR		 CheckIconAlready

	MOVE.l	d1,a0								 ; Name of icon (without .info)
	JSR		 _GetDiskObject(a6)

	MOVE.l	d0,(a2)							 ; Save pointer to disk info
	MOVE.l	d0,a0

	TST.l	 d0
	BEQ		 Over
	MOVE.w	#-1,d0
Over
	RTS

;=====================================================
; Accept:
;				 a2	Address of object 0
;				 a6	Icon library base
;				 d2	Maximum number of icon infos (SET IN MAX)
.FinitIT
	TST.l	 d2
	BEQ		 Done
	MOVE.l	(a2)+,a0
	MOVE.l	a6,-(a7)
	BSR		 FreeIcon
	MOVE.l	(a7)+,a6
	SUBQ.l	#1,d2
	BRA		 FinitIT
Done
	RTS

;=====================================================
; Accept: d0	# of info to free
;				 a0 OR a3?	Address of object #d0
;				 a6	Icon library base
; Possibly a3 is the address! ?? Have to ask MARK
.FreeIcon
	MOVE.l	(a3),d0
	BEQ		 NoInfo
	MOVE.l	#0,(a3)
	MOVE.l	d0,a0
	JSR		 _FreeDiskObject(a6)
NoInfo
	RTS


;=====================================================
; Checks to see if there is already an object here
; if so, it free's it first
; Accepts d1 Points to the name of the file we are going to examine
;				 d0 Number of object
;				 a2 Address of object #d0
;				 a6 Icon library
;				 d2 Maximum object numbers
.CheckIconAlready
	TST.l	 (a2)
	BEQ		 'Over
; There is already an icon info here, so free the old one
	MOVEM.l d0-d7/a0-a6,-(a7)
	MOVE.l	a2,a3
	BSR		 FreeIcon
	MOVEM.l (a7)+,d0-d7/a0-a6
'Over
	RTS

.errors
;=====================================================
; Accept: d0	# of icon
;				 a0	Address of object #d0
;				 a6	Icon library base
; Maximum range checking will be done by the compiler
CheckOKIcon
	TST.l	 (a0)
	BEQ		 Error1				; No icon info for this one
	RTS


Error1:MOVE.l #ErrorMsg1,d0:TRAP #0
ErrorMsg1:	Dc.b	"Non-Existent icon info.",0
