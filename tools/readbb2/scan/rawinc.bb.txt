; ascii translation of /Users/simon/Google Drive/amiga/w/sw/rawinc.bb
If ReadMem(0,"rawinc") Then Exists 0,?l1,?l2-?l1:CloseFile 0
End

l1:
;-----------------------------------------------------------------------
BRA findvolume
BRA loadfile
BRA decrunch

;loadfile: ;d0=filename,d1=buffer d2=chipbuffer

; readlen - 512*24	xc does 512*26

#useblit	= 0											 ;use blitter?
#readlen	= 512*24									;how many raw bytes in a track...
#datalen	= #readlen/2							;how much data on a track
#tracks	 = 160										 ;how many tracks
#disksize = #datalen*(#tracks-1)
#sync		 = $4489									 ;sync marker.
#oddsync	= $4489									 ;for odd tracks!
#sync2		= $2aaa									 ;following sync for safety.
#readlen2 = #readlen+16
#datalen2 = #readlen2/2

#bufflen=#readlen+#datalen+#datalen+1024 ;1024
#control=$bfde00
#bitint=1

;Function.l RequestDisk{name.l,chipbuffer.l}
;	UNLK a4
;	MOVE.l d0,a0:MOVE.l (a0),wanted	 ;4 letter id
;	MOVE.l d1,PLANETWO								;chipmem drive buffer
;	MOVEM.l a3-a6,-(a7)
;	BSR FindVolume
;	MOVEM.l (a7)+,a3-a6
;	MOVE.l d7,d0:RTS
;End Function

;Function.l LoadFile{name.l,memory.l,chipbuffer.l}
;
;LoadFile: ;d0=filename,d1=buffer d2=chipbuffer


;***------------------------------------------------------------------------
;*** This is the ultimate Data-Decrunch-Routine
;*** For Crunch-Mania V1.7
;*** (c) 1991, 92 by -;> Thomas Schwarz <+-, all rights reserved
;*** You may Use this piece of code as long as you don't claim that
;*** you have written it. In any Case the author (me) has To be
;*** mentioned someplace in your proggy.
;*** Note: Source- AND Destinationaddresses have To be always Even Addresses
;***------------------------------------------------------------------------
;*** Here is the Format of the Header:
;*** Type	Offset	Contents									 Function
;*** LONG	0			 "CrM!"/"CrM2"							To recongnize crunched files
;*** WORD	4			 Minimum Security Distance	To savely decrunch Data when
;***							Source AND Dest is in the same
;***							Memoryblock
;*** LONG	6			 Original Len							 Datalen before packing
;*** LONG	10 ($a) Crunched Len							 Datalen after packing without
;***							Header
;***------------------------------------------------------------------------
;** Jump here To decrunch some Data with overlap check
;** You need some Memory directly in front of the Destination Area
;** which has To be as large as the MinSecDist
;** Load the Regs with:
;** a0: Adr of Source (with Header)	** a1: Adr of Dest
;**-------------------------------------------------------------------------
;Test	= 0 ;set this to 1 to decrunch ram:Test
;***************************************************************************
;	ifne	Test

decrunch:
	MOVE.l d0,a0:MOVE.l d0,a1

;	MOVE.l	d0,_Data
;	LEA _Data(pc),a0
;	LEA 14(a0),a1
;	BRA NormalDecrunch
;	endc
;*-----------

OverlapDecrunch:
	MOVEM.l d0-d7/a0-a6,-(a7)
	LEA FastDecruncher(pc),a5
	MOVE.l	(a0)+,d0
	CMP.l #"CrM!",d0
	BEQ.b decr
	LEA LZHDecruncher(pc),a5
	CMP.l #"CrM2",d0
	BNE.b NotCrunched
.decr:	MOVEQ #0,d0
	MOVE.w	(a0)+,d0	;MinSecDist
	MOVE.l	(a0)+,d1	;DestLen
	MOVE.l	(a0)+,d2	;SrcLen
	LEA 0(a0,d0.l),a2
	CMP.l a1,a2
	BLE.b NoCopy
	MOVE.l	a0,a2
	MOVE.l	a1,a0
	SUB.l d0,a0	 ;MinSecDist abziehen
	MOVE.l	a0,a3
	MOVE.l	d2,d7
	LSR.l #2,d7	 ;Longs
.CopyLoop:
	MOVE.l	(a2)+,(a3)+
	SUBQ.l	#1,d7
	BNE.b CopyLoop
	MOVE.l	(a2)+,(a3)+ ;in case of ...
.NoCopy:
	MOVE.l	a0,a2
	JSR (a5)
.NotCrunched:
	MOVEM.l (a7)+,d0-d7/a0-a6
	RTS
;**-------------------------------------------------------------------------
;** Jump here To decrunch some Data without any overlap checks
;** The Regs have To loaded with:
;** a0: Adr of Source (with Header)
;** a1: Adr of Dest
;**-------------------------------------------------------------------------
NormalDecrunch:
	MOVEM.l d0-d7/a0-a6,-(a7)
	MOVE.l	(a0)+,d0
	LEA FastDecruncher(pc),a5
	CMP.l #"CrM!",d0
	BEQ.b decr2
	LEA LZHDecruncher(pc),a5
	CMP.l #"CrM2",d0
	BNE.b NotCrunched2
.decr2:	TST.w (a0)+	 ;skip MinSecDist
	MOVE.l	(a0)+,d1	;OrgLen
	MOVE.l	(a0)+,d2	;CrLen
	MOVE.l	a0,a2
	JSR (a5)
.NotCrunched2:
	MOVEM.l (a7)+,d0-d7/a0-a6
	RTS
;**-------------------------------------------------------------------------
;** This is the pure Decrunch-Routine
;** The Registers have To be loaded with the following values:
;** a1: Adr of Destination (normal)	** a2: Adr of Source (packed)
;** d1: Len of Destination	 ** d2: Len of Source
;** Leave everything below this Line in its original state!
;**-------------------------------------------------------------------------
FastDecruncher:
	MOVE.l	a1,a5		 ;Decrunched Anfang (hier Ende des Decrunchens)
	ADD.l d1,a1
	ADD.l d2,a2
	MOVE.w	-(a2),d0		;Anz Bits in letztem Wort
	MOVE.l	-(a2),d6		;1.LW
	MOVEQ #16,d7			;Anz Bits
	SUB.w d0,d7		 ;Anz Bits, die rotiert werden m|ssen
	LSR.l d7,d6		 ;1.Bits an Anfang bringen
	MOVE.w	d0,d7		 ;Anz Bits, die noch im Wort sind
	MOVEQ #16,d3
	MOVEQ #0,d4
.DecrLoop:
	CMP.l a5,a1
	BLE.l DecrEnd		;a1=a5: fertig (a1<a5: eigentlich Fehler)

	BSR BitTest
	BCC.b InsertSeq		;1.Bit 0: Sequenz
	MOVEQ #0,d4
;** einzelne Bytes einf|gen **
.InsertBytes:
	MOVEQ #8,d1
	BSR GetBits
	MOVE.b	d0,-(a1)
	DBF d4,InsertBytes
	BRA DecrLoop
;*------------
.SpecialInsert:
	MOVEQ #14,d4
	MOVEQ #5,d1
	BSR BitTest
	BCS.b IB1
	MOVEQ #14,d1
.IB1: BSR GetBits
	ADD.w d0,d4
	BRA InsertBytes
;*------------
.InsertSeq:
;** Anzahl der gleichen Bits holen **
	BSR BitTest
	BCS.b AB1
	MOVEQ #1,d1		 ;Maske: 0 (1 AB)
	MOVEQ #1,d4		 ;normal: Summe 1
	BRA ABGet
.AB1:
	BSR BitTest
	BCS.b AB2
	MOVEQ #2,d1		 ;Maske: 01 (2 ABs)
	MOVEQ #3,d4		 ;ab hier: Summe mindestens 3
	BRA ABGet
.AB2:
	BSR BitTest
	BCS.b AB3
	MOVEQ #4,d1		 ;Maske: 011 (4 ABs)
	MOVEQ #7,d4		 ;hier: Summe 11
	BRA ABGet
.AB3:
	MOVEQ #8,d1		 ;Maske: 111 (8 ABs)
	MOVEQ #$17,d4		 ;hier: Summe 11
.ABGet:
	BSR GetBits
	ADD.w d0,d4		 ;d0: Ldnge der Sequenz - 1
	CMP.w #22,d4
	BEQ.b SpecialInsert
	BLT.b _Cont
	SUBQ.w	#1,d4
._Cont:
;** SequenzAnbstand holen **
	BSR BitTest
	BCS.b DB1
	MOVEQ #9,d1		 ;Maske: 0 (9 DBs)
	MOVEQ #$20,d2
	BRA DBGet
.DB1:
	BSR BitTest
	BCS.b DB2
	MOVEQ #5,d1		 ;Maske: 01 (5 DBs)
	MOVEQ #0,d2
	BRA DBGet
.DB2:
	MOVEQ #14,d1			;Maske: 11 (12 DBs)
	MOVE.w	#$220,d2
.DBGet:
	BSR GetBits
	ADD.w d2,d0
	LEA 0(a1,d0.w),a3	 ;a3 auf Anf zu kopierender Seq setzten
.InsSeqLoop:
	MOVE.b	-(a3),-(a1)	 ;Byte kopieren
	DBF d4,InsSeqLoop

	BRA DecrLoop
;*------------
.BitTest:
	SUBQ.w	#1,d7
	BNE.b BTNoLoop
	MOVEQ #16,d7			;hier kein add notwendig: d7 vorher 0
	MOVE.w	d6,d0
	LSR.l #1,d6		 ;Bit rausschieben und Flags setzen
	SWAP	d6			;ror.l	#16,d6
	MOVE.w	-(a2),d6		;ndchstes Wort holen
	SWAP	d6			;rol.l	#16,d6
	LSR.w #1,d0		 ;Bit rausschieben und Flags setzen
	RTS
.BTNoLoop:
	LSR.l #1,d6		 ;Bit rausschieben und Flags setzen
	RTS
;*----------
.GetBits:			 ;d1:AnzBits->d0:Bits
	MOVE.w	d6,d0		 ;d6:Akt Wort
	LSR.l d1,d6		 ;ndchste Bits nach vorne bringen
	SUB.w d1,d7		 ;d7:Anz Bits, die noch im Wort sind
	BGT.b GBNoLoop
; add.w #16,d7			;BitCounter korrigieren
	ADD.w d3,d7		 ;BitCounter korrigieren
	ROR.l d7,d6		 ;restliche Bits re rausschieben
	MOVE.w	-(a2),d6		;ndchstes Wort holen
	ROL.l d7,d6		 ;und zur|ckrotieren
.GBNoLoop:
	ADD.w d1,d1		 ;*2 (in Tab sind Ws)
	AND.w AndData-2(pc,d1.w),d0	;unerw|nschte Bits rausschmei_en
	RTS
;*----------
.AndData:
	Dc.w	%1,%11,%111,%1111,%11111,%111111,%1111111
	Dc.w	%11111111,%111111111,%1111111111
	Dc.w	%11111111111,%111111111111
	Dc.w	%1111111111111,%11111111111111
;*-----------
.DecrEnd:
	RTS	 ;a5: Start of decrunched Data
;***************************************************************************
#OCmpTab	 = 0
#OAddTab	 = 64
#ORealTab	= 128
#OAnzPerBits = 1182
#OBufLen	 = 1246+2
;******************************
LZHDecruncher:
	LEA Tabbs+2(pc),a6
; addq.l	#2,a6
	ADD.l d1,a1
	ADD.l d2,a2

	MOVE.w	-(a2),d0		;Anz Bits in letztem Wort
	MOVE.l	-(a2),d6		;1.LW
	MOVEQ #16,d7			;Anz Bits
	SUB.w d0,d7		 ;Anz Bits, die rotiert werden m|ssen
	LSR.l d7,d6		 ;1.Bits an Anfang bringen
	MOVE.w	d0,d7		 ;Anz Bits, die noch im Wort sind
	MOVEQ #16,d3

.BufLoop:
	LEA OAnzPerBits(a6),a0
	MOVEQ #16-1,d2
.clear: CLR.l (a0)+
	DBF d2,clear

	LEA OAnzPerBits+32(a6),a0
	LEA ORealTab+30(a6),a4
	MOVEQ #9,d2
	BSR ReadTab
	LEA OAnzPerBits(a6),a0
	LEA ORealTab(a6),a4
	MOVEQ #4,d2
	BSR ReadTab

	LEA OAnzPerBits+32(a6),a3
	LEA OCmpTab-2(a6),a4
	BSR CalcCmpTab
	LEA OAnzPerBits(a6),a3
	LEA OCmpTab+30(a6),a4
	BSR CalcCmpTab

	MOVEQ #16,d1
	BSR GetBits2
	MOVE.w	d0,d5
	LEA ORealTab+30(a6),a0
	LEA -30(a0),a5
.decrloop:	;** tabu: d3/d6/d7/a0-a2/a4
	MOVE.l	a6,a4
	BSR ReadIt
	BTST	#8,d0
	BNE.b skip
	MOVE.w	d0,d4

	LEA OCmpTab+32(a6),a4
	EXG a0,a5
	BSR ReadIt
	EXG a0,a5
	MOVE.w	d0,d1
	MOVE.w	d0,d2
	BNE.b sc1
	MOVEQ #1,d1
	MOVEQ #16,d2
.sc1: BSR GetBits2
	BSET	d2,d0
.sc2: LEA 1(a1,d0.w),a3
.sloop: MOVE.b	-(a3),-(a1)
	DBF d4,sloop

	MOVE.b	-(a3),-(a1)
	MOVE.b	-(a3),d0
.skip:	MOVE.b	d0,-(a1)
	DBF d5,decrloop
	MOVEQ #1,d1
	BSR GetBits2
	BNE.w BufLoop
	BRA LZHDecrEnd
;*-----------*******************
.ReadIt:
	MOVEQ #0,d1		 ;Nr Byte
.RIloop:
	SUBQ.w	#1,d7
	BEQ.b BTLoop
	LSR.l #1,d6		 ;Bit rausschieben und Flags setzen
	BRA BTEnd
.BTLoop:
	MOVEQ #16,d7			;hier kein add notwendig: d7 vorher 0
	MOVE.w	d6,d0
	LSR.l #1,d6		 ;Bit rausschieben und Flags setzen
	SWAP	d6			;ror.l	#16,d6
	MOVE.w	-(a2),d6		;ndchstes Wort holen
	SWAP	d6			;rol.l	#16,d6
	LSR.w #1,d0		 ;Bit rausschieben und Flags setzen
.BTEnd:
	ROXL.w	#1,d1
	MOVE.w	(a4)+,d0
	CMP.w d1,d0
	BLS.b RIloop

	ADD.w 62(a4),d1
	ADD.w d1,d1
	MOVE.w	0(a0,d1.w),d0
	RTS
;*-------------------------------------
.GetBits2:			 ;d1:AnzBits->d0:Bits
	MOVE.w	d6,d0		 ;d6:Akt Wort
	LSR.l d1,d6		 ;ndchste Bits nach vorne bringen
	SUB.w d1,d7		 ;d7:Anz Bits, die noch im Wort sind
	BGT.b GBNoLoop2
	ADD.w d3,d7		 ;BitCounter korrigieren
	ROR.l d7,d6		 ;restliche Bits re rausschieben
	MOVE.w	-(a2),d6		;ndchstes Wort holen
	ROL.l d7,d6		 ;und zur|ckrotieren
.GBNoLoop2:
	ADD.w d1,d1		 ;*2 (in Tab sind Ws)
	AND.w AndData2-2(pc,d1.w),d0	;unerw|nschte Bits rausschmei_en
	RTS
;*----------
.AndData2:
	Dc.w	%1,%11,%111,%1111,%11111,%111111,%1111111
	Dc.w	%11111111,%111111111,%1111111111
	Dc.w	%11111111111,%111111111111
	Dc.w	%1111111111111,%11111111111111
	Dc.w	%111111111111111,%1111111111111111
;*---------------------------------------
.ReadTab:
	MOVEM.l d1-d5/a3,-(a7)
	MOVEQ #4,d1
	BSR GetBits2		;Anz AnzPerBits
	MOVE.w	d0,d5
	SUBQ.w	#1,d5
	MOVEQ #0,d4
	SUB.l a3,a3
.RTlop: ADDQ.w	#1,d4
	MOVE.w	d4,d1
	CMP.w d2,d1
	BLE.b c1
	MOVE.w	d2,d1
.c1:	BSR GetBits2
	MOVE.w	d0,(a0)+
	ADD.w d0,a3
	DBF d5,RTlop

	MOVE.w	a3,d5
	SUBQ.w	#1,d5
.RTlp2: MOVE.w	d2,d1
	BSR GetBits2
	MOVE.w	d0,(a4)+
	DBF d5,RTlp2
	MOVEM.l (a7)+,d1-d5/a3
	RTS
;**************************************************************
.CalcCmpTab:
	MOVEM.l d0-d7,-(a7)
	CLR.w (a4)+
	MOVEQ #15-1,d7
	MOVEQ #-1,d4
	MOVEQ #0,d2
	MOVEQ #0,d3
	MOVEQ #1,d1
.CClop: MOVE.w	(a3)+,d6
	MOVE.w	d3,64(a4)
	MOVE.w	-2(a4),d0
	ADD.w d0,d0
	SUB.w d0,64(a4)
	ADD.w d6,d3
	MULU	d1,d6
	ADD.w d6,d2
	MOVE.w	d2,(a4)+
.cont2:
	LSL.w #1,d2
	DBF d7,CClop
	MOVEM.l (a7)+,d0-d7
	RTS
;*********************************************
LZHDecrEnd:
;LZHDecrLen	equ *-LZHDecruncher

	RTS
;***********************************
Tabbs:	Dc.w	0	 ;unbedingt!!!!!!!
CmpTab: Ds.w 16		;Len
	Ds.w 16		;Dist
AddTab: Ds.w 16		;Len
	Ds.w 16		;Dist
RealTab:
	Ds.w 527	 ;Dist+Len
AnzPerBits:
	Ds.w 32		;Dist+Len
;***************************************************************************
;** Leave everything above this Line in its original state!
;	ifne	Test
_Data: Dc.l 0




; readlen - 512*24	xc does 512*26

#useblit	= 0											 ;use blitter?
#readlen	= 512*24									;how many raw bytes in a track...
#datalen	= #readlen/2							;how much data on a track
#tracks	 = 160										 ;how many tracks
#disksize = #datalen*(#tracks-1)
#sync		 = $4489									 ;sync marker.
#oddsync	= $4489									 ;for odd tracks!
#sync2		= $2aaa									 ;following sync for safety.
#readlen2 = #readlen+16
#datalen2 = #readlen2/2

#bufflen=#readlen+#datalen+#datalen+1024 ;1024

#control=$bfde00
#bitint=1

;Function.l LoadFile{name.l,memory.l,chipbuffer.l}
;
loadfile:
;
;return d1=start address, d0=length : d0=0 if error!
;dir track already loaded into dirbuff...
 MOVEM.l a3-a6,-(a7)
 LEA PLANETWO(pc),a0:MOVE.l d2,(a0)
 MOVE.l d0,a0:MOVE.l d1,a1							;:MOVE.l d2,PLANETWO
 LEA loadat(pc),a2	;save start address..
 MOVE.l a1,(a2)
 MOVEM.l a0/a1,-(a7)
 BSR InitAll
 BSR ReadDir
 MOVEM.l (a7)+,a0/a1
 MOVE.l dirbuff(pc),a1
 MOVE 4(a1),d1
 BEQ lerr
 LEA 12(a1),a1
 SUBQ #1,d1
lloop:
 MOVE.l a0,a2
 MOVE.l a1,a3
lloop2:
 MOVE.b (a2)+,d6
 MOVE.b (a3)+,d7
 CMP.b #"A",d6
 BCS nolcd6
 CMP.b #"Z",d6
 BHI nolcd6
 OR.b #$20,d6
nolcd6:
 CMP.b #"A",d7
 BCS nolcd7
 CMP.b #"Z",d7
 BHI nolcd7
 OR.b #$20,d7
nolcd7:
 CMP.b d6,d7
 BNE nnext
 TST.b -1(a3)
 BNE lloop2
 BRA gotfile
nnext:
 LEA 40(a1),a1
 DBF d1,lloop
lerr		;can't find file!!
 MOVEQ #0,d0
 RTS
gotfile		;a1=dir entry
 MOVE 36(a1),d7 ;track
 MOVEQ #0,d6
 MOVE 38(a1),d6 ;offset
 MOVE.l 32(a1),d5 ;length
 LEA loadlen(pc),a0
 MOVE.l d5,(a0)

 LEA loadat(pc),a0	;get start address..
 MOVE.l (a0),d0
 MOVE.l d0,a5
 ADDQ.l #7,d5
 AND #$fff8,d5 ;align length!

;gotta seek first track...

 SUB track(pc),d7
 BPL in

;seek backwards!

 MOVE #12890-2150,d0 ;cause we're reversing dir.
 BSR wwait
 NEG d7
 SUBQ #1,d7
outloop
 BSR stepoutquick
 DBF d7,outloop
 MOVE #12890-2150,d0 ;cause we're reversing dir.
 BSR wwait
 BRA here

in:
 BEQ here
 SUBQ #1,d7
inloop
 BSR stepin
 DBF d7,inloop

here	;at correct start track...

 BSR decodesetup

 BSR readraw
 BSR startstep

 MOVE.l readbuff(pc),a1
 ADD.l d6,a1
 MOVEQ #0,d3
 MOVE #datalen,d3
 SUB d6,d3
 BSR decodeme

qloop
 BSR finishwait

 TST.l d5
 BEQ readdone

 BSR readraw
 BSR startstep

 MOVE.l readbuff(pc),a1
 MOVEQ #0,d3
 MOVE #datalen,d3
 BSR decodeme

 BRA qloop

readdone:

 BSET #2,$bfd100 ;upper head		change to bclr!
 BSET #1,$bfd100 ;dir=out
'loop2
 BSR dostepquick
 BTST #4,$bfe001 ;track 0?
 BNE 'loop2
; BSR dostepquick
; BRA 'loop2

'skip

 BSR finishdisk
 MOVE.l loadat(pc),d1
 MOVE.l loadlen(pc),d0
 MOVEM.l (a7)+,a3-a6:RTS

decodesetup:
 MOVE.l #$55555555,d2
 RTS

decodeme:
 CMP.l d3,d5
 BCC 'skip
 MOVE.l d5,d3

'skip
 LEA datalen2(a1),a2
 SUB.l d3,d5
 LSR #2,d3
 SUBQ #1,d3

'loop:
 MOVE.l (a1)+,d0
 AND.l d2,d0
 ADD.l d0,d0
 MOVE.l (a2)+,d1
 AND.l d2,d1
 OR.l d1,d0
 MOVE.l d0,(a5)+
 DBF d3,'loop
 RTS

ReadDir:
 BSR startdisk
 BSR readraw
 MOVE.l readbuff(pc),a1
 MOVE.l dirbuff(pc),a5
 MOVE.l #datalen,d3
 MOVE.l d3,d5
 BSR decodesetup
 BRA decodeme

startstep:
 BSET #1,$bfd100
 LEA track(pc),a0
 ADDQ #1,(a0)
 MOVE track(pc),d0
 LSR #1,d0
 BCC 'skip
 BSET #2,$bfd100 ;side
 MOVEQ #72,d0
 BRA startwait
'skip
 BCLR #2,$bfd100 ;side
 NOP
 BCLR #0,$bfd100
 NOP
 NOP
 BSET #0,$bfd100 ;start step
 MOVE #2150+1000,d0 ;#12890,d0
 BRA startwait

readraw:
 MOVE.l syncbuff2(pc),$020(a6)
 MOVE #sync,$07e(a6)
 LEA track+1(pc),a0
 BTST #0,(a0)
 BEQ 'skip
 MOVE #oddsync,$07e(a6)
'skip
 MOVE #$8400,$09e(a6)
 MOVE #2,$09c(a6)
 MOVE #$4000,$024(a6)
 MOVE #$8000+readlen2/2+2,$024(a6)
 MOVE #$8000+readlen2/2+2,$024(a6)

 LEA timeouts(pc),a0
 MOVE #500,(a0)

'loop3
 MOVE #7159+80,d0
 BSR startwait

'loop
 BTST #1,$01f(a6)
 BNE dmadone
 BTST #0,control				;$bfde00 ;was $f00 *********************
 BNE 'loop

 SUBQ #1,(a0)
 BNE 'loop3

;timeout!

dmadone
 MOVE #$4000,$024(a6)
 MOVE.b #$fe,d0
 AND.b d0,control						;$bfdf00			;stop timer.
 BTST #bitint,$bfdd00				;clear any int.

;!!!!! get the checksum!!!!!
 MOVEM.l d1-d7/a0-a6,-(a7)
 MOVE.l dirbuff(pc),a0
 BSR dodecode ;code d0 0=OK
 MOVEM.l (a7)+,d1-d7/a0-a6
 TST.w d0
 BEQ ok

; MOVE.w #$fff,d0
;lpp
; MOVE.w d0,d1
; AND.w #$003,d1
; MOVE.w d1,$dff180
; DBF d0,lpp
; BRA readraw

ok
 RTS

dodecode;a0=dest
 ;
 MOVE.l readbuff(pc),a1
 LEA datalen2(a1),a2
 MOVE.l #$55555555,d2
 MOVE #datalen2/4-1,d3
 ;
'loop
 MOVE.l (a1)+,d0
 AND.l d2,d0
 ADD.l d0,d0
 MOVE.l (a2)+,d1
 AND.l d2,d1
 OR.l d1,d0
 MOVE.l d0,(a0)+
 DBF d3,'loop

;get & verify the checksum!!
 MOVE.l a0,-(a7)
 MOVE.l dirbuff(pc),a0
 CLR.l d0
 MOVE.l #datalen/4-1,d3
 ADD.l d0,d0
chklp
 MOVE.l (a0)+,d4
 ADDX.l d4,d0
 DBF d3,chklp
 MOVE.l #-1,d1
 SUB.l d0,d1
 MOVE.l dirbuff(pc),a0
 ADD.l #datalen+4,a0
 MOVE.l (a0),d2
 MOVE.l (a7)+,a0

 MOVEQ #0,d0 ;chk ok!!
 CMP.l d2,d1
 BEQ 'ok
 MOVEQ #1,d0 ;NOT OK!!!
'ok
 RTS

startwait:										 ;d0=delay
 MOVE.b #$7f-bitint,$bfdd00		;7e before
 MOVE.b #0,$bfde00						 ;!!!
 MOVE.b d0,$bfd400						 ;low byte...
 LSR #8,d0
 MOVE.b d0,$bfd500			;hi byte!
 MOVE.b #9,control			;$bfde00			;
 RTS

;startwait:									 ;d0=delay
; MOVE.b #$7e,$bfdd00		;!!!
; MOVE.b #0,$bfdf00			;!!!
; MOVE.b d0,$bfd600 ;low byte...
; LSR #8,d0
; MOVE.b d0,$bfd700 ;hi byte!
; MOVE.b #9,$bfdf00 ;!!!
; RTS

InitAll:
 MOVE.l PLANETWO(pc),a0

 LEA dirbuff(pc),a1
 MOVE.l a0,(a1)
 LEA datalen2(a0),a0

 LEA syncbuff(pc),a1
 MOVE.l a0,(a1)
 ADDQ #2,a0

 LEA syncbuff2(pc),a1
 MOVE.l a0,(a1)
 ADDQ #2,a0

 LEA readbuff(pc),a1
 MOVE.l a0,(a1)
 LEA readlen2(a0),a0

 LEA writebufff(pc),a1
 MOVE.l a0,(a1)

 RTS

startdisk:
 MOVE.l #$dff000,a6

; move.b $bfdf00,d0
; and.b #$c0,d0
; or.b #$08,d0
; move.b d0,$bfdf00
; move.b #$7f,$bfdd00
; btst #0,$bfdd00

 MOVE #$7fff,$09e(a6)
 MOVE #$9100,$09e(a6)
 MOVE #$8010,$096(a6)
 MOVE #sync,$07e(a6)

 BSR waitdisk

 BCLR #2,$bfd100 ;upper head
 BSET #1,$bfd100 ;dir=out
'loop2
 BTST #4,$bfe001 ;track 0?
 BEQ 'skip
 BSR dostepquick
 BRA 'loop2

'skip:
 BCLR #1,$bfd100 ;dir=in
 MOVE #tracks/2-2,d7
'loop3
 BSR dostepquick
 DBF d7,'loop3
 LEA track(pc),a0
 CLR (a0)
 RTS

selectdrive:
 MOVE drive(pc),d0
 ADDQ #3,d0
 BSET d0,$bfd100
 NOP
 BCLR d0,$bfd100
 RTS

waitdisk:
 BCLR #7,$bfd100 ;motor on
 BSR selectdrive
'loop
 BTST #5,$bfe001
 BNE 'loop ;motor ready?
 RTS

stepin:	 ;step inwards
 BSET #1,$bfd100 ;seek in...
 LEA track(pc),a0
 ADDQ #1,(a0)
 MOVE track(pc),d0
 LSR #1,d0
 BCC 'skip
 BSET #2,$bfd100
 MOVEQ #72,d0
 BSR wwait
 RTS
'skip
 BCLR #2,$bfd100 ;side
 BRA dostep

stepoutquick:	 ;step outwards
 BCLR #1,$bfd100 ;seek out...
 LEA track(pc),a0
 SUBQ #1,(a0)
 MOVE track(pc),d0
 LSR #1,d0
 BCS 'skip
 BCLR #2,$bfd100
 MOVEQ #72,d0
 BSR wwait
 RTS
'skip
 BSET #2,$bfd100 ;side
 NOP
 BCLR #0,$bfd100
 NOP
 NOP
 BSET #0,$bfd100 ;start step
 MOVE #2150+100,d0 ;#12890,d0
 BRA wwait

stepout:	 ;step outwards
 BCLR #1,$bfd100 ;seek out...
 LEA track(pc),a0
 SUBQ #1,(a0)
 MOVE track(pc),d0
 LSR #1,d0
 BCS 'skip
 BCLR #2,$bfd100
 MOVEQ #72,d0
 BSR wwait
 RTS
'skip
 BSET #2,$bfd100 ;side
 BRA dostep
dostepquick
 NOP
 BCLR #0,$bfd100
 NOP
 NOP
 BSET #0,$bfd100 ;start step
 MOVE #2150+100,d0 ;#12890,d0
 BRA wwait
dostep
 BCLR #0,$bfd100
 NOP
 NOP
 BSET #0,$bfd100 ;start step
 MOVE #2150+1000,d0 ;#12890,d0

wwait
 BSR startwait

finishwait
; btst #0,$bfdd00
; beq finishwait
 BTST #0,control			;$bfdf00
 BNE finishwait
 RTS

drive:Dc 0 ;0-3
track:Dc 0 ;0 -> tracks-1
loadat:Dc.l 0
loadlen:Dc.l 0
returncode:Dc.l 0

dirbuff:Dc.l 0
syncbuff:Dc.l 0
syncbuff2:Dc.l 0
readbuff:Dc.l 0
writebufff:Dc.l 0
timeouts:Dc 0

CheckId:	 ;d0=id to check with
 MOVE.l dirbuff(pc),a0
 CMP.l (a0),d0
 RTS

WaitId:		;d0=id
 MOVE.l d0,-(a7)
'loop0:
 MOVE track(pc),d0
 BEQ 'loop
 BSR stepout
 BRA 'loop0
'loop:
 BSR finishdisk
 BSR waitdisk
 BSR ReadDir
 MOVE.l (a7),d0
 BSR CheckId
 BNE 'loop
 ADDQ #4,a7
 RTS

finishdisk:
 BSET #7,$bfd100 ;motor off
 BSR selectdrive
 BSET d0,$bfd100
 RTS

findvolume:
	MOVEM.l a3-a6,-(a7)
	BSR		 FindVolume
	MOVEM.l (a7)+,a3-a6
	RTS

FindVolume:	;check all drives for discs and match disc #..
 LEA		wanted(pc),a0
 MOVE.l d0,(a0)				 ;wanted
 MOVE.l d1,4(a0)				;planetwo
 BSR InitAll
; MOVE.w drive(pc),startdrive

checkloop
;turn motor on...
 MOVE.l #$c0000,d7						 ;WOZ $60000
 BCLR #7,$bfd100 ;motor on
 BSR selectdrive
'loop
 BTST #5,$bfe001
 BEQ motorok ;motor ready??
 SUBQ.l #1,d7
 BNE 'loop

;timed out - no disc or drive available..

 MOVEQ#0,d7:RTS

; BRA motorok wo shit!

;checknext
; BSET #7,$bfd100 ;motor off
; BSR selectdrive
; BSET d0,$bfd100
; NOP
; NOP
; ADDQ.w #1,drive
; MOVEQ#3,d0
; AND.w d0,drive															 ;!!!!!!0,1,2,3..
; MOVE.w startdrive(pc),d0 ;back to first one??
; CMP.w drive(pc),d0
; BNE checkloop
;NONE!!!
; MOVEQ #0,d7
; RTS

motorok	;there is a disc here..
 BSR ReadDir
 MOVE.l dirbuff(pc),a0
 MOVE.l wanted(pc),d0
 CMP.l (a0),d0
 BEQ gotvolume
 MOVEQ#0,d7
 RTS

; BRA checknext ;try next drive...
gotvolume
 MOVEQ #-1,d7
 RTS

wanted:Dc.l 0					 ;volume # we want..
PLANETWO:Dc.l 0
startdrive:Dc.w 0

l2: