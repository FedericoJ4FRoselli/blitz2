; ascii translation of /Users/simon/Google Drive/amiga/w/abc/bums/out/bailey/bikething.bb2,/Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/out/bailey/bikething.bb2
									;;****************************;;
									;;														;;
									;; Bike Thing	by	Ted Bailey ;;
									;;														;;
									;;****************************;;

##[$80C3]:##[$80CB]:##[$80CC]:##[$80B4]:End:End ##[$80B4]

If Processor>=2 Then numbikes=4 Else numbikes=2

NEWTYPE .bike
	status.b										 ;; -1=die 0=normal 1=turning
	;														;;	2=crashing 3=become rider
	;
	whstatus.b									 ;; -1=air	 0=ground	1=on jump
	collision.b									;; -1=bwheel	0=none	1=fwheel
	collitype.b									;; -1=metrack 0=none	1=methem
	damage.b										 ;;
	;
	x.w:y.w
	sx.q:sy.q										;;screen position
	;
	xacel.q
	yacel.q
	;
	hgt.q												;; bike height
	fwh.q												;; front wheel height
	bwh.q												;; back		"		 "
	;
	frame.q
	weight.q
	onscreen.b									 ;; -1=waiting 0=off 1=on
	update.b
	rider.b
End NEWTYPE

NEWTYPE .g
	btyp.b											 ;; type of block (0=normal)
	hoff.b											 ;; height offset from lane
	grad.q											 ;; gradient of jump
End NEWTYPE

Dim List bikers.bike(numbikes-1)

Dim m.w(1023,8)								;; this is for mapedit file
Dim g.g(1025,4)								;; this is for gradients of blocks
Dim xpos.q(255),xmod.w(255)		;; for qdisplayscroll()
;****************************************************************;

											 ;;*****************;;
											 ;; INIT GAME LISTS ;;
											 ;;*****************;;

;****************************************************************;
While globalloc(bikers())
	bikers()\status=0,0,0,0,0,48+nxtx,156+nxty,0,0,1+Rnd(8),0
	bikers()\hgt=0,0,0,0,0.4,1,10+Rnd(40),1
	nxtx=QWrap(nxtx+32,0,32)
	nxty=QWrap(nxty+16,0,80)
Wend
If locfree(bikers()) Then *p.bike=bikers():*p\rider=0

For n=0 To 255				 ; set initial scroll values to 0
	xpos(n)=0						; and bitplane modulo to normal
	xmod(n)=84					 ; value
Next									 ;
;****************************************************************;

									;;*************************;;
									;; INIT BITMAPS & COPLISTS ;;
									;;*************************;;

;****************************************************************;
lmaxlen 0,320+32+32,256+32,3
lmaxlen 1,320+32+32,256+32,3
lmaxlen 2,1008,256,3
BitPlanesBitMap 2,3,$01|$02
BitPlanesBitMap 2,4,$04

longmult 0,numbikes+1
longmult 1,numbikes+1

DecodePalette 1,32
InitCopList 1,44,256,$0036,8,32,-5
DisplayControls 1,54,0,0
;****************************************************************;

											 ;;*****************;;
											 ;; GAME FILE LOAD	;;
											 ;;*****************;;
AMIGA
;****************************************************************;
If OpenFile(0,"map/level1.blk")	 ;;map blocks
	n=0
	Fields 0,a.w
	For y=0 To 8
		For x=0 To 1023
			Get 0,n
			m(x,y)=a.w
			n+1
		Next
	Next
	CloseFile 0
EndIf

If OpenFile(0,"map/level1.grd")	 ;;gradient blocks
	n=0
	Fields 0,bb.b,cc.b,dd.q
	For y=0 To 4
		For x=1 To 1024
			Get 0,n
			g(x,y)\btyp=bb.b
			g(x,y)\hoff=cc.b
			g(x,y)\grad=dd.q
			n+1
		Next
	Next
	CloseFile 0
	For y=0 To 4
		g(0,y)\btyp=g(1024,y)\btyp
		g(0,y)\hoff=g(1024,y)\hoff
		g(0,y)\grad=g(1024,y)\grad
		g(1025,y)\btyp=g(1,y)\btyp
		g(1025,y)\hoff=g(1,y)\hoff
		g(1025,y)\grad=g(1,y)\grad
	Next
EndIf

casestrcomp 1,"gfx/iff/mebk.iff"
casestrcomp 1,"gfx/iff/trees.iff",8
casestrcomp 1,"gfx/iff/trees.iff",24
StopCycle 1,9,5,5,5:StopCycle 1,10,10,10,10:StopCycle 1,11,15,15,15
LoadShapes 0,"gfx/level1.shapes"
LoadShapes 300,"gfx/trees.shapes"
LoadShapes 350,"gfx/statustext.shapes"
LoadShapes 400,"gfx/mebk.shapes"
LoadShapes 409,"gfx/mebkup.shapes"
LoadShapes 425,"gfx/mebkdown.shapes"
LoadShapes 441,"gfx/thembk.shapes"
LoadShapes 450,"gfx/thembkup.shapes"
LoadShapes 465,"gfx/thembkdown.shapes"
LoadSound 0,"sfx/whoo.iff"
Use lmaxlen 2:BlitColl 301,0,0:Use lmaxlen 3
GetaShape 302,0,0,16,112:Handle 302,16,0
GetaSprite 1,302
BlitColl 1,0,0:GetaShape 301,0,0,16,8
BlitColl 2,0,0:GetaShape 302,0,0,16,8
BlockScroll:Use lmaxlen 4:For n=0 To 20:Point Rnd(16),Rnd(8),1:Next
GetaShape 303,0,0,16,8
Use lmaxlen 2:BlockScroll
;****************************************************************;

											 ;;*****************;;
											 ;; GAME LOOP SETUP ;;
											 ;;*****************;;
VWait 200:BLITZ:BlitzKeys On
;****************************************************************;
;;
;;initialise action bitmaps and display
;;
Use lmaxlen 2:BlockScroll
Use lmaxlen 4:For x=0 To 300:Point Rnd(336),160+Rnd(78),1:Next
Use lmaxlen 2
BlitColl 300,0,17:BlitColl 300,176,17
##[$B206] 0,0,336,256,336,0
##[$B206] 0,0,336,256,672,0

For x=0 To 62
	longdiv 301+bk,x LSL4,240,1
	bk=1-bk
Next

For y=6 To 14
	For x=0 To 41
		BlitColl m(x,y-6),336+x LSL 4,y LSL 4
	Next
Next
##[$B206] 336,96,336,144,0,96

longdiv 350,8,0:longdiv 351,100,0

CreateDisplay 1:DisplayPalette 1,1
xs=0			; scroll speed

bsx1=0		; background x scroll speed 1(trees)
bsx2=0		; background x scroll speed 2(track)

bv1=1		 ; background y scroll velocities
bv2=1		 ;

spx1=84	 ; initial tree trunk sprite positions
spx2=260	;

mapx=0		; block map x pointer
;****************************************************************;

											 ;;*****************;;
											 ;;	MAIN GAME LOOP ;;
											 ;;*****************;;

co$=Mki$($192)+Mki$($731)			; background colour split values
DisplayUser 1,15,co$,3				 ;
co$=Mki$($194)+Mki$($b64)			;
DisplayUser 1,16,co$,3				 ;
co$=Mki$($196)+Mki$($c42)			;
DisplayUser 1,17,co$,3				 ;

co$=Mki$($192)+Mki$($444)
DisplayUser 1,94,co$,3
co$=Mki$($194)+Mki$($222)
DisplayUser 1,95,co$,3
co$=Mki$($196)+Mki$($666)
DisplayUser 1,96,co$,3

co$=Mki$($19a)+Mki$($990)
DisplayUser 1,97,co$,3
co$=Mki$($19c)+Mki$($440)
DisplayUser 1,98,co$,3
co$=Mki$($19e)+Mki$($666)
DisplayUser 1,99,co$,3
;****************************************************************;
.gameloop
##[$80BB]
	VWait
	DisplayBitMap 1,db,32,32,2,0,0
	DisplaySprite 1,1,spx1,70+by1,4
	DisplaySprite 1,1,spx2,70+by1,5
	CustomSprites 1,&xpos(0),&xmod(0),0
	DisplayPalette 1,1
	DisplayRGB 1,13,239+by2,9,9,0,3
	DisplayRGB 1,13,240+by2,15,0,0,3
	DisplayRGB 1,14,239+by2,4,4,0,4
	DisplayRGB 1,14,240+by2,15,15,15,4
	;
	ox2=x2:x2=Int(mapx LSR 4)
	Gosub moveme
	Gosub movethem
	;
	xxss=xs ASR 1
	If xs<>0													; track drawing routine
		cyc.q=QAbs(xs ASR 4)
		AGARGB 1,1,1,3,cyc.q:PaletteRange 1
		Use lmaxlen 3
		bsx3=bsx2 AND $fff0
		xp1=bsx3+336:xp2=bsx3-336
		If xs>0
			bpt=x2+20 AND 1023
		Else
			bpt=x2-22 AND 1023
		EndIf
		For y=6 To 14
			BlitColl m(bpt,y-6),xp1,y LSL4
		Next
		If bsx3>=336 Then ##[$B206] xp1,96,16,144,xp2,96,3
	EndIf

	mapx=QWrap(mapx+xs,0,16384)
	spx1=QWrap(spx1-xxss,0,336)
	spx2=QWrap(spx2-xxss,0,336)
	bsx1=QWrap(bsx1+xxss,0,336)
	bsx2=QWrap(bsx2+xs,0,672)
	xpos(15)=bsx1
	xpos(95)=bsx1

	count=bsx2 ##[$80B9] 16								 ; position of me on track

	If *p\sy<80 OR bv1=-1						 ; background y scroll routine
		bv1=-Sgn(*p\yacel):bv2=bv1
		If db=0
			by1=QLimit(by1+bv1,0,15)
			xmod(15+by1)=-42
			If bv1<0 Then xmod(16+by1)=84
		EndIf
		by2=QLimit(by2+bv2,0,15)
		xmod(95+by2)=-42
		If bv2<0 Then xmod(96+by2)=84
		bsy=by1+by2
	EndIf

	db=1-db:Use lmaxlen db:UnQueue db	; bike drawing routine
	##[$80CA] bikers()
	SortList bikers(),SizeOf .bike\y
	newmem bikers()
	While globfree(bikers())
		\frame=QLimit(\frame,0,40)
		If \onscreen
			If \rider>0 Then ff.b=\frame+41 Else ff.b=\frame
			QBlit db,400+ff,\x+32,\sy+32
		EndIf
	Wend
;	Poke.w $dff180,$fff
##[$80BC] RawStatus($45)
End
;****************************************************************;

													;;**************;;
													;; SUB-ROUTINES ;;
													;;**************;;

;****************************************************************;
.moveme
	##[$80CA] *p

	jb=Joyb(1)
	jx=Joyx(1)
	jy=Joyy(1)

	maxr=225:maxl=0

	If \whstatus>=0											 ;;on ground or jump
	If jb
		 ;
		 If jx<>0
			 If jx=1
				 xs=QLimit(xs+0.25,0,16)
				 If \x>=130 Then \x+0.5 Else \x+1
			 Else
				 xs=QLimit(xs-0.25,-16,16)
				 \x-0.25
			 EndIf
		 Else
			 If \x<=130
				 xs=QLimit(xs+0.25,-16,9)
				 maxr=130:\x+\x ASR 5
			 Else
				 xs=QLimit(xs-0.125,9,16)
				 \x-0.25
			 EndIf
		 EndIf
		 ;
		 If xs>0 AND \whstatus=0
			 If xs>8 Then \frame=2 Else If xs>4 Then \frame=1 Else \frame=0
			 If jy<>0
				 If jy=1
					\y+2:If xs>8 Then \frame=7 Else \frame=5
				 Else
					\y-2:If xs>8 Then \frame=8 Else \frame=6
				 EndIf
			 EndIf
		 EndIf
		 ;
	Else																;;button not pressed
		 ;
		 If jx<>0
			 If jx=1
				 If xs<=4
					 If \x<=65 Then maxr=65 Else maxr=\x-1
					 xs=QLimit(xs+0.125,-16,4)
					 If xs>1 Then \x+\x ASR 6
				 Else
					 xs=QLimit(xs-0.125,4,16)
					 If \x>maxr Then \x-\x ASR 6
				 EndIf
			 Else
				 xs=QLimit(xs-0.25,-4,16)
				 If xs>0 Then \x-0.5
			 EndIf
		 Else
			 If xs<>0
				 If xs>0
					xs=QLimit(xs-0.125,0,16)
				 Else
					xs=QLimit(xs+0.125,-16,0)
				 EndIf
			 EndIf
		 EndIf
		 ;
		 If xs>0 AND \whstatus=0
			 If xs>8 Then \frame=3 Else If xs>4 Then \frame=2 Else \frame=1
			 If jy<>0
				 If jy=1
					\y+2:\frame=3
				 Else
					\y-2:\frame=4
				 EndIf
			 EndIf
		 EndIf
		 ;
	EndIf
	;
	\y=QLimit(\y,149,220)
	\x=QLimit(\x,maxl,maxr)
	;
	adj1=count+\x ##[$80B9] 16				 ; for gradient calculations
	adj2=adj1+8 ##[$80B9] 16					 ; which should be a nice fast
	adj3=adj1-8 ##[$80B9] 16					 ; assembly routine but isn't yet
	;
	gpt=x2+(\x LSR 4):If gpt>1024 Then gpt=1
	lnp=(\y LSR 4)-9:If lnp>4 Then lnp=4
	;
	gr=g(gpt,lnp)\grad
	fgr=g(gpt+1,lnp)\grad
	bgr=g(gpt-1,lnp)\grad
	ho=g(gpt,lnp)\hoff
	fho=g(gpt+1,lnp)\hoff
	bho=g(gpt-1,lnp)\hoff
	;
	\hgt=gr*adj1
	;
	If adj1>=8
		\fwh=\y-fgr*adj2-fho
		\bwh=\y-gr*adj3-ho
	Else
		\fwh=\y-gr*adj2-ho
		\bwh=\y-bgr*adj3-bho
	EndIf
	;
	If \whstatus=1
		If \fwh<\bwh
			\frame=(\bwh-\fwh) LSR2
			\frame+9
		Else
			\frame=(\fwh-\bwh) LSR2
			\frame+25
		EndIf
	EndIf
	;
	If \fwh=\bwh Then \whstatus=0 Else \whstatus=1
	;
	If fgr<gr AND xs>7 Then \yacel=-xs*gr ASR1 Else \yacel=0
	If \yacel<-1 Then \whstatus=-1:SetPeriod 0,200+Rnd(200):Sound 0,15
	;
	\sy=\y-\hgt-ho+bsy
	;
	Else																;;in the air, stunt time!
		gpt=x2+(\x LSR 4)
		lnp=(\y LSR 4)-9:If lnp>4 Then lnp=4
		ho=g(gpt AND 1023,lnp)\hoff
		\yacel+\weight
		If down=0
			If jx=-1 Then \frame=QLimit(\frame+0.5,10,24)
			If jx=1
				If \frame>=25 Then \frame=QLimit(\frame+0.5,25,40)
				If \frame<25 Then \frame=QLimit(\frame-0.5,10,25)
			EndIf
		EndIf
		If \yacel<0
			down=0
		Else
			down=1
		EndIf
		\sy=QLimit(\sy+\yacel,0,240)
		If down=1 AND \sy+16>=\y-ho Then \whstatus=1:\sy=\y-\hgt-ho
 EndIf
Return
;****************************************************************;


;****************************************************************;
.movethem
	##[$80CA] bikers()
	;
	newmem bikers()
	While globfree(bikers())
		Select \rider
		Case 1
		;
		\update-1
		;
		If \update<0 Then \update=50:\xacel=7+Rnd(5)
		;
		\x=QLimit(\x+\xacel-xs,-16384,16384)
		If \x<=-16 OR \x>=336 Then \onscreen=0 Else \onscreen=1
		;
		If \onscreen=1
		 If \whstatus>=0
			\frame=0
			;
			\y=QLimit(\y,149,220)
			;
			lnp=(\y LSR4)-9:If lnp>4 Then lnp=4
			gpt=x2+(\x LSR 4):If gpt>1024 Then gpt=1
			;
			adj1=count+\x ##[$80B9] 16
			adj2=adj1+8 ##[$80B9] 16
			adj3=adj1-8 ##[$80B9] 16
			;
			gr=g(gpt,lnp)\grad
			fgr=g(gpt+1,lnp)\grad
			bgr=g(gpt-1,lnp)\grad
			ho=g(gpt,lnp)\hoff
			fho=g(gpt+1,lnp)\hoff
			bho=g(gpt-1,lnp)\hoff
			;
			\hgt=gr*adj1
			;
			If adj1>=8
				\fwh=\y-fgr*adj2-fho
				\bwh=\y-gr*adj3-ho
			Else
				\fwh=\y-gr*adj2-ho
				\bwh=\y-bgr*adj3-bho
			EndIf
			;;
			If \whstatus=1
				If \fwh<\bwh
					\frame=(\bwh-\fwh) LSR2
					\frame+9
				Else
					\frame=(\fwh-\bwh) LSR2
					\frame+25
				EndIf
			EndIf
			;;
			If \fwh=\bwh Then \whstatus=0 Else \whstatus=1
			;;
			If fgr<gr AND \xacel>7 Then \whstatus=-1:\yacel=-gr ASR1*\xacel
			;;
			\sy=\y-\hgt-ho+bsy
		 Else																;;in the air, stunt time!
			gpt=x2+(\x LSR 4)
			lnp=(\y LSR 4)-9:If lnp>4 Then lnp=4
			ho=g(gpt AND 1023,lnp)\hoff
			\yacel+\weight
			If down=0
				If jx=-1 Then \frame=QLimit(\frame+0.5,10,25)
				If jx=1
					If \frame>=25 Then \frame=QLimit(\frame+0.5,25,41)
					If \frame<25 Then \frame=QLimit(\frame-0.5,10,25)
				EndIf
			EndIf
			If \yacel<0
				down=0
			Else
				down=1
			EndIf
			\sy=QLimit(\sy+\yacel,0,240)
			If down=1 AND \sy+16>=\y-ho Then \whstatus=1:\sy=\y-\hgt-ho
		 EndIf
		EndIf
		End Select
	Wend
Return
;****************************************************************;