; ascii translation of /Users/simon/Google Drive/amiga/w/abcstuff/dev/m/u/NeilsReqToolsLib.bb
+;*********************************************************
;*																											 *
;*	ReqTools																						 *
;*																											 *
;*	For Blitz Basic 2																		*
;*																											 *
;*	Implementation by Neil O'Rourke											*
;*																											 *
;*********************************************************
;*																											 *
;* History:																							*
;*																											 *
;* 15/06/94	V1.00		 File Created											*
;* 23/06/94	V1.00a		Posted as Alpha 1								 *
;* 24/06/94	V1.01a		Completed debugging and testing	 *
;* 25/06/94	V1.10a		Upgraded RTEZRequest for several	*
;*										 new features.										 *
;* 26/06/94	V1.20a		New implementations that take a	 *
;*										 tag list for RTRequest.					 *
;* 28/06/94	V1.30b		New file requester RTFileRequest, *
;*										 now takes a TagList.							*
;*										 Added a MultiLoad function				*
;* 29/06/94	V1.35b		Added a function to return the		*
;*										 entry in an rtFileList, with the	*
;*										 directory.												*
;*					 V1.36b		Added a flag to ScreenModeRequest *
;*					 V1.37b		No need for FileName$ with MLF		*
;* 01/07/94	V1.38b		Allowed a null-title for EZRequest*
;* 07/07/94	V1.40b		Added an asyncorous requester!		*
;* 08/07/94	V1.41b		No need for Window# in ASyncReq	 *
;* 09/07/94	V1.42b		Fixed bug in RTEZ_ReqTitle tag		*
;* 10/07/94	V1.43b		Added functions to return library *
;*										 version and revision of ReqTools. *
;* 12/07/94	V1.44b		Horrors!	First ever bug report.	*
;*										 EZRequest() fouls up when deep		*
;*										 inside a function (3 for/next +	 *
;*										 several select-case)	Added a		 *
;*										 MOVEM to store a3-a6.						 *
;* 15/07/94	V1.50b		New operation if ReqTools isn't	 *
;*										 available, the program can still	*
;*										 run, but no default fallback.		 *
;*										 Also an asyncronous							 *
;*										 PaletteRequester.								 *
;* 16/07/94	V1.60b		New: for RTEZGetString, a default *
;*										 string, for RTEZRequest keyboard	*
;*										 shortcuts, and for RTEZGetLong,	 *
;*										 a default value. (steve b)				*
;* 20/07/94	V1.70b		Finally fixed the font requester	*
;*																											 *
;*********************************************************

;#neilsreqtoolslib		 =54

;Now some Amiga library constants...
#OpenLibrary					=-$228
#CloseLibrary				 =-$19e

;ReqTools library constants
#_rtAllocRequestA		 =-30
#_rtFreeRequest			 =-36
#_rtFreeReqBuffer		 =-42
#_rtChangeReqAttrA		=-48
#_rtFileRequestA			=-54
#_rtFreeFileList			=-60
#_rtEZRequestA				=-66
#_rtGetStringA				=-72
#_rtGetLongA					=-78
#_rtFontRequestA			=-96
#_rtPaletteRequest		=-102
#_rtReqHandlerA			 =-108
#_rtSetWaitPointer		=-114
#_rtScreenModeRequestA=-144
#_rtLockWindow				=-156
#_rtUnlockWindow			=-162

;Tags used by ReqTools
#RT_TagBase					=$80000000

#RT_Window					 =#RT_TagBase+1
#RT_IDCMPFlags			 =#RT_TagBase+2
#RT_ReqPos					 =#RT_TagBase+3
#RT_LeftOffset			 =#RT_TagBase+4
#RT_TopOffset				=#RT_TagBase+5
#RT_PubScrName			 =#RT_TagBase+6
#RT_Screen					 =#RT_TagBase+7
#RT_ReqHandler			 =#RT_TagBase+8
#RT_DefaultFont			=#RT_TagBase+9
#RT_WaitPointer			=#RT_TagBase+10
#RT_Underscore			 =#RT_TagBase+11
#RT_ShareIDCMP			 =#RT_TagBase+12
#RT_LockWindow			 =#RT_TagBase+13
#RT_ScreenToFront		=#RT_TagBase+14
#RT_TextAttr				 =#RT_TagBase+15
#RT_IntuiMsgFunc		 =#RT_TagBase+16
#RT_Locale					 =#RT_TagBase+17

#RTEZ_ReqTitle			 =#RT_TagBase+20
#RTEZ_Flags					=#RT_TagBase+22
#RTEZ_DefaultResponse=#RT_TagBase+23

#RTGL_Min						=#RT_TagBase+30
#RTGL_Max						=#RT_TagBase+31
#RTGL_Width					=#RT_TagBase+32
#RTGL_ShowDefault		=#RT_TagBase+33
#RTGL_GadFmt				 =#RT_TagBase+34
#RTGL_GadFmtArgs		 =#RT_TagBase+35
#RTGL_Invisible			=#RT_TagBase+36
#RTGL_BackFill			 =#RT_TagBase+37
#RTGL_TextFmt				=#RT_TagBase+38
#RTGL_TextFmtArgs		=#RT_TagBase+39
#RTGL_Flags					=#RTEZ_Flags

#RTGS_Width					=#RTGL_Width
#RTGS_AllowEmpty		 =#RT_TagBase+80
#RTGS_GadFmt				 =#RTGL_GadFmt
#RTGS_GadFmtArgs		 =#RTGL_GadFmtArgs
#RTGS_Invisible			=#RTGL_Invisible
#RTGS_BackFill			 =#RTGL_BackFill
#RTGS_TextFmt				=#RTGL_TextFmt
#RTGS_TextFmtArgs		=#RTGL_TextFmtArgs
#RTGS_Flags					=#RTEZ_Flags

#RTFI_Flags					=#RT_TagBase+40
#RTFI_Height				 =#RT_TagBase+41
#RTFI_OkText				 =#RT_TagBase+42
#RTFI_VolumeRequest	=#RT_TagBase+43
#RTFI_FilterFunc		 =#RT_TagBase+44
#RTFI_AllowEmpty		 =#RT_TagBase+45

#RTFO_Flags					=#RTFI_Flags
#RTFO_Height				 =#RTFI_Height
#RTFO_OkText				 =#RTFI_OkText
#RTFO_SampleHeight	 =#RT_TagBase+60
#RTFO_MinHeight			=#RT_TagBase+61
#RTFO_MaxHeight			=#RT_TagBase+62
#RTFO_FilterFunc		 =#RTFI_FilterFunc

#RTSC_Flags					=#RTFI_Flags
#RTSC_Height				 =#RTFI_Height
#RTSC_OkText				 =#RTFI_OkText
#RTSC_PropertyFlags	=#RT_TagBase+90
#RTSC_PropertyMask	 =#RT_TagBase+91
#RTSC_MinWidth			 =#RT_TagBase+92
#RTSC_MaxWidth			 =#RT_TagBase+93
#RTSC_MinHeight			=#RT_TagBase+94
#RTSC_MaxHeight			=#RT_TagBase+95
#RTSC_MinDepth			 =#RT_TagBase+96
#RTSC_MaxDepth			 =#RT_TagBase+97
#RTSC_FilterFunc		 =#RTFI_FilterFunc

#RTFI_Dir						=#RT_TagBase+50
#RTFI_MatchPat			 =#RT_TagBase+51
#RTFI_AddEntry			 =#RT_TagBase+52
#RTFI_RemoveEntry		=#RT_TagBase+53
#RTFO_FontName			 =#RT_TagBase+63
#RTFO_FontHeight		 =#RT_TagBase+64
#RTFO_FontStyle			=#RT_TagBase+65
#RTFO_FontFlags			=#RT_TagBase+66
#RTSC_ModeFromScreen =#RT_TagBase+80
#RTSC_DisplayID			=#RT_TagBase+81
#RTSC_DisplayWidth	 =#RT_TagBase+82
#RTSC_DisplayHeight	=#RT_TagBase+83
#RTSC_DisplayDepth	 =#RT_TagBase+84
#RTSC_OverscanType	 =#RT_TagBase+85
#RTSC_AutoScroll		 =#RT_TagBase+86

#RTPA_Color					=#RT_TagBase+70

#RTRH_EndRequest		 =#RT_TagBase+60

#REQPOS_POINTER			=0
#REQPOS_CENTERWIN		=1
#REQPOS_CENTERSCR		=2
#REQPOS_TOPLEFTWIN	 =3
#REQPOS_TOPLEFTSCR	 =4

#REQ_CANCEL					=0
#REQ_OK							=1

#FREQB_NOBUFFER			=2
#FREQF_NOBUFFER			=1 LSL #FREQB_NOBUFFER

#FREQB_MULTISELECT	 =0
#FREQF_MULTISELECT	 =1 LSL #FREQB_MULTISELECT
#FREQB_SAVE					=1
#FREQF_SAVE					=1 LSL #FREQB_SAVE
#FREQB_NOFILES			 =3
#FREQF_NOFILES			 =1 LSL #FREQB_NOFILES
#FREQB_PATGAD				=4
#FREQF_PATGAD				=1 LSL #FREQB_PATGAD
#FREQB_SELECTDIRS		=12
#FREQF_SELECTDIRS		=1 LSL #FREQB_SELECTDIRS

#FREQB_FIXEDWIDTH		=5
#FREQF_FIXEDWIDTH		=1 LSL #FREQB_FIXEDWIDTH
#FREQB_COLORFONTS		=6
#FREQF_COLORFONTS		=1 LSL #FREQB_COLORFONTS
#FREQB_CHANGEPALETTE =7
#FREQF_CHANGEPALETTE =1 LSL #FREQB_CHANGEPALETTE
#FREQB_LEAVEPALETTE	=8
#FREQF_LEAVEPALETTE	=1 LSL #FREQB_LEAVEPALETTE
#FREQB_SCALE				 =9
#FREQF_SCALE				 =1 LSL #FREQB_SCALE
#FREQB_STYLE				 =10
#FREQF_STYLE				 =1 LSL #FREQB_STYLE

#SCREQB_SIZEGADS		 =13
#SCREQF_SIZEGADS		 =1 LSL #SCREQB_SIZEGADS
#SCREQB_DEPTHGAD		 =14
#SCREQF_DEPTHGAD		 =1 LSL #SCREQB_DEPTHGAD
#SCREQB_NONSTDMODES	=15
#SCREQF_NONSTDMODES	=1 LSL #SCREQB_NONSTDMODES
#SCREQB_GUIMODES		 =16
#SCREQF_GUIMODES		 =1 LSL #SCREQB_GUIMODES
#SCREQB_AUTOSCROLLGAD=18
#SCREQF_AUTOSCROLLGAD=1 LSL #SCREQB_AUTOSCROLLGAD
#SCREQB_OVERSCANGAD	=19
#SCREQF_OVERSCANGAD	=1 LSL #SCREQB_OVERSCANGAD

#EZREQB_NORETURNKEY	=0
#EZREQF_NORETURNKEY	=1 LSL #EZREQB_NORETURNKEY
#EZREQB_LAMIGAQUAL	 =1
#EZREQF_LAMIGAQUAL	 =1 LSL #EZREQB_LAMIGAQUAL
#EZREQB_CENTERTEXT	 =2
#EZREQF_CENTERTEXT	 =1 LSL #EZREQB_CENTERTEXT

#GLREQB_CENTERTEXT	 =#EZREQB_CENTERTEXT
#GLREQF_CENTERTEXT	 =1 LSL #GLREQB_CENTERTEXT
#GLREQB_HIGHLIGHTTEXT=3
#GLREQF_HIGHLIGHTTEXT=1 LSL #GLREQB_HIGHLIGHTTEXT

#GSREQB_CENTERTEXT	 =#EZREQB_CENTERTEXT
#GSREQBF_CENTERTEXT	=1 LSL #GSREQB_CENTERTEXT
#GSREQB_HIGHLIGHTTEXT=#GLREQB_HIGHLIGHTTEXT
#GSREQF_HIGHLIGHTTEXT=1 LSL #GSREQB_HIGHLIGHTTEXT

#VREQB_NOASSIGNS		 =0
#VREQB_NODISKS			 =1
#VREQB_ALLDISKS			=2

#RT_REQINFO					=1
#RT_FILEREQ					=0
#RT_FONTREQ					=2
#RT_SCREENMODEREQ		=3

#CALL_HANDLER				=$80000000

;Blitz library definition code...

!libheader{#neilsreqtoolslib,init,0,finit,0}
.FuncDefs

!afunction{word}
!args{#string,#string,#string}
!libs
!subs{_rtrequest,0,0}

!args{#string,#string,#string,#long}
!libs
!subs{_rtrequestPos,0,0}

!args{#string,#string,#string,#long,#long,#long}
!libs
!subs{_rtrequestXtra,0,0}
!name{"RTEZRequest","(Title$,BodyText$,GadgetText$ [,ReqPosition [,DefaultResponse,Flags]])"}

!afunction{#string}
!args{#string,#string}
!libs
!subs{_rtfreq,0,0}
!name{"RTEZLoadFile","(Title$,Filename$)"}

!afunction{#long}
!args{#string}
!libs
!subs{_rtfontreq,0,0}
!name{"RTEZFontRequest","(Title$)"}

!afunction{#long}
!args{#string}
!libs
!subs{_rtsmreq,0,0}

!args{#string,#long}
!libs
!subs{_rtsmreqf,0,0}
!name{"RTEZScreenModeRequest","(Title$ [,DisplayFlags])"}

!afunction{#long}
!args{#string,#long}
!libs
!subs{_rtpalreq,0,0}
!name{"RTEZPaletteRequest","(Title$,FirstColour)"}

!afunction{#long}
!args{#string,#string}
!libs
!subs{_rtgetlong,0,0}

!args{#string,#string,#long}
!libs
!subs{_rtgetlongDef,0,0}
!name{"RTEZGetLong","(Title$,BodyText$ [,DefaultValue])"}

!afunction{#long}
!args{#string,#string,#long,#long}
!libs
!subs{_rtgetlongrng,0,0}

!args{#string,#string,#long,#long,#long}
!libs
!subs{_rtgetlongrngDef,0,0}
!name{"RTEZGetLongRange","(Title$,BodyText$,Min,Max [,DefaultValue])"}

!afunction{#string}
!args{#string,#string,#long}
!libs
!subs{_rtgetstr,0,0}

!args{#string,#string,#long,#string}
!libs
!subs{_rtgetstrDef,0,0}
!name{"RTEZGetString","(Title$,BodyText$,MaxChars [,DefaultString])"}

!afunction{#string}
!args{#string,#string}
!libs
!subs{_rtsfreq,0,0}
!name{"RTEZSaveFile","(Title$,Filename$)"}

!astatement
!args{#long,#string}
!libs
!subs{_rtsetdefdir,0,0}
!name{"RTEZSetDefaultDirectory","Requester#,Directory$"}

!afunction{#string}
!args{#string}
!libs
!subs{_rtpreq,0,0}
!name{"RTEZPathRequest","(Title$)"}

!afunction{#long}
!args{#long}
!libs{#windowslib,#pd0+#ia1}
!subs{_rtlockwin,0,0}
!name{"RTLockWindow","(Window#)"}

!astatement
!args{#long,#long}
!libs{#windowslib,#pd0+#ia1}
!subs{_rtunlockwin,0,0}
!name{"RTUnlockWindow","Window#,Lock"}

;Distributed as V1.01a

!astatement
!args{#long,#string}
!libs
!subs{_rtsetpat,0,0}
!name{"RTEZSetPattern","Requester#,Pattern$"}

!astatement
!args{#long}
!libs
!subs{_rtfreepat,0,0}
!name{"RTEZFreePattern","Requester#"}

!afunction{#long}
!args{#string,#string,#string,#long}
!libs
!subs{_rtflagsrequest,0,0}

!args{#string,#string,#string,#long,#long}
!libs
!subs{_rtflagsrequestPos,0,0}

!name{"RTEZFlagsRequest","(Title$,BodyText$,GadgetText$,IDCMPFlags [,ReqPosition])"}

;New for V1.20a

!afunction{#long}
!args{#string,#string,#long}
!libs
!subs{_rtTagrequest,0,0}
!name{"RTRequest","(BodyText$,GadgetText$,TagList)"}

!afunction{#string}
!args{#string,#string,#long}
!libs
!subs{_rtTagsfreq,0,0}
!name{"RTFileRequest","(Title$,FileName$,TagList)"}

; New for V1.3xb

!afunction{#long}
!args{#string}
!libs
!subs{_rtMfreq,0,0}
!name{"RTEZMultiLoadFile","(Title$)"}

!afunction{string}
!args
!libs
!subs{_rtnxtentry,0,0}
!name{"RTNextPathEntry",""}

;New for V1.40b

!afunction{word}
!args{#string,#string,#string}
!libs{#windowslib,#ua1}
!subs{_rtasrequest,0,0}
!name{"RTASyncRequest","(Title$,BodyText$,GadgetText$)"}

!afunction{#word}
!args
!libs
!subs{_rtcheckasreq,0,0}
!name{"RTCheckASyncRequest",""}

!astatement
!args
!libs
!subs{_rtendasreq,0,0}
!name{"RTEndASyncRequest",""}

!afunction{#word}
!args
!libs
!subs{_rtver,0,0}
!name{"RTVersion",""}

!afunction{#word}
!args
!libs
!subs{_rtrev,0,0}
!name{"RTRevision",""}

!afunction{#long}
!args
!libs
!subs{_rtactive,0,0}
!name{"IsReqToolsActive",""}

;New for V1.50b

!afunction{word}
!args{#string,#long}
!libs{#windowslib,#ua1}
!subs{_rtasPrequest,0,0}
!name{"RTASyncPaletteRequest","(Title$,FirstColour)"}

!afunction{#word}
!args
!libs
!subs{_rtcheckasPreq,0,0}
!name{"RTCheckASyncPaletteRequest",""}

!astatement
!args
!libs
!subs{_rtendasPreq,0,0}
!name{"RTEndASyncPaletteRequest",""}


init:!nullsub{initreqlib,0,0}
finit:!nullsub{cleanupreqlib,0,0}
!libfin

	Dc.b "ReqTools V38 for Blitz Basic II V1.70b (c) Neil O'Rourke 20/07/94"
	Event

;Useful routines for my code

._CopyString:
;Copy a null-terminated string from (a0) to (a3) - the Blitz
;string pointer - and return the length in d0.	Trashes d1, leaves
;a0 pointing at the end of the source string, and a3 pointing at the
;of the copy.	Does _NOT_ copy the null!
	MOVE.b (a0)+,d1				 ;Get a byte
	CMP.b #0,d1						 ;Is it null?
	BEQ _EndCopy						;Yes, so end the copy
	MOVE.b d1,(a3)+				 ;Copy this byte into the string
	ADDI.l #1,d0						;Increment length counter
	BRA _CopyString
_EndCopy
	RTS										 ;Exit

;Actual machine code for the library

.initreqlib:
	LEA rtName,a1					 ;Name of ReqTools
	MOVE.l #38,d0					 ;Library version
	MOVE.l 4,a6
	JSR OpenLibrary(a6)		 ;Try and open it
	CMP.l #0,d0						 ;Did it open?
	BEQ OpenFailed					;Argh!
	MOVE.l d0,rtBase				;Save the base address of the library
	MOVE.l rtBase,a6				;Get ReqTools
	MOVE.l #RT_FILEREQ,d0	 ;We need a file requester
	MOVE.l #0,a0						;No tags
	JSR _rtAllocRequestA(a6);Allocate a file requester
	CMP.l #0,d0
	BEQ AllocFReqFailed
	MOVE.l d0,filereq			 ;Save it
	MOVE.l #RT_FONTREQ,d0	 ;Now a font requester
	MOVE.l #0,a0
	JSR _rtAllocRequestA(a6)
	CMP.l #0,d0
	BEQ AllocFonReqFailed
	MOVE.l d0,fontreq
	MOVE.l #RT_SCREENMODEREQ,d0
	MOVE.l #0,a0
	JSR _rtAllocRequestA(a6)
	CMP.l #0,d0
	BEQ AllocSMReqFailed
	MOVE.l d0,smreq
	MOVE.l #RT_FILEREQ,d0	 ;We need a file requester
	MOVE.l #0,a0						;No tags
	JSR _rtAllocRequestA(a6);Allocate a file requester
	CMP.l #0,d0
	BEQ AllocFReqFailed
	MOVE.l d0,Sfilereq
	MOVE.l #RT_FILEREQ,d0	 ;We need a file requester
	MOVE.l #0,a0						;No tags
	JSR _rtAllocRequestA(a6);Allocate a file requester
	CMP.l #0,d0
	BEQ AllocFReqFailed
	MOVE.l d0,preq			 ;Save it
	MOVE.l #RT_FILEREQ,d0	 ;We need a file requester
	MOVE.l #0,a0						;No tags
	JSR _rtAllocRequestA(a6);Allocate a file requester
	CMP.l #0,d0
	BEQ AllocFReqFailed
	MOVE.l d0,Tfilereq
	MOVE.l #RT_FILEREQ,d0	 ;We need a file requester
	MOVE.l #0,a0						;No tags
	JSR _rtAllocRequestA(a6);Allocate a file requester
	CMP.l #0,d0
	BEQ AllocFReqFailed
	MOVE.l d0,Mfilereq
	MOVE.l #-1,ReqToolsActive
	RTS

ReqToolsActive: Dc.l 0

OpenFailed:
AllocFReqFailed:
AllocFonReqFailed:
AllocSMReqFailed:
	MOVE.l #0,ReqToolsActive
	RTS


_rtactive:
	MOVE.l ReqToolsActive,d0
	RTS

.cleanupreqlib:
	MOVE.l ReqToolsActive,d0
	CMP.l #0,d0
	BEQ exitcleanup				 ;ReqTools didn't open for some reason
	MOVE.l rtBase,a6				;Get ReqTools
	MOVE.l filereq,a1
	JSR _rtFreeRequest(a6)
	MOVE.l fontreq,a1
	JSR _rtFreeRequest(a6)
	MOVE.l smreq,a1
	JSR _rtFreeRequest(a6)
	MOVE.l Sfilereq,a1
	JSR _rtFreeRequest(a6)
	MOVE.l Tfilereq,a1
	JSR _rtFreeRequest(a6)
	MOVE.l Mfilereq,a1
	JSR _rtFreeRequest(a6)
	MOVE.l preq,a1
	JSR _rtFreeRequest(a6)
	MOVE.l Mfilelist,a0		 ;Get the current file list
	JSR _rtFreeFileList(a6) ;And free it
	MOVE.l rtBase,a1				;Get the address of ReqTools
	MOVE.l 4,a6						 ;and Exec
	JSR CloseLibrary(a6)		;and close it.
exitcleanup:
	RTS

rtBase:	 Dc.l 0
rtName:	 Dc.b "reqtools.library",0
	Event

fname:		Dcb.b 108,0		 ;Reserve 108 bytes for fname

._rtrequestXtra
	MOVE.l d4,RequestDefRes ;Set the new default response
	MOVE.l d5,RequestFlags	;and the new flags
._rtrequestPos
	MOVE.l d3,RequestPos		;Position the requester
._rtrequest
	MOVEM.l a3-a6,-(a7)		 ;Stack the registers
	MOVE.l rtBase,a6				;Get ReqTools...
	MOVE.l d1,a1						;The body text of the request
	MOVE.l -4(a2),d1				;Was the string a null string?
	CMP #0,d1
	BEQ reqDoIt						 ;Yes, so don't put up a title
	MOVE.l d0,RequestTitle	;The address of the title string
	MOVE.l #RTEZ_ReqTitle,reqTTag
reqDoIt:
	MOVE.l d2,a2						;the gadget text
	MOVE.l #0,a3						;No rtReqInfo
	MOVE.l #0,a4						;No argarray
	LEA RequestTagList,a0	 ;My simple tag list
	JSR _rtEZRequestA(a6)	 ;Call the function
	MOVE.l #REQPOS_CENTERSCR,RequestPos
													;Reset to the default position
	MOVE.l #0,RequestFlags	;No flags
	MOVE.l #1,RequestDefRes ;Default Response
	MOVE.l #0,RequestTitle	;Use default title if necessary
	MOVE.l #0,reqTTag			 ;Use default titles
	MOVEM.l (a7)+,a3-a6		 ;And get the registers back
	RTS										 ;Return (with result in d0)

RequestTagList:
							Dc.l #RT_ReqPos
RequestPos:	 Dc.l #REQPOS_CENTERSCR
							Dc.l #RT_LockWindow,-1
							Dc.l #RT_Underscore,"_"
							Dc.l #RTEZ_Flags
RequestFlags: Dc.l 0
							Dc.l #RTEZ_DefaultResponse
RequestDefRes:Dc.l 1
reqTTag:			Dc.l 0
RequestTitle: Dc.l 0
							Dc.l 0,0

._rtTagrequest
	MOVEM.l a3-a6,-(a7)
	MOVE.l rtBase,a6				;Get ReqTools...
	MOVE.l d0,a1						;The body text of the request
	MOVE.l d1,a2						;the gadget text
	MOVE.l #0,a3						;No rtReqInfo
	MOVE.l #0,a4						;No argarray
	MOVE.l d2,a0						;The users' tag list
	JSR _rtEZRequestA(a6)	 ;Call the function
	MOVEM.l (a7)+,a3-a6
	RTS										 ;Return (with result in d0)

._rtfreq
	MOVEM.l a4-a6,-(a7)
	MOVEM.l d0-d1,-(a7)
	MOVE.l d1,d0						;Start of FileName$
	MOVE.l #108,d1					;Its length
	ALibJsr $cf01					 ;Make a copy of that string
	MOVE.l d0,filenamestr	 ;Save the pointer
	MOVEM.l (a7)+,d0-d1
	MOVE.l rtBase,a6				;Get ReqTools
	MOVE.l d0,a3						;The title
	MOVE.l d0,swsFreq			 ;Save the workspace pointer
	MOVE.l filenamestr,a2	 ;Get the copy of the filename$
	MOVE.l filereq,a1			 ;The requester we have allocated
	LEA freqTagList,a0			;and its TagList
	JSR _rtFileRequestA(a6) ;Call the requester
	CMPI.l #0,d0						;Did the user cancel?
	BEQ exitfreq						;Yes, so exit
	MOVE.l filereq,a1			 ;Get base of the structure
	MOVE.l 16(a1),a0				;A0 points to the directory name
	MOVE.l swsFreq,a3
	MOVEQ #0,d0						 ;Zero characters in string
	JSR _CopyString				 ;Copy the directory into the string
	CMPI.l #0,d0						;Was there a directory to copy?
	BEQ lfCopName					 ;No, so we don't need the "/" char
	CMPI.b #":",-1(a3)			;Was it a volume seperator?
	BEQ lfCopName					 ;Yes, don't put the "/" in
	MOVE.b #"/",(a3)+			 ;Seperate the name from the dirs
	ADDI.l #1,d0						;Increase the length pointer, too
lfCopName:
	MOVE.l filenamestr,a0	 ;The FileName$
	JSR _CopyString				 ;Copy the file name over
	MOVE.b #0,(a3)+				 ;And null-terminate
exitfreq:
	MOVE.l d0,-(a7)
	MOVE.l filenamestr,d0
	ALibJsr $cf02					 ;Free up the string
	MOVE.l (a7)+,d0
	MOVEM.l (a7)+,a4-a6
	RTS

swsFreq:			Dc.l 0
filereq:			Dc.l 0
filenamestr:	Dc.l 0
freqTagList:	Dc.l #RT_LockWindow,-1
freqFlags:		Dc.l #RTFI_Flags,0
							Dc.l 0,0

._rtfontreq
	MOVEM.l a3-a6,-(a7)
	MOVE.l rtBase,a6				;Get ReqTools
	MOVE.l d0,a3						;Title of requester
	LEA fontTagList,a0			;Tag list
	MOVE.l fontreq,a1			 ;Font requester allocated
	JSR _rtFontRequestA(a6)
	CMPI.l #0,d0						;Did the user cancel?
	BEQ exitfontr
	MOVE.l fontreq,a0			 ;Base of structure
	ADDA.l	#16,a0					;Address of the TextAttr structure
;V1.70b
;Now build my font requester
	LEA myfont,a1					 ;Address of my font requester
	MOVE.w 4(a0),4(a1)			;Move the YSize
	MOVE.w 6(a0),6(a1)			;Cheat - this should be two bytes
;Now build the font name.	First, has this been called before?
	CMP.l #0,(a1)					 ;A null pointer?
	BEQ BuildFName					;Yep, so don't worry
;Since there is a file name here already, we better free it.
	MOVE.l (a1),d0
	ALibJsr $cf02					 ;FreeString
BuildFName:
;Now build a new font name etc
;How many characters?
	MOVE.l (a0),a1					;Get the name of the font
	MOVE.l #0,d1						;Zero count
bfLoop:
	CMP.b #0,(a1)+					;Was it a null?
	BEQ BuildName
	ADDI.l #1,d1
	BRA bfLoop
BuildName:
	MOVE.l (a0),d0					;Location of string (d1 contains length)
	ALibJsr $cf01					 ;AllocString
	MOVE.l d0,mfName
	MOVE.l #myfont,d0			 ;Address of this font structure
exitfontr:
	MOVEM.l (a7)+,a3-a6
	RTS

fontreq:			Dc.l 0
fontTagList:	Dc.l #RT_LockWindow,-1
							Dc.l #RTFO_Flags,#FREQF_STYLE
							Dc.l 0,0

myfont:
mfName:			 Dc.l 0
mfYSize:			Dc.w 0
mfStyle:			Dc.b 0
mfFlags:			Dc.b 0

._rtsmreqf
	MOVE.l d1,smFlags+4		 ;Put in the requested flags
._rtsmreq
	MOVEM.l a3-a6,-(a7)
	MOVE.l rtBase,a6				;Get ReqTools
	MOVE.l d0,a3						;Title of requester
	LEA smTagList,a0				;Tag list
	MOVE.l smreq,a1				 ;ScreenMode requester
	JSR _rtFontRequestA(a6)
	CMPI.l #0,d0						;Did the user cancel?
	BEQ exitsmr
	MOVE.l smreq,a0				 ;Base of structure
	MOVE.l 16(a0),DisplayID
	MOVE.w 20(a0),DisplayWidth
	MOVE.w 22(a0),DisplayHeight
	MOVE.w 52(a0),DisplayDepth
	MOVE.w 54(a0),OverscanType
	MOVE.w 56(a0),Autoscroll
	MOVE.l #smRetType,d0
	MOVE.l #SCREQF_SIZEGADS|SCREQF_DEPTHGAD,smFlags+4
exitsmr:
	MOVEM.l (a7)+,a3-a6
	RTS

smreq:				Dc.l 0
smTagList:		Dc.l #RT_LockWindow,-1
smFlags:			Dc.l #RTSC_Flags,#SCREQF_SIZEGADS|#SCREQF_DEPTHGAD
							Dc.l 0,0

smRetType:
DisplayID:		Dc.l 0
DisplayWidth: Dc.w 0
DisplayHeight:Dc.w 0
DisplayDepth: Dc.w 0
OverscanType: Dc.w 0
Autoscroll:	 Dc.l 0

._rtpalreq:
	MOVEM.l a3-a6,-(a7)
	MOVE.l rtBase,a6				;Get ReqTools
	MOVE.l d0,a2						;Title of requester
	MOVE.l #0,a3						;No ReqInfo
	MOVE.l d1,FirstCol			;First colour selected
	LEA palreqTagList,a0		;TagList
	JSR _rtPaletteRequest(a6)
	MOVEM.l (a7)+,a3-a6
	RTS

palreqTagList:Dc.l #RTPA_Color
FirstCol:		 Dc.l 0
							Dc.l #RT_LockWindow,-1
							Dc.l 0,0

._rtgetlongDef
	MOVE.l d3,glValue
._rtgetlong
	MOVEM.l a3-a6,-(a7)
	MOVE.l rtBase,a6				;Get ReqTools
	MOVE.l d0,a2						;Title of requester
	MOVE.l d1,gltxt				 ;Text of requester
	MOVE.l #0,a3						;No ReqInfo
	LEA glTagList,a0
	LEA glValue,a1
	JSR _rtGetLongA(a6)
	CMPI.l #0,d0
	BEQ exitgl
	MOVE.l glValue,d0
exitgl:
	MOVEM.l (a7)+,a3-a6
	RTS

glValue:			Dc.l 0
glTagList:		Dc.l #RT_LockWindow,-1
							Dc.l #RTGL_TextFmt
gltxt:				Dc.l 0
							Dc.l #RT_ReqPos,#REQPOS_CENTERSCR
							Dc.l #RTGL_Flags,#GLREQF_CENTERTEXT
							Dc.l 0,0

._rtgetlongrngDef
	MOVE.l d4,glrValue
._rtgetlongrng
	MOVEM.l a3-a6,-(a7)
	MOVE.l rtBase,a6				;Get ReqTools
	MOVE.l d0,a2						;Title of requester
	MOVE.l d1,glrtxt				;Text of requester
	MOVE.l #0,a3						;No ReqInfo
	MOVE.l d2,glrMin
	MOVE.l d3,glrMax
	LEA glrTagList,a0
	LEA glrValue,a1
	JSR _rtGetLongA(a6)
	CMPI.l #0,d0
	BEQ exitglr
	MOVE.l glrValue,d0
exitglr:
	MOVEM.l (a7)+,a3-a6
	RTS

glrValue:		 Dc.l 0
glrTagList:	 Dc.l #RT_LockWindow,-1
							Dc.l #RTGL_TextFmt
glrtxt:			 Dc.l 0
							Dc.l #RT_ReqPos,#REQPOS_CENTERSCR
							Dc.l #RTGL_Flags,#GLREQF_CENTERTEXT
							Dc.l #RTGL_Min
glrMin:			 Dc.l 0
							Dc.l #RTGL_Max
glrMax:			 Dc.l 0
							Dc.l 0,0

._rtgetstrDef
	MOVEM.l a4-a6,-(a7)
	MOVEM.l d0-d7/a0-a6,-(a7)
	MOVE.l d2,d0
	MOVE.l #$10000,d1
	ALibJsr $c002					 ;Allocate a block of memory MaxChars
	MOVE.l d0,gsBuffer
	MOVEM.l (a7)+,d0-d7/a0-a6
	MOVEM.l d0-d7/a0-a6,-(a7)
	MOVE.l gsBuffer,a3
	MOVE.l d3,a0
	JSR _CopyString
	MOVEM.l (a7)+,d0-d7/a0-a6
	BRA gsCont
._rtgetstr
	MOVEM.l a4-a6,-(a7)
	MOVEM.l d0-d7/a0-a6,-(a7)
	MOVE.l d2,d0
	MOVE.l #$10000,d1
	ALibJsr $c002					 ;Allocate a block of memory MaxChars
	MOVE.l d0,gsBuffer
	MOVEM.l (a7)+,d0-d7/a0-a6
gsCont:
	MOVE.l rtBase,a6				;Get ReqTools
	MOVE.l d0,a2						;Title of requester
	MOVE.l d0,swsPtr
	MOVE.l d1,gstxt				 ;Text of requester
	MOVE.l d2,d0						;MaxChars
	MOVE.l d2,gsTxtSize
	MOVE.l gsBuffer,a1			;Buffer to put string into
	MOVE.l #0,a3						;No ReqInfo
	LEA gsTagList,a0
	JSR _rtGetStringA(a6)
	CMPI.l #0,d0						;Did the user select something?
	BEQ exitgs							;No, so exit
	MOVEQ #0,d0
	MOVE.l gsBuffer,a0
	MOVE.l swsPtr,a3
	JSR _CopyString
	MOVE.l d0,gsActual
	MOVE.l gsTxtSize,d0
	MOVE.l gsBuffer,a1
	ALibJsr $c003
	MOVE.l gsActual,d0
exitgs:
	MOVEM.l (a7)+,a4-a6
	RTS

swsPtr:			 Dc.l 0
gsBuffer:		 Dc.l 0
gsTxtSize:		Dc.l 0
gsActual:		 Dc.l 0
gsTagList:		Dc.l #RT_LockWindow,-1
							Dc.l #RTGL_TextFmt
gstxt:				Dc.l 0
							Dc.l #RT_ReqPos,#REQPOS_CENTERSCR
							Dc.l #RTGL_Flags,#GLREQF_CENTERTEXT
							Dc.l 0,0

._rtsfreq
	MOVEM.l a3-a6,-(a7)
	MOVEM.l d0-d1,-(a7)
	MOVE.l d1,d0						;Start of FileName$
	MOVE.l #108,d1					;Its length
	ALibJsr $cf01					 ;Make a copy of that string
	MOVE.l d0,Sfilenamestr	;Save the pointer
	MOVEM.l (a7)+,d0-d1
	MOVE.l rtBase,a6				;Get ReqTools
	MOVE.l d0,a3						;The title
	MOVE.l d0,swsSFreq			;Save the workspace pointer
	MOVE.l Sfilenamestr,a2	;Get the filename$
	MOVE.l Sfilereq,a1			;The requester we have allocated
	LEA SfreqTagList,a0		 ;and its TagList
	JSR _rtFileRequestA(a6) ;Call the requester
	CMPI.l #0,d0						;Did the user cancel?
	BEQ exitSfreq					 ;Yes, so exit
	MOVE.l Sfilereq,a1			;Get base of the structure
	MOVE.l 16(a1),a0				;A0 points to the directory name
	MOVE.l swsSFreq,a3
	MOVEQ #0,d0						 ;Zero characters in string
	JSR _CopyString				 ;Copy the directory into the string
	CMPI.l #0,d0						;Was there a directory to copy?
	BEQ sfCopName					 ;No, so we don't need the "/" char
	CMPI.b #":",-1(a3)			;Was it a volume seperator?
	BEQ sfCopName					 ;Yes, don't put the "/" in
	MOVE.b #"/",(a3)+			 ;Seperate the name from the dirs
	ADDI.l #1,d0						;Increase the length pointer, too
sfCopName:
	MOVE.l Sfilenamestr,a0	;The FileName$
	JSR _CopyString				 ;Copy the file name over
	MOVE.b #0,(a3)+				 ;And null-terminate
exitSfreq:
	MOVE.l d0,-(a7)
	MOVE.l Sfilenamestr,d0
	ALibJsr $cf02					 ;Free up the string
	MOVE.l (a7)+,d0
	MOVEM.l (a7)+,a3-a6
	RTS

swsSFreq:		 Dc.l 0
Sfilereq:		 Dc.l 0
Sfilenamestr: Dc.l 0
SfreqTagList: Dc.l #RT_LockWindow,-1
							Dc.l #RTFI_OkText,SaveTxt
SfreqFlags:	 Dc.l #RTFI_Flags,#FREQF_SAVE
							Dc.l 0,0
SaveTxt:			Dc.b "Save",0

 Event
._rtsetdefdir:
	MOVEM.l a3-a6,-(a7)
	MOVE.l rtBase,a6				;Get ReqTools
	MOVE.l d1,sddDir				;Pointer to the new directory name
	LEA sddTagList,a0			 ;The tag list
	CMPI.l #0,d0						;The Load requester?
	BNE CheckSF						 ;No, check the SaveFile
	MOVE.l filereq,a1			 ;The LoadFile request structure
	BRA sddDoIt
CheckSF:
	CMPI.l #1,d0						;The Save requester?
	BNE CheckPR						 ;No, check the path requester
	MOVE.l Sfilereq,a1			;The SaveFile request structure
	BRA sddDoIt
CheckPR:
	CMPI.l #2,d0						;The PathRequester?
	BNE CheckMFL						;No, check the multiload
	MOVE.l preq,a1
	BRA sddDoIt
CheckMFL:
	CMPI.l #3,d0						;The PathRequester?
	BNE sddExit						 ;No, quit
	MOVE.l Mfilereq,a1			;The MultiFileLoad structure
sddDoIt:
	JSR _rtChangeReqAttrA(a6)
sddExit
	MOVEQ #0,d0
	MOVEM.l (a7)+,a3-a6
	RTS

sddTagList: Dc.l #RTFI_Dir
sddDir:		 Dc.l 0
						Dc.l 0,0

._rtsetpat:
	MOVEM.l a3-a6,-(a7)
	MOVE.l rtBase,a6				;Get ReqTools
	MOVE.l d1,spPat				 ;Pointer to the new directory name
	LEA spTagList,a0				;The tag list
	CMPI.l #0,d0						;The Load requester?
	BNE CheckSFp						;No, check the SaveFile
	MOVE.l filereq,a1			 ;The LoadFile request structure
	MOVE.l #FREQF_PATGAD,freqFlags+4
	BRA spDoIt
CheckSFp:
	CMPI.l #1,d0						;The Save requester?
	BNE CheckMLF						;No, could be the MultiLoad
	MOVE.l Sfilereq,a1			;The SaveFile request structure
	MOVE.l #FREQF_PATGAD|#FREQF_SAVE,SfreqFlags+4
	BRA spDoIt
CheckMLF
	CMPI.l #3,d0						;The MultiLoad requester?
	BNE spExit
	MOVE.l #FREQF_MULTISELECT|#FREQF_PATGAD,MfreqFlags+4
	MOVE.l Mfilereq,a1
spDoIt:
	JSR _rtChangeReqAttrA(a6)
spExit
	MOVEQ #0,d0
	MOVEM.l (a7)+,a3-a6
	RTS

spTagList:	Dc.l #RTFI_MatchPat
spPat:			Dc.l 0
						Dc.l 0,0

._rtpreq
	MOVEM.l a4-a6,-(a7)
	MOVE.l rtBase,a6				;Get ReqTools
	MOVE.l d0,a3						;The title
	MOVE.l d0,swsPreq			 ;Save the workspace pointer
	MOVE.l #0,a2						;No file name buffer
	MOVE.l preq,a1					;The requester we have allocated
	LEA preqTagList,a0			;and its TagList
	JSR _rtFileRequestA(a6) ;Call the requester
	CMPI.l #0,d0						;Did the user cancel?
	BEQ exitpreq						;Yes, so exit
	MOVE.l preq,a1					;Get base of the structure
	MOVE.l 16(a1),a0				;A0 points to the directory name
	MOVE.l swsPreq,a3
	MOVEQ #0,d0						 ;Zero characters in string
	JSR _CopyString				 ;Copy the directory into the string
	CMPI.l #0,d0						;Was there a directory to copy?
	BEQ exitpreq						;No, so we don't need the "/" char
	CMPI.b #":",-1(a3)			;Was it a volume seperator?
	BEQ exitpreq						;Yes, don't put the "/" in
	MOVE.b #"/",(a3)+			 ;Seperate the name from the dirs
	ADDI.l #1,d0						;Increase the length pointer, too
exitpreq:
	MOVEM.l (a7)+,a4-a6
	RTS

swsPreq:			Dc.l 0
preq:				 Dc.l 0
preqTagList:	Dc.l #RTFI_Flags,#FREQF_NOFILES
							Dc.l #RT_LockWindow,-1
							Dc.l 0,0

._rtlockwin
	MOVE.l a6,-(a7)
	MOVE.l rtBase,a6				;Get ReqTools
	MOVE.l (a1),a0					;The address of the window
	JSR _rtLockWindow(a6)	 ;Lock that window
	MOVE.l (a7)+,a6
	RTS

._rtunlockwin
	MOVE.l a6,-(a7)
	MOVE.l rtBase,a6				;Get ReqTools
	MOVE.l (a1),a0					;The address of the window
	MOVE.l d1,a1
	JSR _rtUnlockWindow(a6) ;Unlock that window
	MOVE.l (a7)+,a6
	RTS

._rtfreepat:
	CMPI.l #0,d0						;The Load requester?
	BNE CheckSFpp					 ;No, check the SaveFile
	MOVE.l #0,freqFlags+4
	BRA fpExit
CheckSFpp:
	CMPI.l #1,d0						;The Save requester?
	BNE CheckMFLpp
	MOVE.l #FREQF_SAVE,SfreqFlags+4
	BRA fpExit
CheckMFLpp
	CMPI.l #2,d0
	BNE fpExit
	MOVE.l #FREQF_MULTISELECT,MfreqFlags+4
fpExit
	MOVEQ #0,d0
	RTS

._rtflagsrequestPos
	MOVE.l d4,reqFPos
._rtflagsrequest
	MOVEM.l a3-a6,-(a7)
	MOVE.l rtBase,a6				;Get ReqTools...
	MOVE.l d1,a1						;The body text of the request
	MOVE.l -12(a2),d1
	CMPI.l #0,d1
	BNE gadOK
	MOVE.l #0,a2
	BRA more
gadOK:
	MOVE.l d2,a2						;the gadget text
more
	MOVE.l d3,rfflags			 ;The IDCMP flags
	MOVE.l #0,a3						;No rtReqInfo
	MOVE.l #0,a4						;No argarray
	MOVE.l d0,RequestTitle	;The address of the title string
	LEA RequestFTagList,a0	;My simple tag list
	JSR _rtEZRequestA(a6)	 ;Call the function
	MOVE.l #REQPOS_CENTERSCR,reqFPos
	MOVEM.l (a7)+,a3-a6
	RTS										 ;Return (with result in d0)

RequestFTagList:
							Dc.l #RTEZ_ReqTitle
RequestFTitle:Dc.l 0
							Dc.l #RT_ReqPos
reqFPos:			Dc.l #REQPOS_CENTERSCR
							Dc.l #RT_LockWindow,-1
							Dc.l #RT_Underscore,"_"
							Dc.l #RT_IDCMPFlags
rfflags:			Dc.l 0
							Dc.l 0,0

._rtTagsfreq
	MOVEM.l a4-a6,-(a7)
	MOVEM.l d0-d1,-(a7)
	MOVE.l d1,d0						;Start of FileName$
	MOVE.l #108,d1					;Its length
	ALibJsr $cf01					 ;Make a copy of that string
	MOVE.l d0,Tfilenamestr	;Save the pointer
	MOVEM.l (a7)+,d0-d1
	MOVE.l rtBase,a6				;Get ReqTools
	MOVE.l d0,a3						;The title
	MOVE.l d0,swsTFreq			;Save the workspace pointer
	MOVE.l Tfilenamestr,a2	;Get the copy of the filename$
	MOVE.l Tfilereq,a1			;The requester we have allocated
	MOVE.l d2,a0						;and the User's TagList
	JSR _rtFileRequestA(a6) ;Call the requester
	CMPI.l #0,d0						;Did the user cancel?
	BEQ exitTfreq					 ;Yes, so exit
	MOVE.l Tfilereq,a1			;Get base of the structure
	MOVE.l 16(a1),a0				;A0 points to the directory name
	MOVE.l swsTFreq,a3
	MOVEQ #0,d0						 ;Zero characters in string
	JSR _CopyString				 ;Copy the directory into the string
	CMPI.l #0,d0						;Was there a directory to copy?
	BEQ lfTCopName					;No, so we don't need the "/" char
	CMPI.b #":",-1(a3)			;Was it a volume seperator?
	BEQ lfTCopName					;Yes, don't put the "/" in
	MOVE.b #"/",(a3)+			 ;Seperate the name from the dirs
	ADDI.l #1,d0						;Increase the length pointer, too
lfTCopName:
	MOVE.l Tfilenamestr,a0	;The FileName$
	JSR _CopyString				 ;Copy the file name over
	MOVE.b #0,(a3)+				 ;And null-terminate
exitTfreq:
	MOVE.l d0,-(a7)
	MOVE.l Tfilenamestr,d0
	ALibJsr $cf02					 ;Free up the string
	MOVE.l (a7)+,d0
	MOVEM.l (a7)+,a4-a6
	RTS

swsTFreq:			Dc.l 0
Tfilereq:			Dc.l 0
Tfilenamestr:	Dc.l 0

._rtMfreq
	MOVEM.l a3-a6,-(a7)
	MOVE.l rtBase,a6				;Get ReqTools
	MOVEM.l d0-d1,-(a7)		 ;Stack the parameters
	MOVE.l Mfilelist,a0		 ;Get the current file list
	JSR _rtFreeFileList(a6) ;And free it
	MOVEM.l (a7)+,d0-d1		 ;Get back the params
	MOVE.l d0,a3						;The title
	LEA fname,a2						;Get filename buffer
	MOVE.l Mfilereq,a1			;The requester we have allocated
	LEA MfreqTagList,a0		 ;and its TagList
	JSR _rtFileRequestA(a6) ;Call the requester
	MOVE.l d0,Mfilelist		 ;Save the new file list entry
	MOVE.l d0,CurEntry			;And make it current
	CMP.b #0,d0						 ;Was it a cancel?
	BEQ mExit							 ;Yes, return False
	MOVE.l #-1,d0					 ;Otherwise return True
mExit:
	MOVEM.l (a7)+,a3-a6
	RTS

Mfilelist:		Dc.l 0
Mfilereq:		 Dc.l 0
MfreqTagList: Dc.l #RT_LockWindow,-1
MfreqFlags:	 Dc.l #RTFI_Flags,#FREQF_MULTISELECT
							Dc.l 0,0

CurEntry:		 Dc.l 0


._rtnxtentry
	MOVEQ #0,d0						 ;Zero characters in string
	MOVE.l CurEntry,d1			;Get the address of the current entry
	CMP #0,d1							 ;Was it a null?
	BEQ neExit							;Yes, so exit
	MOVE.l Mfilereq,a1			;Get base of the structure
	MOVE.l 16(a1),a0				;A0 points to the directory name
	JSR _CopyString				 ;Copy the directory into the string
	CMPI.l #0,d0						;Was there a directory to copy?
	BEQ neCopName					 ;No, so we don't need the "/" char
	CMPI.b #":",-1(a3)			;Was it a volume seperator?
	BEQ neCopName					 ;Yes, don't put the "/" in
	MOVE.b #"/",(a3)+			 ;Seperate the name from the dirs
	ADDI.l #1,d0						;Increase the length pointer, too
neCopName:
	MOVE.l CurEntry,a1			;Get the address of the current entry
	MOVE.l (a1),CurEntry		;Get the next entry in the list
	ADDA.l #4,a1						;Now point to the string length
	MOVE.l (a1),d2					;And save it
	ADDA.l #4,a1						;Now a1 points to the string pointer
	MOVE.l (a1),a0					;And a0 points to the chars.
	JSR _CopyString				 ;Copy the file name over
	MOVE.b #0,(a3)+				 ;And null-terminate
neExit:
	RTS

._rtasrequest
	MOVEM.l a3-a6,-(a7)
	MOVEM.l d0-d2,-(a7)			 ;Stack the parameters
	MOVE.l 86(a1),a0					;Get the UserPort of the window
	MOVE.b 15(a0),d0					;Get the signal bit from the MsgPort
	LSL.b #1,d0
	MOVE.b d0,mymask					;And save it
	MOVEM.l (a7)+,d0-d2			 ;Get gack my parameters
	MOVE.l rtBase,a6					;Get ReqTools...
	MOVE.l d0,asRequestTitle	;The request title
	MOVE.l d1,a1							;The body text of the request
	MOVE.l d2,a2							;the gadget text
	MOVE.l #0,a3							;No rtReqInfo
	MOVE.l #0,a4							;No argarray
	MOVE.l d0,asRequestTitle	;The address of the title string
	LEA asRequestTagList,a0	 ;My tag list
	JSR _rtEZRequestA(a6)		 ;Call the function
	CMPI.l #CALL_HANDLER,d0	 ;Is the requester up?
	BNE asReqExit						 ;No, return false
	MOVE.w #-1,d0						 ;otherwise return true
asReqExit
	MOVEM.l (a7)+,a3-a6
	RTS											 ;Return (with result in d0)

mymask:			 Dc.b 0
asSpare:			Dc.b 0
myhandler:		Dc.l 0
sigs:				 Dc.l 0
asRequestTagList:
							Dc.l #RT_ReqPos
asRequestPos: Dc.l #REQPOS_CENTERSCR
							Dc.l #RT_LockWindow,-1
							Dc.l #RTEZ_ReqTitle
asRequestTitle:
							Dc.l 0
							Dc.l #RT_ReqHandler,myhandler
							Dc.l 0,0

._rtcheckasreq
	MOVE.l a6,-(a7)
	MOVE.l rtBase,a6					;Get ReqTools...
	MOVE.l myhandler,a1			 ;The handler...
	MOVE.l #0,a0							;No TagList
	MOVE.l sigs,d0
	JSR _rtReqHandlerA(a6)		;Call the function
	CMPI.l #CALL_HANDLER,d0	 ;Is the requester still up?
	BNE caReqExit						 ;No, return false
	MOVE.w #-1,d0						 ;otherwise return true
caReqExit
	MOVE.l (a7)+,a6
	RTS											 ;Return (with result in d0)

._rtendasreq
	MOVE.l a6,-(a7)
	MOVE.l rtBase,a6					;Get ReqTools...
	MOVE.l myhandler,a1			 ;The handler...
	LEA endreqTL,a0					 ;The TagList
	MOVE.l sigs,d0
	JSR _rtReqHandlerA(a6)		;Call the function
	MOVE.l (a7)+,a6
	RTS											 ;Return (with result in d0)

endreqTL:	 Dc.l #RTRH_EndRequest,0
						Dc.l 0,0

._rtver
	MOVE.l rtBase,a1					;Get ReqToolsBase
	MOVE.w $14(a1),d0
	RTS

._rtrev
	MOVE.l rtBase,a1					;Get ReqToolsBase
	MOVE.w $16(a1),d0
	RTS

._rtasPrequest
	MOVEM.l a3-a6,-(a7)
	MOVEM.l d0-d1,-(a7)			 ;Stack the parameters
	MOVE.l 86(a1),a0					;Get the UserPort of the window
	MOVE.b 15(a0),d0					;Get the signal bit from the MsgPort
	LSL.b #1,d0
	MOVE.b d0,myPmask				 ;And save it
	MOVEM.l (a7)+,d0-d1			 ;Get gack my parameters
	MOVE.l rtBase,a6					;Get ReqTools...
	MOVE.l d0,a2							;Title of requester
	MOVE.l #0,a3							;No ReqInfo
	MOVE.l d1,FirstPCol			 ;First colour selected
	LEA asPRequestTagList,a0	;TagList
	JSR _rtPaletteRequest(a6)
	CMPI.l #CALL_HANDLER,d0	 ;Is the requester up?
	BNE asPReqExit						;No, return false
	MOVE.w #-1,d0						 ;otherwise return true
asPReqExit
	MOVEM.l (a7)+,a3-a6
	RTS											 ;Return (with result in d0)

myPmask:			Dc.b 0
asPSpare:		 Dc.b 0
myPhandler:	 Dc.l 0
Psigs:				Dc.l 0
asPRequestTagList:
							Dc.l #RTEZ_ReqTitle
asPRequestTitle:
							Dc.l 0
							Dc.l #RTPA_Color
FirstPCol:		Dc.l 0
							Dc.l #RT_ReqHandler,myPhandler
							Dc.l 0,0

._rtcheckasPreq
	MOVE.l a6,-(a7)
	MOVE.l rtBase,a6					;Get ReqTools...
	MOVE.l myPhandler,a1			;The handler...
	MOVE.l #0,a0							;No TagList
	MOVE.l Psigs,d0
	JSR _rtReqHandlerA(a6)		;Call the function
	CMPI.l #CALL_HANDLER,d0	 ;Is the requester still up?
	BNE caPReqExit						;No, return false
	MOVE.w #-1,d0						 ;otherwise return true
	MOVE.l (a7)+,a6
	RTS
caPReqExit
	MOVE.w #0,d0
	MOVE.l (a7)+,a6
	RTS											 ;Return (with result in d0)

._rtendasPreq
	MOVE.l a6,-(a7)
	MOVE.l rtBase,a6					;Get ReqTools...
	MOVE.l myPhandler,a1			;The handler...
	LEA endPreqTL,a0					;The TagList
	MOVE.l Psigs,d0
	JSR _rtReqHandlerA(a6)		;Call the function
	MOVE.l (a7)+,a6
	RTS											 ;Return (with result in d0)

endPreqTL:	Dc.l #RTRH_EndRequest,0
						Dc.l 0,0
