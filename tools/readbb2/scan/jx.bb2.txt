; ascii translation of /Users/simon/Google Drive/amiga/w/fdrive/mark/dev/jx.bb2
+
;------------------- macros required by joy ----------------------;

DEFTYPE.l

JMP start

Macro initjoytrans
BSR joytrans+32
End Macro

Macro finitjoytrans
BSR joytrans+36
End Macro

Macro initjoyregs
BSR joytrans+40
End Macro

Macro writememory
BSR joytrans+44
End Macro

Macro readmemory
BSR joytrans+48
End Macro

IncBin joytrans

start

#oldopenlibrary=-408
#closelibrary=-414
#putmsg=-366
#getmsg=-372
#replymsg=-378
#adddevice=-432
#openresource=-498
#allocsignal=-330
#signal=-324
#waitsignal=-318
#freesignal=-336
#opendevice=-444
#closedevice=-450
#doio=-456
#sendio=-462
#checkio=-468
#waitio=-474
#abortio=-480
#addintserver=-168
#remintserver=-174
;
#write=-48
#output=-60
;
#waittof=-270
;
#adddosnode=-150
#makedosnode=-144
;
#allocpotbits=-6
#freepotbits=-12
#writepotgo=-18
;
#ioerr_openfail=-1
#ioerr_aborted=-2
#ioerr_nocmd=-3
#ioerr_badlength=-4
;
#io_device=20
#io_unit=24
#io_command=28
#io_flags=30
#io_error=31
#io_actual=32
#io_length=36
#io_data=40
#io_offset=44
;
#iotd_count=48
#iotd_seclabel=52
;
JSR initjoy

JSR allocjoy

If NumPars<>2
	err:##[$FF8C] 0
	NPrint "Usage: JX I/O filename":Goto out
EndIf

Select LCase$(Left$(Par$(1),1))
Case "i"	;input
;	.input
	If ReadMem(0,Par$(2))=0 Then Goto err3
	;
	MOVEM.l a4-a6,-(a7):JSR initjoyregs
	;
	LEA flen(pc),a0:MOVEQ #4,d0:BSR readmemory:SNE chkerr
	MOVE.l flen(pc),d0
	MOVEQ #1,d1:MOVE.l 4,a6:JSR -198(a6):MOVE.l pot(pc),a6
	MOVE.l d0,fmem:BNE allocok
	;
	MOVEM.l (a7)+,a4-a6:Goto err2
	;
	allocok
	MOVE.l d0,a0:MOVE.l flen(pc),d0:BSR readmemory:SNE chkerr
	;
	MOVEM.l (a7)+,a4-a6
	;
	m=Peek.l(?fmem):l=Peek.l(?flen)
	;
	If Peek.w(?chkerr)
		NPrint "Checksum error...sorry"
	Else
		NPrint "Checksum OK...whew!":Exists 0,m,l
	EndIf
	;
Case "o"	;output
	;	.output
	If WriteMem(0,Par$(2))
		l=FileSeek(0)
		m=##[$FE97](l,1)
		If m=0
			err2
			##[$FF8C] 0:NPrint "Can't allocate file memory (c.o. lazy programming)":Goto out
		EndIf
		##[$BE14] 0,m,l
		Poke.l ?fmem,m:Poke.l ?flen,l
		;
		MOVEM.l a4-a6,-(a7):JSR initjoyregs
		LEA flen(pc),a0:MOVEQ #4,d0:BSR writememory
		MOVE.l fmem(pc),a0:MOVE.l flen(pc),d0:BSR writememory
		MOVEM.l (a7)+,a4-a6
		;
	Else
		err3
		##[$FF8C] 0:NPrint "Can't open file":Goto out
	EndIf
Default
	Goto err
End Select

out
If m Then ##[$FE99] m,l
Gosub freejoy:End

chkerr:Dc 0
fmem:Dc.l 0 ;memory
flen:Dc.l 0 ;length
color:Dc 8

;---------------------OK, joy hardware routines-------------------;

.initjoy	;only call me once!
MOVE.l 4,a6:LEA potname(pc),a1:JSR openresource(a6):MOVE.l d0,pot:RTS

potname:Dc.b "potgo.resource",0:Event
pot:Dc.l 0

.allocjoy ;return eq if opened OK
;
MOVE.l a6,-(a7)
MOVE.l pot,a6:MOVE #$f000,d0:JSR allocpotbits(a6)	;alloc pot bits!
CMP #$f000,d0:BNE 'notok
MOVE #$f000,d0:MOVE #$f000,d1:JSR writepotgo(a6):BSET #7,$bfe201:BSET #7,$bfe001
MOVE.l (a7)+,a6:MOVEQ #0,d0:RTS
'notok:MOVE.l (a7)+,a6
;
##[$FF8C] 0
;
MOVEQ #-1,d0:RTS

.freejoy
MOVE.l pot,a6:MOVE #$f000,d0
JMP freepotbits(a6)

.initjoyregs
LEA $bfe001,a2:LEA $dff034,a3
LEA $dff00c,a4:MOVE.l pot(pc),a5
MOVE #128,d4:MOVEQ #1,d5:RTS

Macro pause
TST.b (a2):TST.b (a2):TST.b (a2):TST.b (a2)
TST.b (a2):TST.b (a2)
End Macro

Macro set_ws_1 ;set write sync output to 1
ANDI #$e000,$28(a5):MOVE $28(a5),(a3)
End Macro

Macro set_ws_0 ;set write sync output to 0
ORI #$1000,$28(a5):MOVE $28(a5),(a3)
End Macro

Macro set_rs_1 ;set read sync output to 1
ANDI #$b000,$28(a5):MOVE $28(a5),(a3)
End Macro

Macro set_rs_0 ;set read sync output to 0
ORI #$4000,$28(a5):MOVE $28(a5),(a3)
End Macro

Macro wait_ws_1 ;wait for write sync input to =1
!pause:'ww1`@:MOVE #$f00,$dff180:BTST #1,1(a4):BEQ 'ww1`@
End Macro

Macro wait_ws_0 ;wait for write sync input to =0
!pause:'ww0`@:MOVE #$800,$dff180:BTST #1,1(a4):BNE 'ww0`@
End Macro

Macro wait_rs_1 ;wait for read sync input to =1
!pause:'wr1`@:MOVE #$008,$dff180:BTST #1,(a4):BEQ 'wr1`@
End Macro

Macro wait_rs_0 ;wait for read sync input to =0
!pause:'wr0`@:MOVE #$008,$dff180:BTST #1,(a4):BNE 'wr0`@
End Macro

Macro readbit	 ;return bit (0 or 1) in d6
!pause:MOVE.b (a4),d6:MOVE.b d6,d3
LSR.b d5,d6:EOR.b d3,d6:AND d5,d6
End Macro

Macro writebit	;write bit (carry)
SCC d6:AND d4,d6:ANDI.b #$7f,(a2):OR.b d6,(a2)
End Macro

.readmemory ;a0=buffer, d0=length	 ;return eq if checksum OK!
;
MOVEM.l d0/d7/a1,-(a7):SUB.l a1,a1:LSR.l #2,d0:BEQ 'skip:SUBQ #1,d0
;
'lloop
MOVEQ #15,d1	;in groups of 2 bits!
'loop
;
!wait_rs_1:!readbit:ADD.l d7,d7:OR d6,d7:!set_rs_1
!wait_rs_0:!readbit:ADD.l d7,d7:OR d6,d7:!set_rs_0
;
DBF d1,'loop:MOVE.l d7,(a0)+:ADD.l d7,a1:DBF d0,'lloop
;
'skip:MOVE.l (a7)+,d0:AND #3,d0:BEQ 'done:SUBQ #1,d0
;
'bloop
MOVEQ #3,d1
'loop2
;
!wait_rs_1:!readbit:ADD.b d7,d7:OR d6,d7:!set_rs_1
!wait_rs_0:!readbit:ADD.b d7,d7:OR d6,d7:!set_rs_0
;
DBF d1,'loop2:MOVE.b d7,(a0)+:EXT d7:ADD d7,a1:DBF d0,'bloop
;
'done:MOVE.l (a7)+,d7:BSR readlong:CMP.l d0,a1:MOVE.l (a7)+,a1:RTS

.readlong
;
MOVEQ #15,d1
'loop
;
!wait_rs_1:!readbit:ADD.l d0,d0:OR d6,d0:!set_rs_1
!wait_rs_0:!readbit:ADD.l d0,d0:OR d6,d0:!set_rs_0
;
DBF d1,'loop:RTS

.writememory	;a0=buffer, d0=length
;
MOVEM.l d0/d7/a1,-(a7):SUB.l a1,a1:LSR.l #2,d0:BEQ 'skip:SUBQ #1,d0
;
'lloop
MOVEQ #15,d1:MOVE.l (a0)+,d7:ADD.l d7,a1
'loop
;
ADD.l d7,d7:!writebit:!set_ws_1:!wait_ws_1
ADD.l d7,d7:!writebit:!set_ws_0:!wait_ws_0
;
DBF d1,'loop:DBF d0,'lloop
;
'skip:MOVE.l (a7)+,d0:AND #3,d0:BEQ 'done:SUBQ #1,d0
;
'bloop
MOVEQ #3,d1:MOVE.b (a0)+,d7:EXT d7:ADD d7,a1
'loop2
;
ADD.b d7,d7:!writebit:!set_ws_1:!wait_ws_1
ADD.b d7,d7:!writebit:!set_ws_0:!wait_ws_0
;
DBF d1,'loop2:DBF d0,'bloop
;
'done:MOVE.l (a7)+,d7:MOVE.l a1,d0:MOVE.l (a7)+,a1
;
.writelong
MOVEQ #15,d1
'loop
;
ADD.l d0,d0:!writebit:!set_ws_1:!wait_ws_1
ADD.l d0,d0:!writebit:!set_ws_0:!wait_ws_0
;
DBF d1,'loop:RTS

temp:Dc.l 0

.writeword
LEA temp(pc),a0:MOVE.l (a0),-(a7):MOVE d0,(a0)
MOVEQ #2,d0:BSR writememory:MOVE.l (a7)+,temp:RTS

.readword
LEA temp(pc),a0:MOVE.l (a0),-(a7):MOVEQ #2,d0:BSR readmemory
MOVE temp(pc),d0:MOVE.l (a7)+,temp:RTS

.writebyte
LEA temp(pc),a0:MOVE.l (a0),-(a7):MOVE.b d0,(a0)
MOVEQ #1,d0:BSR writememory:MOVE.l (a7)+,temp:RTS

.readbyte
LEA temp(pc),a0:MOVE.l (a0),-(a7):MOVEQ #1,d0:BSR readmemory
MOVE.b temp(pc),d0:MOVE.l (a7)+,temp:RTS

