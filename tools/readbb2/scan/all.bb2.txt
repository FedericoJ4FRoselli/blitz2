; ascii translation of /Users/simon/Google Drive/amiga/w/ABCSHIT/blitzlibs/all.bb2
+ #local					 = 13
 #base						=	2
 #stack					 =	1
 #trash					 =	0
#_d0						 =	 3
#_d1						 =		4
#_d2						 =		22
#_d3						 =		23
#_d4						 =		24
#_d5						 =		25
#_d6						 =		26
#_d7						 =		27
#_a0						 =		5
#_a1						 =		6
#_a2						 =		28
#_a3						 =		29
;_a4						=		base
#_a5						 =		30
#_a6						 =		31
#SetExcHandler = -516
#RemExcHandler = -522
#CauseInterruptPPC = -108
#SetExcMMU				= -576
#ClearExcMMU			 = -582
#SetCache					= -510
 Macro citf
								##[$ECB3]	 `2,`2,-$8000
								##[$ECE1]			`2,_CITF_TEMP+4-_base(r2)
								##[$ECED]			`1,_CITF_TEMP-_base(r2)
								##[$EC83]		`1,`1,f31
	End Macro
Macro tofloat
 ADD.l d0,d0
 BEQ 'lab1`@
 EORI.b #$80,d0
 ASR.b #1,d0
 SUBI.b #-$7e,d0
 SWAP d0
'lab1`@
 ROL.l #7,d0
End Macro
##[$EC89]
Macro lf
##[$ECED] `1,`2-_base(r2)
End Macro
Macro ls
##[$ECEB] `1,`2-_base(r2)
End Macro
Macro sw
##[$ECE1] `1,`2-_base(r2)
End Macro
Macro lw
##[$ECDE] `1,`2-_base(r2)
End Macro
Macro sh
##[$ECE9] `1,`2-_base(r2)
End Macro
Macro lh
##[$ECE5] `1,`2-_base(r2)
End Macro
Macro lhs
##[$ECE7] `1,`2-_base(r2)
End Macro
Macro ss
##[$ECEF] `1,`2-_base(r2)
End Macro
Macro _sf
##[$ECF1] `1,`2-_base(r2)
End Macro
Macro CALLPOWERPC
##[$ECDE] r3,_PowerPCBase-_base(r2)
##[$ECDE] r0,`1+2(r3)
##[$ECA4] r0
##[$ED0E]
End Macro
Macro epilog
								##[$ECDE]				 r1,0(r1)
								##[$ECDE]				 r13,-4(r1)
								##[$ECDE]				 r0,8(r1)
								##[$ECA4]				trash
								##[$ECAA]
End Macro
Macro prolog
								##[$ECA5] r0
								##[$ECE1]	r0,8(r1)
								##[$ECE1]	r13,-4(r1)
								SUBI r13,r1,4
								##[$ECE2] r1,-1052(r1)
End Macro
Macro initasm					;getregisters d0-d7 use this as first line
											 ;for plugins
MOVE.l a5,basicvars
i.l=0
MOVEM.l (a7)+,d0-d7/a0-a6
LEA 12(a7),a7
BRA LBLXC1
basicvars:Dc.l 0;,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
LBLXC1
End Macro
Macro exitasm				 ;put registers d0-d7 for end plugin
											;call from asm before end instruction
LEA -12(a7),a7
MOVEM.l d0-d7/a0-a6,-(a7)
MOVE.l basicvars,a5
End Macro
Macro basic					 ;stores registers from asm prg
											;to use basic Instructions (not use in Interrupts)
MOVE.l a0,-(a7)
MOVE.l $4,a0
MOVE.l $114(a0),a0
MOVE.l $3a(a0),a0
MOVEM.l d1-d7/a0-a6,$8(a0)
MOVE.l (a7)+,$24(a0)
MOVE.l 4(a0),a4
MOVE.l basicvars,a5
End Macro
Macro asm						 ;reloads asm registers
MOVE.l $4,a0
MOVE.l $114(a0),a0
MOVE.l $3a(a0),a0
MOVE.l a4,4(a0)
MOVEM.l $8(a0),d1-d7/a0-a6
End Macro
Macro basica7				;stores asm register on stack
										 ;call asma7 on same stackpos
MOVEM.l d1-d7/a0-a6,-(a7)
MOVE.l basicvars,a5
End Macro
Macro asma7
MOVEM.l (a7)+,d1-d7/a0-a6
End Macro
Macro newidcmp			 ;gets a own idcmp for wizard Windows
 Poke ##[$C087]+$56,0
 i.l=Peek.l(##[$C087]+$52)
 ##[$FF95] ##[$C087],i
End Macro
Macro freenewidcmp	 ;free own idcmp for wizard windows
##[$FF95] ##[$C087],0
End Macro
Macro	newsigtask		;put current task in windows->UserPort->SigTask
MOVE.l d2,-(a7)
i.l=##[$C087]
MOVE.l d0,d2
MOVE.l $4,a6
SUB.l a1,a1
JSR -$126(a6)
MOVE.l d2,a0
MOVE.l $56(a0),a0
MOVE.l d0,$10(a0)
MOVE.l (a7)+,d2
End Macro

Macro geta7var			;get max 7 long Variables which were put from C
										;Functions to stack !use basica7 before call
CNIF `0=7
MOVE.l 84(a7),d0
`7=##[$C0A0]
CEND
CNIF `0=>6
MOVE.l 80(a7),d0
`6=##[$C0A0]
CEND
CNIF `0=>5
MOVE.l 76(a7),d0
`5=##[$C0A0]
CEND
CNIF `0=>4
MOVE.l 72(a7),d0
`4=##[$C0A0]
CEND
CNIF `0=>3
MOVE.l 68(a7),d0
`3=##[$C0A0]
CEND
CNIF `0=>2
MOVE.l 64(a7),d0
`2=##[$C0A0]
CEND
CNIF `0=>1
MOVE.l 60(a7),d0
`1=##[$C0A0]
CEND
End Macro
						Macro ENUM	;[new base]
						CNIF `0=0
EOFFSET		 SET		 0
						CELSE
EOFFSET		 SET		 `1
						CEND
						End Macro

						Macro	 EITEM;label
`1					EQU		 EOFFSET
EOFFSET		 SET		 EOFFSET+1
						End Macro
Macro screen_	;num,title,prefsfile,mode mode 1=always screenmode
				If `4=1
					i=0
				 Else
					 i=##[$FE01] (`3,1005)
				End If

			 If i
			 ##[$FE03] i,&scr.screeninfo,SizeOf.screeninfo
			 ##[$FE02] i
			 Else
			 FindScreen (0)
			 *m.screeninfo=ASLScreenRequest(31)
			 If *m
					##[$FEDB] *m,&scr,SizeOf .screeninfo
					i=##[$FE01] (`3,1004)
					##[$FE04] i,&scr,SizeOf .screeninfo
					##[$FE02] i
					End If
			 End If
			 ScreenTags `1,`2,$80000032,scr\id,$80000023,scr\width,$80000024,scr\height,$80000025,scr\dep,$80000039,scr\autoscroll
End Macro
NEWTYPE .screeninfo
				id.l
				width.l
				height.l
				dep.w
				overscan.w
				autoscroll.w
				bmapwidth.l
				bmapheight.l
End NEWTYPE