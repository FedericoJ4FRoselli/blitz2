; ascii translation of /Users/simon/Google Drive/amiga/w/lha/bbold/bum8/bombs/Bombs209.bb2
;
;
; Bombs v 0209
;
;
; Created by ARV
;
; started 01-06-1994
; BLITZ2 Version : 01-06-1994
; last modified 06-01-1995

; Constants used to denote gadget numbers
; Note : They all have a unique number
;				Dereference gadgets with these constants

.AllConstants

; Constants for game-settings
#maxWide=100
#maxHigh=100
#minWide=5
#minHigh=5
#maxDisplayWide=25
#maxDisplayHigh=15
#minDisplayWide=5
#minDisplayHigh=5
#maxPercentageBombs=25
#minPercentageBombs=10
#maxSquares=4000
#maxRatings=11
#maxProgressFrame=20

#peekBomb=1
#peekState=2

; Regions of the Game
#closeRegion=1
#pauseRegion=2
#restartRegion=3
#progressRegion=4
#gridRegion=5

; Strings cannot be constants, however...
gameStartTitle$="BOMBS AWAY!"

; Main Program Gadgets
#gameGad=1
#settingsGad=2
#scoresGad=3
#helpGad=4
#exitGad=5

#nextGad=11
#menuGad=12
#returnGad=13

; =======================================

NEWTYPE.bombtype
		typenr.l
End NEWTYPE	;bombtype

NEWTYPE.squarestype
		hasBomb.b								 ; various -ve numbers to denote the bombs...
															; ...or +ve numbers for neighboring bombs
		state										 ; 0 = not yet clicked on (covered square)
															; 1 = clicked on by the LMB (half covered)
															; 2 = clicked on by the LMB (fully covered)
															; 3 = clicked on by the RMB (half marked)
															; 4 = clicked on by the RMB (fully marked)
															; these states can be made symbolic...
End NEWTYPE	;squarestype


NEWTYPE.downsquaretype
		num.l
		xpos
		ypos
End NEWTYPE	;downsquaretype


NEWTYPE.scrollarrowtype
		num.b
		displayed
		xpos.w
		ypos
End NEWTYPE	;scrollarrowtype


NEWTYPE.ratingstype
		name$										 ; name of the person
		value$										; time in seconds for marking the bombs
End NEWTYPE	;ratingstype


NEWTYPE.persontype
		name$															 ; name of the person
		ratings.ratingstype[#maxRatings]		; time in seconds for marking the bombs
End NEWTYPE	;persontype


NEWTYPE.progresstype
		xcoord.l
		ycoord
		startXCoord
		startYCoord
		endXCoord
		endYCoord
		currentFrame
		progressFrames.b[#maxProgressFrame]
End NEWTYPE	;progresstype


NEWTYPE.gameVars
		xcoord.l									; horizontal mouse-click
		ycoord										; vertical mouse-click
		totalSquares							; total number of squares
		openedSquares						 ; current number of opened squares
		totalBombs								; number of total bombs in the grid
		markedBombs							 ; number of bombs marked
		falseBombs								; number of wrong marks
		timeInProgress						; timing for game in progress in seconds
		rating										; rating of performance for high-scores
		wide											; width of playing field
		high											; height of playing field
		oldWide									 ; check for default settings
		oldHigh									 ; check for default settings
		leftWide									; number of columns to the right of top-left
		leftHigh									; number of rows above top-left
		displayXCoord						 ; left-edge of the display grid
		displayYCoord						 ; top-edge of the display grid
		LMBDownNum								; square pressed down on
		RMBDownNum								; square pressed down on
		displayWide.b						 ; width of displayed grid
		displayHigh							 ; height of displayed grid
		oldDisplayWide						; check for default settings
		oldDisplayHigh						; check for default settings
		percentageBombs					 ; percentage of bombs
		oldPercentageBombs				; check for default settings
		gameInProgress						; are we in the middle of a game?
		LMBDownRegion						 ; region of LMB press
		RMBDownRegion						 ; region of RMB press
		closeState								; state of close gadget
		pauseState								; state of pause gadget
		restartState							; state of restatr gadget
		rewriteRatings						; boolean for rewriting best ratings
		progressiveGame					 ; boolean for a continuous game or a casual one
		oldProgressiveGame				; check for default settings
		bombs.bombtype						; type of bomb
		person.persontype				 ; details of the player
		square.squarestype[#maxSquares]	 ; grid -- finetune later on
		ratings.ratingstype[#maxRatings]	; list of the best ratings
		downSquare.downsquaretype[9]			; square(s) selected with a Mouse Button down
		progressBar.progresstype					; keeps track of the progress-runner
		scrollArrows.scrollarrowtype[11]	; keeps track of the scroll-arrows
End NEWTYPE	;gameVars


NEWTYPE.OSInput
		iMouseX.l
		iMouseY
		ev
		code
		qual
End NEWTYPE	;OSInput


NEWTYPE.holdtype
		num.l
		xpos
		ypos
		hasBomb
End NEWTYPE	;holdtype


NEWTYPE.selectarrowtype
		xpos.l			; xpos of arrow
		ypos				; ypos of arrow
		state			 ; up or down
End NEWTYPE	;selectarrowtype

; ---------------------------------------

Macro Random
; Random number between the first and second parameters
		Rnd( `2 - `1) + `1
End Macro	;Random


Macro ReadLines
; This is to read from data statements for the help file
		WBox 4,11, 636,170, 0
		WLocate 1,1
		For i=1 To 17
				Read theLine$
				NPrint theLine$
		Next i
End Macro	;ReadLines

; ---------------------------------------

Dim hold.holdtype(1200)
Dim theArrow.selectarrowtype(10)
DEFTYPE.gameVars bomb
DEFTYPE.gameVars *bombptr
DEFTYPE.OSInput bombinput
DEFTYPE.OSInput *biptr
DEFTYPE.l

; =======================================
; =======================================

.SetupFirst
AMIGA	; THIS PROGRAM SHOULD NEVER USE BLITZ-MODE

If NTSC
		#oneSecDelay=60		 ; use with VWait
		ntscOffset=10			 ; used for displaying the game-grid
		DateFormat 1
Else
		#oneSecDelay=50
		ntscOffset=-10
		DateFormat 0
End If

; ---------------------------------------

WBStartup
##[$80CB]
##[$80CC]

; ---------------------------------------

SetErr
		End
End SetErr

; =======================================
; =======================================

Statement GetUserInput{ *biptr.OSInput}
; Input via "WaitEvent" for the main program loop
; Keeping it system friendly
.GetUserInput
##[$80CA] *biptr
		\iMouseX=0
		\iMouseY=0
		\ev=0
		\code=0
		\qual=0

		\ev=WaitEvent

		\iMouseX=EMouseX
		\iMouseY=EMouseY
		\code=EventCode
		\qual=EventQualifier
End Statement	;GetUserInput

; =======================================

Statement GetGameInput{ *biptr.OSInput}
; Input via "Event" for the playing of the game
; For easy time updates
; Should get by with only mouse-clicks
.GetGameInput
##[$80CA] *biptr
		\iMouseX=0
		\iMouseY=0
		\ev=0
		\code=0
		\qual=0
		\ev=Event

		If \ev<>0
				\iMouseX=EMouseX
				\iMouseY=EMouseY
				\code=EventCode
				\qual=EventQualifier
		End If
End Statement	;GetGameInput

; =======================================
; =======================================

Statement ResetTheGadget{ winID.b, gadList.b, gadID.b, gadState.b}
; THIS WILL REDRAW A TEXTGADGET THAT NEEDS TO BE RESET BY THE PROGRAM
; RATHER THAN THE USER - PARAMETERS ARE SELF-EXPLANATORY - CHECK FOR TYPES!
.ResetTheGadget
		Borders gadList, gadID, gadState
		Redraw winID, gadID
End Statement	;ResetTheGadget

; =======================================

Statement CleanExit{ *bombptr.gameVars}
; FREE ALL OBJECTS, WINDOWS ETC
; Reset the default values in "BombsDefaults"
; Essential for executables
.CleanExit
##[$80CA] *bombptr
		If \wide<>\oldWide Then Gosub WritingDefaults
		If (NOT alreadyDone.b) AND (\high<>\oldHigh) Then Gosub WritingDefaults
		If (NOT alreadyDone) AND (\displayWide<>\oldDisplayWide) Then Gosub WritingDefaults
		If (NOT alreadyDone) AND (\displayHigh<>\oldDisplayHigh) Then Gosub WritingDefaults
		If (NOT alreadyDone) AND (\percentageBombs<>\oldPercentageBombs) Then Gosub WritingDefaults
		If (NOT alreadyDone) AND (\progressiveGame<>\oldProgressiveGame) Then Gosub WritingDefaults
		If \rewriteRatings Then Gosub WritingRatings

		Free localstat 0
		Free allocst 0
		For i.l=0 To 51
				Free MidHandle i
		Next i
		Statement Return

WritingDefaults
		If OpenFile(0,"BombsDefaults")
				Fields 0, abc.l, fde.l, ghi.l, jkl.l, mno.l, pqr.l
				abc = \wide
				fde = \high
				ghi = \displayWide
				jkl = \displayHigh
				mno = \percentageBombs
				pqr = \progressiveGame
				Put 0,0
				CloseFile 0
				alreadyDone = True
		End If
		Return

.WritingRatings
		MaxLen abc$ = 25
		MaxLen fde$ = 4
		If OpenFile(1,"BombsRatings")
				Fields 1, abc$, fde$
				For i=1 To 10
						abc$ = \ratings[i]\name
						fde$ = \ratings[i]\value
						Put 1,i-1
				Next i
				CloseFile 1
		End If
		Return
End Statement	;CleanExit

; =======================================
; =======================================

XInclude "BombsScores.bb2"
XInclude "BombsSettings.bb2"
XInclude "BombsFuncs.bb2"
XInclude "BombsDisplay.bb2"
XInclude "BombsGamePlay.bb2"

; =======================================
; =======================================

.MainProgram
		*biptr=bombinput
		*bombptr=bomb
		Gosub InitialiseAll
		Gosub InitialiseVars
		keep.b=True
		Repeat
				GetUserInput{ *biptr}
				Gosub Events
		Until NOT keep
		CleanExit{ *bombptr}
End

; ---------------------------------------

.Events
		Select *biptr\ev
			Case $2
			Case $4
			Case $8													 ; Left Mouse Button
				Gosub HandleMouseButton
			Case $20													; Gadget Down event
				Gosub HandleGadgetDown
			Case $40													; Gadget Up event
				Gosub HandleGadgetUp
			Case $100												 ; Menu event
				Gosub HandleMenu
			Case $200												 ; Close gadget
				keep=False
			Case $400												 ; Keypress - DON'T USE
				Gosub HandleKeys
			Case $8000												; Disk inserted
			Case $10000											 ; Disk removed
			Case $40000											 ; Window activated
			Case $80000											 ; Window de-activated
		End Select
Return

; -------------------------------------------------------------

.HandleMouseButton
##[$80CA] *bombptr
		Select *biptr\code
			Case $68											; LMB Down
			Case $E8											; LMB Up
			Case $69											; RMB Down
			Case $E9											; RMB Up
		End Select
Return

; ---------------------------------------

.HandleGadgetDown
Return

; ---------------------------------------

.HandleGadgetUp
		ResetTheGadget{ EventWindow, EventWindow, GadgetHit, Off}
		theWin.b=EventWindow
		Select GadgetHit
			Case #gameGad
				TheGame{ *bombptr, *biptr}
			Case #settingsGad
				TheSettings{ *bombptr, *biptr}
			Case #scoresGad
				TheScores{ *bombptr}
			Case #helpGad
				Gosub HelpLabel
			Case #exitGad
				keep=False
		End Select
Return

; ---------------------------------------

.HandleMenu
Return

; ---------------------------------------

.HandleKeys
;		Print Inkey$
Return

; =======================================
; =======================================

.InitialiseAll
AMIGA
; Screen, Colours, Gadgets, Windows, Objects etc
		If ExecVersion<=34
				SetString 1,2
		Else
				SetString 2,1
		End If
		StringText$ 2,1
; GADGETLIST 0 -- Gadgets for Main Menu
		workstart 0, -372, 70-DispHeight, 0|1|2|5, #gameGad, "	Play			 "
		workstart 0, -372, 90-DispHeight, 0|1|2|5, #settingsGad, "	Settings	 "
		workstart 0, -372, 110-DispHeight, 0|1|2|5, #scoresGad, "	Scores		 "
		workstart 0, -372, 130-DispHeight, 0|1|2|5, #helpGad, "	Help File	"
		workstart 0, -372, 150-DispHeight, 0|1|2|5, #exitGad, "	Exit			 "

		workstart 4, -460, 185-DispHeight, 0|1|2|5, #nextGad, "	NEXT	"
		workstart 4, -360, 185-DispHeight, 0|1|2|5, #menuGad, "	MENU	"
		workstart 4, -260, 185-DispHeight, 0|1|2|5, #returnGad, "	EXIT	"

		LoadMedModule 1,"BombsExplo.med"

		LoadShapes 0,71,"bombsdata15"
		casestrcomp 0,"BombsObjects20"

		allocst 0, 10, "BOMBS v1.0 by ARV		Written in BLITZ BASIC 2 v1.70"

		DefaultIDCMP $8| $20| $40| $200| $40000| $80000
		localstat 0, 0, 10, 640, DispHeight-10, $8| $1000, "BOMBS", 0, 1, 0
		WLocate 284,25:Print "MAIN MENU"
Return

; ---------------------------------------

.InitialiseVars
##[$80CA] *bombptr
AMIGA
; This may look clumsy, but it covers all error cases
		If ##[$BE15]("BombsDefaults")
				If OpenFile(0,"BombsDefaults")
						Fields 0, abc.l, fde.l, ghi.l, jkl.l, mno.l, pqr.l
						Get 0,0
						\wide = abc
						\high = fde
						\displayWide = ghi
						\displayHigh = jkl
						\percentageBombs = mno
						\progressiveGame = False
						CloseFile 0
				Else
						\wide = #maxDisplayWide
						\high = #maxDisplayHigh
						\displayWide = #maxDisplayWide
						\displayHigh = #maxDisplayHigh
						\percentageBombs = 13
						\progressiveGame = False
				End If
		Else
				\wide = #maxDisplayWide
				\high = #maxDisplayHigh
				\displayWide = #maxDisplayWide
				\displayHigh = #maxDisplayHigh
				\percentageBombs = 13
				\progressiveGame = False
		End If
		\oldWide = \wide
		\oldHigh = \high
		\oldDisplayWide = \displayWide
		\oldDisplayHigh = \displayHigh
		\oldPercentageBombs = \percentageBombs
		\oldProgressiveGame = \progressiveGame
		\bombs\typenr = -1
		\rewriteRatings = False
		\gameInProgress = False

		If ##[$BE15]("BombsRatings")
				If OpenFile(1,"BombsRatings")
						MaxLen abc$ = 25
						MaxLen fde$ = 4
						Fields 1, abc$, fde$
						For i=1 To 10
								Get 1,i-1
								\ratings[i]\name = abc$
								\ratings[i]\value = fde$
						Next i
						CloseFile 1
				End If
		Else
				Restore DefaultRatings
				For i=1 To 10
						Read abcde$, edcba$
						\ratings[i]\name = abcde$
						\ratings[i]\value = edcba$
				Next i
		End If
		\ratings[0]\name = "1234567890123456789012345"
		\ratings[0]\value = "12345"
Return

.HelpLabel
##[$80CA] *biptr
		Use allocst 0
		DefaultIDCMP $8| $20| $40| $200| $40000| $80000
		localstat 4, 0, 10, 640, DispHeight-10, $8| $1000, "BOMBS HELP", 0, 1, 4

		Gosub WriteMenu
		helpPage.b = 0
		keepHelp.b = True
		Repeat
		GetUserInput{ *biptr}
		Select \ev
			Case $8
				If (helpPage=0) AND (\code=$E8) Then Gosub SelectHelp
			Case $20
			Case $40
				Gosub HandleHelpGadgets
			Case $200
				keepHelp = False
		End Select
		Until NOT keepHelp
		Free localstat 4
Return

.HandleHelpGadgets
		ResetTheGadget{ EventWindow, EventWindow, GadgetHit, Off}
		theWin.b=EventWindow
		Select GadgetHit
			Case #nextGad
				helpPage = helpPage + 1
				If helpPage=1 Then Restore GamePlayLabel
				If helpPage<8 Then !ReadLines Else helpPage=0:Gosub WriteMenu
			Case #menuGad
				helpPage = 0
				Gosub WriteMenu
			Case #returnGad
				keepHelp = False
		End Select
Return

.WriteMenu
		WBox 4,11, 636,170, 0
		WLocate 1,1
		WLocate 250,20:Print "1	Gameplay"
		WLocate 250,40:Print "2	Options"
		WLocate 250,60:Print "3	Scores"
		WLocate 250,80:Print "4	Gadgets"
		WLocate 250,100:Print "5	Strategy"
		WLocate 250,120:Print "6	About"
		WLocate 250,140:Print "7	Miscelany"
Return

.SelectHelp
		If (\iMouseY>29) AND (\iMouseY<40)
				helpPage = 1
				Restore GamePlayLabel
				!ReadLines
		End If

		If (\iMouseY>49) AND (\iMouseY<60)
				helpPage = 2
				Restore OptionsLabel
				!ReadLines
		End If

		If (\iMouseY>69) AND (\iMouseY<80)
				helpPage = 3
				Restore ScoresLabel
				!ReadLines
		End If

		If (\iMouseY>89) AND (\iMouseY<100)
				helpPage = 4
				Restore GadgetsLabel
				!ReadLines
		End If

		If (\iMouseY>109) AND (\iMouseY<120)
				helpPage = 5
				Restore StrategyLabel
				!ReadLines
		End If

		If (\iMouseY>129) AND (\iMouseY<140)
				helpPage = 6
				Restore AboutLabel
				!ReadLines
		End If

		If (\iMouseY>149) AND (\iMouseY<160)
				helpPage = 7
				Restore MiscelanyLabel
				!ReadLines
		End If

Return

.GamePlayLabel
Data$ "			 GAMEPLAY																																"
Data$ "																																							 "
Data$ "The concept of the game is the same as Minesweeper.														"
Data$ "You, the player must mark all squares that contain a bomb.										 "
Data$ "You can mark a square with the right mouse button (RMB) or open it with the		"
Data$ "left mouse button (LMB).																											 "
Data$ "If a square with a bomb is opened, then it is the end of the game.						 "
Data$ "If an empty square is marked, then the game keeps going until it is unmarked by"
Data$ "another RMB click and opened by a LMB click.																	 "
Data$ "																																							 "
Data$ "An empty square may show a number to indicate how many bombs surround it:-		 "
Data$ "ie a square showing 2 has 2 bombs in the surrounding 8 squares and a square		"
Data$ "showing 5 has 5 out of the 8 surrounding squares as bombs.										 "
Data$ "The object is now very simple: Mark all squares with a bomb and open all others"
Data$ "																																							 "
Data$ "A click with the LMB on an opened square will open all surrounding squares and "
Data$ "a click with the RMB on an opened square will mark all surrounding squares.		"

.OptionsLabel
Data$ "			 OPTIONS																																 "
Data$ "																																							 "
Data$ "There are several aspects of the game that you, the player, can adjust.				"
Data$ "You must click on the Options gadget first, then select the appropriate arrow. "
Data$ "The first of these is the size of the playing grid, width and height.					"
Data$ "The playing grid is restricted to 4000 squares, with the limits in black.			"
Data$ "The next variables are the display sizes on the screen, again with their limits"
Data$ "Then there is the amount of bombs that are hidden in the game.								 "
Data$ "Indicated as percentages, ranging from 10% to 25% (1 in 10 to 1 in 4).				 "
Data$ "																																							 "
Data$ "If the settings or scores have changed since the start of the game then these	"
Data$ "will be saved if you exit through the either EXIT or WINDOW CLOSE gadgets.		 "
Data$ "If an options file was not present then it will be created, if it could not be "
Data$ "found then the program will use its own default options.											 "
Data$ "The same applies to the scores file.																					 "
Data$ "																																							 "
Data$ "																																							 "

.ScoresLabel
Data$ "		 SCORES																																		"
Data$ "																																							 "
Data$ "The scoring of the game is based upon ratings obtained.												"
Data$ "The formula used for the ratings favours the players with the tougher options. "
Data$ "It is :																																				"
Data$ "																																							 "
Data$ "				Flags * PctBombs * PctBombs * ( OpenSquares + Flags )									"
Data$ "				-----------------------------------------------------									"
Data$ "											 ( Seconds + 250 ) * 100																 "
Data$ "																																							 "
Data$ "																																							 "
Data$ "Thus, the players willing to spend a bit of time will get on the score-board.	"
Data$ "																																							 "
Data$ "																																							 "
Data$ "																																							 "
Data$ "																																							 "
Data$ "																																							 "

.GadgetsLabel
Data$ "			 GADGETS																																 "
Data$ "																																							 "
Data$ "Bombs relies on it's own gadgets to control the game.													"
Data$ "																																							 "
Data$ "The gadgets of the main menu are pretty well self-explanatory.								 "
Data$ "On the game-screen however, there are 3 gadgets in the title-bar.							"
Data$ "																																							 "
Data$ "The left of these is used to stop the game and return to the main menu.				"
Data$ "A high score obtained in the current game will ask for the players name to be	"
Data$ "entered in the high-score table.																							 "
Data$ "																																							 "
Data$ "The middle one is for pausing the game, one click will activate this.					"
Data$ "The next click on this, the pause gadget, will restart the game.							 "
Data$ "																																							 "
Data$ "The right button is for starting a new game.																	 "
Data$ "																																							 "
Data$ "All 3 game gadgets work with either the LMB or RMB.														"

.StrategyLabel
Data$ "			 STRATEGY																																"
Data$ "																																							 "
Data$ "Handy tips for beginners :																										 "
Data$ "	 1	 Don't be afraid, it is only a game.																		 "
Data$ "	 2	 Work the corners of an open area, they're usually a bomb.							 "
Data$ "	 3	 Next work on the lowest numbers you can see, the 1's and 2's.					 "
Data$ "	 4	 Use the neighboring squares and numbers to deduce open spaces.					"
Data$ "	 5	 If you're really stuck (or stumped) then pause the game.								"
Data$ "			 This will enable you to take a more relaxed look at the grid.					 "
Data$ "			 And the scroll-arrows still work in a paused game!											"
Data$ "	 6	 Still no go? Then ask an older brother (or younger brother, a friend...)"
Data$ "	 7	 No openings still? Nothing? Then quit out! You might still Get a score. "
Data$ "	 8	 If you do want to guess, then find an area with low numbers. The bombs	"
Data$ "			 there are more likely to be scattered and of low frequency giving you a "
Data$ "			 higher chance of striking it lucky.																		 "
Data$ "	 9	 Practise, practise, practise.																					 "
Data$ "	10	 Ask the author (that's me) to implement a peek gadget (that's cheating)."

.AboutLabel
Data$ "			 ABOUT																																	 "
Data$ "																																							 "
Data$ "			 Writer		:			A R van Wakeren																				"
Data$ "			 Address	 :			Private Bag																						"
Data$ "												Waitakere PDC																					"
Data$ "												Auckland 8																						 "
Data$ "												New Zealand																						"
Data$ "												ph (NZ)-(09)-810-9589																	"
Data$ "																																							 "
Data$ "			 Testers	 :			Ferrari Ron																						"
Data$ "												Turbo Drumsticks Mark																	"
Data$ "												Saby the Baby																					"
Data$ "																																							 "
Data$ "			 Nuisances :			Grizzlebum																						 "
Data$ "												Missy Pussycat																				 "
Data$ "												Saby the Baby																					"
Data$ "												Rebecca the last																			 "

.MiscelanyLabel
Data$ "			 MISCELANY																															 "
Data$ "																																							 "
Data$ "Absolutely NO responsibility taken for damage to software or hardware as a		 "
Data$ "result of playing this game. NOTE WELL: It has played up in testing, mainly		"
Data$ "I/O errors during file writing. The best way to play for high-scores is to		 "
Data$ "start the program, select the settings, quit out through the Exit gadget,			"
Data$ "restart the program, select play and quit out again immediately after a high-	"
Data$ "score has been obtained (you can use the Bomb-buster gadget to stop playing).	"
Data$ "																																							 "
Data$ "No follow up is planned, it will be too much hard work for me having to change "
Data$ "the data structure etc, but I will accept your comments and give them some		 "
Data$ "consideration in case I decide to write another version (with better source-	 "
Data$ "code, graphics, animation and sounds; maybe even user-load options for these). "
Data$ "																																							 "
Data$ "Watch out for my next game called RISK (no, don't guess), which will be PD.		"
Data$ "I intend to follow that up with a shareware version with an arcade-style 3D		"
Data$ "battle sequence and a commercial war simulation game.								Thank you."

.DefaultRatings
Data$ "FERRARI RON							", " 2039"
Data$ "CONFESSOR								", " 1776"
Data$ "SABY THE BABY						", " 1443"
Data$ "GRIZZLEBUM							 ", " 1141"
Data$ "MISSY PUSSYCAT					 ", "	990"
Data$ "MISS MORNING JO					", "	892"
Data$ "TURBO DRUMSTICKS MARK		", "	788"
Data$ "DAN THE FENDER AXEMAN		", "	684"
Data$ "PIENS LITTLE UNBORN			", "	481"
Data$ "REBECCA THE LAST				 ", "	380"



;





; 5285678 --- rob denton

;