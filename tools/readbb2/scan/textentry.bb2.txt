; ascii translation of /Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/out/stuff/shit/vs/TextEntry/TextEntry.bb2,/Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/out/stuff/vs/TextEntry/TextEntry.bb2,/Users/simon/Google Drive/amiga/w/lha/bbold/bum8/vs/TextEntry/TextEntry.bb2
; #################################################################
; #																															 #
; #											TextEntry Library												#
; #																															 #
; #														V1.04															#
; #																															 #
; #				Written by Mark Tiffany - Last Updated 6/10/94				 #
; #																															 #
; # The code here is freeware - copy it and modify it as you like #
; #			 Credit me in your program if you use this code.				 #
; #	 Contact me if you like about improvements/bugs - see docs	 #
; #																															 #
; #################################################################
;
; FUNCTIONS (See docs for full explanation)
; =========
; TextEntry_SETUP{GadgetList,Filename$,Shape}		 Always have this first
;						GadgetList is the GadgetList number that can be used for the window
;						FileName$ is the file where the up+down gadgets are held, "" for none
;							 If "" is specified, the up+down gadgets MUST be in your shapes file
;							 already loaded
;						Shape is the first shapenumber where the up+down gadgets are/will be
;							 stored
; result$=TextEntry{WindowNumber,Title$,EditText$,MaxChars}
;						WindowNumber is the window number to be used.
;						Title$ is the title of the window
;						EditText$ is the text to be edited
;						MaxChars is the maximum number of characters that may be entered
; TextEntryPosition{x,y,w,h}
;						x,y are the x and y position of the window
;						w,h are the width and height IN PIXELS of the WINDOW
;							 NOTE it is not the text entry character sizes
;						Specifying -1 for any of these leaves them unchanged - ie
;							 previous value or default.
;
; REQUIREMENTS
; ============
; You need the up+down gadgets in either your own file and specify their position,
; or in the file provided.	Nothing else as far as I know.	It shouldn't be
; OS specific...	It was designed on a 1200 - 68020 - so the update of text/window
; may be slow on a 68000 - I'll try and improve this if I can if there is a prob.
; You _MUST_ have the elmorelib by Richard Elmore.	Find it on BUM6 or on aminet
; under dev/misc/elmorelib.lha.
; Oh and you need my W-Gfx include too - not that its much to look at now....
; Also the amigalibs.res file is needed - it should be in your blitzlibs: assign.
; This is for the Window structure (you could just copy it if you dont use that
; lib much - It is pretty damned huge).
;
; AUTHOR
; ======
; You can contact the author - Mark Tiffany - at
;
; 37 Norfolk Road
; Littlehampton
; West Sussex
; BN17 5PW
;
; or on PHY93003@bham.ac.uk during University term times.
;

;INCDIR "work:"
;XINCLUDE "Programming/Blitz2/VS-Includes/W-Gfx/W-Gfx.bb2"

NEWTYPE .TextEntryInfo
	inwindow.w	; Window we are using
	Winx.w			; Window x
	Winy.w			; Window y
	Winw.w			; Window width
	Winh.w			; Window height
	x.w:y.w		 ; x,y position
	w.w:h.w		 ; width and height
	Text.s			; Text being edited
	MaxChars.w	; Maximum number of characters
	pos.w			 ; chooser position - top line shown
	items.w		 ; Number of items - lines
	CursPos.w	 ; Cursor position
	GList.w		 ; Gadget list with the gadgets
End NEWTYPE


Statement TextEntry_SETUP{GList,Fl$,Shap1}
Shared TextEntryInfo.TextEntryInfo
USEPATH TextEntryInfo
	If Fl$<>""
		LoadShapes Shap1,Shap1+1,Fl$
	EndIf
	\GList=GList
	\x=17				; DONT change these! - They are for position of text within the window
	\y=18				; DONT change these! - NOT window position!
	\Winx=0			; Default position and size
	\Winy=0			;
	\Winw=300		;
	\Winh=100		;
	TextGadget GList,10,-15,%100,1,"	 Ok	 "			; Two text gadgets
	TextGadget GList,-77,-15,%110,0," Cancel "		 ;
	PropGadget GList,-15,7,%010010010,4,6,-46			; Proportional Gadg
	SetVProp GList,4,0,1													 ; Set it..
	ShapeGadget GList,-19,-36,%110,5,Shap1				 ; Up
	ShapeGadget GList,-19,-28,%110,6,Shap1+1			 ; Down	arrow gadgets
End Statement

Statement TextEntryPosition{x,y,w,h}
Shared TextEntryInfo
USEPATH TextEntryInfo
	If x>=0 Then \Winx=x						 ; Simple really - can be done manually
	If y>=0 Then \Winy=y						 ; Just make sure you change Winx,Winy
	If w>=200 Then \Winw=w					 ; and NOT just x and y!!!!!
	If h>=70 Then \Winh=h						;
End Statement

Statement TextEntryUpdate{Full}
; I think this is now as fast as I can get it.....
; However - feel free to prove me wrong......
; There is now only a minimal lag if the window is opened to full screen
; (640,256).	However - its never really necessary to use this, but if you
; do then be warned.
; Oh - yeah - Im quoting from a A1200 (plain '020) and 2MB Fast RAM.
; Let me know if it is really too slow on other configs and suggestions for
; improvements.
Shared TextEntryInfo.TextEntryInfo,TextEntry_op
USEPATH TextEntryInfo
	*W.Window=Peek.l(Addr Window(\inwindow))
	*F.TextFont=*W\IFont
	FONTWIDTH=*F\tf_XSize
	FONTHEIGHT=*F\tf_YSize
	Fill=\w*\h
	MissedChars=((\pos-1)*\w)
	l=((\CursPos-MissedChars)/\w)-1
	If l<1 Then l=1
	Use Window \inwindow
	WindowOutput \inwindow
	t$=\Text
	If \pos>1
		t$=Right$(t$+String$(" ",MissedChars),Len(t$))
	EndIf
	If Len(t$)<=Fill
		t2$=t$+String$(" ",Fill-Len(t$))
	Else
		t2$=Left$(t$,Fill)
	EndIf
	L=Int((Len(t$)+1) / \w)
	WColour 1,0
	px=\x-3:py=\y-WTopOff-FONTHEIGHT+4
	For i=1 To \h
		If (i<=L+1) AND (Full OR i>=l)
			WLocate px,py+i*FONTHEIGHT
			NPrint Left$(t2$,\w)
		EndIf
		t2$=UnRight$(t2$,\w)
	Next i
	If (\CursPos>MissedChars) AND (\CursPos<=(MissedChars+Fill))
		WColour 2,3
		l=Int((\CursPos-1)/\w)-(\pos-1)
		c=\CursPos-(l*\w)-MissedChars
		WLocate \x+((c-1)*FONTWIDTH)-3,\y+(l*FONTHEIGHT)-10
		Print Mid$(\Text+" ",\CursPos,1)
		WColour 1,0
	EndIf
	ne=Int((Len(t$))/\w)+1
	If ne<>\items OR \pos<>TextEntry_op
		\items=ne
		SetVProp \GList,4,(\pos-1)/((\items-\h)),(\h)/(\items)
		Redraw \inwindow,4
	EndIf
End Statement

Function.s TextEntry{n,Titl$,t$,MaxChars}
Shared TextEntryInfo.TextEntryInfo,TextEntry_op
USEPATH TextEntryInfo

	\Text=StripTrail$(t$,Asc(" "))
	ot$=\Text

; If in the following four lines you see ???? and not ScreenWidth/Height
; then you are missing those commands.
; These commands are from the elmorelib by Richard Elmore.	This should be
; on BUM6 (i think).	It is also available on aminet under dev/misc/elmorelib.lha
; That info is correct as of 10/7/94, so dont rely on it 100%!!!

	If \Winw>##[$B79D] Then \Winw=##[$B79D]
	If \Winh>##[$B79E] Then \Winh=##[$B79E]
	If \Winx+\Winw>##[$B79D] Then \Winx=##[$B79D]-\Winw
	If \Winy+\Winh>##[$B79E] Then \Winy=##[$B79E]-\Winh
	Window n,\Winx,\Winy,\Winw,\Winh,$1000|$1|$2|$8|$400,Titl$,1,2,\GList
	*W.Window=Peek.l(Addr Window(n))
	*F.TextFont=*W\IFont
	FONTWIDTH=*F\tf_XSize
	FONTHEIGHT=*F\tf_YSize
	*W\MinWidth=200
	*W\MinHeight=70
	Use Window n
	WOutline{10,5,WindowWidth-50,WindowHeight-24-WTopOff,1,2}
	ResetString WindowWidth-38,7,6,WindowHeight-48-WTopOff
	fin=False
	TextEntryInfo\inwindow=n
	TextEntryInfo\w=Int((WindowWidth-66)/FONTWIDTH)
	TextEntryInfo\h=Int((InnerHeight-32)/FONTHEIGHT)
	TextEntryInfo\CursPos=Len(ot$)+1
	TextEntryInfo\MaxChars=MaxChars
	TextEntryInfo\items=Int(Len(ot$)/\w)+1
	TextEntryInfo\pos=1
	TextEntryUpdate{True}
	Repeat
		Ev.l=WaitEvent
		Win.l=EventWindow
		Select Win
		Case n
			Select Ev
				Case $2
					Use Window \inwindow
					wi=0:he=0
					If WindowHeight<70 Then he=70:wi=WindowWidth
					If WindowWidth<200 Then wi=200:If he=0 Then he=WindowHeight
					If wi>0 AND he>0
						WSize wi,he
					Else
						TextEntry_op=0
						WCls 0
						WOutline{10,5,WindowWidth-50,WindowHeight-24-WTopOff,1,2}
						ResetString WindowWidth-38,7,6,WindowHeight-48-WTopOff
						Redraw n,0:Redraw n,1:Redraw n,5:Redraw n,6
						\w=Int((WindowWidth-66)/FONTWIDTH)
						\h=Int((InnerHeight-32)/FONTHEIGHT)
						\items=Int(Len(t$)/\w)+1
						If \pos>\items-\h Then \pos=\items-\h
						If \pos<=0 Then \pos=1
						TextEntryUpdate{True}
					EndIf
				Case $8
					If Joyb(0)=1
						Use Window n
						mx=WMouseX
						my=WMouseY
						If mx>\x AND mx<\x+(\w*FONTWIDTH)
							If my>\y-10 AND my<\y-10+(\h*FONTHEIGHT)
								mx=Int((mx-\x)/FONTWIDTH)
								my=Int((my-\y+10)/FONTHEIGHT)
								\CursPos=my*\w+mx+1+(\pos-1)*\w
								If \CursPos>Len(\Text)+1 Then \CursPos=Len(\Text)+1
								TextEntryUpdate{True}
							EndIf
						EndIf
					EndIf
				Case $200
					\Text=ot$ : fin=True
				Case $40
					Select GadgetHit
						Case 0 : \Text=ot$ : fin=True
						Case 1 : fin=True
					End Select
				Case $20
					Select GadgetHit
						Case 4
							Repeat
								VWait
								If \items>\h
									op=\pos
									\pos=(VPropPot(\GList,4))*(\items-\h+1)+1
									If \pos<>op Then TextEntryUpdate{True}
								EndIf
							Until Event=64
						Case 5
							Repeat
								TextEntry_op=\pos
								If \pos>1 Then \pos-1
								If TextEntry_op<>\pos Then TextEntryUpdate{True}
								If nippy Then VWait 1 Else VWait 10: nippy=True
							Until Event=64
						Case 6
							Repeat
								TextEntry_op=\pos
								If \pos<\items-\h+1 Then \pos+1
								If TextEntry_op<>\pos Then TextEntryUpdate{True}
								If nippy
									VWait
								Else
									VWait 10
									nippy=True
								EndIf
							Until Event=64
					End Select
				Case $400
					k$=Inkey$
					k=RawKey
					If k>64 AND k<100
						Select k
							Case 95 : VWait 10
							Case 76 : If \CursPos-\w>0 Then \CursPos-\w
							Case 77 : If \CursPos+\w<=Len(\Text)+1 Then \CursPos+\w Else \CursPos=Len(\Text)+1
							Case 78 : If \CursPos+1<=Len(\Text)+1 Then \CursPos+1
							Case 79 : If \CursPos>1 Then \CursPos-1
							Case 70 : If \CursPos<=Len(\Text) Then \Text=Left$(\Text,\CursPos-1)+UnRight$(\Text,\CursPos)
							Case 65 : If \CursPos>1 Then \Text=Left$(\Text,\CursPos-2)+UnRight$(\Text,\CursPos-1):\CursPos-1
							Case $45 : \Text=ot$ : fin=True
							Case 68 : fin=True
							Case 67 : fin=True
						End Select
					Else
						If Asc(k$)>31 AND Asc(k$)<127
							If Len(\Text)<\MaxChars
								\Text=Left$(\Text,\CursPos-1)+k$+UnRight$(\Text,\CursPos-1)
								\CursPos+1
							Else
								BeepScreen 0
							EndIf
						EndIf
					EndIf
					TextEntry_op=\pos
					If \CursPos<=(\pos-1)*\w
						\pos=((\CursPos-1)/\w)+1
					EndIf
					If \CursPos>((\pos-1)*\w+\w*\h)
						\pos=((\CursPos-1)/\w)-\h+2
					EndIf
					If TextEntry_op=\pos Then TextEntryUpdate{False} Else TextEntryUpdate{True}
				Case $80000
					Activate \inwindow
					##[$FFB0](Peek.l(Addr Window(\inwindow)))
			End Select
		Default
			Activate \inwindow
			##[$FFB0](Peek.l(Addr Window(\inwindow)))
		End Select
	Until fin
	\Winx=WindowX
	\Winy=WindowY
	\Winw=WindowWidth
	\Winh=WindowHeight
	Free Window \inwindow
	Use Window 1
	Function Return \Text
End Function

; As always - heres the demo stuff....
; NB: DE-COMMENT THE INCLUDE STUFF AT THE TOP FOR THIS TO WORK.

;BorderPens 2,1 ; <--- For WB2+ .	Change to 1,2 if WB1.3.
							 ; This should always be called BEFORE gadgets are set up to
							 ; force them into the required styling.

;TextEntry_SETUP{1,"Work:Programming/Blitz2/VS-Includes/TextEntry/TextEntry.Gfx",1}

;WbToScreen 0
;t$=TextEntry{1,"Hokey Dokey - Lets edit it!","Edit me lots and lots",200}
;DefaultOutput
;NPrint t$
;TextEntryPosition{100,50,700,150}					; note how this is too big
;t$=TextEntry{1,"And again.....",t$,300}
;DefaultOutput
;NPrint t$
;TextEntryPosition{100,-1,500,180}					; -1 uses old position
;t$=TextEntry{1,"Last time.....",t$,300}
;DefaultOutput
;NPrint t$
;MouseWait
;End
