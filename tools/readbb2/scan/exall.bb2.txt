; ascii translation of /Users/simon/Google Drive/amiga/w/fdrive/junk/bum6/DEVELOPERS/Includes/dos/exall.bb2
+;
; $VER: exall.bb2 40.0 (28.02.94)
;

XInclude "exec/types.bb2"

XInclude"utility/hooks.bb2"

;/* NOTE: V37 dos.library, when doing ExAll() emulation, and V37 filesystems	*/
;/* will return an error if passed ED_OWNER.	If you get ERROR_BAD_NUMBER,		*/
;/* retry with ED_COMMENT to get everything but owner info.	All filesystems	*/
;/* supporting ExAll() must support through ED_COMMENT, and must check Type	 */
;/* and return ERROR_BAD_NUMBER if they don't support the type.			 */

;/* values that can be passed for what data you want from ExAll() */
;/* each higher value includes those below it (numerically)	*/
;/* you MUST chose one of these values */
#ED_NAME=1
#ED_TYPE=2
#ED_SIZE=3
#ED_PROTECTION=4
#ED_DATE=5
#ED_COMMENT=6
#ED_OWNER=7

;/*
; *	 Structure in which exall results are returned in. Note that only the
; *	 fields asked for will exist!
; */

NEWTYPE.ExAllData
*ed_Next.ExAllData
*ed_Name.b
ed_Type.l
ed_Size.l
ed_Prot.l
ed_Days.l
ed_Mins.l
ed_Ticks.l
*ed_Comment.b ;/* strings will be after last used field */
ed_OwnerUID.w ;/* new for V39 */
ed_OwnerGID.w
End NEWTYPE

;/*
; *	 Control structure passed to ExAll.	Unused fields MUST be initialized to
; *	 0, expecially eac_LastKey.
; *
; *	 eac_MatchFunc is a hook (see utility.library documentation for usage)
; *	 It should return true if the entry is to returned, false if it is to be
; *	 ignored.
; *
; *	 This structure MUST be allocated by AllocDosObject()!
; */

NEWTYPE.ExAllControl
eac_Entries.l ;/* number of entries returned in buffer			*/
eac_LastKey.l ;/* Don't touch inbetween linked ExAll calls! */
*eac_MatchString.b ;/* wildcard string for pattern match or NULL */
*eac_MatchFunc.Hook;/* optional private wildcard function		 */
End NEWTYPE