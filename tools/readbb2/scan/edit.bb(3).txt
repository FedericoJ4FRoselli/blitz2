; ascii translation of /Users/simon/Google Drive/amiga/w/sega/shit/edit.bb
;
; skidmarks sega track editor
;

; cameras
; flags
; startline

;Goto compiletracks

tr=12

style=((tr-1) AND 6) LSR 1

Buffer 0,16384

aspeed.q=.125

Dim corner.w(8)

NEWTYPE .ablocks:n.w:f:w:h:End NEWTYPE	;shapenumber, framecount, width, height
NEWTYPE .ppl:x.w:y.w:t.w:End NEWTYPE

NEWTYPE .quad:x.w:y:w:h:End NEWTYPE
NEWTYPE .spri:num.w:blocks.w:q.quad[8]:blox.l[4096]:End NEWTYPE

DEFTYPE .quad quak

Dim spri.spri(32)
Dim ab.ablocks(128)
Dim List ppl.ppl(256)
Dim List sp.ppl(32)

Dim List sue.w(32)

terminate.ppl\x=-1,-1,-1

If style=0 Then style$="rally" ;LoadShapes 16,"people/rally.shapes"
If style=1 Then style$="beach" ;LoadShapes 16,"people/beach.shapes"
If style=2 Then style$="snow"	;LoadShapes 16,"people/snow.shapes"
If style=3 Then style$="ranch" ;LoadShapes 16,"people/ranch.shapes"

casestrcomp 0,"overlays/"+style$+".palette"
casestrcomp 0,"overlays/shapes.iff",16

pa.l=Peek.l(Addr SetCycle(0))+4
##[$FEDB] pa+12*12,pa+19*12,12
##[$FEDB] pa+13*12,pa+18*12,12
##[$FEDB] pa+15*12,pa+17*12,12

While WriteMem(0,"overlays/sprite"+Str$(sn)+".dat")
	##[$BE14] 0,&spri(sn),SizeOf.spri
	CloseFile 0:sn+1
Wend

LoadShapes 16,"overlays/shapes.shapes"		 ;400
LoadShapes 450,"overlays/fill.shapes"
LoadShapes 470,"overlays/sprites.shapes"

For np=0 To 7:ab(np)\n=16+np*8,8,1,1:Next
For np=8 To 55:ab(np)\n=16+64+np-8+style*48,1,1,2:Next
While Peek.w(Addr MidHandle(16+64+192-56+np))>0
	w=ShapeWidth(16+64+192-56+np) LSR 3
	h=ShapeHeight(16+64+192-56+np) LSR 3
	ab(np)\n=16+64+192-56+np,1,w,h
	np+1
Wend

Handle 450,-3,-1:Handle 459,-2,1:Handle 458,-1,1

Goto editpumpkins

;----------------------------------------------------------------
; main functions
;----------------------------------------------------------------

BLITZ

Statement drawbeach{corner.w,size.w}
	Select corner
		Case 0:s0=454:s1=458:ss=size:x=-32:y=-16:ii=1:jj=1
		Case 1:s0=455:s1=459:ss=size:x=768-16:y=-16:ii=-1:jj=1
		Case 2:s0=455:s1=451:ss=size:x=-32:y=384-8:ii=1:jj=-1
		Case 3:s0=454:s1=450:ss=size:x=768-16:y=384-8:ii=-1:jj=-1
	End Select
	For i=-size To size
		For j=0 To size
			If j=ss Then sh=s1 Else sh=s0
			k=i+(j AND 1)/2
			ClipBlit sh,x+(k*32+j*16)*ii,y-(k*16-j*8)*jj
		Next
	Next
End Statement

Statement drawline{corner.w,size.w,sh.w}
	Select corner
		Case 0:sh+450:ss=size:x=-32:y=-16:ii=1:jj=1
		Case 1:sh+451:ss=size:x=768-16:y=-16:ii=-1:jj=1
		Case 2:sh+451:ss=size:x=-32:y=384-8:ii=1:jj=-1
		Case 3:sh+450:ss=size:x=768-16:y=384-8:ii=-1:jj=-1
	End Select
	For i=-size To size
		For j=size To size
			k=i+(j AND 1)/2
			ClipBlit sh,x+(k*32+j*16)*ii,y-(k*16-j*8)*jj
		Next
	Next
End Statement

Statement drawroad{corner.w,size.w}
	Select corner
		Case 0:s0=460:s1=1:ss=size:x=-32:y=-16:ii=1:jj=1
		Case 1:s0=463:s1=1:ss=size:x=768-16:y=-16:ii=-1:jj=1
		Case 2:s0=465:s1=-1:ss=size:x=-32:y=384-8:ii=1:jj=-1
		Case 3:s0=462:s1=-1:ss=size:x=768-16:y=384-8:ii=-1:jj=-1
	End Select
	For i=-size To size
		sh=s0
		For j=size-2 To size
			k=i+(j AND 1)/2
			ClipBlit sh,x+(k*32+j*16)*ii,y-(k*16-j*8)*jj
			sh+s1
		Next
	Next
End Statement

AMIGA

; convert 8x8 nibble->8x8 brush

Statement getblock{blok.l,bm.l,x.w,y.w}
	MOVE.l d0,a0:MOVE.l d1,a1:MOVE.l 8(a1),a1
	LSR#3,d2:ADD d2,a1:EXT.l d3
	ASL.l#5,d3:ADD.l d3,a1:ADD.l d3,a1:ADD.l d3,a1
	MOVEQ#7,d2
nxline:
	MOVE.l a1,a2:ADD #96,a1:MOVE.l#96*384,d0
	MOVE.b (a2),d4:ADD.l d0,a2:MOVE.b (a2),d5:ADD.l d0,a2
	MOVE.b (a2),d6:ADD.l d0,a2:MOVE.b (a2),d7:MOVEQ#7,d3
nxnib:
	ASL.b #1,d7:ROXL.l#1,d0
	ASL.b #1,d6:ROXL.l#1,d0
	ASL.b #1,d5:ROXL.l#1,d0
	ASL.b #1,d4:ROXL.l#1,d0
	DBRA d3,nxnib:MOVE.l d0,(a0)+:DBRA d2,nxline:AsmExit
End Function

Function.w chkblock{b0.l,b1.l}
	MOVE.l d0,a0:MOVE.l d1,a1:MOVE count(pc),d2:MOVE.l a1,a3
	EXT.l d2:ASL.l#5,d2:LEA 0(a1,d2.l),a2
	MOVEM.l (a0),d0-d7:BRA nxchk2
dochk2:
	CMP.l	(a1),d0:BNE bad
	CMP.l 4(a1),d1:BNE bad
	CMP.l 8(a1),d2:BNE bad
	CMP.l 12(a1),d3:BNE bad
	CMP.l 16(a1),d4:BNE bad
	CMP.l 20(a1),d5:BNE bad
	CMP.l 24(a1),d6:BNE bad
	CMP.l 28(a1),d7:BNE bad
	SUB.l a3,a1:MOVE.l a1,d0:LSR.l#5,d0:AsmExit
bad:
	ADD#32,a1
nxchk2:
	CMP.l a1,a2:BNE dochk2:MOVEM.l d0-d7,(a1):ADD#1,count
	SUB.l a3,a1:MOVE.l a1,d0:LSR.l#5,d0:AsmExit
End Function

Function.l cmpblock{b0.l,b1.l}
	MOVE.l d0,a0:MOVE.l d1,a1:MOVE count(pc),d2:MOVE.l a1,a3
	EXT.l d2:ASL.l#5,d2:LEA 0(a1,d2.l),a2
	MOVE #31,cmax:MOVEM.l (a0),d0-d7:BRA nxchk
	Macro tt
		MOVEQ#0,d2
		LSR.l#1,d0:BCC b0`@:MOVEQ#1,d2:b0`@
		LSR.l#1,d0:BCC b1`@:MOVEQ#1,d2:b1`@
		LSR.l#1,d0:BCC b2`@:MOVEQ#1,d2:b2`@
		LSR.l#1,d0:BCC b3`@:MOVEQ#5,d2:b3`@
		ADD d2,d3
	End Macro
dochk:
	MOVEQ#0,d3
	MOVE.l (a0)+,d0:MOVE.l (a1)+,d1:EOR.l d1,d0:!tt:!tt:!tt:!tt:!tt:!tt:!tt:!tt
	MOVE.l (a0)+,d0:MOVE.l (a1)+,d1:EOR.l d1,d0:!tt:!tt:!tt:!tt:!tt:!tt:!tt:!tt
	MOVE.l (a0)+,d0:MOVE.l (a1)+,d1:EOR.l d1,d0:!tt:!tt:!tt:!tt:!tt:!tt:!tt:!tt
	MOVE.l (a0)+,d0:MOVE.l (a1)+,d1:EOR.l d1,d0:!tt:!tt:!tt:!tt:!tt:!tt:!tt:!tt
	MOVE.l (a0)+,d0:MOVE.l (a1)+,d1:EOR.l d1,d0:!tt:!tt:!tt:!tt:!tt:!tt:!tt:!tt
	MOVE.l (a0)+,d0:MOVE.l (a1)+,d1:EOR.l d1,d0:!tt:!tt:!tt:!tt:!tt:!tt:!tt:!tt
	MOVE.l (a0)+,d0:MOVE.l (a1)+,d1:EOR.l d1,d0:!tt:!tt:!tt:!tt:!tt:!tt:!tt:!tt
	MOVE.l (a0)+,d0:MOVE.l (a1)+,d1:EOR.l d1,d0:!tt:!tt:!tt:!tt:!tt:!tt:!tt:!tt
	SUB.l#32,a0:SUB.l#32,a1:CMP cmax(pc),d3:BPL nobeta
	MOVE d3,cmax:MOVE.l a1,cblo:nobeta:ADD#32,a1
nxchk:
	CMP.l a1,a2:BNE dochk:MOVE.l cblo(pc),d0:SUB.l a3,d0
	OR cmax(pc),d0:AsmExit

cmax:Dc 0
cblo:Dc.l 0

End Function

Function.w addblock{b0.l,b1.l}
	MOVE.l d0,a0:MOVE.l d1,a1:MOVE count(pc),d2
	EXT.l d2:ASL.l#5,d2:LEA 0(a1,d2.l),a1
	MOVEM.l (a0),d0-d7:MOVEM.l d0-d7,(a1)
	MOVE count(pc),d0:ADD #1,count:AsmExit
End Statement

Statement drawblok{blok.l,brush.l}
	MOVE.l d0,a0:MOVE.l d1,a2:MOVEQ#7,d1
nxlino:
	MOVE.l a2,a1:ADDQ#2,a2:MOVE.l (a0)+,d0
	ASL.l#1,d0:ROXL#1,d4:ASL.l#1,d0:ROXL#1,d5:ASL.l#1,d0:ROXL#1,d6:ASL.l#1,d0:ROXL#1,d7
	ASL.l#1,d0:ROXL#1,d4:ASL.l#1,d0:ROXL#1,d5:ASL.l#1,d0:ROXL#1,d6:ASL.l#1,d0:ROXL#1,d7
	ASL.l#1,d0:ROXL#1,d4:ASL.l#1,d0:ROXL#1,d5:ASL.l#1,d0:ROXL#1,d6:ASL.l#1,d0:ROXL#1,d7
	ASL.l#1,d0:ROXL#1,d4:ASL.l#1,d0:ROXL#1,d5:ASL.l#1,d0:ROXL#1,d6:ASL.l#1,d0:ROXL#1,d7
	ASL.l#1,d0:ROXL#1,d4:ASL.l#1,d0:ROXL#1,d5:ASL.l#1,d0:ROXL#1,d6:ASL.l#1,d0:ROXL#1,d7
	ASL.l#1,d0:ROXL#1,d4:ASL.l#1,d0:ROXL#1,d5:ASL.l#1,d0:ROXL#1,d6:ASL.l#1,d0:ROXL#1,d7
	ASL.l#1,d0:ROXL#1,d4:ASL.l#1,d0:ROXL#1,d5:ASL.l#1,d0:ROXL#1,d6:ASL.l#1,d0:ROXL#1,d7
	ASL.l#1,d0:ROXL#1,d4:ASL.l#1,d0:ROXL#1,d5:ASL.l#1,d0:ROXL#1,d6:ASL.l#1,d0:ROXL#1,d7
	MOVE.b d7,(a1)
	MOVE.b d6,16(a1)
	MOVE.b d5,32(a1)
	MOVE.b d4,48(a1)
	DBRA d1,nxlino:AsmExit
End Statement

count:Dc.w0

;----------------------------------------------------------------
; editor
;----------------------------------------------------------------

Statement shit{src.l,dest.l,x.w,adder.w}
	MOVE.l d0,a0:MOVE.l d1,a1:MOVE d2,d0:ADD d0,d0:MOVE d0,d1:MOVE d3,d4
	LEA 0(a1,d1),a2:MOVEQ#29,d7
	nxb:MOVE#$180,(a2):ADD#128,a2:DBRA d7,nxb:ADDQ#2,d1
nxtxx:
	CMP #80,d1:BPL dundun:TST d0:BMI dundun
	LEA 0(a0,d0),a2:LEA 0(a1,d1),a3:MOVEQ#29,d7
	more:MOVE (a2),d3:ADD d4,d3:MOVE d3,(a3):ADD #80,a2:ADD#128,a3
	DBRA d7,more:SUBQ#2,d0:ADDQ#2,d1:BRA nxtxx
dundun:
	AsmExit
End Statement

.editpumpkins:

	Dim wind.w(95,47)				 ;map
	Dim first.w(95,47)				;counts
	Dim mm.w(95,47)					 ;map

	Dim bcount(8192)
	Dim bptr.l(8192)
	Dim cols.w(32)

	##[$CD10] 0,8,8,4:CludgeBitMap 0,0
	Use lmaxlen 0:Boxf 0,0,7,7,2:MakeCookie 0
	brush.l=Peek.l(Addr MidHandle(0)+14)

	##[$CD10] 3,8,8,4:CludgeBitMap 3,0
	Use lmaxlen 0:Boxf 1,0,7,7,2:MakeCookie 3

	LoadShape 1,"mouse.iff":GetaSprite 0,1
	LoadShape 2,"dither.iff"

	lmaxlen 0,768,384,4			;0 = back contours
	lmaxlen 1,768,384,4			;1 = original contours
	lmaxlen 2,768,384,4			;2 = temp contours for shading and poles
	lmaxlen 3,640,80,4

	lmaxlen 6,768,384,6
	BitPlanesBitMap 6,4,31		 ;4 = front playfield + concrete
	BitPlanesBitMap 4,5,15		 ;5 = front playfield
	BitPlanesBitMap 6,7,32		 ;7 = dither

	bmf.l=Addr lmaxlen(5)
	bmb.l=Addr lmaxlen(0)

	Use lmaxlen 7
	For x=0 To 767 Step 32
		For y=0 To 383 Step 32
			longdiv 2,x,y
		Next
	Next

	Use lmaxlen 3:BlockScroll 2:Box 0,0,639,79,1
	x=2:y=10:Dim ppx(128):Dim ppy(128)
	For i=0 To np-1
		ppx(i)=x:ppy(i)=y:ClipBlit ab(i)\n,x,y
		x+ab(i)\w*8+2:If x>620 Then x=4:y+17
	Next

.readtrack

	LoadBitMap 1,"tracks/iff/track.fix"+Str$(tr):bm.l=Addr lmaxlen(1)

	d$="tracks/track."+Str$(tr)
	e$="tracks/data."+Str$(tr)
	c$="tracks/circuit."+Str$(tr)
	i$="tracks/info."+Str$(tr)

	bs.l=##[$BE15](d$)
	If bs=0 Then count.w=1 Else count.w=(bs-96*48*2)/32
	Poke.w ?count,count

	InitBank 0,64,0					;bank 0=work block
	;
	InitBank 1,8192*32,0		 ;bank 1=A blocks (contours)
	InitBank 2,8192*32,0		 ;bank 2=B blocks (shapes)
	InitBank 3,8192*32,0		 ;bank 3=C blocks (new contours)
	;
	If WriteMem(0,d$)
		##[$BE14] 0,&cols(0),64
		##[$BE14] 0,&wind(0,0),96*48*2
		##[$BE14] 0,Bank(1),count*32
		CloseFile 0
	EndIf
	;
	c0=count
	;
	If WriteMem(0,e$)
		##[$BE14] 0,&corner(0),16
		Repeat:globalloc ppl():##[$BE14] 0,&ppl(),6:Until ppl()\x=-1
		Repeat:globalloc sp():##[$BE14] 0,&sp(),6:Until sp()\x=-1
		freelast sp():freelast ppl():CloseFile 0
	EndIf

	InitCopList 0,30,200,$13038,8,32,0:DisplayPalette 0,0
	DisplayControls 0,64,$1c00,0:DisplayPalette 0,0

	InitCopList 1,232,80,$13104,8,16,0
	DisplayBitMap 1,3:DisplayPalette 1,0,16

.main:
	BLITZ
	BlitzKeys On:BitMapInput
	Mouse On:MouseArea 0,0,767,383+80
	CreateDisplay 0,1

;	climit=count
;	For bx=0 To 95
;		For by=0 To 47
;			If wind(bx,by)>climit Then Gosub newblock
;		Next
;	Next

	SetInt 5
		bx=MouseX:by=MouseY
		If by<384
			bmx=QLimit(bx-160,0,768-320)
			bmy=QLimit(by-100,0,383-200)
			If spmode=0
				bx=Int(bx ASR 3):by=Int(by ASR 3)
			Else
				bx ASR 3:by ASR 3
			EndIf
			DisplayBitMap 0,0,bmx,bmy,5,bmx,bmy
			DisplaySprite 0,0,bx*8-bmx-1,by*8-bmy-1,0
			DisplaySprite 1,0,-32,0,0
			inedit=0
		Else
			bx=bx*(640/768):by-384
			DisplaySprite 0,0,-32,0,0
			DisplaySprite 1,0,bx,by,0
			inedit=1
		EndIf

	End SetInt

	Gosub refreshmap
	Gosub refreshoverlay
	BitMapOutput 3

	Repeat
		VWait
		a$=Inkey$:If a$<>"" Then a=Asc(a$) Else a=0

		Use lmaxlen 3
		Box ppx(bp)-1,ppy(bp)-1,ppx(bp)+ab(bp)\w*8,ppy(bp)+ab(bp)\h*8,0

		Locate 0,0
		Print "A=",c0," B=",c1," C=",c2," D=",c3,"		 "
		Print "Total:",c1+c2+c3," / 1764	 "

		If inedit=0
			If spmode=0
				If a=129 Then Gosub newblock
				If a=130 Then Gosub sameblock
				If a=131 Then Gosub pickblock
				;
				If a=137 Then Gosub quickscan:Gosub dirtyscan
				If a=136 Then Gosub writescan
				;
				If a=138 Then Gosub compiletrack
				;
				If a=133 Then spmode=1
				If a=127 Then Gosub killsprite
				;
				If Joyb(0)=1 Then pp=bp:Gosub addshape:While Joyb(0)<>0:Wend
				If Joyb(0)=2 Then Gosub killshape:While Joyb(0)<>0:Wend
				;
			Else
				Use lmaxlen 5:UnBuffer 0
				If a=133 Then cs=QWrap(cs+1,0,12)
				If Joyb(0)=1
					If globalloc(sp())
						sp()\x=bx*8,by*8,cs
						Gosub refreshoverlay
					EndIf
					spmode=0
					While Joyb(0)<>0:Wend
				Else
					If Joyb(0)=2
						spmode=0:While Joyb(0)<>0:Wend
					Else
						sx=QLimit(bx*8,0,768-ShapeWidth(470+cs))
						sy=QLimit(by*8,0,384-ShapeHeight(470+cs))
						BBlit 0,470+cs,sx,sy:VWait 3
					EndIf
				EndIf
			EndIf

		Else
			If Joyb(0)<>0 Then Gosub newshape:While Joyb(0)<>0:Wend
		EndIf

		If a=31 Then bp=QLimit(bp-1,0,np-1)
		If a=30 Then bp=QLimit(bp+1,0,np-1)
		If a=55 Then corner(0)-1:Gosub refreshoverlay
		If a=56 Then corner(0)+1:Gosub refreshoverlay
		If a=57 Then corner(1)+1:Gosub refreshoverlay
		If a=45 Then corner(1)-1:Gosub refreshoverlay
		If a=52 Then corner(2)-1:Gosub refreshoverlay
		If a=53 Then corner(2)+1:Gosub refreshoverlay
		If a=54 Then corner(3)+1:Gosub refreshoverlay
		If a=43 Then corner(3)-1:Gosub refreshoverlay
		If a=40 Then corner(4)-1:Gosub refreshoverlay
		If a=41 Then corner(4)+1:Gosub refreshoverlay
		If a=47 Then corner(5)+1:Gosub refreshoverlay
		If a=42 Then corner(5)-1:Gosub refreshoverlay
		If a=49 Then corner(6)-1:Gosub refreshoverlay
		If a=50 Then corner(6)+1:Gosub refreshoverlay
		If a=51 Then corner(7)+1:Gosub refreshoverlay
		If a=13 Then corner(7)-1:Gosub refreshoverlay

		Use lmaxlen 3
		Box ppx(bp)-1,ppy(bp)-1,ppx(bp)+ab(bp)\w*8,ppy(bp)+ab(bp)\h*8,1

	Until a=27

;	End

	pal.l=Peek.l(Addr SetCycle(0))+4
	For i=0 To 31
		r.w=(Peek.b(pal) AND 255) LSR 4:pal+4
		g.w=(Peek.b(pal) AND 255) LSR 4:pal+4
		b.w=(Peek.b(pal) AND 255) LSR 4:pal+4
		cols(i)=(b*256+g*16+r) AND $eee
	Next

	Gosub compiletrack

	AMIGA

.
.writetrack

	If ReadMem(0,c$)
		;
		If ReadMem(1,i$)
			fptr.w=c2+128:Exists 1,&fptr,2
			Exists 0,&cols(0),64
			Exists 0,&mm(0,0),96*48*2
			Exists 0,Bank(1),c2*32
			Exists 0,Bank(2),c1*32
			;
			newmem sue():slue.w=c1+c2+$8080
			;
			While globfree(sue())
				;
				Exists 0,&spri(sue())\blox,spri(sue())\blocks ASL 5
				;
				newmem sp()
				While globfree(sp())
					If sp()\t=sue()
						Exists 1,&spri(sue())\num,2
						Exists 1,&slue,2
						For i=0 To spri(sue())\num-1
							##[$80CA] spri(sue())\q[i]
							;
							quak\x=\x*8+sp()\x,\y*8+sp()\y		 ;,\w,\h
							quak\w=((\h-1)+(\w-1) ASL 2) ASL 8,\w*\h
							;
							Exists 1,&quak,8
						Next
					EndIf
				Wend
				slue+spri(sue())\blocks
			Wend
			;
			Exists 1,&terminate,2
			CloseFile 1
		EndIf
		CloseFile 0
	EndIf

	If ReadMem(0,e$)
		Exists 0,&corner(0),16
		newmem ppl():While globfree(ppl()):Exists 0,&ppl(),6:Wend
		Exists 0,&terminate,6
		newmem sp():While globfree(sp()):Exists 0,&sp(),6:Wend
		Exists 0,&terminate,6
		CloseFile 0
	EndIf

	End

.writescan:
	QAMIGA
	If ReadMem(0,d$)
		Exists 0,&cols(0),64
		Exists 0,&wind(0,0),96*48*2
		Exists 0,Bank(1),count*32
		CloseFile 0
	EndIf
	BLITZ
	Return

BLITZ

;----------------------------------------------------------
DEFTYPE .w n

; draw cement patches to fontplayfield+newbmap
; draw shapes to front
; draw fences
; remap shadows in newbmap to dark grey
; map in front playfield blocks
;
; reorganise backplayfield blocks
; add pole blocks and sprite shadows
;
; add all flag blocks to set B
; block out area underneath sprites?
; total up sprites

.compiletrack
	;
	ShapesBitMap 0,2
	;
	Use lmaxlen 4:BlockScroll
	For y=0 To 47:For x=0 To 95:mm(x,y)=-1:Next:Next
	Gosub drawconcrete
	;
	Use lmaxlen 5
	;
	newmem ppl():##[$80CA] ppl()
	While globfree(ppl())
		ClipBlit ab(\t)\n,\x,\y
		If \t<8										;flagpole
			mm(\x LSR 3,\y LSR 3)=\t
			Use lmaxlen 1:fy=\y+8
			While Cls(\x,fy)>10
				Use lmaxlen 5:Point \x,fy,9
				Use lmaxlen 2:Point \x,fy,2:fy+1
;				mm(\x LSR 3,fy LSR 3)=-2
				Use lmaxlen 1
			Wend
			Use lmaxlen 5
		EndIf
	Wend
	;
	Gosub drawfences
	;
	Use lmaxlen 6:ReMap 16+3,16+14:ReMap 48+3,48+13:Use lmaxlen 5
	;
	Poke.w ?count,8 ;makeroom for 8 flags
	;
	For y=0 To 47
		For x=0 To 95
			If ##[$CB09](3,x ASL 3,y ASL 3) AND mm(x,y)<0
				Gosub makebblock
				getblock{Bank(0),bmf,x ASL 3,y ASL 3}
				mm(x,y)=chkblock{Bank(0),Bank(2)}
			EndIf
		Next
	Next
	c1=Peek.w(?count)
	;
;	MouseWait
	;
	Poke.w ?count,1
	;
	For y=0 To 47					;standard blocks (c2)
		For x=0 To 95
			If mm(x,y)<0
				getblock{Bank(0),Addr lmaxlen(2),x ASL 3,y ASL 3}
				mm(x,y)=chkblock{Bank(0),Bank(1)}+$e080
			EndIf
		Next
	Next
	c2=Peek.w(?count)

	For y=0 To 47				 ;secondary block (c1)
		For x=0 To 95
			If (mm(x,y) AND $8000)=0 Then mm(x,y)+$8080+c2
		Next
	Next

	ClearList sue():suen=0:c3=0
	newmem sp()
	While globfree(sp())
		newmem sue()
		Repeat
			If NOT globfree(sue())
				globalloc sue():sue()=sp()\t:suen+1
				c3+spri(sp()\t)\blocks
			EndIf
		Until sue()=sp()\t
	Wend

	Gosub refreshoverlay

	Return

.makebblock
	For xb=0 To 7:For yb=0 To 7
		xx=x ASL 3+xb:yy=y ASL 3+yb
		If Cls(xx,yy)=0
			Use lmaxlen 2:c=Cls(xx,yy):Use lmaxlen 5
			If c=1 Then c=12:Goto hitit
			If c=2 Then c=9:Goto hitit
			If c=8 Then c=14:Goto hitit
			If c>2 AND c<8 Then c=8:Goto hitit
			c=15-QLimit(c,12,15)
			If c=1 Then c=2:If ((xb+yb) AND 1) AND lc=2 Then c=1
			If c=0 Then c=1
			hitit:Point xx,yy,c:lc=c
		Else
			If Cls(xx,yy)=3
				Use lmaxlen 2:c=Cls(xx,yy):Use lmaxlen 5
				If c<9
					Select c
						Case 8:c=14
						Case 2:c=12
						Case 1:c=13
						Default:c=8
					End Select
					Point xx,yy,c
				EndIf
			EndIf
		EndIf
	Next:Next
	Return

.newshape
	For i=0 To np-1
		If PColl(ppx(i),ppy(i),ab(i)\w*8,ab(i)\h*8,bx,by,1,1)
			bp=i
		EndIf
	Next
	Return

.animateoverlay:
	fr+.5
	If fr=Int(fr)
		Use lmaxlen 5
		newmem ppl()
		While globfree(ppl())
			##[$80CA] ppl()
			If ab(\t)\f>1
				Boxf \x,\y,\x+7,\y+7,0
				longdiv ab(\t)\n+(fr MOD ab(\t)\f),\x,\y
			EndIf
		Wend
	EndIf
	Return

.refreshoverlay:
	Use lmaxlen 4:BlockScroll

	Gosub drawconcrete

	Use lmaxlen 5
	newmem ppl():##[$80CA] ppl()
	While globfree(ppl())
		ClipBlit ab(\t)\n,\x,\y
		If \t<8										;flagpole
			Use lmaxlen 1:fy=\y+8
			While Cls(\x,fy)>10
				 Use lmaxlen 5:Point \x,fy,9:fy+1:Use lmaxlen 1:Wend
			Use lmaxlen 5
		EndIf
	Wend
	newmem sp():##[$80CA] sp()
	While globfree(sp()):ClipBlit 470+\t,\x,\y:Wend
	Gosub drawfences
	Return

drawconcrete:
	NEWTYPE .poly:x0.w:y0:x1:y1:x2:y2:End NEWTYPE
	If corner(4)>0
		c=corner(4):o=corner(5)*8
		p.poly\x0=384-c*8+o,0,384+c*8+o,0,384+o,c*4
		Polyf 3,&p,13+16
		Line 384-c*8+o,0,384+o,c*4,12+16
		Line 384+c*8+o,0,384+o,c*4,14+16
	EndIf
	If corner(6)>0
		c=corner(6):o=corner(7)*8
		p.poly\x0=384-c*8+o,384,384+c*8+o,384,384+o,384-c*4
		Polyf 3,&p,13+16
	EndIf
	Return

.drawfences:
	For i=0 To 3
		Select style
			Case 0:drawline{i,corner(i),6}
			Case 1:drawbeach{i,corner(i)}
			Case 2:drawroad{i,corner(i)}
			Case 3:drawline{i,corner(i),2}
		End Select
	Next
	Return

.addshape:
	Gosub killshape
	If globalloc(ppl())
		ppl()\x=bx*8,by*8,pp
		Gosub refreshoverlay
	EndIf
	Return

.killshape:
	newmem ppl()
	While globfree(ppl())
		If ppl()\x=bx*8 AND ppl()\y=by*8 Then freelast ppl()
	Wend
	Gosub refreshoverlay
	Return

.killsprite:
	##[$80CA] sp()
	newmem sp()
	While globfree(sp())
		If PColl(\x,\y,ShapeWidth(470+\t),ShapeHeight(470+\t),bx*8,by*8,1,1)
			freelast sp()
		EndIf
	Wend
	Gosub refreshoverlay
	Return

.backshape:
	newmem ppl()
	While globfree(ppl())
		If ppl()\x=bx*8 AND ppl()\y=by*8
			t=ppl()\t:##[$80CA] ab(t)
			For sh=\n To \n+\f-1
				CludgeBitMap sh,5
				For x=0 To \w*8-1
					For y=0 To \h*8-1
						Use lmaxlen 0:c=Cls(bx*8+x,by*8+y)
						If c=12
							Use lmaxlen 5:If Cls(x,y)=2 Then Point x,y,3
						EndIf
					Next
				Next
			Next
		EndIf
	Wend
	Gosub refreshoverlay
	Return

.pickblock
	x=bx*8:y=by*8
	n=(wind(x ASR 3,y ASR 3) AND 1023) -128
	Return

.sameblock:
	Use lmaxlen 0
	x=bx*8:y=by*8
	wind(x ASR 3,y ASR 3)=n+128+32768
	drawblok{Bank(1)+n*32,brush}:longdiv 0,x,y
	Return

.newblock:
	Use lmaxlen 0
	x=bx*8:y=by*8
	getblock{Bank(0),bm,x,y}
	cb.l=cmpblock{Bank(0),Bank(1)}:diff=cb AND 31
	If diff=0
		cb=cb LSR 5:n.w=cb
	Else
		n=addblock{Bank(0),Bank(1)}
	EndIf
	wind(x ASR 3,y ASR 3)=n+128+32768
	drawblok{Bank(1)+n*32,brush}:longdiv 0,x,y
	count=Peek.w(?count)
	Return

.refreshmap:
	Use lmaxlen 0
	For y=0 To 47
		For x=0 To 95
			ind.l=wind(x,y)-128
			blok.l=Bank(1)+(ind AND 2047)*32
			drawblok{blok,brush}:longdiv 0,x*8,y*8
		Next
	Next
	Return

;----------------------------------------------------------

.
.quickscan:

	Use lmaxlen 0:BlockScroll

	n.w=0:nn.w=0
	Dim bcount(8192)
	Dim bptr.l(8192)

	Poke.w ?count,1							;first block is 0000000
	For y=0 To 383 Step 8				 ;pass 1 count pumpkins
		For x=0 To 767 Step 8
			getblock{Bank(0),bm,x,y}
			n=chkblock{Bank(0),Bank(1)}
			first(x ASR 3,y ASR 3)=n
			bcount(n)+1
		Next
	Next
	Poke.w ?count,1							;pass 2 add multiple pumpkins
	For y=0 To 383 Step 8
		For x=0 To 767 Step 8
			If bcount(first(x ASR 3,y ASR 3))>1
				getblock{Bank(0),bm,x,y}
				n=chkblock{Bank(0),Bank(1)}
				wind(x ASR 3,y ASR 3)=n+128+32768
				drawblok{Bank(1)+n*32,brush}:longdiv 0,x,y
			Else
				wind(x ASR 3,y ASR 3)=0
			EndIf
		Next
	Next
	Return

.dirtyscan

	NEWTYPE .cbok
		x.w:y.w:diff.w
	End NEWTYPE

	limit=6

	Repeat
		Dim List cb.cbok(4608)
		hits=0:Gosub scancount
		SortList cb(),SizeOf .cbok\diff
		ii=1200-Peek.w(?count)
		For i=1 To ii/2
			If LastItem(cb())
				x=cb()\x:y=cb()\y
				getblock{Bank(0),bm,x,y}
				n=addblock{Bank(0),Bank(1)}
				wind(x ASR 3,y ASR 3)=n+128+32768
				drawblok{Bank(1)+n*32,brush}:longdiv 0,x,y
				bcount(first(x ASR 3,y ASR 3))=2
				Locate 0,0:Print Peek.w(?count),"	"
				freelast cb()
			EndIf
		Next
		limit+2
	Until hits=0
	Return

.scancount:
	For y=0 To 383 Step 8				;pass 3 find orphan pumpkins
		For x=0 To 767 Step 8
			first=first(x ASR 3,y ASR 3)
			If bcount(first)<2
				getblock{Bank(0),bm,x,y}
				cb.l=cmpblock{Bank(0),Bank(1)}:diff=cb AND 31
				If diff<limit
					cb=cb LSR 5:n=cb:bcount(first)=2
					wind(x ASR 3,y ASR 3)=n+128+32768
					drawblok{Bank(1)+n*32,brush}:longdiv 0,x,y
				Else
					If globalloc(cb()) Then cb()\x=x,y,diff:hits+1
				EndIf
			EndIf
		Next
		If Joyb(0)<>0 Then End
	Next
	Return

.compiletracks

AMIGA

NEWTYPE.cmstruc ;	 STRUCTURE cmCrunchStruct,0
	Src.l:Seclen.l
	Dest.l
	DestLen.l
	DataHdr.l :Hook.l :pad1.w[4]
	MaxOff.l
	RealOff.l
	MinSecDist.l
	CrunLen.l	;*ADD 14!!*
	pad3.l[6]:pad4.b[4]
End NEWTYPE

NEWTYPE .theader
	nmp.l						;8k+ contours NOT CRUNCHED
	blockmap.l			 ;8k crunched
	blocks.l[8]			;40k+ crunched
	info.l
End NEWTYPE

NEWTYPE .frend :lti.w:ltj:rti:rtj:End NEWTYPE

Dim th.theader(23)
ptr.l=0
InitBank 2,65536,0	;crunch buffer

Dim tags.l(100)
tags(0)=$80000001:tags(1)=1
*mine.cmstruc=##[$E407](&tags(0))

If ReadMem(0,"ram:tracks.bin")
	;
	For i=1 To 24
		;
		; do nmp file
		;
		th(i-1)\nmp=ptr
		;
		If WriteMem(1,"tracks/maps/track"+Str$(i)+".map")
			FreeBank 0:InitBank 0,FileSeek(1)+7*SizeOf.frend,0
			##[$BE14] 1,Bank(0),FileSeek(1)
			CloseFile 1
		Else
			NPrint "tracks/maps/track"+Str$(i)+".map not found"
		EndIf
		maptr.l=Bank(0)
		pts.w=Peek.w(maptr+64*64*2):pts1.w=pts+1:pts2.w=pts+2:pts3=pts+3:pts4=pts+4
		condt.l=maptr+64*64*2 + 2
		For cnt.w=0 To 7*SizeOf.frend Step 2
			Poke.w condt+cnt+(pts1*SizeOf.frend),Peek.w (condt+cnt)
		Next
		Exists 0,Bank(0),BankSize(0)
		ptr+BankSize(0)
		;
		; do block map (crunch 96*48*2+64)			 ;palette+map
		;
		th(i-1)\blockmap=ptr
		bsize.l=96*48*2+64
		FreeBank 0:LoadBank 0,"tracks/circuit."+Str$(i)

		*mine\Src=Bank(0),bsize,Bank(2)+14,BankSize(2)
		*mine\DataHdr=Bank(2)
		##[$E406] *mine
		Exists 0,Bank(2),*mine\CrunLen+14			 ;map.w(95,d7)
		ptr+*mine\CrunLen+14
		;
		; do blocks (max 8 banks of 8K)					;blocks
		;
		bsrc.l=Bank(0)+96*48*2+64
		bsize.l=BankSize(0)-96*48*2-64
		;
		For j=0 To 7:th(i-1)\blocks[j]=0:Next
		;
		j=0
		;
		Repeat
			If bsize>8192 Then bsiz=8192 Else bsiz=bsize
			th(i-1)\blocks[j]=ptr:j+1
			*mine\Src=bsrc,bsiz,Bank(2)+14,BankSize(2)
			*mine\DataHdr=Bank(2):##[$E406] *mine
			Exists 0,Bank(2),*mine\CrunLen+14
			ptr+*mine\CrunLen+14
			bsize-bsiz:bsrc+bsiz
		Until bsize=0
		;
		th(i-1)\info=ptr
		FreeBank 0:LoadBank 0,"tracks/info."+Str$(i)
		Exists 0,Bank(0),BankSize(0):ptr+BankSize(0)
		;
		NPrint "!"
	Next
	CloseFile 0
EndIf

If ReadMem(0,"ram:tracks.ptr")
	Exists 0,&th(0),24*SizeOf .theader
	CloseFile 0
EndIf

End
