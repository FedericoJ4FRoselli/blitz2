; ascii translation of /Users/simon/Google Drive/amiga/w/abc/bums/bum9/Particle/Particle3d.bb2,/Users/simon/Google Drive/amiga/w/abc/bums/old/bum9/Particle/Particle3d.bb2,/Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/bum9/Particle/Particle3d.bb2,/Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/old/bum9/Particle/Particle3d.bb2
;Hello,
;Well, this program is a little experiment from me. It was created
;for Acid but it is not finished... yet :-)
;As you can see: it is not full documented (especially not the ASM-
;part). But it will be for Acid. The Idea behind is to show all
;beginners, how easy it is to translate time-"expensive" parts in
;ASM.
;On a normal A4000/40 you'll get around 25 FPS with the Bader-spaceship,
;which has around 1000 points. I have no possibilities to test the Ball,
;so i think "sphere.vs3d" is with 114 points less enough for any machine.
;You can yourself use ANY Videoscape 3D ASCII-object (e.g. convert it with
;Pixel 3D, was included in a Amiga Format)
;
;... ah yes: the calculating is into the "deep" of the 3rd dimension... :-)
;
;So, and now i'll look, how fast Mark's 3D-lib will be... :-)
;
;cya, and don't wait too long with the answer, please... :-S

WBStartup

NEWTYPE .coord
	x.f			 ; x-coord
	y.f			 ; y-coord
	z.f			 ; z-coord
End NEWTYPE

points.w=0	; number of points (particles)
bmp.w=0		 ; doublebuffering...
xa.w=1			; x-angle
ya.w=1			; y-angle
za.w=1			; z-angle
x.l=0			 ; x coord
y.l=0			 ; y coord
z.l=0			 ; z coord

maxx.f=0		; Maximum absolute of x,y,z
mem.l=0		 ; Memory-pointer for the point's :-)

i.l=0			 ; legendary counter for serveral things :-)
k.l=0			 ; Variable for serveral things

FindScreen 1

; ASL-Filerequester

MaxLen pa$=192		; ASL-Filerequester needs this strange thing of 2
MaxLen fi$=192		; Variables with this size...

;pa$="hd2:programmieren/particle"				; Here ist the default Path from the requester

pa$=""
fi$="sphere.vs3d"	 ; and that's the default filename
f$=ASLFileRequest$("Videoscape-Object",pa$,fi$) ; Oh... hmm.. the command i think... :-)

; Here we open a screen with Resolution 320*200*1 and a "blank" window

Screen 0,0,0,320,255,1,$00,"Particle 1.0",0,1
Window 0,0,11,320,189,$1c00,"",1,0
ScreensBitMap 0,0		 ; Bitmap 0 is from Screen 0

BitMap 1,320,255,1		; Bitmap 1 to prepare Double-buffering...

Use BitMap 0					; ... but first we need Bitplane 1 for our work.


; Loading routine for any Videoscape 3DG1 ASCII-File:

NPrint "loading Videoscape-Object..."
NPrint "(brrr.. hold on your horses)"
If WriteMem (0,f$)											 ; open file and control, if it exists
	FileInput 0														; Default input for any input-command to File 0
	If Edit$(255)<>"3DG1"									; Read the first line and control the file for "3DG1"
		NPrint "No Videoscape '1' -Object!"	; If it is not so: leave the programm...
		MouseWait														; ...after a mouse click...
		End																	; with end. (This is nasty in a structured program but alot easyer... :-)
	EndIf
	points=Val(Edit$(255))								 ; The next line says the number of points in the object
	NPrint "Number of particles : ",points

	Dim particle.coord(points)						 ; This is the "Buffer" to become all floating-numbers (else we must load the file
																				 ; more than once)
	For i=1 To points
			If i<320 Then Point i,11,0					; little top-line to show, that the program works on something...
			a$=Edit$(255)											; Read next line from file
			a.w=Instr(a$," ")									; search for the first space
			particle(i)\x=Val(Mid$(a$,1,a))		; then filter the first floating number out
			a+1																; same like a=a+1
			b.w=Instr(a$," ",a)-a+1						; search for the next space
			particle(i)\y=Val(Mid$(a$,a,b))		; filter the 2nd floating number out
			a=a+b															; the point of the last one...
			particle(i)\z=Val(Mid$(a$,a,Len(a$)-a)) ; ...and filter it out

			; The following lines filter out the biggest number in the file.
			If maxx<Abs(particle(i)\x) Then maxx=Abs(particle(i)\x)
			If maxx<Abs(particle(i)\y) Then maxx=Abs(particle(i)\y)
			If maxx<Abs(particle(i)\z) Then maxx=Abs(particle(i)\z)

	Next i

	CloseFile 0														; Well, that's it for the file.

	maxx=120/maxx													; This gives back the factor to calculate ANY size object to our screen size

	mem=AllocMem(points*2*3,1)						 ; We need the RAM (possibly fast) to calculate most in assembler

	If mem>0															 ; if mem 0 then we DON't have enough ram!
		For i=1 To points
			k=mem+((i-1)*6)										; calculate the memory-point for the next point.
			x=particle(i)\x*maxx							 ; calculate a integer-number from x with the factor of maxx
			Poke.w k,x												 ; and put the word into the mem (as 1st)
			y=particle(i)\y*maxx							 ; calculate a integer-number from y with the factor of maxx
			Poke.w k+2,y											 ; and put the word into the mem (as 2nd)
			z=particle(i)\z*maxx							 ; calculate a integer-number from z with the factor of maxx
			Poke.w k+4,z											 ; and put the word into the mem (as 3rd)
		Next i
	Else
		; This is only for lamers :-)
		NPrint "Out of Memory (...or something similar)"
		NPrint "Exit"
		MouseWait
		End
	EndIf
Else
	; the File is NOT here...
	NPrint "No file with this path/name!"
	End
EndIf

; Well, it is a little bit nicer if we do that here... :
DefaultInput

; We go To BLITZ and create a 320*200-Display
BLITZ
InitCopList 0,40,255,$401,8,4,1
CreateDisplay 0

StopCycle 0,0,0,0,0
StopCycle 0,1,15,15,15

DisplayPalette 0,0

Repeat
	xa=xa+2						 ; Angle of x
	ya=ya+4						 ; Angle of y
	za=za+6						 ; Angle of z

	; We just control here, that nobody will have more than 360 degrees... :-)
	If xa>360 Then xa=1
	If ya>360 Then ya=1
	If za>360 Then za=1

	; Double buffering
	VWait
	DisplayBitMap 0,bmp
	bmp=1-bmp
	Use BitMap bmp
	BlockScroll

	; calculate constantes in formula

	;ASM-part...

	GetReg d0,xa ASL 1	; Here we give the registers D0,D1 and D2 the Angles of the variables
	GetReg d1,ya ASL 1
	GetReg d2,za ASL 1

	; xx=(costab(ya)*costab(za)) ASR 8

	LEA calc,a0				 ; Adress of constant-table
	LEA sinus,a1				; Adress of sinus-table
	LEA cosin,a2				; adress of cosinus-table
	MOVEQ #0,d3				 ; First we clear d3
	MOVE.w 0(a2,d2),d3	; Then we get the Word
	MULS 0(a2,d1),d3
	ASR.l #8,d3
	MOVE.w d3,(a0)+

	; xy=(costab(ya)*sintab(za)) ASR 8

	MOVEQ #0,d3
	MOVE.w 0(a2,d1),d3
	MULS 0(a1,d2),d3
	ASR.l #8,d3
	MOVE.w d3,(a0)+

	; xz=sintab(ya)

	MOVE.w 0(a1,d1),(a0)+

	; yx=(costab(xa)*sintab(za)) ASR 8 +(sintab(xa)*sintab(ya)*costab(za)) ASR 16

	MOVEQ #0,d3
	MOVE.w 0(a2,d0),d3
	MULS 0(a1,d2),d3
	ASR.l #8,d3
	MOVE.w d3,(a0)
	MOVEQ #0,d3
	MOVE.w 0(a1,d0),d3
	MULS 0(a1,d1),d3
	ASR.l #8,d3
	MOVE.l d3,d4					 ;we need this result also in the next formula
	MULS 0(a2,d2),d3
	ASR.l #8,d3
	ADD.w d3,(a0)+

	; yy=(-costab(xa)*costab(za)) ASR 8+(sintab(xa)*sintab(ya)*sintab(za)) ASR 16

	MOVEQ #0,d3
	MOVE.w 0(a2,d0),d3
	NEG.w d3
	MULS 0(a2,d2),d3
	ASR.l #8,d3
	MOVE.w d3,(a0)
	MULS 0(a1,d2),d4			;special: d4 is pre-calculated in the formula above,
	ASR.l #8,d4					 ;so we take now THEM for work... :-)
	ADD.w d4,(a0)+

	; yz=(-sintab(xa)*costab(ya)) ASR 8

	MOVEQ #0,d3
	MOVE.w 0(a1,d0),d3
	NEG.w d3
	MULS 0(a2,d1),d3
	ASR.l #8,d3
	MOVE.w d3,(a0)+

	; zx=(sintab(xa)*sintab(za)) ASR 8-(costab(xa)*sintab(ya)*costab(za)) ASR 8

	MOVEQ #0,d3
	MOVE.w 0(a1,d0),d3
	MULS 0(a1,d2),d3
	ASR.l #8,d3
	MOVE.w d3,(a0)
	MOVEQ #0,d3
	MOVE.w 0(a2,d0),d3
	MULS 0(a1,d1),d3
	ASR.l #8,d3
	MOVE.l d3,d4					 ;we need this result also in the next formula
	MULS 0(a2,d2),d3
	ASR.l #8,d3
	SUB.w d3,(a0)+

	; zy=(-sintab(xa)*costab(za)) ASR 8-(costab(xa)*sintab(ya)*sintab(za)) ASR 8

	MOVEQ #0,d3
	MOVE.w 0(a1,d0),d3
	NEG.w d3
	MULS 0(a2,d2),d3
	ASR.l #8,d3
	MOVE.w d3,(a0)
	MULS 0(a1,d2),d4			;special: d4 is pre-calculated in the formula above,
	ASR.l #8,d4					 ;so we take now THEM for work... :-)
	SUB.w d4,(a0)+

	; zz=(costab(xa)*costab(ya)) ASR 8

	MOVEQ #0,d3
	MOVE.w 0(a2,d0),d3
	MULS 0(a2,d1),d3
	ASR.l #8,d3
	MOVE.w d3,(a0)+

	For i=0 To (points-1)*6 Step 6

;	 x=xx * x(i) + xy * y(i) + xz * z(i)

		GetReg d4,Addr BitMap(bmp)
		GetReg d0,mem
		GetReg d1,i

		LEA calc,a0
		MOVE.l d0,a1
		MOVEQ #0,d0
		MOVEQ #0,d2
		MOVE.w 0(a1,d1),d0
		MULS (a0)+,d0
		MOVE.w 2(a1,d1),d2
		MULS (a0)+,d2
		ADD.l d2,d0
		MOVEQ #0,d2
		MOVE.w 4(a1,d1),d2
		MULS (a0)+,d2
		ADD.l d2,d0
		ASR.l #8,d0

;		y=yx * x(i) + yy * y(i) + yz * z(i)

		MOVEQ #0,d3
		MOVEQ #0,d2
		MOVE.w 0(a1,d1),d2
		MULS (a0)+,d2
		MOVE.w 2(a1,d1),d3
		MULS (a0)+,d3
		ADD.l d3,d2
		MOVEQ #0,d3
		MOVE.w 4(a1,d1),d3
		MULS (a0)+,d3
		ADD.l d3,d2
		ASR.l #8,d2

;		z=zx * x(i) + zy * y(i) + zz * z(i)

		MOVEQ #0,d3
		MOVEQ #0,d4
		MOVE.w 0(a1,d1),d4
		MULS (a0)+,d4
		MOVE.w 2(a1,d1),d3
		MULS (a0)+,d3
		ADD.l d3,d4
		MOVEQ #0,d3
		MOVE.w 4(a1,d1),d3
		MULS (a0)+,d3
		ADD.l d3,d4
		ASR.l #8,d4
		ADD #200,d4

		MULS #170,d2
		DIVS d4,d2
		MULS #170,d0
		DIVS d4,d0

		ADD.w #160,d0
		BPL p1
		MOVE.l #0,d0
p1: CMP.w #319,d0
		BLE p2
		MOVE.w #319,d0
p2: ADD.w #127,d2
		BPL p3
		MOVE.l #0,d2
p3: CMP.w #254,d2
		BLE p4
		MOVE.l #254,d2

p4: PutReg d0,x
		PutReg d2,y

		Point x,y,1
	Next i
Until Joyb(0)

End

.calc:
Dc.w 0,0,0,0,0,0,0,0,0

.sinus:
		Dc.w	$00000000,$00000004,$00000008,$0000000D,$00000011,$00000016,$0000001A
		Dc.w	$0000001F,$00000023,$00000027,$0000002C,$00000030,$00000035,$00000039,$0000003D
		Dc.w	$00000042,$00000046,$0000004A,$0000004E,$00000053,$00000057,$0000005B,$0000005F
		Dc.w	$00000063,$00000067,$0000006B,$0000006F,$00000073,$00000077,$0000007B,$0000007F
		Dc.w	$00000083,$00000087,$0000008B,$0000008E,$00000092,$00000096,$00000099,$0000009D
		Dc.w	$000000A0,$000000A4,$000000A7,$000000AA,$000000AE,$000000B1,$000000B4,$000000B7
		Dc.w	$000000BA,$000000BD,$000000C0,$000000C3,$000000C6,$000000C9,$000000CB,$000000CE
		Dc.w	$000000D1,$000000D3,$000000D6,$000000D8,$000000DA,$000000DD,$000000DF,$000000E1
		Dc.w	$000000E3,$000000E5,$000000E7,$000000E9,$000000EB,$000000EC,$000000EE,$000000EF
		Dc.w	$000000F1,$000000F2,$000000F4,$000000F5,$000000F6,$000000F7,$000000F8,$000000F9
		Dc.w	$000000FA,$000000FB,$000000FC,$000000FC,$000000FD,$000000FD,$000000FE,$000000FE
		Dc.w	$000000FF,$000000FF,$000000FF,$000000FF,$000000FF,$000000FF,$000000FF,$000000FE
		Dc.w	$000000FE,$000000FE,$000000FD,$000000FC,$000000FC,$000000FB,$000000FA,$000000F9
		Dc.w	$000000F8,$000000F7,$000000F6,$000000F5,$000000F4,$000000F2,$000000F1,$000000F0
		Dc.w	$000000EE,$000000EC,$000000EB,$000000E9,$000000E7,$000000E5,$000000E3,$000000E1
		Dc.w	$000000DF,$000000DD,$000000DA,$000000D8,$000000D6,$000000D3,$000000D1,$000000CE
		Dc.w	$000000CB,$000000C9,$000000C6,$000000C3,$000000C0,$000000BD,$000000BA,$000000B7
		Dc.w	$000000B4,$000000B1,$000000AE,$000000AA,$000000A7,$000000A4,$000000A0,$0000009D
		Dc.w	$00000099,$00000096,$00000092,$0000008E,$0000008B,$00000087,$00000083,$0000007F
		Dc.w	$0000007B,$00000077,$00000073,$0000006F,$0000006B,$00000067,$00000063,$0000005F
		Dc.w	$0000005B,$00000057,$00000053,$0000004E,$0000004A,$00000046,$00000042,$0000003D
		Dc.w	$00000039,$00000035,$00000030,$0000002C,$00000027,$00000023,$0000001F,$0000001A
		Dc.w	$00000016,$00000011,$0000000D,$00000008,$00000004,$00000000,$FFFFFFFC,$FFFFFFF8
		Dc.w	$FFFFFFF3,$FFFFFFEF,$FFFFFFEA,$FFFFFFE6,$FFFFFFE1,$FFFFFFDD,$FFFFFFD9,$FFFFFFD4
		Dc.w	$FFFFFFD0,$FFFFFFCB,$FFFFFFC7,$FFFFFFC3,$FFFFFFBE,$FFFFFFBA,$FFFFFFB6,$FFFFFFB2
		Dc.w	$FFFFFFAD,$FFFFFFA9,$FFFFFFA5,$FFFFFFA1,$FFFFFF9D,$FFFFFF99,$FFFFFF95,$FFFFFF91
		Dc.w	$FFFFFF8D,$FFFFFF89,$FFFFFF85,$FFFFFF81,$FFFFFF7D,$FFFFFF79,$FFFFFF75,$FFFFFF72
		Dc.w	$FFFFFF6E,$FFFFFF6A,$FFFFFF67,$FFFFFF63,$FFFFFF60,$FFFFFF5C,$FFFFFF59,$FFFFFF56
		Dc.w	$FFFFFF52,$FFFFFF4F,$FFFFFF4C,$FFFFFF49,$FFFFFF46,$FFFFFF43,$FFFFFF40,$FFFFFF3D
		Dc.w	$FFFFFF3A,$FFFFFF37,$FFFFFF35,$FFFFFF32,$FFFFFF2F,$FFFFFF2D,$FFFFFF2A,$FFFFFF28
		Dc.w	$FFFFFF26,$FFFFFF23,$FFFFFF21,$FFFFFF1F,$FFFFFF1D,$FFFFFF1B,$FFFFFF19,$FFFFFF17
		Dc.w	$FFFFFF15,$FFFFFF14,$FFFFFF12,$FFFFFF11,$FFFFFF0F,$FFFFFF0E,$FFFFFF0C,$FFFFFF0B
		Dc.w	$FFFFFF0A,$FFFFFF09,$FFFFFF08,$FFFFFF07,$FFFFFF06,$FFFFFF05,$FFFFFF04,$FFFFFF04
		Dc.w	$FFFFFF03,$FFFFFF03,$FFFFFF02,$FFFFFF02,$FFFFFF01,$FFFFFF01,$FFFFFF01,$FFFFFF01
		Dc.w	$FFFFFF01,$FFFFFF01,$FFFFFF01,$FFFFFF02,$FFFFFF02,$FFFFFF02,$FFFFFF03,$FFFFFF04
		Dc.w	$FFFFFF04,$FFFFFF05,$FFFFFF06,$FFFFFF07,$FFFFFF08,$FFFFFF09,$FFFFFF0A,$FFFFFF0B
		Dc.w	$FFFFFF0C,$FFFFFF0E,$FFFFFF0F,$FFFFFF10,$FFFFFF12,$FFFFFF14,$FFFFFF15,$FFFFFF17
		Dc.w	$FFFFFF19,$FFFFFF1B,$FFFFFF1D,$FFFFFF1F,$FFFFFF21,$FFFFFF23,$FFFFFF26,$FFFFFF28
		Dc.w	$FFFFFF2A,$FFFFFF2D,$FFFFFF2F,$FFFFFF32,$FFFFFF35,$FFFFFF37,$FFFFFF3A,$FFFFFF3D
		Dc.w	$FFFFFF40,$FFFFFF43,$FFFFFF46,$FFFFFF49,$FFFFFF4C,$FFFFFF4F,$FFFFFF52,$FFFFFF56
		Dc.w	$FFFFFF59,$FFFFFF5C,$FFFFFF60,$FFFFFF63,$FFFFFF67,$FFFFFF6A,$FFFFFF6E,$FFFFFF72
		Dc.w	$FFFFFF75,$FFFFFF79,$FFFFFF7D,$FFFFFF81,$FFFFFF85,$FFFFFF89,$FFFFFF8D,$FFFFFF91
		Dc.w	$FFFFFF95,$FFFFFF99,$FFFFFF9D,$FFFFFFA1,$FFFFFFA5,$FFFFFFA9,$FFFFFFAD,$FFFFFFB2
		Dc.w	$FFFFFFB6,$FFFFFFBA,$FFFFFFBE,$FFFFFFC3,$FFFFFFC7,$FFFFFFCB,$FFFFFFD0,$FFFFFFD4
		Dc.w	$FFFFFFD9,$FFFFFFDD,$FFFFFFE1,$FFFFFFE6,$FFFFFFEA,$FFFFFFEF,$FFFFFFF3,$FFFFFFF8
		Dc.w	$FFFFFFFC,$00000000

.cosin:
		Dc.w	$000000FF,$000000FF,$000000FF,$000000FF,$000000FE,$000000FE,$000000FE
		Dc.w	$000000FD,$000000FC,$000000FC,$000000FB,$000000FA,$000000F9,$000000F8,$000000F7
		Dc.w	$000000F6,$000000F5,$000000F4,$000000F2,$000000F1,$000000F0,$000000EE,$000000EC
		Dc.w	$000000EB,$000000E9,$000000E7,$000000E5,$000000E3,$000000E1,$000000DF,$000000DD
		Dc.w	$000000DA,$000000D8,$000000D6,$000000D3,$000000D1,$000000CE,$000000CB,$000000C9
		Dc.w	$000000C6,$000000C3,$000000C0,$000000BD,$000000BA,$000000B7,$000000B4,$000000B1
		Dc.w	$000000AE,$000000AA,$000000A7,$000000A4,$000000A0,$0000009D,$00000099,$00000096
		Dc.w	$00000092,$0000008E,$0000008B,$00000087,$00000083,$0000007F,$0000007B,$00000077
		Dc.w	$00000073,$0000006F,$0000006B,$00000067,$00000063,$0000005F,$0000005B,$00000057
		Dc.w	$00000053,$0000004E,$0000004A,$00000046,$00000042,$0000003D,$00000039,$00000035
		Dc.w	$00000030,$0000002C,$00000027,$00000023,$0000001F,$0000001A,$00000016,$00000011
		Dc.w	$0000000D,$00000008,$00000004,$00000000,$FFFFFFFC,$FFFFFFF8,$FFFFFFF3,$FFFFFFEF
		Dc.w	$FFFFFFEA,$FFFFFFE6,$FFFFFFE1,$FFFFFFDD,$FFFFFFD9,$FFFFFFD4,$FFFFFFD0,$FFFFFFCB
		Dc.w	$FFFFFFC7,$FFFFFFC3,$FFFFFFBE,$FFFFFFBA,$FFFFFFB6,$FFFFFFB2,$FFFFFFAD,$FFFFFFA9
		Dc.w	$FFFFFFA5,$FFFFFFA1,$FFFFFF9D,$FFFFFF99,$FFFFFF95,$FFFFFF91,$FFFFFF8D,$FFFFFF89
		Dc.w	$FFFFFF85,$FFFFFF81,$FFFFFF7D,$FFFFFF79,$FFFFFF75,$FFFFFF72,$FFFFFF6E,$FFFFFF6A
		Dc.w	$FFFFFF67,$FFFFFF63,$FFFFFF60,$FFFFFF5C,$FFFFFF59,$FFFFFF56,$FFFFFF52,$FFFFFF4F
		Dc.w	$FFFFFF4C,$FFFFFF49,$FFFFFF46,$FFFFFF43,$FFFFFF40,$FFFFFF3D,$FFFFFF3A,$FFFFFF37
		Dc.w	$FFFFFF35,$FFFFFF32,$FFFFFF2F,$FFFFFF2D,$FFFFFF2A,$FFFFFF28,$FFFFFF26,$FFFFFF23
		Dc.w	$FFFFFF21,$FFFFFF1F,$FFFFFF1D,$FFFFFF1B,$FFFFFF19,$FFFFFF17,$FFFFFF15,$FFFFFF14
		Dc.w	$FFFFFF12,$FFFFFF11,$FFFFFF0F,$FFFFFF0E,$FFFFFF0C,$FFFFFF0B,$FFFFFF0A,$FFFFFF09
		Dc.w	$FFFFFF08,$FFFFFF07,$FFFFFF06,$FFFFFF05,$FFFFFF04,$FFFFFF04,$FFFFFF03,$FFFFFF03
		Dc.w	$FFFFFF02,$FFFFFF02,$FFFFFF01,$FFFFFF01,$FFFFFF01,$FFFFFF01,$FFFFFF01,$FFFFFF01
		Dc.w	$FFFFFF01,$FFFFFF02,$FFFFFF02,$FFFFFF02,$FFFFFF03,$FFFFFF04,$FFFFFF04,$FFFFFF05
		Dc.w	$FFFFFF06,$FFFFFF07,$FFFFFF08,$FFFFFF09,$FFFFFF0A,$FFFFFF0B,$FFFFFF0C,$FFFFFF0E
		Dc.w	$FFFFFF0F,$FFFFFF10,$FFFFFF12,$FFFFFF14,$FFFFFF15,$FFFFFF17,$FFFFFF19,$FFFFFF1B
		Dc.w	$FFFFFF1D,$FFFFFF1F,$FFFFFF21,$FFFFFF23,$FFFFFF26,$FFFFFF28,$FFFFFF2A,$FFFFFF2D
		Dc.w	$FFFFFF2F,$FFFFFF32,$FFFFFF35,$FFFFFF37,$FFFFFF3A,$FFFFFF3D,$FFFFFF40,$FFFFFF43
		Dc.w	$FFFFFF46,$FFFFFF49,$FFFFFF4C,$FFFFFF4F,$FFFFFF52,$FFFFFF56,$FFFFFF59,$FFFFFF5C
		Dc.w	$FFFFFF60,$FFFFFF63,$FFFFFF67,$FFFFFF6A,$FFFFFF6E,$FFFFFF72,$FFFFFF75,$FFFFFF79
		Dc.w	$FFFFFF7D,$FFFFFF81,$FFFFFF85,$FFFFFF89,$FFFFFF8D,$FFFFFF91,$FFFFFF95,$FFFFFF99
		Dc.w	$FFFFFF9D,$FFFFFFA1,$FFFFFFA5,$FFFFFFA9,$FFFFFFAD,$FFFFFFB2,$FFFFFFB6,$FFFFFFBA
		Dc.w	$FFFFFFBE,$FFFFFFC3,$FFFFFFC7,$FFFFFFCB,$FFFFFFD0,$FFFFFFD4,$FFFFFFD9,$FFFFFFDD
		Dc.w	$FFFFFFE1,$FFFFFFE6,$FFFFFFEA,$FFFFFFEF,$FFFFFFF3,$FFFFFFF8,$FFFFFFFC,$00000000
		Dc.w	$00000004,$00000008,$0000000D,$00000011,$00000016,$0000001A,$0000001F,$00000023
		Dc.w	$00000027,$0000002C,$00000030,$00000035,$00000039,$0000003D,$00000042,$00000046
		Dc.w	$0000004A,$0000004E,$00000053,$00000057,$0000005B,$0000005F,$00000063,$00000067
		Dc.w	$0000006B,$0000006F,$00000073,$00000077,$0000007B,$0000007F,$00000083,$00000087
		Dc.w	$0000008B,$0000008E,$00000092,$00000096,$00000099,$0000009D,$000000A0,$000000A4
		Dc.w	$000000A7,$000000AA,$000000AE,$000000B1,$000000B4,$000000B7,$000000BA,$000000BD
		Dc.w	$000000C0,$000000C3,$000000C6,$000000C9,$000000CB,$000000CE,$000000D1,$000000D3
		Dc.w	$000000D6,$000000D8,$000000DA,$000000DD,$000000DF,$000000E1,$000000E3,$000000E5
		Dc.w	$000000E7,$000000E9,$000000EB,$000000EC,$000000EE,$000000EF,$000000F1,$000000F2
		Dc.w	$000000F4,$000000F5,$000000F6,$000000F7,$000000F8,$000000F9,$000000FA,$000000FB
		Dc.w	$000000FC,$000000FC,$000000FD,$000000FD,$000000FE,$000000FE,$000000FF,$000000FF
		Dc.w	$000000FF,$000000FF

.ztab:

