; ascii translation of /Users/simon/Google Drive/amiga/w/lha/games/pacdarts/TACmanGame/TACman.bb2
; ==========	TACMAN	 Last modified 20 May 1994 ==========
;
; Variable Notes:
;
; db					 Double Buffer toggle ( 0...1...0...1...)
; n						number of blocks to replace for double buffer
; twice				Used for tiles to put twice (for double buffer)
; addBD{}			List of blocks to paste down
; d						Dummy variable for loops etc (recycled!)
; tx,ty				Tacmans x/y Screen Coords
; tacdx,tacdy	Direction x/y for Tacman
; tacx,tacy		Tacmans tile position
; bearing			current direction (1-Up 2-Down 3-Left 4-Right)
; tacfrm()		 Frame for Tacman (+anm)
; sdx(),sdy()	Stored Directions
; speed				Tacmans Movement speed (4-Normal 8-Fast)
; ghost()			Ghost structure
; map(x,y)		 For Game Map (0-Empty 1/44-Wall 2-Dot 3-Pill)
; wall				 Keeps wall type value
; lev					Current level (NB: map files are lev-1)
; ng()				 Number of ghosts used in each level
; dtx,dty			Destination points X/Y for ghost to travel
; gx,gy				Ghost x/y position	for map calculations
; dx,dy					"	 Direction x/y	"	 "			 "
; clever			 Ghosts handicap :-
;	 "						If True	- Ghosts will track down Tacman
;	 "						If false - Ghosts will wonder off elsewhere
; goodie			 Temp for goodies
; turbotime		Countdown timer for Turbo
; bonuslev		 True=Bonus level	 False=normal level
; bonlev			 Keeps track of bonus level to load
; bonusbits		Counter for number of bonuses to collect
; lives				Errr.. Must be used for number of lives eh?
; score				MMM... Wonder what this variables for ??
; hi$()				For Hiscore names
; hi()				 For Hiscore numbers
; fl$					Filename for short maps
; t$,a$				More recycled vars for entering name etc.
; #test				If this=1 then no sound/music files will
;	 "					be loaded in. I used this so I could quickly
;	 "					test different screen layouts without having
;	 "					to wait for all files to load in.

;================== INIT VARIABLES =======================

;SetErr :End :End SetErr
#test=0	; * * * * * * * * * * * * *

DEFTYPE .w :##[$80C3]
db=0 :xtiles=21 :ytiles=17 :lives=0 :score.l=0 :lev=0 :bonlev=0
xsize=16 : ysize=xsize :dat$="" :dots=0 :bonuslev=False
size=xtiles*ytiles : xtiles-1 : ytiles-1 :clever=False
Dim map.b(xtiles,ytiles),ng(12)
Dim sdx.b(4),sdy.b(4),tacfrm.b(4)
sdy(1)=-1 :sdy(2)=1 :sdx(3)=-1 :sdx(4)=1 :n=0
tacfrm(1)=4 :tacfrm(2)=7 :tacfrm(3)=10 :tacfrm(4)=13
ng(1)=2 :ng(2)=2 :ng(3)=2 :ng(4)=3 :ng(5)=3
ng(6)=3 :ng(7)=4 :ng(8)=4 :ng(9)=4 :ng(10)=5
ng(11)=5 :ng(12)=5 :bonusbits=0
rubber=False :fl$="" :wall=1 :twice=0 :Filter On

NEWTYPE .obj
	x.w : y		 ;	X /	Y Positions
	dx	: dy		; DX / DY Updates
	image			 ; Image to show
	status			; 1=Normal, 2=Scared, 3=Gobbled
	speed			 ; Actual movement speed
	defspeed		; Default Speed of Ghost (2-Slow 4-Normal 8-Fast)
	vun				 ; Vunerable Counter
End NEWTYPE

NEWTYPE .blocks
	tile.w : x : y
End NEWTYPE

Dim ghost.obj(5)
Dim db.blocks(6)
Dim hi$(14),hi.l(10)
hi$(11)="	P	L	A	Y	"
hi$(12)="		 HELP		 "
hi$(13)="		SCORES		"
hi$(14)="		 QUIT		 "

;======== LOAD IN FILES AND DO SCREEN SETUP =================

casestrcomp 0,"Eyes/Tacman.IFF"
casestrcomp 1,"Eyes/Tacman.IFF2"
LoadShapes 0,"Eyes/Tacman.shapes"
LoadShape 70,"Eyes/TacSpook.shape"

CNIF #test<>1
	astring 0,"TAC.font"
	Use ##[$C70D] 0
	LoadModule 1,"Ears/gameover.score"
	LoadModule 0,"Ears/maintitle.score"
	LoadModule 2,"Ears/hiscores.score"
	LoadSound 0,"Ears/eatdot.snd"		:Poke.w ##[$80B8] Sound(0)+4,236
	LoadSound 1,"Ears/eatpill.snd"	 :Poke.w ##[$80B8] Sound(1)+4,350
	LoadSound 2,"Ears/died.snd"			:Poke.w ##[$80B8] Sound(2)+4,510
	LoadSound 3,"Ears/fin.snd"			 :Poke.w ##[$80B8] Sound(3)+4,460
	LoadSound 4,"Ears/eatghost.snd"	:Poke.w ##[$80B8] Sound(4)+4,380
	LoadSound 5,"Ears/bonus.snd"		 :Poke.w ##[$80B8] Sound(5)+4,260
	LoadSound 6,"Ears/turbo.snd"		 :Poke.w ##[$80B8] Sound(6)+4,600
	LoadSound 7,"Ears/collect.snd"	 :Poke.w ##[$80B8] Sound(7)+4,264
	LoadSound 8,"Ears/tick.snd"			:Poke.w ##[$80B8] Sound(8)+4,264
CEND

Gosub ClearLevel
VWait 60 :BLITZ
lmaxlen 1,336,272+8,4
lmaxlen 0,336,272+8,4
Slice 0,28,336,272+8,$fff8,4,8,16,336,336
Use SetCycle 0 :Use Slice 0 :BlockScroll 0 :Show 0 :Colour 4,5
Buffer 0,8192 :Buffer 1,8192
Gosub Init_Hiscore

;===================== STATEMENTS =========================

Statement paste{X,Y,BLK}			; Stick blocks down using
	 Shared xsize,ysize				 ; tile coordinates.
	 BlitColl BLK,X*xsize,Y*ysize
End Statement

Statement addDB{BLK,X,Y}			; Add a block to list for
	Shared map(),db(),n,twice	 ; double buffering screen
	n+1 :twice=2
	map(X,Y)=BLK
	db(n)\tile=BLK,X,Y
End Statement

Statement DBval{VALUE,FMT$,XPOS}	 ; Double buffered Numbers
	Format FMT$ :Colour 3,5
	BitMapOutput 0 :Locate XPOS,33.5 :Print VALUE
	BitMapOutput 1 :Locate XPOS,33.5 :Print VALUE
	Format "0" :Colour 1,5
End Statement

Statement Score{}	 ; Double buffered Score Displayer
	Shared score
	Format "000000" :Colour 3,5
	BitMapOutput 0 :Locate 7,33.5 :Print score
	BitMapOutput 1 :Locate 7,33.5 :Print score
	Format "0" :Colour 1,5
End Statement

Statement wipe{}
	Use lmaxlen 0 :UnBuffer 0
	BlockScroll 0 :Show 0 :BitMapOutput 0
End Statement

Statement text{TXT$,Y,F,B}					; Show text on screen
	TXT$=UCase$(TXT$)
	Locate (42-Len(TXT$))/2,Y
	Colour F,B :Print TXT$ : Colour 4,5
End Statement

Statement JoyClear{}
	##[$80BB] :##[$80BC] Joyb(1)=0
End Statement

Statement JoyDown{}
	##[$80BB]
		If Joyb(0)<>0 Then VWait :BlockScroll 0 :End
	##[$80BC] Joyb(1)<>0
End Statement

; ============= BEGIN AGAIN FROM TITLE PAGE ==================

DisplayOff
.Restart
If fl$=""
	fl$="title-map" :Gosub LoadShortMap
	If #test<>1 Then PlayModule 0
EndIf
Gosub DrawShortMap
BlitColl 45,32,232 :BlitColl 45,272,232
Y=0 :sel=1 :Gosub hilite :JoyClear{} :DisplayOn
##[$80BB]
	Y=Joyy(1)
	If Y<>0 Then VWait 2 :Gosub hilite
	If Joyb(1)<>0
		Select sel
			Case 1 :##[$80BE] Select :##[$80BE] If :##[$80BE] ##[$80BB] :Goto StartPlay
			Case 2 :Gosub HelpPage :##[$80BE] Select :##[$80BE] If :##[$80BE] ##[$80BB] :Goto Restart
			Case 3 :Gosub ShowHiScores :##[$80BE] Select :##[$80BE] If :##[$80BE] ##[$80BB] :Goto Restart
			Case 4 :##[$80BE] Select :##[$80BE] If :##[$80BE] ##[$80BB] :End
		End Select
	EndIf
##[$80C7]

hilite:
sel=QWrap(sel+Y,1,5)
For d=1 To 4
text{hi$(d+10),25+(d*2),4,0}
Next d
text{hi$(sel+10),25+(sel*2),1,15}
##[$80BB] :##[$80BC] Joyr(1)=8
Return

; ================= BEGIN THE GAME ========================

.StartPlay
firstgame=True :Format "00" :fl$="" :StopModule
lives=4 :lev=0 :dots=0 :score.l=0 :Gosub ResetVars
BlockScroll 0

; ==================== SETUP SCREEN ========================

.Setup

; Has Tacman cleared the map of all dots?
; Did he run out of time?
; Was it a bonus level?
; Tune in next week as we continue the saga!

If dots=0
	If outoftime=True AND bonuslev=False Then VWait 20 :lives-1 :DBval{lives,"0",21} :Sound 2,12 :VWait 80
		If firstgame=False
			For d=1 To 20
				score+(1000*pills) :Score{}
				Sound 3,12 :VWait :Use SetCycle 1
				VWait :Use SetCycle 0
			Next d :VWait 20
			If gametime<>0
				For d=gametime To 0 Step -1
					score+25 :Score{} :DBval{d,"00",29}
					Sound 7,12 :VWait :Use SetCycle 1
					VWait :Use SetCycle 0
				Next d :VWait 20
			EndIf
		EndIf
	VWait 60 :lev+1
	If lev>12
		fl$="welldone-map" :Gosub LoadShortMap
		Gosub DrawShortMap :PlayModule 1
		Format "000000" :t$=Str$(score) :Format "0"
		text{" You Scored > "+t$+" ",30,14,0}
		VWait 200 :fl$="" :StopModule
		If score>hi(10) Then Gosub EnterName
		##[$80BE] If :Goto Restart
	EndIf
	Gosub Retrieve
EndIf
DisplayOff

;	------------ If Tacman is Dead --------------
If lives=0
	fl$="gameover-map" :Gosub LoadShortMap
	Gosub DrawShortMap :PlayModule 1
	Format "000000" :t$=Str$(score) :Format "0"
	text{" You Scored > "+t$+" ",30,14,0}
	VWait 200 :fl$="" :StopModule
	If score>hi(10) Then Gosub EnterName
	##[$80BE] If :Goto Restart
EndIf

;	----------- Stick down buffer blits ----------
Use SetCycle 0 :db=0 :Use lmaxlen 0 :BlockScroll 0
Gosub ResetVars :FlushBuffer 0 :FlushBuffer 1
Gosub Mapper :ShapesBitMap 0,1
Use lmaxlen 0	:BBlit 0,13,tx,ty
Use lmaxlen 1	:BBlit 1,13,tx,ty
If bonuslev=False
	For d=1 To ng(lev)
	Use lmaxlen 0 :BBlit 0,ghost(d)\image,ghost(d)\x,ghost(d)\y
	Use lmaxlen 1 :BBlit 1,ghost(d)\image,ghost(d)\x,ghost(d)\y
	Next d
EndIf
Show 0 :db=1 :Gosub Panel :DisplayOn
If bonuslev=True Then dots=1
##[$80BB] :##[$80BC] Joyr(1)=8
##[$80BB] :Gosub CheckMoose :##[$80BC] Joyr(1)<>8

If #test=1 Then End
eaten=0 :twice=0 :n=0 :db=1 :Show 0 :Use lmaxlen 1

; =================== MAIN GAME LOOP =====================

.MAINLOOP
##[$80BB]

; If tac is exactly on a map tile.........
If tx=(tacx ASL 4) AND ty=(tacy ASL 4)
	Gosub GetTacDir
	turbotime+(speed=8)
	If turbotime=0 Then speed=4 :Use SetCycle 0 Else speed=8 :Use SetCycle 1
	If map(tacx+Sgn(tacdx),tacy+Sgn(tacdy))=wall Then tacdx=0 :tacdy=0
	If twice=0
		eaten=map(tacx,tacy) :If eaten>0 Then addDB{0,tacx,tacy} :Gosub Gulp
	EndIf
EndIf

UnBuffer db

If Int(Rnd(89))=gametime AND bonuslev=False Then Gosub Goodies
If twice>0
	For d=1 To n
		BlitColl db(d)\tile,db(d)\x ASL 4,db(d)\y ASL 4
	Next d :twice-1
If twice=0 Then n=0
EndIf

If bonuslev=False
	For d=1 To ng(lev)
		gx=ghost(d)\x ASR 4 :gy=ghost(d)\y ASR 4
		If ghost(d)\x=(gx ASL 4) AND ghost(d)\y=(gy ASL 4)
			Select ghost(d)\status
				Case 1 : dtx=Sgn(tacx-gx) :dty=Sgn(tacy-gy) :clever=(lev>Int(Rnd(9)))
				Case 2 : dtx=-Sgn(tacx-gx) :dty=-Sgn(tacy-gy) :clever=True
				If ghost(d)\vun=0 Then ghost(d)\image=24+d,1,ghost(d)\defspeed,ghost(d)\defspeed,0
				Case 3 : dtx=Sgn(10-gx) :dty=Sgn(8-gy) :clever=True
			End Select
			If dtx=0 AND dty=0 Then Gosub CheckGhost
			dx=Sgn(ghost(d)\dx) :dy=Sgn(ghost(d)\dy)
			Gosub Get_To_The_Point
			ghost(d)\dx=dx*ghost(d)\speed,dy*ghost(d)\speed
		EndIf
		ghost(d)\x+ghost(d)\dx
		ghost(d)\y+ghost(d)\dy
		BBlit db,ghost(d)\image,ghost(d)\x,ghost(d)\y
		If ghost(d)\x ASR 4=tacx AND ghost(d)\y ASR 4=tacy Then Gosub CheckCollision
	Next d
EndIf

tx+tacdx :ty+tacdy
If tx=(tx ASR 4) ASL 4 Then tacx=tx ASR 4
If ty=(ty ASR 4) ASL 4 Then tacy=ty ASR 4
If cnt ##[$80B9] 4=0 Then anm=QWrap(anm+1,0,3)
BBlit db,frm+anm,tx,ty

cnt+1
If cnt ##[$80B9] 8=0 Then Score{}
If cnt ##[$80B9] 25=0
	gametime-1 :Sound 8,8 :DBval{gametime,"00",29}
	For d=1 To ng(lev)
		ghost(d)\vun-(1 AND ghost(d)\vun>0)
	Next d
EndIf
VWait :Show db :db=1-db :Use lmaxlen db

If dots=0 AND bonuslev=False Then ##[$80BE] ##[$80BB] :firstgame=False :Goto Setup
If bonusbits=0 AND bonuslev=True Then Gosub SuperBonus
If gametime=0 Then outoftime=True :dots=0 :##[$80BE] ##[$80BB] :Goto Setup

##[$80BC] Joyb(0)=1

VWait :wipe{} :End

; ================ WHAT HAVE WE EATEN? ===================

.Gulp
	Select eaten
		If eaten>=35 AND eaten<=42 Then bonusbits-1
		Case 2 : Sound 0,1 :dots-1 :score+speed ASL 2	; Its a dot.
		Case 3
			Sound 1,4 :pills-1
			If bonuslev=False				; Its a pill.
				For d=1 To ng(lev)
					If ghost(d)\status=1
						ghost(d)\image=43,2,ghost(d)\defspeed ASR 1,ghost(d)\defspeed,10
						EndIf
				Next d
			EndIf
		Case 35 :score+50 :Sound 7,2		; Apple (keeps the doctor away).
		Case 36 :score+100 :Sound 7,2	 ; Cherry (not keen on em myself).
		Case 37 :score+500 :Sound 7,2	 ; Cake (like granny used to make).
		Case 38 :score+1000 :Sound 7,2	; Money talks.
		Case 39 :lives+1 :Sound 7,2 :DBval{lives,"0",21} ; extra life.
		Case 40
			turbotime=180 :Sound 6,4 :speed=8				 ; Ooh.. TURBO!!
			Use SetCycle 1
			If tacdx+tacdy<5 Then tacdx ASL 1 :tacdy ASL 1
		Case 41
			UnBuffer db :VWait :Show db
				For X=1 To xtiles-1								; Wipeout...gets rid of
					For Y=1 To ytiles-1							; all dots on screen.
						If map(X,Y)=2
							paste{X,Y,0}
							Sound 0,3 :dots-1 :score+speed
							Use SetCycle 1 :VWait 1
							Use SetCycle 0 : Score{}
							VWait 1
						EndIf
					Next Y
				Next X
				Use SetCycle 0 :gametime=0
		Case 42 :gametime+10 :Sound 7,2			; More time.
	End Select
	If Joyb(1)<>0
		JoyClear{} :JoyDown{} :VWait 10 :JoyClear{}
	EndIf
	eaten=0
Return

; ================ GET USERS JOYSTICK INPUTS ==================

.GetTacDir
If Joyy(1)=-1 AND bearing<>1 AND map(tacx,tacy-1)<>wall Then bearing=1 :Gosub changed :Return
If Joyy(1)=1	AND bearing<>2 AND map(tacx,tacy+1)<>wall Then bearing=2 :Gosub changed :Return
If Joyx(1)=-1 AND bearing<>3 AND map(tacx-1,tacy)<>wall Then bearing=3 :Gosub changed :Return
If Joyx(1)=1	AND bearing<>4 AND map(tacx+1,tacy)<>wall Then bearing=4 :Gosub changed :Return
Return

changed:
tacdx=sdx(bearing)*speed :tacdy=sdy(bearing)*speed
frm=tacfrm(bearing)
Return

; ============= MOVE GHOSTS AROUND IN MAP ================

.Get_To_The_Point

; This is a multi-purpose routine to guide the ghosts to a
; destination point (dtx,dty).
; If Tac swallows a pill, then ghosts should avoid him like
; the plague and run off in the opposite direction.
; If they are gobbled then they really should head towards
; the centre of the screen where they will be revived in a
; flash!	Normally though, they just want to chase Tacman.


If dx<>0						; If moving	<	 >	 ( LEFT / RIGHT )
	If clever=True
		If dty=0
			If dtx<>dx Then dx=-dx :dy=0 :##[$80BE] If :##[$80BE] If :##[$80BE] If :Return
		EndIf
		If dty<>0
			If map(gx,gy+dty)<>wall Then dx=0 :dy=dty :##[$80BE] If :##[$80BE] If :##[$80BE] If :Return
		EndIf
	EndIf
	If map(gx+dx,gy)=wall
		If dty<>0
			If map(gx,gy+(-dty))<>wall Then dx=0 :dy=-dty :##[$80BE] If :##[$80BE] If :##[$80BE] If :Return
		EndIf
		If dty=0
			If map(gx,gy-1)<>wall Then dx=0 :dy=-1 :##[$80BE] If :##[$80BE] If :##[$80BE] If :Return
			If map(gx,gy+1)<>wall Then dx=0 :dy=1 :##[$80BE] If :##[$80BE] If :##[$80BE] If :Return
		EndIf
		dx=-dx :dy=0 :##[$80BE] If :##[$80BE] If :Return
	EndIf
EndIf

If dy<>0						; If moving	/\	\/	( UP / DOWN )
	If clever=True
		If dtx=0
			If dty<>dy Then dy=-dy :dx=0 :##[$80BE] If :##[$80BE] If :##[$80BE] If :Return
		EndIf
		If dtx<>0
			If map(gx+dtx,gy)<>wall Then dy=0 :dx=dtx :##[$80BE] If :##[$80BE] If :##[$80BE] If :Return
		EndIf
	EndIf
	If map(gx,gy+dy)=wall
		If dtx<>0
			If map(gx+(-dtx),gy)<>wall Then dy=0 :dx=-dtx :##[$80BE] If :##[$80BE] If :##[$80BE] If :Return
		EndIf
		If dtx=0
			If map(gx-1,gy)<>wall Then dy=0 :dx=-1 :##[$80BE] If :##[$80BE] If :##[$80BE] If :Return
			If map(gx+1,gy)<>wall Then dy=0 :dx=1 :##[$80BE] If :##[$80BE] If :##[$80BE] If :Return
		EndIf
		dy=-dy :dx=0 :##[$80BE] If :##[$80BE] If :Return
	EndIf
EndIf

Return

; =============== CHECK FOR COLLISIONS ==================

.CheckCollision
If ghost(d)\status=2 Then ghost(d)\image=29+d,3 :Sound 4,2 :score+500
If speed=8 Then Return
If ghost(d)\status=1
	Sound 2,15,50 :UnBuffer db :tx=tacx ASL 4 :ty=tacy ASL 4
	VWait :Show db :For d=13 To 24
		Use SetCycle 1
		VWait 1 :BlitColl d,tx,ty
		Use SetCycle 0 :VWait 2
	Next d :UnBuffer db :lives-1 :DBval{lives,"0",21} :VWait 80
	##[$80BE] Gosub :##[$80BE] If :##[$80BE] If :Goto Setup
EndIf
Return

; ================== CHECK GHOST STATS =====================

.CheckGhost
If ghost(d)\status=3
	If gx=10 AND gy=8 Then ghost(d)\image=24+d,1,ghost(d)\defspeed,ghost(d)\defspeed,0
EndIf
Return

; ===================== GOODIES =========================

; Shall I be generous to the poor old player??

.Goodies
X=Int(Rnd(xtiles)) :Y=Int(Rnd(ytiles))
If tacx=X AND tacy=Y Then Return
For d=1 To ng(lev)
	If ghost(d)\x ASR 4=X AND ghost(d)\y ASR 4=Y Then ##[$80BE] For :Return
Next d
goodie=Int(Rnd(8))+35 :ic=map(X,Y)
If ic<>0 Then Return
If goodie=39 AND lives>4 Then Return
If goodie=40 AND speed=8 Then Return
If goodie=41 AND dots<10 Then Return
If goodie=42 AND gametime>20 Then Return
addDB{goodie,X,Y} :Sound 5,2
Return

; ====== IF PLAYER HAS CLEARED THE BONUS SCREEN ========

.SuperBonus
Use SetCycle 0
For d=1 To gametime
Green 5,15,8,14 :VWait 2
Poke.w ##[$80B8] Sound(5)+4,420-(d ASL 2)
Sound 5,3 :score+1000 :gametime-1
Score{} :DBval{gametime,"00",29}
Use SetCycle 0:VWait 3
Next d :VWait 25
Poke.w ##[$80B8] Sound(5)+4,260
gametime=0
Return

; ============ DRAW UP THE BOTTOM PANEL =================

.Panel
BitMapOutput 0 :Gosub do_display
BitMapOutput 1 :Gosub do_display
Score{}
DBval{lives,"0",21}
DBval{gametime,"00",29}
DBval{lev,"00",39}
Return

do_display:
Colour 1,5 :Locate 0,33.5
Print " SCORE:000000	LIVES:0	TIME:00	LEVEL:00 "
;			..........................................
Return

; ========= INITIALISE THE HIGH SCORE TABLE ===============

.Init_Hiscore
##[$80C8] hsdata
For d=1 To 10
	Read t$
	hi$(d)=Left$(t$,12)
	hi(d)=Val(Right$(t$,6))
Next d
Return

hsdata:
Data$ "TOP DOT		 301436"
Data$ "OGY				 280494"
Data$ "STREAKY		 214418"
Data$ "GHOSTBUSTER!192211"
Data$ "WIZKID			168379"
Data$ "ALAN CUK		143562"
Data$ "NAFF				098996"
Data$ "BREAK ME		086804"
Data$ "!SOMA			 064156"
Data$ "LAST BUT....051040"

; ============ ENTER YOUR NAME INTO HISCORES ===============

; So, you finally made it to the High Scores.	Better let you
; enter your name then.	(Your not cheating eh?)

.EnterName
wipe{} :t$="" :If #test<>1 Then PlayModule 2
text{"CONGRATULATIONS!!",12,12,0}
text{"You are in the",14,2,0}
text{"High Scores.",16,2,0}
text{"Enter Your Name:-",20,4,0}
Format"000000"
text{"Score > "+Str$(score),28,14,0}
d=1 :sel=0 :Colour 5,0 :Locate 14,22
Print "------------"	 :Gosub dostrip

##[$80BB]
	X=Joyx(1)
	If X=-1 Then d-1 :Gosub dostrip
	If X=1	Then d+1 :Gosub dostrip
	If Joyb(1)<>0
		If d<27 Then t$+Chr$(d+64)
		sel=d
		Select sel
			Case 27 :If Len(t$)<12 Then t$+" "
			Case 28 :If Len(t$)<12 Then t$+"."
			Case 29 :If Len(t$)<12 Then t$+"!"
			Case 31 :If t$<>"" Then t$=Left$(t$,Len(t$)-1)
		End Select
		Colour 5,0 :Locate 14,22 :Print "------------"
		Colour 13,0 :Locate 14,22 :Print t$
		Gosub dostrip
	EndIf
Gosub CheckMoose
##[$80BC] sel=35

JoyClear{}
t$+"							 " :t$=Left$(t$,12)
If t$="						" Then t$="HAS BEEN!!	"
For d=1 To 10
	If score>hi(d)
		If d<10
			For X=10 To d+1 Step -1
				hi$(X)=hi$(X-1) :hi(X)=hi(X-1)
			Next X
		EndIf
		hi$(d)=t$ :hi(d)=score :##[$80BE] If :##[$80BE] For :Goto sorted
	EndIf
Next d
sorted:
Gosub ShowHiScores
StopModule :VWait 10
Return

dostrip:
d=QWrap(d,1,36)
If d=30 Then d+X
If d=32 Then d=35
If d=34 Then d=31
Locate 3,25 :Colour 9,7
Print "ABCDEFGHIJKLMNOPQRSTUVWXYZ .!-DEL-OK"
Locate d+2,25 :Colour 10,4
If d<27 Then Print Chr$(64+d)
Select d
	Case 27 :Print " "
	Case 28 :Print "."
	Case 29 :Print "!"
	Case 31 :Print "DEL"
	Case 35 :Print "OK"
End Select
VWait 4
JoyClear{}
Return

; ===================== DISPLAY SCORES ===================

.ShowHiScores
DisplayOff :BlockScroll 0
For X=3 To 17
	For Y=2 To 8
		paste{X,Y,1}
	Next Y
Next X
For d=1 To 10 :Format "00"
	Colour 4,6 :Locate	8,d+5 :Print " ",Str$(d)+" > "
	Colour 1,6 :Locate 14,d+5 :Print hi$(d)," "
	Format "000000"
	Colour 3,6 :Locate 27,d+5 :Print hi(d)," "
Next d
text{"TODAYS BEST SCORES",1,4,0}
text{" CLICK FIRE ",33,1,14}
BlitColl 70,64,162
VWait :DisplayOn
JoyClear{} :JoyDown{}
Return

; ================== HELP PAGE===================

.HelpPage
DisplayOff :BlockScroll 0 :##[$80C8] about
For d=1 To 8
	paste{2,d*2,34+d}
Next d
For d=1 To 15
	Read t$ :text{t$,d*2+2,13,0}
Next d
text{" GOODIES TO COLLECT ",1,4,0}
text{" MORE >>> ",34,1,14}
VWait :DisplayOn
JoyClear{} :JoyDown{}

DisplayOff
BlockScroll 0: text{" Further Info..",1,4,0}
For d=1 To 5
	paste{d*3+2,2,24+d}
Next d
Locate 0,7 :Colour 13,0 ;															 |
NPrint UCase$("The ghosts range from easy to vicious.")
NPrint UCase$("Avoid the last two at all costs because")
NPrint UCase$("they can move at the same speed as you")
NPrint UCase$("except when you are in TURBO mode.")
NPrint " "
NPrint UCase$("You get 500 points for each ghost gobbled.")
NPrint UCase$("Dots are worth a measly 16 points (but")
NPrint UCase$("double that when TURBO is activated!)")
NPrint UCase$("Also, extra points are yours for the")
NPrint UCase$("remaining time after the level.")
NPrint UCase$("(as long as you never cleared the level")
NPrint UCase$("with the dot wiper)")
NPrint " "
NPrint UCase$("There are 1000 points going for each power")
NPrint UCase$("pill remaining on screen after the level")
NPrint UCase$("has been cleared from dots.")
NPrint " "
NPrint UCase$("Pause the game by pressing FIRE during")
NPrint UCase$("play and click again to resume.")
NPrint " "
NPrint UCase$("This is a shareware game.	written in")
NPrint UCase$("blitz basic ii by jim brown.")
text{" CLICK FIRE TO RETURN ",34,1,14}
VWait :DisplayOn
JoyClear{} :JoyDown{}

Return

about:
Data$ "50 points"," ","100 points"," ","500 points"," "
Data$ "1000 points"," ","Extra Life"," "
Data$ "Turbo. Doubles your speed.","(Ghosts will not kill!)"
Data$ "Wiper. Clears all the dots.","(but fewer points)"
Data$ "Time. Extra Ten Seconds."

; ==================== ROUTINES =========================

; ----------- Draw up the Game Map -----------
.Mapper
pills=0 :dots=0 :BlockScroll 0 :gametime=0 :bonusbits=0
For Y=0 To ytiles
	 For X=0 To xtiles
		ic=map(X,Y)
		If ic=2 Then dots+1
		If ic=3 Then pills+1
		If ic>=35 AND ic<=42 Then bonusbits+1
			paste{X,Y,map(X,Y)}		; draw the current map
Next X : Next Y
gametime=dots/2-lives
If bonuslev=True Then dots=1
gametime=QLimit(gametime,25,99)
wall=map(0,0)
Return

; -------------- Clear the map --------------
.ClearLevel
For Y=0 To ytiles
	 For X=0 To xtiles
			map(X,Y)=0						 ; wipe all map to zero
Next X : Next Y
For X=0 To xtiles
map(X,0)=1 :map(X,ytiles)=1	; make top and bottom borders
Next X
For Y=0 To ytiles
map(0,Y)=1 :map(xtiles,Y)=1	; make left and right borders
Next Y
Return

; ----------- Check the mouse status -----------
.CheckMoose
	If Joyb(0)<>0 Then VWait :wipe{} :End
Return

; ---------- Load up the various levels -----------
.Retrieve
bonuslev=False
If lev=4	AND bonlev<>1 Then bonuslev=True :bonlev=1 :lev-1
If lev=6	AND bonlev<>2 Then bonuslev=True :bonlev=2 :lev-1
If lev=8	AND bonlev<>3 Then bonuslev=True :bonlev=3 :lev-1
If lev=10 AND bonlev<>4 Then bonuslev=True :bonlev=4 :lev-1
Format "00" :dat$="Maps/map-"+Str$(lev-1)
If bonuslev=True Then dat$="Maps/bonus-"+Str$(bonlev-1) :t$="Prepare for BONUS level..."
If bonuslev=False Then t$=" LEVEL "+Str$(lev)+" "
wipe {} :text{t$,16.5,3,8}
QAMIGA
If WriteMem(0,dat$)
	 ##[$BE14] 0,&map(0,0),size	; Load in the map data
	CloseFile 0
EndIf
VWait 70
BLITZ
Return

; ----------- Load in the small maps ---------------
.LoadShortMap
QAMIGA
If WriteMem(0,"Maps/"+fl$)
	 ##[$BE14] 0,&map(0,0),21*13	; Load in the map data
	CloseFile 0
EndIf
VWait 70
BLITZ
Return

; -------------- Draw the small map ----------------
.DrawShortMap
DisplayOff :wipe{}
For X=0 To xtiles
	For Y=0 To 12
		paste{X,Y,map(X,Y)}
	Next Y
Next X
VWait :DisplayOn
Return

; ---------- Reset some of the game variables ----------
.ResetVars
tacx=10 :tacy=13 :tx=tacx*xsize :ty=tacy*ysize
tacdx=0 :tacdy=0 :frm=0 :speed=4 :outoftime=False
goodie=0 :turbotime=0 :vuntime=0 :cnt=0
bearing=0 :frm=13 :anm=0
ghost(1)\x=1*16,1*16,4,0,25,1,2,2,0
ghost(2)\x=19*16,1*16,0,4,26,1,2,2,0
ghost(3)\x=1*16,15*16,0,-4,27,1,2,2,0
ghost(4)\x=19*16,15*16,-4,0,28,1,4,4,0
ghost(5)\x=10*16,8*16,4,0,29,1,4,4,0
Return
