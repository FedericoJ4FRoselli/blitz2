; ascii translation of /Users/simon/Google Drive/amiga/w/fdrive/mark/dev/devshell.bb2
+
#replymsg=-378
;
#ioerr_openfail=-1
#ioerr_aborted=-2
#ioerr_nocmd=-3
#ioerr_badlength=-4
;
#io_command=28
#io_flags=30
#io_error=31
#io_actual=32
#io_length=36
#io_data=40
#io_offset=44
;
JMP start

dosnode
				Dc.l devname
				Dc.l drivername
				Dc.l 0
				Dc.l 0
				;
disksize
				Dc.l 16				 ;16 entries...
				;
				Dc.l 128				;longs per sector
				Dc.l 0					;sector origin
				Dc.l 1					;number of surfaces (per cyl?)
				Dc.l 1					;number of sectors per block
				Dc.l 1					;number of blocks per track
				Dc.l 2					;number reserved
				Dc.l 0					;prealloc
				Dc.l 0					;interleave
				Dc.l 0					;low cyl
				Dc.l 127				;hi cyl
				Dc.l 0					;number of cache blocks

				Dc.l 1					;mem type for buffers
				Dc.l 1024			 ;max transfer size
				Dc.l -1				 ;address mask
				Dc.l 0					;boot pri
				Dc.l $444f5301	;fast file sys

devname:Dc.b "JOY",0:Event

drivername:Dc.b "joy.device",0:Event

;------------------- NOW FOR MY DEVICE! -----------------;

.joyjumps
JMP joy_abortio
JMP joy_beginio
JMP joy_extfunc
JMP joy_expunge
JMP joy_close
JMP joy_open
.joydevice
Dc.l 0,0
Dc.b 3,0
Dc.l joydevname
Dc.b 4,0
Dc 36,devend-joydevice
version:Dc 1,0		;version,rev
Dc.l 0,0
Dc 0

.joy_open
MOVEQ #0,d0:RTS

.joy_close
MOVEQ #0,d0:RTS

.joy_expunge
MOVEQ #0,d0:RTS

.joy_extfunc
MOVEQ #0,d0:RTS

.joy_abortio
MOVE.b #ioerr_aborted,io_error(a1):RTS

.joy_beginio
;
MOVE.b #5,8(a1) ;ln_type=#nt_message
;
MOVE io_command(a1),d0:BCLR #15,d0:CMP #21,d0:BHI 'err
'ok
MOVEM.l a1-a3,-(a7)
LSL #2,d0:LEA commtable(pc),a3:MOVE.l 0(a3,d0),a3
MOVE.l io_data(a1),a0	 ;data
MOVE.l io_length(a1),d0 ;length for read
MOVE.l io_offset(a1),d1 ;offset
MOVE.l joymem(pc),a2:JSR (a3)
;
MOVEM.l (a7)+,a1-a3:MOVE.b d0,io_error(a1):MOVE.l d1,io_actual(a1)
BTST #0,io_flags(a1):BNE 'quick
MOVE.l a6,-(a7):MOVE.l 4,a6:JSR replymsg(a6):MOVE.l (a7)+,a6
'quick:RTS
;
'err:MOVE.b #ioerr_nocmd,io_error(a1):RTS

;OK, all commands are called with:
;
;A0 = data
;A1 = Ioreq
;D0 = length
;D1 = offset
;
;A2 = joymem
;
;commands should return
;
;D0 = io_error
;D1 = actual length

.commtable
Dc.l joy_commerr			;0	what?
Dc.l joy_reset				;1	reset
Dc.l joy_read				 ;2	read
Dc.l joy_write				;3	write
Dc.l joy_update			 ;4	update
Dc.l joy_clear				;5	declare invalid
Dc.l joy_stop				 ;6	stop io
Dc.l joy_start				;7	start io
Dc.l joy_flush				;8	flush!
Dc.l joy_motor				;9	motor
Dc.l joy_seek				 ;10 seek
Dc.l joy_format			 ;11 format
											;
Dc.l joy_remove			 ;12 remove int
Dc.l joy_changenum		;13 changenum
Dc.l joy_changestatus ;14 whether disk in drive!
Dc.l joy_protstatus	 ;15 test writeprotect
Dc.l joy_rawread			;16 raw read
Dc.l joy_rawwrite		 ;17 raw write
Dc.l joy_getdrivetype ;18 determine drive type
Dc.l joy_getnumtracks ;19 number of tracks
Dc.l joy_addchangeint ;20 add disk change interupt
Dc.l joy_remchangeint ;21 remove disk change interupt
commtablef

;All these do nothing (I hope!)
;
joy_update
joy_clear
joy_reset
joy_addchangeint
joy_remchangeint
joy_remove
joy_seek
joy_motor
joy_changenum
joy_changestatus
joy_protstatus
joy_start
joy_stop
joy_flush
;
joy_commerr	 ;used to be 'not supported' but this seems to work!
joy_rawread
joy_rawwrite
;
.joy_getnumtracks
.joy_getdrivetype
;
MOVEQ #0,d0:MOVEQ #0,d1:RTS

;All these actually do something
;
.joy_read
ADD.l d1,a2:MOVE.l d0,d1:BEQ 'skip
'loop:MOVE.b (a2)+,(a0)+:SUBQ.l #1,d0:BNE 'loop
'skip:RTS

.joy_format
.joy_write
ADD.l d1,a2:MOVE.l d0,d1:BEQ 'skip
'loop:MOVE.b (a0)+,(a2)+:SUBQ.l #1,d0:BNE 'loop
'skip:RTS

;.joy_getnumtracks
;MOVEQ #0,d0:MOVE.l #128,d1:RTS

;.joy_getdrivetype
;MOVEQ #0,d0:MOVEQ #1,d1:RTS

joymem:Dc.l 0

joydevname:Dc.b "joy.device",0:Event
;
devend

start
DEFTYPE.l

jm=##[$FE97](65536*2,$10001):Poke.l ?joymem,jm:Poke.l 128,jm
##[$FEBE] ?joydevice

dn=##[$F694](?dosnode):##[$F695] 0,0,dn

##[$FEAB] 0
