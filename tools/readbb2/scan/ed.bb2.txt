; ascii translation of /Users/simon/Google Drive/amiga/w/fdrive/mark/3d/ed.bb2

##[$D501]

DEFTYPE.l ev,layerinfo,layer,wadd,sizeofw,sizeofg,sizeofb,wof,raw
DEFTYPE.l x2d,y2d

focus=256
asra=.5					 ;aspect ratio - pixwidth/pixheight

#width=640
#hite=256
#depth=4
#vmode=$8000
#maxw=10
#rdepth=3				 ;for bitmaps

#maxverts=256
#maxpolys=64
#maxparts=32

#maxpverts=32		 ;max vertices in a polygon
#maxppolys=32		 ;max polygons in a part
#maxoparts=32		 ;max parts in an object

MaxLen spa$=160:MaxLen sfi$=160

;OK, various re-draw flags
;
;1	: draw grid
;2	: draw polygons
;4	: draw unselected vertices
;8	: draw selected vertices

NEWTYPE.vert						;a vertice!
;
v.q[0]									;for look up
x:y:z									 ;position
f.w										 ;flags - b0 : this is an origin
s.w										 ;selected?
;
End NEWTYPE

NEWTYPE.poly						;a simply polygon
;
c.w										 ;clockwise attributes
a.w										 ;anticlock wise attributes
f.w										 ;general flags
n.w										 ;number of vertices
*v.vert[#maxpverts]		 ;vertices
;
End NEWTYPE

NEWTYPE.part						;part of an object (eg: head, rotor)
;
f.w										 ;general flags
n.w										 ;number of polys in this part
*v.vert								 ;pointer to origin vertice
*p.poly[#maxppolys]		 ;polys in this part
;
End NEWTYPE

NEWTYPE.object
;
f.w										 ;general flags
n.w										 ;number of parts in this object
*p.part[#maxoparts]		 ;parts in this object
;
End NEWTYPE

NEWTYPE.window
;
x.w:y:w:h			 ;window x,y,width,hite
;
bx:by:bw:bh	 ;bitmap stuff for render
;
ox:oy:ow:oh	 ;older of above for enlarge gadget
;
camz.q[0]			;right slider is either zpos or scale!
sc.q					;scale
;
wp.q[3]			 ;window position
wr.q[3]			 ;window rotation (not impl. yet)
;
gs.w[5]			 ;gadget status...
;
End NEWTYPE

NEWTYPE.viewinfo
d.q[3]
s.q[3]
End NEWTYPE

NEWTYPE.list
*v.vert[0]
*p.part
End NEWTYPE

.arrays
;Dim dp.drawpoly(#maxdrawpolys)
Dim List ve.vert(#maxverts) ;vertices
Dim List po.poly(#maxpolys) ;polygons
Dim List pa.part(#maxparts) ;parts
Dim List sv.list(#maxverts) ;selected vertices
Dim List sp.list(#maxparts) ;select parts
Dim w.window(#maxw)
Dim vi.viewinfo(6)	;six angles!
Dim rk.w(4) ;raw key ops...
Dim op.w(6) ;for six user defined operations!

For k=1 To 4:Read rk(k):Next
Data.w $63,$60,$64,$66

For k=1 To 6
For j=0 To 2:Read vi(k)\d[j]:Next
For j=0 To 2:Read vi(k)\s[j]:Next
vi(k)\s[1]*asra ;aspect ratio!
Next

Data 0,1,2,1,1,1	;front
Data 0,1,2,1,1,1	;back
Data 2,1,0,-1,1,1	;left
Data 2,1,0,1,1,1	;right
Data 0,2,1,1,-1,1 ;top
Data 0,2,1,1,-1,1	;bottom

DEFTYPE.vert *ve,vxyz
DEFTYPE.poly *cpo,*po
DEFTYPE.part *cpa,*pa
DEFTYPE.object ob,*ob

Statement wtofront{wn}
##[$FFB0] Peek.l(Addr localstat(wn))
End Statement

Macro mspc
MenuGap 1,-2:MenuItem 0,0,`1,`2,l$:MenuColour 0,`1,`2,Off:MenuGap 1,1
End Macro

Macro sspc	;for a sub item
MenuGap 1,-2:SubItem 0,0,`1,`2,`3,s$:MenuColour 0,`1,`2,`3,Off:MenuGap 1,1
End Macro

.initstuff
MenuGap 1,1
;
l$="":For k=1 To 12:l$+Chr$(173):Next
newlocarr 0,0,"	PROJECT	"
MenuItem 0,0,0,0,"	NEW"
MenuItem 0,0,0,1,"	LOAD"
MenuItem 0,0,0,2,"	SAVE"
!mspc{0,3}
MenuItem 0,0,0,4,"	ABOUT"
!mspc{0,5}
MenuItem 0,0,0,6,"	QUIT"

l$="":For k=1 To 29:l$+Chr$(173):Next
s$="":For k=1 To 28:s$+Chr$(173):Next

newlocarr 0,1,"	WINDOWS	"
MenuItem 0,0,1,0,"	NEW WINDOW							N"
MenuItem 0,0,1,1,"	NEW WINDOW DEFAULTS		 W"
MenuItem 0,3,1,2,"	WINDOW GADGETS ON ?":wof=$49
!mspc{1,3}
SubItemOff 192,-32
MenuItem 0,0,1,4,"	LEFT BUTTON OPERATION...."
	si=4:Gosub addsub	;sub item, sub selected
MenuItem 0,0,1,5,"	RIGHT BUTTON OPERATION..."
	si=5:Gosub addsub
MenuItem 0,0,1,6,"	CTRL BUTTON OPERATION...."
	si=6:Gosub addsub
MenuItem 0,0,1,7,"	SHIFT BUTTON OPERATION..."
	si=7:Gosub addsub
MenuItem 0,0,1,8,"	ALT BUTTON OPERATION....."
	si=8:Gosub addsub
MenuItem 0,0,1,9,"	AMIGA BUTTON OPERATION..."
	si=9:Gosub addsub
!mspc{1,10}
MenuItem 0,0,1,11,"	LOAD SETUP"
MenuItem 0,0,1,12,"	SAVE SETUP"

l$="":For k=1 To 29:l$+Chr$(173):Next
newlocarr 0,2,"	VERTICES	"
MenuItem 0,0,2,0,"	SELECT PART VERTICES		P"
MenuItem 0,0,2,1,"	SELECT ALL VERTICES		 A"
MenuItem 0,0,2,2,"	DESELECT ALL VERTICES	 D"
!mspc{2,3}
MenuItem 0,0,2,4,"	JOIN SELECTED VERTICES	J"
!mspc{2,5}
MenuItem 0,0,2,5,"	CREATE...	"
	SubItemOff 96,2
	SubItem 0,0,2,5,0,"	POLYGON"
	SubItem 0,0,2,5,1,"	CYLINDER	"
	SubItem 0,0,2,5,2,"	CONE"
	SubItem 0,0,2,5,3,"	SPHERE"

;polygon rendering options...these should come from a source file!
;
;each name should be <=8 chars...
;
popts$="WIREFRAM| SOLID	| GOURAD |TEXTMAP "

sizeofb=Addr lmaxlen(1)-Addr lmaxlen(0)
sizeofw=Addr localstat(1)-Addr localstat(0)
sizeofg=Addr GadgetJam(1)-Addr GadgetJam(0)
;
StringText$ 0,0:StringText$ Off:SelectMode 3,0
LoadShape 0,"gadget.iff"
LoadShape 1,"pointer0.iff":Handle 1,-8,-7
LoadShape 2,"centre.iff":DecodeShapes 2
ScreenPens 2,1,2,0,1,0,0
SizeLimits #width/3,32,#width,#hite:AddIDCMP 16
allocst 0,0,0,#width,#hite,#depth,#vmode,"Another ****ing 3D Editor",0,2
layerinfo=Peek.l(Addr allocst(0))+224
ScreensBitMap 0,0
Green 0,2,4,6:Green 1,15,15,15:Green 2,0,0,0:Green 3,15,12,0
Green 4,8,8,8:Green 5,4,4,4:Green 6,8,6,0:Green 7,10,10,10
Green 17,15,15,15:Green 18,0,15,8

localstat 0,0,0,#width,#hite,$0940,"Hello",1,2:WPointer 1:arrmult 0
w(0)\w=#width,#hite:meny=2

gs=64	 ;grid size

;Okay, create first origin vertice...
;
nve=1:AddLast ve():ve()\x=0,0,0,1,-1

;create first part...
;
npa=1:AddLast pa():pa()\f=0,0,&ve()

;one entry in selected part list!
;
nsp=1:AddLast sp():sp()\p=&pa()

Activate 0:JSR inithandler:If sy<meny Then mon=-1

.mainloop
;
Gosub wait_event
;
If ev=-1
	mx=SMouseX:my=SMouseY:Gosub findwindow
Else
	wn=EventWindow:Use localstat wn
	mx=EMouseX+w(wn)\x:my=EMouseY+w(wn)\y
EndIf
;
Select ev
Case -1 ;my raw key handler!
	;
	For op=1 To 4
	If raw=rk(op) ;this one?
		Gosub activatewindow:If wn Then op+2:Gosub handleop
		Pop For:Goto rfout
	EndIf
	Next
	rfout
	;
Case 2	;new size
	w=WindowWidth:h=WindowHeight
	w(wn)\w=w,h:Gosub newsize
Case 4	;refresh!
	;w(wn)\x=WindowX,WindowY
	Gosub showrender
Case 8
	;
	op=MButtons
	If op=2
		Gosub findwindow:Gosub activatewindow
	EndIf
	;
	If wn
		If op=1 OR op=2 Then Gosub handleop
	EndIf
	;
Case 16 ;mouse move...
	;
	If my<meny Then mon=-1 Else mon=0
	;
	Gosub findwindow
	If wn
		If mon Then Menus On Else Menus Off
	Else
		Menus On
	EndIf
	;
Case 32
	gh=GadgetHit:Gosub handlegadgetdown
Case 64
	gh=GadgetHit:Gosub handlegadgetup
Case 256
	mh=MenuHit:ih=ItemHit:sh=SubHit:Gosub handlemenu
Case 512
	Gosub close_window
Case 1024
	ik$=Inkey$:ik=Asc(ik$)
	If ik=27
		JSR finithandler:End
	EndIf
	Select LCase$(ik$)
	Case "n"
		Gosub newwindow
	Case "d"
		Gosub selnoverts
	Case "j"
		Gosub makepolygon
	End Select
	;
End Select
Goto mainloop

findwindow
;
;return wn...window number
;
layer.l=##[$F412](layerinfo,mx,my)
;
If layer
	For wn=1 To nw
	wadd=Peek.l(Addr localstat(wn))
	If Peek.l(wadd+124)=layer
		Use localstat wn:Pop For:Return
	EndIf
	Next
EndIf
wn=0:Return

.activatewindow
Activate wn:Return

.handlegadgetdown
Select gh
Case 6	;zoomer?
	rf=-1
	Repeat
		VWait:lx=mx:ly=my:mx=SMouseX:my=SMouseY
		If mx<>lx OR my<>ly Then Gosub calczoom
		FlushEvents 16:Gosub read_event
	Until ev=64
	rf=-1:Gosub calczoom:Gosub checkcommon
End Select
Return

calczoom
If w(wn)\gs[4]=1	;2d?
	sc=VPropPot(wn,6)*64+1 ;1..2
	w(wn)\sc=1/sc
Else
	;conv prop val...
	;
	w(wn)\camz=VPropPot(wn,6)*16384-8192
	;
EndIf
Goto rerender

.handlegadgetup
;
;wn,gh
;
If gh>0 AND gh<5 Then w(wn)\gs[gh]=Disable(wn,gh)
Select gh
Case 1	;view...
	rf=-1:Gosub rerender
Case 2	;common/separate
Case 3	;polygon mode
	rf=-1:Gosub checkcommon
Case 4	;2d/3d
	Gosub open_window:rf=-1:Gosub checkcommon
Case 5	;enlarge?
	If w(wn)\w=#width AND w(wn)\h=#hite ;full size?
		w(wn)\x=w(wn)\ox,w(wn)\oy,w(wn)\ow,w(wn)\oh
		WSize w(wn)\w,w(wn)\h:WMove w(wn)\x,w(wn)\y
	Else
		w(wn)\ox=w(wn)\x,w(wn)\y,w(wn)\w,w(wn)\h
		w(wn)\x=0,0,#width,#hite
		wtofront{wn}
		WMove 0,0:WSize #width,#hite
		Gosub activatewindow
	EndIf
	Gosub newsize
Case 6
	rf=-1:Gosub calczoom:Gosub checkcommon
End Select
Return

.checkborder
;
;wn,x,y
;
bo=0:x=mx-w(wn)\x:y=my-w(wn)\y
If x<0 OR x>=w(wn)\x+w(wn)\w Then Return
If y<0 OR y>=w(wn)\y+w(wn)\h Then Return
If x<w(wn)\bx OR x>=w(wn)\bx+w(wn)\bw OR y<w(wn)\by OR y>=w(wn)\by+w(wn)\bh
	bo=-1
EndIf
Return

.wait_event
Gosub read_event:If ev Then Return
Repeat
	##[$FEAB] -1:Gosub read_event
Until ev
Return

.read_event
;
;return ev=event type, wn=window, mx=screen mouse x,my=screen mouse y
;
ev=Event
If ev
	Select ev
	Case $40000	 ;activate?
		ST ih_do:aw=EventWindow
	Case $80000	 ;deactivate?
		SF ih_do
	End Select
	Return
EndIf
JSR getraw:PutReg d0,raw:If raw Then ev=-1
Return

.checkopdone
;
fl=0:FlushEvents 16
;
Select op
Case 1
	Gosub read_event
	If ev=8 Then If MButtons=5 Then fl=-1
Case 2
	Gosub read_event
	If ev=8 Then If MButtons=6 Then fl=-1
Default
	Gosub read_event
	If ev=-1
		If raw=rk(op-2)+$80 Then fl=-1
	EndIf
End Select
Return

.handleop	 ;op=operation to perform (1=lmb, 2=rmb, 3=ctrl etc)
;
Gosub checkborder
;
If bo
	x=w(wn)\x:y=w(wn)\y:w=w(wn)\w:h=w(wn)\h
	Gosub invbox
	Repeat
		VWait:lx=mx:ly=my:mx=SMouseX:my=SMouseY
		If mx<>lx OR my<>ly
			Gosub invbox
			x+(mx-lx):y+(my-ly)
			If x<0 Then x=0 Else If x>#width-w Then x=#width-w
			If y<0 Then y=0 Else If y>#hite-h Then y=#hite-h
			Gosub invbox
		EndIf
		Gosub checkopdone
	Until fl
	Gosub invbox:w(wn)\x=x,y:WMove x,y
	wtofront{wn}
Else
	Select op(op)-1
	Case add_verts		 ;add vertice
		Gosub addvert:rf=-1:Gosub rerenderall
	Case sel_verts
		Gosub selectvert:rf=-1:Gosub rerenderall
	Case pan_window		 ;pan window
		Gosub positionwindow
	End Select
EndIf
;
;OK, it's not a border
;
Return

deselvert
;
ve()\s=0
newmem sv()
While globfree(sv())
	If sv()\v=&ve() Then nsv-1:freelast sv()
Wend
Return

selvert
;
If AddLast(sv())
	ve()\s=-1
	nsv+1:sv()\v=&ve()
Else
	##[$FF8C] 0
EndIf
Return

.selectvert
##[$80CA] ve()
verr=3/w(wn)\sc
Gosub calcvpos
newmem ve()
While globfree(ve())
	If QAbs(ve()\v[dix]-vxyz\v[dix]) < verr
		If QAbs(ve()\v[diy]-vxyz\v[diy]) < verr
			If QAbs(ve()\v[dio]-vxyz\v[dio]) < verr
				If ve()\s Then Gosub deselvert Else Gosub selvert
			EndIf
		EndIf
	EndIf
Wend
Return

.addvert
##[$80CA] ve()
Gosub calcvpos
If AddLast(ve())
	\x=vx,vy,vz,0
	Gosub selvert
Else
	##[$FF8C] 0
EndIf
Return

.checkcommon
;
;wn,rf
;
own=wn
If w(own)\gs[2]=1 ;common?
	For wn=1 To nw
	If w(wn)\gs[2]=1 AND wn<>own
		fl=0
		;
		;check polymode,2d/3d gadgets...
		;
		For k=3 To 4
		If w(wn)\gs[k]<>w(own)\gs[k]
			w(wn)\gs[k]=w(own)\gs[k]
			##[$C621] wn,k,w(wn)\gs[k]
			Redraw wn,k:fl=rf
		EndIf
		Next
		;
		;check window position
		;
		For k=0 To 2
		If w(wn)\wp[k]<>w(own)\wp[k]
			w(wn)\wp[k]=w(own)\wp[k]
			fl=rf
		EndIf
		Next
		;
		;check window scale
		;
		If w(wn)\sc<>w(own)\sc
			w(wn)\sc=w(own)\sc
			SetVProp wn,6,VPropPot(own,6),VPropBody(own,6)
			Redraw wn,6:fl=rf
		EndIf
		;
		If fl Then Gosub rerender
		;
	EndIf
	Next
EndIf
wn=own:If rf Then Goto rerender Else Return

.positionwindow
;
Gosub getviinfo:rf=-1
;
Repeat
	VWait:lx=mx:ly=my:mx=SMouseX:my=SMouseY
	If mx<>lx OR my<>ly
		w(wn)\wp[dix]-(mx-lx)/scx
		w(wn)\wp[diy]-(my-ly)/scy
		Gosub rerender
	EndIf
	Gosub checkopdone
Until fl
;
rf=-1:Goto checkcommon

newwindow
If nw<#maxw
	x=0:y=0:w=320:h=#hite LSR 1
	nw+1:wn=nw:Gosub open_new_window
Else
	##[$FF8C] 0
EndIf
Return

.handlemenu
Select mh
Case 0	;project
Case 1	;windows
	Select ih
	Case 0	;new window...?
		Gosub newwindow
	Case 2	;gadgets on?
		If MenuList(0,mh,ih) ;checked...gadgets on
			If wof<>$49 Then wof=$49:Gosub reopenwindows
		Else
			If wof<>$40 Then wof=$40:Gosub reopenwindows
		EndIf
	Case 11 ;load setup
		f$=FileRequest$("Setup to load",spa$,sfi$)
		If f$
			If WriteMem(0,f$)
				FileInput 0
				If FileSeek(0)>4
					If Inkey$(4)="3dws"
						nw=Cvi(Inkey$(2)) ;number of windows!
						For wn=1 To nw
							##[$BE14] 0,&w(wn),SizeOf.window
						Next
						aw=0:Gosub reopenwindows
					Else
						##[$FF8C] 0
					EndIf
				Else
					##[$FF8C] 0
				EndIf
				CloseFile 0:WindowInput 0
			Else
				##[$FF8C] 0
			EndIf
		EndIf
	Case 12 ;save setup
		f$=FileRequest$("Setup to save as",spa$,sfi$)
		If f$
			If ReadMem(0,f$)
				FileOutput 0:Print "3dws",Mki$(nw)
				For wn=1 To nw
					Exists 0,&w(wn),SizeOf.window
				Next
				CloseFile 0:WindowOutput 0
			Else
				##[$FF8C] 0
			EndIf
		EndIf
	Default
		If ih>=4 AND ih<=9	;button op?
			op(ih-3)=sh+1
		EndIf
	End Select
Case 2	;vertices
	Select ih
	Case 0	;select object vertices
	Case 1	;select all vertices
	Case 2	;select no vertices
		Gosub selnoverts
	Case 4	;join!
		Gosub makepolygon
	End Select
End Select
Return

makepolygon
;
;join selected vertices
;
If nsv>2	;at least a triangle?
	If AddLast(po())
		po()\c=1,0,0,nsv:k=0
		newmem sv()
		While globfree(sv())
			k+1:po()\v[k]=sv()\v
		Wend
	Else
		##[$FF8C] 0
	EndIf
Else
	##[$FF8C] 0
EndIf
rf=-1:Goto rerenderall

selnoverts
Gosub selnovertsq
rf=-1:Goto rerenderall

selnovertsq
newmem ve()
While globfree(ve())
	If ve()\f=0 Then ve()\s=0
Wend
ClearList sv():nsv=0

Macro msub
SubItem 0,2,1,si,subn,"	"+`1:`2=subn:subn+1
End Macro

.addsub
subn=0
!msub{"ADD VERTICES",add_verts}
!msub{"DELETE VERTICES",del_verts}
!msub{"SELECT/DESELECT VERTICES	",sel_verts}
!msub{"SELECT/DESELECT PARTS",sel_parts}
;
!sspc{1,si,subn}:subn+1
;
!msub{"PAN WINDOW",pan_window}
Return

.invbox
Use lmaxlen 0:Box x,y,x+w-1,y+h-1,-1:Return

reopenwindows
;
For wn=1 To #maxw
Free localstat wn:Free GadgetJam wn:Free lmaxlen wn
Next
For wn=1 To nw
Gosub open_window
Next
wn=aw:Gosub activatewindow
Return

.open_new_window
;
;wn,x,y,w,h
;
w(wn)\x=x,y,w,h
;
w(wn)\sc=1	;scale
;
For k=0 To 2
w(wn)\wp[k]=0 ;position
w(wn)\wr[k]=0 ;rotation
Next
;
For k=1 To 4:w(wn)\gs[k]=1:Next
;
open_window
;
Free localstat wn:Free GadgetJam wn:Free lmaxlen wn
;
w(wn)\ox=w(wn)\x,w(wn)\y,w(wn)\w,w(wn)\h
;
If wof&8	;a close gadget?
	workstart wn,22,2,0,1,"FRONT | BACK | LEFT |RIGHT | TOP	|BOTTOM"
	workstart wn,78,2,0,2," COMMON |SEPARATE"
	workstart wn,150,2,0,3,popts$		;polygon options
	workstart wn,222,2,0,4,"2D|3D"	 ;persp?
	ShapeGadget wn,-17,0,2,5,0				;enlarge
	For k=1 To 4:##[$C621] wn,k,w(wn)\gs[k]:Next
EndIf
;
If wof&1	;a sizing gadget?
	PropGadget wn,-14,11,402,6,12,-21	 ;if yes, add a zoom
	If w(wn)\gs[4]=1	;2d?
		SetVProp wn,6,0,1/16
	Else
		;
		;3d...add rotation gadgets!
		;
		PropGadget wn,4,11,16+128+256,7,13,-20 ;x rot gadget
		PropGadget wn,17,-8,12+64+256,8,-35,7	;y rot gadget
		;
		SetVProp wn,6,.5,1/16
		SetVProp wn,7,.5,1/16
		SetHProp wn,8,.5,1/16
		;
	EndIf
EndIf
;
localstat wn,w(wn)\x,w(wn)\y,w(wn)\w,w(wn)\h,wof,"",1,0,wn ;have to handle drag by hand!
WPointer 1:arrmult 0:Activate wn:Gosub newsize
;
Return

.close_window
;
;wn=window number
;
Free localstat wn:Free GadgetJam wn:Free lmaxlen wn:nw-1
;
;Okay, kludgey delete window routine...
;
##[$FE8C]
For k=wn To nw
##[$FEDB] &w(k+1),&w(k),SizeOf.window
##[$FEDB] Addr lmaxlen(k+1),Addr lmaxlen(k),sizeofb
##[$FEDB] Addr localstat(k+1),Addr localstat(k),sizeofw
##[$FEDB] Addr GadgetJam(k+1),Addr GadgetJam(k),sizeofg
Poke.w Peek.l(Addr localstat(k))+120,k
Next
For j=0 To sizeofb-1 Step 4:Poke.l Addr lmaxlen(k)+j,0:Next
For j=0 To sizeofg-1 Step 4:Poke.l Addr GadgetJam(k)+j,0:Next
For j=0 To sizeofw-1 Step 4:Poke.l Addr localstat(k)+j,0:Next
##[$FE8D]
;
Return

.newsize	;wn=window (must be used too...)
;
bx=WLeftOff:by=WTopOff
bw=InnerWidth:bh=InnerHeight
If w(wn)\gs[4]=2
	bx+13:bw-14:bh-7
EndIf
w(wn)\bx=bx,by,bw,bh
lmaxlen wn,w(wn)\bw,w(wn)\bh,#rdepth
rf=-1:Gosub render
;
.showrender ;wblit bitmap across!
;
##[$FF61] Addr lmaxlen(wn),0,0,RastPort(wn),w(wn)\bx,w(wn)\by,w(wn)\bw,w(wn)\bh,$c0
Return

rerenderall
For wn=1 To nw
Gosub render:Gosub showrender
Next
Return

rerender:Gosub render:Goto showrender

.calcvpos
;
;calc vertice position based on mx,my and wn!
;return vx,vy and vz
;
;calculate cx,cy
;
cx=w(wn)\bw LSR 1 +w(wn)\x+w(wn)\bx
cy=w(wn)\bh LSR 1 +w(wn)\y+w(wn)\by
Gosub getviinfo
vxyz\v[dix]=wpx+(mx-cx)/scx
vxyz\v[diy]=wpy+(my-cy)/scy
vxyz\v[dio]=wpo
;
vx=vxyz\x:vy=vxyz\y:vz=vxyz\z:Return

Macro x
cx+(`1-wpx)*scx
End Macro

Macro y
cy+(`1-wpy)*scy
End Macro

Macro xy
!x{`1},!y{`2}
End Macro

.getviinfo
;
wt=w(wn)\gs[1]:sc=w(wn)\sc
;
dix=vi(wt)\d[0]:diy=vi(wt)\d[1]:dio=vi(wt)\d[2]
ssx=vi(wt)\s[0]:ssy=vi(wt)\s[1]:sso=vi(wt)\s[2]
scx=sc*ssx:scy=sc*ssy:sco=sc*sso
;
wpx=w(wn)\wp[dix]:wpy=w(wn)\wp[diy]:wpo=w(wn)\wp[dio]
;
Return

.render		;wn=window number, rf=render flags
;
Use lmaxlen wn
;
w=w(wn)\bw:h=w(wn)\bh
cx=w LSR 1:cy=h LSR 1
;
If w(wn)\gs[4]=2 Then Goto render3d
;
Gosub getviinfo
;
If rf&1
	Gosub showgrid
Else
	BlockScroll 4
EndIf
If rf&2
	Gosub showpolys
EndIf
If rf&4
	Gosub showuverts
EndIf
If rf&8
	Gosub showsverts
EndIf
;
;BitMapOutput wn:Locate 0,0
;Print w(wn)\wp[0]," ",w(wn)\wp[1]," ",w(wn)\wp[2]
;
longdiv 2,cx,cy:Return

showgrid		 ;gs=grid size, sc=scale
;
gsx=QAbs(gs*scx)
gsy=QAbs(gs*scy)
;
If gsx>4 AND gsy>2 Then BlockScroll 4 Else BlockScroll 7:Return
;
x2=(-wpx MOD gs)*scx+cx
;
x=x2
While x>=0
	Line x,0,x,h-1,7
	x-gsx
Wend
x=x2
Repeat
	x+gsx
	If x<w Then Line x,0,x,h-1,7
Until x>=w
;
y2=(-wpy MOD gs)*scy+cy
;
y=y2
While y>=0
	Line 0,y,w-1,y,7
	y-gsy
Wend
y=y2
Repeat
	y+gsy
	If y<h Then Line 0,y,w-1,y,7
Until y>=h
;
Return

showpolys
##[$80CA] po()
newmem po()
While globfree(po())
	;
	n=po()\n
	*ve=po()\v[n]
	px=!x{*ve\v[dix]}:py=!y{*ve\v[diy]}
	;
	For k=1 To n
	*ve=po()\v[k]
	x=!x{*ve\v[dix]}:y=!y{*ve\v[diy]}
	Line px,py,x,y,2:px=x:py=y
	Next
	;
Wend
Return

showuverts	 ;show unselected vertices
;
##[$80CA] ve()
newmem ve()
While globfree(ve())
	If \s=0
		x=!x{\v[dix]}:y=!y{\v[diy]}
		If \f
			Boxf x-2,y-1,x+2,y+1,6
		Else
			Boxf x-2,y-1,x+2,y+1,5
		EndIf
	EndIf
Wend
;
Return

showsverts	 ;show selected vertices
;
##[$80CA] ve()
newmem ve()
While globfree(ve())
	If \s
		x=!x{\v[dix]}:y=!y{\v[diy]}
		If \f
			Boxf x-2,y-1,x+2,y+1,3
		Else
			Boxf x-2,y-1,x+2,y+1,1
		EndIf
	EndIf
Wend
;
Return

Macro x3d
(`1 * xfocus)/`2+cx
End Macro

Macro y3d
(`1 * yfocus)/`2+cy
End Macro

.render3d	 ;OK, 3D rendering time!
;
camz=w(wn)\camz
;
xfocus=focus
yfocus=focus*asra
;
BlockScroll 2 ;black!
If rf&1
	Gosub showgrid3d
EndIf
If rf&2
	Gosub showpolys3d
EndIf
If rf&4
	Gosub showuverts3d
EndIf
If rf&8
	Gosub showsverts3d
EndIf
Return

make3d
;
;vx,vy,vz...return same but fucked with
;
;if z >=1 then also return x3d,y3d - 2d screen pos
;
;we should do our front/left/top thingy here
;and matrix mult
;
vz+camz:If vz>=1 Then x2d.l=!x3d{vx,vz}:y2d.l=!y3d{vy,vz}
Return

showgrid3d
Return

showpolys3d
##[$80CA] po()
newmem po()
While globfree(po())
	;
	n=po()\n
	*ve=po()\v[n]
	vx=*ve\x:vy=*ve\y:vz=*ve\z:Gosub make3d
	;
	If vz>=1
		lx2d=x2d:ly2d=y2d:lok=-1
	Else
		lok=0
	EndIf
	lx3d=vx:ly3d=vy:lz3d=vz
	;
	For k=1 To n
	*ve=po()\v[k]
	vx=*ve\x:vy=*ve\y:vz=*ve\z:Gosub make3d
	If vz>=1
		If lok
			;both visible
			Line lx2d,ly2d,x2d,y2d,1
			lx2d=x2d:ly2d=y2d
		Else
			;last not vis, but we are!
			lok=-1
		EndIf
		lx2d=x2d:ly2d=y2d
	Else
		If lok
			;last visible, but not us
			lok=0
		Else
			;both not visible
		EndIf
	EndIf
	lx3d=vx:ly3d=vy:lz3d=vz
	;
	Next
	;
Wend
Return

showuverts3d
Return

showsverts3d
Return

.drawpolygon
;
;ax=pa(1)\x-pa(0)\x:ay=pa(1)\y-pa(0)\y
;bx=pa(2)\x-pa(1)\x:by=pa(2)\y-pa(1)\y
;If ax*by<ay*bx Then Return	;anticlockwise!
;;


mcode
##[$80D3]

#oldopenlibrary=-408
#closelibrary=-414
#putmsg=-366
#getmsg=-372
#replymsg=-378
#adddevice=-432
#openresource=-498
#allocsignal=-330
#signal=-324
#waitsignal=-318
#freesignal=-336
#opendevice=-444
#closedevice=-450
#doio=-456
#sendio=-462
#checkio=-468
#waitio=-474
#abortio=-480
#addintserver=-168
#remintserver=-174

#in_node=0
#in_type=8
#in_pri=9
#in_name=10
#in_data=14
#in_code=18
#in_level=22
#in_oldint=24
#in_sizeof=28

#alloclen=34+48+64	;reply port+iostdreq+xtra

_opendevice
	;a0=device name ("trackdisk.device" etc)
	;d0=unit
	;d1=flags
	;return:
	;d0=device block
MOVEM.l a2/a6,-(a7):MOVE.l	4,a6:MOVEM.l d0-d1/a0,-(a7)
MOVE.l	#alloclen,d0:MOVE.l	#$10001,d1:JSR -198(a6)
MOVE.l	d0,-(a7):MOVEQ #-1,d0:JSR allocsignal(a6)
MOVE.l	(a7)+,a0:MOVE.b #4,8(a0)	;type: msgport
LEA 34(a0),a1:MOVE.l	a0,14(a1)
MOVE.b	d0,15(a0):MOVE.l	276(a6),16(a0)
LEA 24(a0),a2:MOVE.l	a2,20(a0):MOVE.l	a0,28(a0)
MOVEM.l (a7)+,d0-d1/a0
MOVE.l	a1,-(a7):JSR opendevice(a6):MOVE.l	(a7)+,d0
MOVEM.l (a7)+,a2/a6:RTS

	;*
_closedevice ;a1=device block
	;*
MOVEM.l d2/a6,-(a7):MOVE.l	4,a6:MOVE.l	a1,-(a7)
MOVE.b	15(a1),d2:JSR closedevice(a6):MOVE.b	d2,d0
JSR freesignal(a6):MOVE.l	(a7)+,a1:LEA -34(a1),a1
MOVE.l	#alloclen,d0:JSR -210(a6):MOVEM.l (a7)+,d2/a6:RTS

	;*
_doio	;a1.l=device block
	;a0.l=data
	;d0.w=command
	;d1.l=length
	;d2.l=offset
	;*
MOVEM.l d2/a6,-(a7):MOVE.l	4,a6:MOVE	d0,28(a1):MOVE.l	d1,36(a1)
MOVE.l	a0,40(a1):MOVE.l	d2,44(a1):JSR doio(a6):MOVEM.l (a7)+,d2/a6:RTS

idname:Dc.b "input.device",0:Event
iddev:Dc.l 0

allocinputhandler
;
;a0=code, a1=data, d0=priority
;
MOVEM.l d0/a0-a1,-(a7)
LEA idname(pc),a0:MOVEQ #0,d0:MOVEQ #0,d1:BSR _opendevice
MOVE.l d0,iddev
MOVEM.l (a7)+,d0/a0-a1
;
MOVEM.l a2/a6,-(a7):MOVE.l 4,a6
EXT.l d0:MOVEM.l d0-d1/a0-a1,-(a7):MOVEQ #in_sizeof,d0
MOVE.l	#$10001,d1:JSR -198(a6):MOVE.l	d0,a1
MOVE.b	#2,8(a1):MOVEM.l (a7)+,d0-d1/a0/a2
MOVE.b	#2,in_type(a1):MOVE.b	d0,in_pri(a1):MOVE.l a2,in_data(a1)
MOVE.l	a0,in_code(a1):MOVE.l a1,-(a7)
;
MOVE.l a1,a0:MOVE.l iddev(pc),a1:MOVEQ #9,d0	;add handler!
MOVEQ #0,d1:MOVEQ #0,d2:BSR _doio:MOVE.l (a7)+,a1
;
MOVEM.l (a7)+,a2/a6:RTS

freeinputhandler	;a1=input handler to free
;
MOVE.l a1,-(a7)
MOVE.l a1,a0:MOVE.l iddev(pc),a1:MOVEQ #10,d0 ;rem handler
MOVEQ #0,d1:MOVEQ #0,d2:BSR _doio
MOVE.l (a7)+,a1:MOVE.l a6,-(a7)
MOVE.l 4,a6:MOVEQ #in_sizeof,d0:JSR -210(a6):MOVE.l (a7)+,a6
MOVE.l iddev(pc),a1:BRA _closedevice

ihandler:Dc.l 0
firstevent:Dc.l 0

ih_sigmask:Dc.l 0
ih_task:Dc.l 0
ih_sigbit:Dc.l 0
ih_do:Dc 0
;
firstraw:Dc.l 0
lastraw:Dc.l firstraw

inputhandler ;my input.device handler!
;
;a0=old input events...a1=prev...return d0=new input events
;
MOVE.l a0,d0:MOVE.l d0,(a1)
'loop:BEQ 'done:MOVE.l d0,a0
CMP.b #1,4(a0):BNE 'more:MOVE ih_do(pc),d0:BEQ 'more
;
;OK, it's a key stroke! add to queue and signal task!
;
MOVEM.l a0-a1/d2/a6,-(a7):MOVEQ #0,d2:MOVE 6(a0),d2:MOVE.l 4,a6
;
MOVEQ #8,d0:MOVEQ #1,d1:JSR -198(a6):MOVE.l d0,a0
CLR.l (a0):MOVE.l d2,4(a0)
MOVE.l lastraw(pc),a1:MOVE.l a0,(a1):MOVE.l a0,lastraw
;
MOVEM.l ih_sigmask(pc),d0/a1:JSR signal(a6)
;
MOVEM.l (a7)+,a0-a1/d2/a6
;
'more:MOVE.l a0,a1:MOVE.l (a0),d0:BRA 'loop
'done:MOVE.l firstevent(pc),d0:RTS

getraw ;return raw code in d0, or 0 if none
;
MOVE.l firstraw(pc),d0:BEQ 'noraw:MOVE.l d0,a1
MOVE #$4000,$dff09a
MOVE.l (a1),firstraw:BNE 'notz:MOVE.l #firstraw,lastraw
'notz:MOVE.l 4(a1),-(a7)
MOVE.l 4,a6:MOVEQ #8,d0:JSR -210(a6)
MOVE #$c000,$dff09a:MOVE.l (a7)+,d0
'noraw:RTS

inithandler
MOVE.l a6,-(a7):MOVE.l 4,a6
MOVEQ #-1,d0:JSR allocsignal(a6):MOVE.l d0,ih_sigbit
MOVEQ #0,d1:BSET d0,d1:MOVE.l d1,ih_sigmask:MOVE.l 276(a6),ih_task
LEA inputhandler(pc),a0:LEA firstevent(pc),a1:MOVEQ #100,d0
BSR allocinputhandler:MOVE.l a1,ihandler:CLR ih_do
MOVE.l (a7)+,a6:RTS

finithandler
MOVE.l a6,-(a7)
MOVE.l ihandler(pc),a1:BSR freeinputhandler
MOVE.l ih_sigbit(pc),d0:MOVE.l 4,a6:JSR freesignal(a6)
MOVE.l (a7)+,a6
'loop:BSR getraw:TST d0:BNE 'loop:RTS
