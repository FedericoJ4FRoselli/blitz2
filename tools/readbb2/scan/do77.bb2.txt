; ascii translation of /Users/simon/Google Drive/amiga/w/lha/games/Derring-Do/do77.bb2,/Users/simon/Google Drive/amiga/w/lha/games/af/Derring-Do/do77.bb2
; Derring-Do
; N H Slaven
; Based on the classic arcade game Mr. Do
;

##[$80C3]
##[$80CC]
##[$80CB]


.Constants

;************************************************
;
;	Constant Definitions
;
;************************************************

#Test		 = 0
#Lives		= 3
#UmphsOut = 4

#AppleMax = 5

#XOff		 = 61
#YOff		 = 30


.NewTypes

;************************************************
;
;	NewType Definitions
;
;************************************************

NEWTYPE.ImList
	I.w[4]
End NEWTYPE


NEWTYPE.AnimShape				 ;Animation Shape
	x.w										 ;current screen x
	y.w										 ;current screen y
	Steps.l								 ;No of steps before at curent velocity
	vx.b										;velocity x
	vy.b										;velocity y
	*ImList.ImList					;animation image list
	*C.Character						;character pointer
	Kill.b
End NEWTYPE


NEWTYPE.Character				 ;Character Info
	Action.b								;1=move,2=dig,3=push,4=eat,5=dead
	Character.b						 ;character type (0=md,1=u,2=lm,3=m)
	MapX.b									;Map x
	MapY.b									;Map y
	CurDir.b								;Current Direction
	OldDir.b								;Old Direction
	OldAction.b						 ;
	*S.AnimShape						;animshape pointer
	ovx.b
	ovy.b
	ost.l
	*oim.ImList
End NEWTYPE


NEWTYPE.Apple						 ;apple info
	Action.b								;1=pushed,2=drop,3=drop smash,4=drop special
	MapX.b									;Map X
	MapY.b									;Map Y
	CurDir.b								;direction
	OldDir.b								;Old Direction
	OldAction.b						 ;Last Action
	*S.AnimShape						;Shape
	*C.Character						;Pusher
End NEWTYPE


NEWTYPE.MapUpdate				 ;Map update info
	x.w										 ;screen x
	y.w										 ;screen y
	s.w										 ;MapShape
	o.w										 ;Flag for deletion once on both bitmaps
End NEWTYPE


NEWTYPE.ExtraMonsters
	x.w										 ;screen x
	y.w										 ;screen y
	s.b										 ;MapShape
	o.b
	*ImList.ImList
End NEWTYPE


NEWTYPE.Ball
	Able.b									;Check for ball able
	Active.b								;Ball is On
	Blow.b
	sx.w										;screen x
	sy.w										;screen y
	dx.w										;vel x
	dy.w										;vel y
	ClockWise.b
	Steps.b								 ;No of Steps
	MapX.b									;MapX
	MapY.b									;MapY
	DRec.b									;Direction
	CurPos.b								;Current Position
	OldPos.b								;Old Position
	Count.w								 ;Count Down
End NEWTYPE





.Globals
;************************************************
;
; Globals
;
;************************************************


Dim ##[$80B3] Ash.AnimShape(40)
Dim ##[$80B3] Mup.MapUpdate(10)
Dim ##[$80B3] Sco.MapUpdate(10)

Dim ##[$80B3] Ump.Character(#UmphsOut)
Dim ##[$80B3] Mar.Character(2)
Dim ##[$80B3] App.Apple(10)

DEFTYPE.Character MrDo
DEFTYPE.Character LM
DEFTYPE.Character *UmphBase
DEFTYPE.Character Goodie
DEFTYPE.Character Diamond
DEFTYPE.Character ExtraDo
DEFTYPE.Ball			Ball

DEFTYPE.b				 CBitMap,Joy,DX,DY,CM,OM,JM,SCount,MoreUmphs
DEFTYPE.b				 UpDate,ImNo,NoApples,NoOfPlayers
DEFTYPE.b				 EXTRA,DiamondActive,ExtraDoActive
DEFTYPE.l				 Score,OldScore,LetterScore
DEFTYPE.w				 Lives
DEFTYPE.w				 NoOfUmphs,NoOfUmphsOut,NoOfUmphsLeft
DEFTYPE.w				 GSco,GScoShape

DEFTYPE.w				 Tmp,TmpX,TmpY

DEFTYPE.w				 LMovx,LMovy,LMosteps,LMOut

DEFTYPE.ImList		DoLeft,DoRight,DoUp,DoDown,DPshLft,DPshRgt
DEFTYPE.ImList		DoDead,DoDigRight,DoDigLeft,DoDigUp,DoDigDown
DEFTYPE.ImList		DoSquashed,DoSquaHor
DEFTYPE.ImList		UmLeft,UmRight,UmUp,UmDown,UPshLft,UPshRgt
DEFTYPE.ImList		UmDigLeft,UmDigRight,UmDigUp,UmDigDown
DEFTYPE.ImList		UmMtLeft,UmMtRight,UmMtUp,UmMtDown
DEFTYPE.ImList		UmphBaseNorm,UmphBaseFlash,UmSquashed
DEFTYPE.ImList		UmSquaHor
DEFTYPE.ImList		APNorm,APSplit1,APSplit2
DEFTYPE.ImList		LME,LMX,LMT,LMR,LMA,LMEat
DEFTYPE.ImList		MaraRight,MaraLeft,MaraUp,MaraDown,MaraEat
DEFTYPE.ImList		SGoodie,SDiamond,SExtraDo

DEFTYPE.Apple		 *TmpApple

Dim PosX.w(12),PosY.w(12),MAP.b(12,13),Things.b(12,13)
Dim *ApMap.Apple(12,13)


Dim PlyMAP.b(2,12,13),PlyThings.b(2,12,13),PlyApMap.b(2,12,13)
Dim PlyExtra.b(2),PlyLevel.b(2)
Dim PlyScore.l(2),PlyLetterScore.l(2)
Dim PlyLives.w(2),PlyNoOfUmphs(2)
Dim NewLevel.b(2)

Dim HighScore.l(10),HighName$(10)

Dim Blck.b(2)
Dim EXTRA.ExtraMonsters(5)

DEFTYPE.b


.ProgInit

LoadShapes 0,"derring.ss1"

casestrcomp 0,"derring.p1"
casestrcomp 1,"derring.p2"

LoadMedModule 0,"derring.m"
LoadSound 0,"derring.s1"
LoadSound 1,"derring.s2"
LoadSound 2,"derring.s3"
LoadSound 3,"derring.s4"
LoadSound 4,"derring.s5"
LoadSound 5,"derring.s6"
LoadSound 6,"derring.s7"
LoadSound 7,"derring.s8"
LoadSound 8,"derring.s9"
LoadSound 9,"derring.s10"
LoadSound 10,"derring.s11"
LoadSound 11,"derring.s12"
LoadSound 12,"derring.s13"
LoadSound 13,"derring.s14"
LoadSound 14,"derring.s15"
LoadSound 15,"derring.s16"
LoadSound 16,"derring.s17"

LoadSprites 0,"derring.ss2"

BLITZ

Buffer 0,8192
Buffer 1,8192

lmaxlen 0,320,266,4
lmaxlen 1,320,266,4

Slice 0,44,320,256,$fff0,4,8,32,320,320

For k=0 To 3
	Green k*4+19,15,15,15
	Green k*4+18,10,10,10
	Green k*4+17,6,6,6
Next


ScoreTable
Data.l	100000,90000,80000,70000,60000,50000,40000,30000,20000,10000

ScoreName
Data$	"Nick","Sarah","Hugh","The Minz"
Data$	"Hew","Pew","Barney McGrew","Cuthbert"
Data$	"Dibble","Offenbach"

.RealStart
##[$80C8] ScoreTable:For i=0 To 9:Read	HighScore(i):Next
##[$80C8] ScoreName :For i=0 To 9:Read	HighName$(i):Next
Gosub SortScore

NoOfPlayers=0
GameMode=1
StartGame=True
EndGame=False

HashSpeed		= 2	 ;1	2	3	6
HashSteps		= 9	 ;18 9	6	3
HashUpDate	 = 3	 ;7	3	1

While NOT EndGame

	Count.w=250
	While (Count>0) AND (NOT EndGame)
		Count-1
		Gosub MMenus
		If StartGame
			Gosub ClearBMs
			Gosub SB_Game
			Gosub ClearBMs
			Count=0
			Use lmaxlen 0
			Use SetCycle 1
			Box 77,93,242,106,15
			Show 0
			BitMapOutput 0
			BlitzKeys On
			BitMapInput
			Use SetCycle 1
			For k=0 To NoOfPlayers
				If PlyScore(k)>HighScore(9)
					Locate 8,9
					NPrint "Player ",k+1," enter your name."
					Locate 10,12
					HighName$(9)=Edit$("",20)
					HighScore(9)=PlyScore(k)
					Gosub SortScore
				EndIf
			Next
			BlitzKeys Off
		EndIf
	Wend
	Gosub ClearBMs
	Show 0
	BitMapOutput 0
	Use lmaxlen 0
	longdiv 206,160,20

	If EndGame : ##[$80BE] While : Goto ImOutaHere : EndIf

	For i=0 To 9
		Locate 6,6+i*2
		Print HighName$(i)
		Locate 29,6+i*2
		Print HighScore(i)
	Next

	Count=500
	While(Count>0)AND(Joyb(1)=0)
		VWait
		Count-1
	Wend

	While Joyb(1)<>0 : Wend
	Gosub ClearBMs
	Show 0
	BitMapOutput 0
	Use lmaxlen 0
	longdiv 204,160,20

	Locate 0,5
	NPrint "Programming & GFX				Nick Slaven"
	Locate 0,12
	NPrint "Game Testing	&					Hugh Gemmell"
	NPrint "discussions on"
	NPrint "the Do-ness of"
	NPrint "'Do'"
	Locate 0,8
	NPrint "Game testing &					 Sarah Lawson"
	NPrint "extreme goodwill"
	Locate 0,18
	NPrint "Instant guide to				 The Minz"
	NPrint "music theory"
	Locate 0,22
	NPrint "Music										Nick Slaven"
	NPrint "												 (with a little"
	NPrint "												 help from"
	NPrint "												 Offenbach)"
	Locate 0,29
	NPrint " This is SHAREWARE, read Derring.txt ! "

	Count=500
	While(Count>0)AND(Joyb(1)=0)
		VWait
		Count-1
	Wend
	While Joyb(1)<>0: Wend
	VWait
	VWait
	VWait
	VWait

	StartGame=True

Wend

ImOutaHere

End

SortScore

For i=0 To 9
	For j=0 To 9-i
		If HighScore(j+1)>HighScore(j)
			TScore.l=HighScore(j)
			HighScore(j)=HighScore(j+1)
			HighScore(j+1)=TScore
			Name$=HighName$(j)
			HighName$(j)=HighName$(j+1)
			HighName$(j+1)=Name$
		EndIf
	Next
Next

Return



MMenus
If StartGame
	Use SetCycle 1
	For i=0 To 1
		VWait
		Show i
		Use lmaxlen 1-i
		BlockScroll
		longdiv 195,160,100
		longdiv 197,157,171
		longdiv 199,157,199
		longdiv 205,157,227
	Next
	StartGame=False
	x.w=157
	y.w=171
	CBitMap=0
	Mve=False
	yDest.w=0
EndIf

VWait
Show	CBitMap
CBitMap=1-CBitMap
Use lmaxlen CBitMap
UnBuffer CBitMap
BBlit CBitMap,196,x,y
If Mve
	y=y+DY
	If y=yDest : Mve=False : EndIf
	Count=250
Else
	Joy=Joyr(1)
	If Joy<>8 : Count=250 : EndIf
	Select(Joy)
		Case 0 :
			Select(y)
				Case 193: yDest=166 : DY=-1 : Mve=True
				Case 199: yDest=171 : DY=-1 : Mve=True
				Case 227: yDest=199 : DY=-1 : Mve=True
			End Select
		Case 2 :
			Select(y)
				Case 193: Gosub ToggleMode
				Case 166: Gosub TogglePlayers
			End Select
		Case 4 :
			Select(y)
				Case 171: yDest=199 : DY= 1 : Mve=True
				Case 166: yDest=193 : DY= 1 : Mve=True
				Case 199: yDest=227 : DY= 1 : Mve=True
			End Select
		Case 6 :
			Select(y)
				Case 193: Gosub ToggleMode
				Case 166: Gosub TogglePlayers
			End Select
		Default:
	End Select
	If Joyb(1)<>0
		While Joyb(1)<>0 : Wend
		Select(y)
			Case 171 : StartGame=True
			Case 199 : Gosub OptionMenu
			Case 227 : EndGame=True
			Default	: Gosub NormalMenu
		End Select
	EndIf
EndIf

Return



OptionMenu
For i=0 To 1
	VWait
	Show i
	Use lmaxlen 1-i
	UnBuffer 1-i
	BlitMode EraseMode
	longdiv 197,157,171
	longdiv 199,157,199
	longdiv 205,157,227
	BlitMode CookieMode
	longdiv 198,82,166
	Select(NoOfPlayers)
		Case 0 : longdiv 201,200,166
		Case 1 : longdiv 203,200,166
	End Select
	Select(GameMode)
		Case 0 : longdiv 202,206,191
		Case 1 : longdiv 200,183,193
	End Select
Next
x.w=208
y.w=166
Return

NormalMenu
For i=0 To 1
	VWait
	Show i
	Use lmaxlen 1-i
	UnBuffer 1-i
	BlitMode EraseMode
	longdiv 198,82,166
	Select(NoOfPlayers)
		Case 0 : longdiv 201,200,166
		Case 1 : longdiv 203,200,166
	End Select
	Select(GameMode)
		Case 0 : longdiv 202,206,191
		Case 1 : longdiv 200,183,193
	End Select
	BlitMode CookieMode
	longdiv 197,157,171
	longdiv 199,157,199
	longdiv 205,157,227
Next
x.w=157
y.w=171
VWait
VWait
VWait
Return

ToggleMode
For i=0 To 1
	VWait
	Show i
	Use lmaxlen 1-i
	UnBuffer 1-i
	BlitMode EraseMode
	Select(GameMode)
		Case 0 : longdiv 202,206,191
		Case 1 : longdiv 200,183,193
	End Select
	BlitMode CookieMode
	Select(1-GameMode)
		Case 0 : longdiv 202,206,191
		Case 1 : longdiv 200,183,193
	End Select
	BBlit 1-i,196,x,y
Next
GameMode=1-GameMode

Select (GameMode)
	Case 0
		HashSpeed		= 1		;1	2	3	6
		HashSteps		= 18	 ;18 9	6	3
		HashUpDate	 = 7		;7	3	1
	Case 1
		HashSpeed		= 2		;1	2	3	6
		HashSteps		= 9		;18 9	6	3
		HashUpDate	 = 3		;7	3	1
End Select

VWait
VWait
VWait
VWait
VWait
Return

TogglePlayers
For i=0 To 1
	VWait
	Show i
	Use lmaxlen 1-i
	UnBuffer 1-i
	BlitMode EraseMode
	Select(NoOfPlayers)
		Case 0 : longdiv 201,200,166
		Case 1 : longdiv 203,200,166
	End Select
	BlitMode CookieMode
	Select(1-NoOfPlayers)
		Case 0 : longdiv 201,200,166
		Case 1 : longdiv 203,200,166
	End Select
	BBlit 1-i,196,x,y
Next
NoOfPlayers=1-NoOfPlayers
VWait
VWait
VWait
VWait
VWait
Return

ClearBMs
For i=0 To 1
	VWait
	Show i
	Use lmaxlen 1-i
	FlushBuffer 1-i
	BlockScroll
Next
Return







.SB_Game
;************************************************
;
; Subroutine PlySave
;
;************************************************

Use SetCycle 0


Gosub SB_GameInit
NewLevel(0)=True
NewLevel(1)=True
CBitMap=0
GameOn=True
CurrentPlayer=0

While GameOn
	Gosub SB_PlyInit

	##[$80CA] *UmphBase
	*UmphBase\Action=6

	If Level <15
		\S\Steps=25+Rnd(150-Level*10)
		If \S\Steps<51 : \S\Steps=51 : EndIf
	Else
		\S\Steps=51
	EndIf

	NoOfUmphsOut=0
	UmphAble =True
	MoreUmphs=True
	MaraTime=False

	UpDateScore = 2
	Colour 15

.MainGameLoop
	While (Cherries<>0)AND(Alive)AND(NoOfUmphs<>0)
		VWait
		Show CBitMap
		CBitMap=1-CBitMap
		PlayMed
		Gosub SB_Ball
		Gosub SB_AppleUpdate
		Gosub SB_PlyAction
		Gosub SB_PlyColl
		If MaraTime
			Gosub SB_MaraUpdate
		Else
			Gosub SB_UmphUpdate
		EndIf
		Gosub SB_Letter
		Gosub SB_ScoreCheck
		Gosub SB_UpDate
	Wend

	Gosub SB_PlySave

Wend

Return








.SB_ScoreCheck
;************************************************
;
; Subroutine ScoreCheck
;
;************************************************

If Score<>OldScore
	UpDateScore=2
	OldScore=Score
EndIf

If UpDateScore=0 Then Return
BitMapOutput CBitMap
If CurrentPlayer=0
	Locate 0,6
Else
	Locate 34,6
EndIf
Print Score
UpDateScore-1
Return









.SB_PlySave
;************************************************
;
; Subroutine PlySave
;
;************************************************

If (NOT Alive) AND (MrDo\OldAction<>4)
	MrDo\S\ImList=DoDead
EndIf

If NOT Alive
	Lives-1
	StopMed
	If (MrDo\S\ImList=DoSquashed)OR(MrDo\S\ImList=DoSquaHor)
		Sound 10,15
	Else
		Sound 11,15
	EndIf
EndIf

For i=0 To 100
	VWait
	Show CBitMap
	CBitMap=1-CBitMap

	If Alive : PlayMed : EndIf
	Gosub SB_UpDate
	Gosub SB_Ball
	Gosub SB_AppleUpdate
	Gosub SB_ScoreCheck
Next

If Alive :	StopMed : EndIf

ClearList Ash()

VWait
Show CBitMap
CBitMap=1-CBitMap
Gosub SB_UpDate
VWait
Show CBitMap
CBitMap=1-CBitMap
Gosub SB_UpDate

ClearList Mar()
ClearList Ump()
ClearList App()

If LetterActive
	LetterActive = False
	LetterScore	= Score
EndIf

Ball\Steps	= 0
Ball\Active = False
Ball\Able	 = True
Ball\Blow	 = False
Fire				= False

For i=0 To 7 : ShowSprite 0,352,100,i : Next i

If Cherries=0 OR NoOfUmphs=0
	NewLevel(CurrentPlayer)=True
	Level+1
EndIf

PlyLevel(CurrentPlayer)			 = Level
PlyScore(CurrentPlayer)			 = Score
PlyLives(CurrentPlayer)			 = Lives
PlyLetterScore(CurrentPlayer) = LetterScore
PlyExtra(CurrentPlayer)			 = EXTRA
PlyNoOfUmphs(CurrentPlayer)	 = NoOfUmphs

For x=0 To 12
	For y=0 To 13
		PlyMAP(CurrentPlayer,x,y)=MAP(x,y)
		PlyThings(CurrentPlayer,x,y)=Things(x,y)
		If *ApMap(x,y)<>0
			PlyApMap(CurrentPlayer,x,y)=1
		Else
			PlyApMap(CurrentPlayer,x,y)=0
		EndIf
		*ApMap(x,y)=0
		Things(x,y)=0
	Next y
Next x

If PlyLives(CurrentPlayer)=0
	Count.w=150
	globalloc Sco(): Sco()\x=153,107,180,Count
	globalloc Sco(): Sco()\x=189,105,181+CurrentPlayer,Count
	globalloc Sco(): Sco()\x=140,127,185,Count ; Game
	globalloc Sco(): Sco()\x=191,127,186,Count ; Over
	While Count>0 AND Joyb(1)=0
		VWait
		Show CBitMap
		CBitMap=1-CBitMap
		Gosub SB_UpDate
		Count-1
	Wend
	While Joyb(1)<>0
	Wend
EndIf

newmem Sco()
While globfree (Sco())
	Sco()\o=0
Wend
For i=0 To 1
	VWait
	Show CBitMap
	CBitMap=1-CBitMap
	Gosub SB_UpDate
Next i

If(NOT Alive)AND(NoOfPlayers=1)
	CurrentPlayer=1-CurrentPlayer
	If PlyLives(CurrentPlayer)=0
		CurrentPlayer=1-CurrentPlayer
	EndIf
	If PlyLives(0)=0 AND PlyLives(1)=0
		GameOn=False
	EndIf
EndIf

If(PlyLives(0)=0)AND(NoOfPlayers=0)
	GameOn=False
EndIf

StopMed

Return








.SB_PlyInit
;************************************************
;
; Subroutine PlyInit
;
;************************************************

MoreUmphs	 = True
Level			 = PlyLevel(CurrentPlayer)
MPNO				= Level-(Level/10)*10
Score			 = PlyScore(CurrentPlayer)
OldScore		= PlyScore(CurrentPlayer)
Lives			 = PlyLives(CurrentPlayer)
LetterScore = PlyLetterScore(CurrentPlayer)
EXTRA			 = PlyExtra(CurrentPlayer)

If NewLevel(CurrentPlayer)
	Gosub SB_LevelInit
	For x=0 To 12
		For y=0 To 13
			PlyMAP(CurrentPlayer,x,y)=MAP(x,y)
			PlyThings(CurrentPlayer,x,y)=Things(x,y)
		Next y
	Next x
	PlyNoOfUmphs(CurrentPlayer)=NoOfUmphs
	NewLevel(CurrentPlayer)=False
Else
	For x=0 To 12
		For y=0 To 13
			MAP(x,y)=PlyMAP(CurrentPlayer,x,y)
			Things(x,y)=PlyThings(CurrentPlayer,x,y)
		Next y
	Next x
	NoOfUmphs=PlyNoOfUmphs(CurrentPlayer)
	Gosub SB_DrawCurrentMap
EndIf

Gosub SB_DrawLives

Alive=True
DiamondActive=False
ExtraDoActive=False
Fire=False

newmem App()
While globfree (App())
	If App()\MapX=6 AND App()\MapY=12
		App()\S\Kill=True
		*ApMap(6,12)=0
		freelast App()
	EndIf
Wend

StartMedModule 0
SetMedMask 12

If Level<10
	GSco=(Level+1)*1000
	GScoShape=167+Level
Else
	GSco=10000
	GScoShape=176
EndIf

Count.w=125
globalloc Sco(): Sco()\x=153,107,180,Count
globalloc Sco(): Sco()\x=189,105,181+CurrentPlayer,Count
globalloc Sco(): Sco()\x=134,127,184,Count
globalloc Sco(): Sco()\x=182,127,183,Count
While Count>0 ; AND Joyb(1)=0
	VWait
	Show CBitMap
	CBitMap=1-CBitMap
	Gosub SB_UpDate
	Count-1
Wend

If Count<>0
	newmem Sco()
	While globfree (Sco())
		Sco()\o=0
	Wend
EndIf

While Joyb(1)<>0 : Wend

If Lives<7
	BlitMode EraseMode
	For j=0 To 1
		VWait
		Show 1-j
		Use lmaxlen j
		If CurrentPlayer=0
			longdiv 59,22,140+20*(Lives-1)
		Else
			longdiv 59,292,140+20*(Lives-1)
		EndIf
	Next
	BlitMode CookieMode
EndIf

Return









.SB_MaraInit
;************************************************
;
; Subroutine MaraInit
;
;************************************************

newmem Ump()
While globfree (Ump())
	*U.AnimShape=Ump()\S
	##[$80CA] Ump()
	\oim=*U\ImList
	\ovx=*U\vx
	\ovy=*U\vy
	\ost=*U\Steps
	*U\Steps=0
Wend

If (NoApples>2)AND(NoOfUmphs>3)
	Tmp = NoApples
	newmem App()
	While globfree(App())
		If App()\OldAction=3 : Tmp-1 : EndIf
	Wend
	newmem App()
	While (Tmp>2) AND (globfree (App()))
		If (MAP(App()\MapX,App()\MapY)<>0)AND(App()\OldAction<>3)
			App()\Action=3
			App()\OldAction=3
			Tmp-1
		EndIf
	Wend
	newmem App()
	While (Tmp>2)AND(globfree (App()))
		If App()\OldAction<>3
			App()\Action=3
			App()\OldAction=3
			Tmp-1
		EndIf
	Wend
EndIf

LetterScore=Score
MaraCount.w=0
MaraOn=True
StopMed
LoopSound 16,12
Sound		 8,3

Return










.SB_MaraColl
;************************************************
;
; Subroutine MaraColl
;
;************************************************
newmem Ump()

While globfree(Ump())

	If Ump()\Action=6 OR Ump()\Action=5 : Goto Uover :	EndIf

	*U.AnimShape=Ump()\S
	II.w=*U\ImList\I[ImNo]
	XX.w=*U\x
	YY.w=*U\y

	If Ball\Active AND (NOT Ball\Blow)
		##[$80CA] Ump()\S
		If PColl(XX-8,YY-8,16,16,Ball\sx-1,Ball\sy-1,2,2)
			Ump()\Action=0 : Ump()\OldAction=5
			Ball\Blow=True : Ball\dx=0 : Ball\dy=0
		End If
	End If

	CNIF #Test=0
		If PColl(*U\x-1,*U\y-1,2,2,MrDo\S\x-1,MrDo\S\y-1,2,2)
			MrDo\S\vx = 0
			MrDo\S\vy = 0
			Alive		 = False
		EndIf
	CEND

	If Ump()\OldAction=5 AND Ump()\Action=0
		globalloc Sco()
		Score+500
		Sco()\x=*U\x
		Sco()\y=*U\y
		Sco()\s=166
		Sco()\o=20
		NoOfUmphs-1
		NoOfUmphsOut-1
		UmphAble=True
		If (*U\ImList=UmSquashed)OR(*U\ImList=UmSquaHor)
			Sound 10,3
		Else
			Sound 13,3
		EndIf
		*U\Kill=True
		freelast Ump()
		Goto Uover
	EndIf

	newmem App()
	While globfree(App())
		If App()\Action =0 Then Goto MUover
		*A.AnimShape=App()\S
		If NOT SpritesHit(II,XX,YY,49,*A\x,*A\y) Then Goto MUover

		Select(App()\Action)
			Case 1:
				*U\ImList=UmSquaHor
			Default:
				*U\ImList=UmSquashed
				*U\y+2
		End Select

		Ump()\Action=5		: *U\Steps=*A\Steps-3
		Ump()\OldAction=5 : *U\vx=*A\vx
		*U\vy=*A\vy
		If(*U\Steps<0) : *U\Steps=0 : EndIf

		MUover
	Wend
Wend

Return











.SB_MaraKill
;************************************************
;
; Subroutine MaraKill
;
;************************************************
newmem Mar()
While globfree (Mar())
	*M.AnimShape=Mar()\S
	*M\Kill=True
	globalloc App()
	##[$80CA] App()
	App()\MapX=(*M\x-#XOff)/18
	App()\MapY=(*M\y-#YOff)/18
	App()\Action=0
	App()\OldAction=0
	*ApMap(\MapX,\MapY)=App()
	globalloc Ash()
	##[$80CA] Ash()
	\x=PosX(App()\MapX),PosY(App()\MapY),0,0,0,APNorm,App(),False
	App()\S=Ash()
	Ash()\C=App()
	NoApples+1
	If NoApples>#AppleMax
		App()\OldAction=3
		App()\Action=3
	EndIf
	Ball\Blow=True : Ball\dx=0 : Ball\dy=0
	globalloc Sco()
	Sco()\x=*M\x
	Sco()\y=*M\y
	Sco()\s=167
	Sco()\o=40
	Score+1000
	freelast Mar()
Wend

newmem Ump()
While globfree (Ump())
	*U.AnimShape=Ump()\S
	##[$80CA] Ump()
	*U\ImList=\oim
	*U\vx=\ovx
	*U\vy=\ovy
	*U\Steps=\ost
	\Action=\OldAction
Wend

MaraTime=False
StartMedModule 0
SetMedMask 12
Sound 14,3

Return











.SB_MaraUpdate
;************************************************
;
; Subroutine MaraUpdate
;
;************************************************

Gosub SB_MaraColl

If MaraOn
	If MaraCount=0
		MaraOn=globalloc (Mar())
		If NOT MaraOn
			If NOT LetterActive : Gosub SB_LetInit : EndIf
			MaraCount=(10-Level)*45
		Else
			##[$80CA] Mar()
			globalloc Ash()
			Mar()\Action=6,0,6,0,0,0,6,Ash()
			Ash()\x=PosX(4),PosY(0)-18,0,0,0,MaraRight,Mar(),False
			Ash()\vx=HashSpeed
			Ash()\Steps=HashSteps*2
			MaraCount=20
		EndIf
	EndIf
EndIf

If MaraCount<0:MaraDig=True:Else:MaraDig=False:MaraCount-1:EndIf

newmem Mar()

If NOT (globfree(Mar()))
	Gosub SB_MaraKill
	Return
Else
	newmem Mar()
EndIf

While globfree (Mar())
	*M.AnimShape=Mar()\S
	II=*M\ImList\I[ImNo]

	CNIF #Test=0
		If PColl(*M\x-3,*M\y-3,6,6,MrDo\S\x-3,MrDo\S\y-3,6,6)
			*M\vx=0
			*M\vy=0
			MrDo\S\vx=0
			MrDo\S\vy=0
			Alive=False
			Goto MMover
		EndIf
	CEND

	newmem App()
	While globfree (App())
		*A.AnimShape=App()\S
		##[$80CA] App()
		If PColl(*M\x-2,*M\y-2,4,4,*A\x-6,*A\y-6,12,12)
			*A\Kill=True
			*ApMap(\MapX,\MapY)=0
			Mar()\ovx=*M\vx
			Mar()\ovy=*M\vy
			Mar()\ost=*M\Steps
			Mar()\oim=*M\ImList
			*M\vx=0
			*M\vy=0
			*M\Steps=HashSteps*10
			*M\ImList=MaraEat
			Mar()\Action=2
			Mar()\OldAction=2
			freelast App()
			Goto MMover
		EndIf
	Wend

	If Ball\Active AND (NOT Ball\Blow)
		If RectsHit(II,*M\x,*M\y,0,Ball\sx,Ball\sy)
			*M\Kill=True
			globalloc App()
			##[$80CA] App()
			App()\MapX=(*M\x-#XOff)/18
			App()\MapY=(*M\y-#YOff)/18
			App()\Action=0
			App()\OldAction=0
			*ApMap(\MapX,\MapY)=App()
			globalloc Ash()
			##[$80CA] Ash()
			\x=PosX(App()\MapX),PosY(App()\MapY),0,0,0,APNorm,App(),False
			App()\S=Ash()
			Ash()\C=App()
			NoApples+1
			Ball\Blow=True : Ball\dx=0 : Ball\dy=0
			freelast Mar()
			globalloc Sco()
			Sco()\x=*M\x
			Sco()\y=*M\y
			Sco()\s=167
			Sco()\o=40
			Score+1000
			Sound 14,3
			Goto MMover
		End If
	End If

	##[$80CA] Mar()

	If \Action<>0 Then Goto MMover

	If \OldAction=6
		*M\ImList=MaraDown
		*M\vy=HashSpeed
		*M\Steps=HashSteps
		\Action=1
		\OldAction=1
		Goto MMover
	EndIf

	If \OldAction=2
		*M\ImList=\oim
		*M\vx=\ovx
		*M\vy=\ovy
		*M\Steps=\ost
		\Action=1
		\OldAction=1
		Goto MMover
	EndIf

	\CurDir=0
	DX=\MapX-MrDo\MapX
	DY=\MapY-MrDo\MapY
	R=Rnd(10)

	If(DX>0) : \CurDir ##[$80CE] 2 : End If
	If(DX<0) : \CurDir ##[$80CE] 3 : End If
	If(DY>0) : \CurDir ##[$80CE] 0 : End If
	If(DY<0) : \CurDir ##[$80CE] 1 : End If

	DigDir=\CurDir
	NL = NOT(\OldDir)
	\CurDir=(\CurDir AND MAP(\MapX,\MapY)) AND NL

	If \CurDir=0
		If MaraDig
			\CurDir=DigDir AND NL
		Else
			\CurDir=MAP(\MapX,\MapY) AND NL
			If \CurDir=0
				\CurDir=DigDir AND NL
			End If
		EndIf
	End If

	If ((\CurDir AND 3)<>0)AND((\CurDir AND $C)<>0)
		If R<5
			\CurDir=(\CurDir AND 3)
		Else
			\CurDir=(\CurDir AND $C)
		EndIf
	End If

	\OldDir= NOT(\CurDir)

	If(\CurDir AND 3) <>0:\OldDir=\OldDir AND 3	: EndIf
	If(\CurDir AND $C)<>0:\OldDir=\OldDir AND $C : EndIf

	\S\vx=0 : \S\vy=0 : DX=0 : DY=0

	If \CurDir ##[$80CD] 0:*M\vy=-HashSpeed:DY=-1:*M\ImList=MaraUp	 :CM=0:OM=1:End If
	If \CurDir ##[$80CD] 1:*M\vy= HashSpeed:DY= 1:*M\ImList=MaraDown :CM=1:OM=0:End If
	If \CurDir ##[$80CD] 2:*M\vx=-HashSpeed:DX=-1:*M\ImList=MaraLeft :CM=2:OM=3:End If
	If \CurDir ##[$80CD] 3:*M\vx= HashSpeed:DX= 1:*M\ImList=MaraRight:CM=3:OM=2:End If

	TX=\MapX+DX
	TY=\MapY+DY

	If (TX>11)OR(TX<0)OR(TY>12)OR(TY<0) :Goto MMover:EndIf

	*M\Steps=HashSteps

	If NOT (MAP(\MapX,\MapY) ##[$80CD] CM)
		If Things(TX,TY) ##[$80CD] 0
			Things(TX,TY) ##[$80CF] 0
			Cherries-1
		EndIf
		MAP(\MapX,\MapY) ##[$80CE] CM
		globalloc Mup()
		Mup()\x=PosX(\MapX)
		Mup()\y=PosY(\MapY)
		Mup()\s=MAP(\MapX,\MapY)-1
		Mup()\o=False
		MAP(TX,TY) ##[$80CE] OM
		globalloc Mup()
		Mup()\x=PosX(TX)
		Mup()\y=PosY(TY)
		Mup()\s=MAP(TX,TY)-1
		Mup()\o=False
	EndIf

	\Action=1
	\OldAction=1
	\MapX=TX
	\MapY=TY

	MMover
Wend

Return









.SB_DrawLives
;************************************************
;
; Subroutine DrawLives
;
;************************************************

For j=0 To 1
	VWait
	Show 1-j
	Use lmaxlen j
	For k=0 To NoOfPlayers
		For i=0 To PlyLives(k)-1
			If i<6
				longdiv 59,22+k*270,140+20*i
			EndIf
		Next
	Next
Next

Return









.SB_ExtraMrDo
;************************************************
;
; Subroutine ExtraMrDo
;
;
;************************************************


For j=0 To 1
	VWait
	Show CBitMap
	CBitMap=1-CBitMap
	Use lmaxlen CBitMap
	For i=0 To 4
		longdiv EXTRA(i)\s,EXTRA(i)\x,EXTRA(i)\y
	Next i
	Gosub SB_UpDate
Next j

newmem Ump()
While globfree (Ump())
	If Ump()\Action=6 Then Goto Eover
	TmpX=Ump()\S\x
	TmpY=Ump()\S\y
	XX.w=0
	YY.w=0

	globalloc Sco()
	Score+500
	Sco()\x=Ump()\S\x
	Sco()\y=Ump()\S\y
	Sco()\s=166
	Sco()\o=20
	NoOfUmphs-1
	NoOfUmphsOut-1
	UmphAble=True
	Sound 13,3
	Ump()\S\Kill=True
	freelast Ump()
	UpDateScore=2
	For Tmp=0 To 30
		VWait
		Show CBitMap
		PlayMed
		CBitMap=1-CBitMap
		Gosub SB_UpDate
		Gosub SB_ScoreCheck
		BBlit CBitMap,187+ImNo,160,13
		ShowSprite 0,TmpX+YY,(TmpY+YY)&255,0:ShowSprite 0,TmpX-YY,(TmpY+YY)&255,1
		ShowSprite 0,TmpX-YY,(TmpY-YY)&255,2:ShowSprite 0,TmpX	 ,(TmpY+XX)&255,3
		ShowSprite 0,TmpX	 ,(TmpY-XX)&255,4:ShowSprite 0,TmpX+YY,(TmpY-YY)&255,5
		ShowSprite 0,TmpX-XX,(TmpY	 )&255,6:ShowSprite 0,TmpX+XX,(TmpY	 )&255,7
		XX+7
		YY+5
	Next
	For i=0 To 7 : ShowSprite 0,352,100,i : Next i
	Eover
Wend

JumpMed 7
SetMedMask 15

For Tmp=0 To 50
	VWait
	Show CBitMap
	PlayMed
	CBitMap=1-CBitMap
	Gosub SB_UpDate
	BBlit CBitMap,187+ImNo,160,13
Next

For Tmp=0 To 100
	VWait
	Show CBitMap
	PlayMed
	CBitMap=1-CBitMap
	Gosub SB_UpDate
	BBlit CBitMap,191+ImNo,160,11
Next

globalloc Ash()
##[$80CA] Ash()
\x=PosX(6),PosY(0)-18,0,0,0,DoLeft,MrDo,False
If CurrentPlayer=0
	\vx=-HashSpeed
	\Steps=(PosX(6)-22)/HashSpeed
Else
	\vx=HashSpeed
	\Steps=(292-PosX(6))/HashSpeed
	\ImList=DoRight
EndIf
While \Steps>0
	VWait
	Show CBitMap
	PlayMed
	CBitMap=1-CBitMap
	Gosub SB_UpDate
Wend

Lives+1

\vx=0
\vy=HashSpeed
If Lives>7
	\Steps=(258-PosY(0))/HashSpeed
Else
	\Steps=(118-PosY(0)+20*Lives)/HashSpeed
EndIf
\ImList=DoDown
While \Steps>0
	VWait
	Show CBitMap
	PlayMed
	CBitMap=1-CBitMap
	Gosub SB_UpDate
Wend
\ImList=DoRight

Cherries=0

Return








.SB_LetInit
;************************************************
;
; Subroutine Letter
;
; Updates Letter Monster
;
;************************************************

Letter=Rnd(5)
AddFirst Ash()
LM\Action=3,0,6,0,0,0,3,Ash()
Ash()\x=0,0,0,0,0,EXTRA(Letter)\ImList,LM,False
Ash()\x=EXTRA(Letter)\x
Ash()\y=EXTRA(Letter)\y
Ash()\Steps=PosX(6)-EXTRA(Letter)\x
If Ash()\Steps<0
	Ash()\Steps=Abs(Ash()\Steps)
	Ash()\vx=-1
Else
	Ash()\vx=1
EndIf
LetterActive=True
LetterScore=Score
LMOut=250

Return









.SB_Letter
;************************************************
;
; Subroutine Letter
;
; Updates Letter Monster
;
;************************************************

If ((Score-LetterScore)>5000)AND(NOT LetterActive)AND(NoApples<#AppleMax)
	Gosub SB_LetInit
EndIf

If NOT LetterActive : Return : EndIf

##[$80CA] LM

CNIF #Test=0
	If PColl(LM\S\x-3,LM\S\y-3,6,6,MrDo\S\x-3,MrDo\S\y-3,6,6)
		LM\S\vx=0
		LM\S\vy=0
		MrDo\S\vx=0
		MrDo\S\vy=0
		Alive=False
	EndIf
CEND

If Ball\Active AND (NOT Ball\Blow)
	If PColl(LM\S\x-8,LM\S\y-8,16,16,Ball\sx-1,Ball\sy-1,2,2)
		LM\S\Kill=True
		globalloc App()
		##[$80CA] App()
		App()\MapX=(LM\S\x-#XOff)/18
		App()\MapY=(LM\S\y-#YOff)/18
		App()\Action=0
		App()\OldAction=0
		*ApMap(\MapX,\MapY)=App()
		globalloc Ash()
		##[$80CA] Ash()
		\x=PosX(App()\MapX),PosY(App()\MapY),0,0,0,APNorm,App(),False
		App()\S=Ash()
		Ash()\C=App()
		NoApples+1
		Ball\Blow=True : Ball\dx=0 : Ball\dy=0
		LetterActive=False
		EXTRA ##[$80CE] Letter
		Sound 14,3
		If MaraTime
			Gosub SB_MaraKill
		EndIf
		If EXTRA<>31
			globalloc Mup()
			Mup()\x=EXTRA(Letter)\x
			Mup()\y=EXTRA(Letter)\y
			Mup()\o=False
			Mup()\s=EXTRA(Letter)\s
		Else
			Gosub SB_ExtraMrDo
			EXTRA=0
		EndIf
		Return
	End If
End If

##[$80CA] LM

If NOT MaraTime Then LMOut-1

If \Action<>0 : Return : EndIf

If \OldAction=5
	LM\S\Kill=True
	LetterActive=False
	Return
EndIf

If (\MapX=6)AND(\MapY=0)AND(\OldAction<3)AND(LMOut<0)
	LM\S\vx=0
	LM\S\vy=-1
	LM\S\Steps=20
	LM\OldAction=5
	LM\Action=5
	Return
EndIf

If \OldAction=2
	LM\S\ImList=EXTRA(Letter)\ImList
	LM\S\vx=LMovx
	LM\S\vy=LMovy
	LM\S\Steps=LMosteps
	If LM\S\Steps<>0
		LM\OldAction=1
		LM\Action=1
		Return
	EndIf
EndIf

If \OldAction=3
	LM\S\vx		 = 0
	LM\S\vy		 = 1
	LM\S\Steps	= PosY(0)-LM\S\y
	LM\OldAction= 4
	LM\Action	 = 4
	Return
EndIf

R=Rnd(10)

\CurDir=MAP(\MapX,\MapY) AND (NOT \OldDir)

If (\CurDir = 0) OR (Rnd(10)<2)
	\CurDir=MAP(\MapX,\MapY)
EndIf

If((\CurDir AND 3)<>0) AND((\CurDir AND $C)<>0)
	If R<5
		\CurDir=(\CurDir AND 3)
	Else
		\CurDir=(\CurDir AND $C)
	End If
End If

If (\CurDir ##[$80CD] 0)AND(\CurDir ##[$80CD] 1)
	If R<5 :\CurDir ##[$80CF] 0:Else \CurDir ##[$80CF] 1:End If
End If

If (\CurDir ##[$80CD] 2)AND(\CurDir ##[$80CD] 3)
	If R>5 :\CurDir ##[$80CF] 3:Else \CurDir ##[$80CF] 2:End If
End If

TX=\MapX
TY=\MapY

\OldDir= NOT(\CurDir)

If(\CurDir AND 3) <>0:\OldDir=\OldDir AND 3	: EndIf
If(\CurDir AND $C)<>0:\OldDir=\OldDir AND $C : EndIf

If \CurDir ##[$80CD] 0:LM\S\vy=-HashSpeed:TY-1:End If
If \CurDir ##[$80CD] 1:LM\S\vy= HashSpeed:TY+1:End If
If \CurDir ##[$80CD] 2:LM\S\vx=-HashSpeed:TX-1:End If
If \CurDir ##[$80CD] 3:LM\S\vx= HashSpeed:TX+1:End If

If (TX>11)OR(TX<0)OR(TY>12)OR(TY<0) : Return :EndIf

\MapY=TY
\MapX=TX

\S\Steps=HashSteps

\Action=1
\OldAction=1

Return






.SB_Ball
;************************************************
;
; Subroutine Ball
;
; Updates Crystal ball
;
;************************************************

##[$80CA] Ball

If (NOT \Active)AND(NOT \Able)
	\Count-1
	If \Count<29
		\sx=MrDo\S\x : \sy=MrDo\S\y
		\dx-7		: \dy-5
		ShowSprite 0,\sx+\dy,(\sy+\dy)&255,0 : ShowSprite 0,\sx-\dy,(\sy+\dy)&255,1
		ShowSprite 0,\sx-\dy,(\sy-\dy)&255,2 : ShowSprite 0,\sx		,(\sy+\dx)&255,3
		ShowSprite 0,\sx		,(\sy-\dx)&255,4 : ShowSprite 0,\sx+\dy,(\sy-\dy)&255,5
		ShowSprite 0,\sx-\dx,(\sy		)&255,6 : ShowSprite 0,\sx+\dx,(\sy		)&255,7
	EndIf
	If \Count=0
		For i=0 To 7 : ShowSprite 0,352,100,i : Next i
		\Able	=True
	EndIf
	Return
End If

If (NOT \Active)AND(\Able)AND(Fire)
	\DRec=MrDo\CurDir
	\MapX=MrDo\MapX : \MapY=MrDo\MapY
	\Count=150
	If \DRec ##[$80CD] 0 : \MapY-1 : \CurPos=1 : DX= 0 : DY= 9 : End If
	If \DRec ##[$80CD] 1 : \MapY+1 : \CurPos=0 : DX= 0 : DY=-9 : End If
	If \DRec ##[$80CD] 2 : \MapX-1 : \CurPos=3 : DX= 9 : DY= 0 : End If
	If \DRec ##[$80CD] 3 : \MapX+1 : \CurPos=2 : DX=-9 : DY= 0 : End If
	If(\MapX>12)OR(\MapX<0)OR(\MapY>13)OR(\MapY<0) : Return : End If
	If MAP(\MapX,\MapY)=0 : Return : End If
	\sx=PosX(\MapX)+DX
	\sy=PosY(\MapY)+DY
	ShowSprite 0,\sx,\sy,0
	\Steps=0
	\Active=True
	\Able	=False
	\Blow	=False
	\ClockWise=False
	BallSound=False
End If

If NOT \Active : Return : EndIf

If \Blow
	\dx+7 : \dy+5
	ShowSprite 0,\sx+\dy,(\sy+\dy)&255,0 : ShowSprite 0,\sx-\dy,(\sy+\dy)&255,1
	ShowSprite 0,\sx-\dy,(\sy-\dy)&255,2 : ShowSprite 0,\sx		,(\sy+\dx)&255,3
	ShowSprite 0,\sx		,(\sy-\dx)&255,4 : ShowSprite 0,\sx+\dy,(\sy-\dy)&255,5
	ShowSprite 0,\sx-\dx,(\sy		)&255,6 : ShowSprite 0,\sx+\dx,(\sy		)&255,7
	If \dx>200
		For i=0 To 7 : ShowSprite 0,352,100,i : Next i
		\dx=200 : \dy=140 : \Count=125+Rnd(15)*Level
		\Active=False : \Able=False : \Blow=False
	EndIf
	Return
End If

If \Count=0 : \Blow=True : \dx=0 : \dy=0 : Return : End If

If \Steps=0
	\Steps=3 : \Count-1
	Select (\DRec)
		Case 2:
			If \ClockWise:\dx= 3:\dy= 3:\CurPos=3:\OldPos=2
			Else				 :\dx=-3:\dy= 3:\CurPos=2:\OldPos=3:End If
		Case 1:
			If \ClockWise:\dx=-3:\dy=-3:\CurPos=2:\OldPos=3
			Else				 :\dx= 3:\dy=-3:\CurPos=3:\OldPos=2:End If
		Case 4:
			If \ClockWise:\dx=-3:\dy= 3:\CurPos=1:\OldPos=0
			Else				 :\dx=-3:\dy=-3:\CurPos=0:\OldPos=1:End If
		Case 8:
			If \ClockWise:\dx= 3:\dy=-3:\CurPos=0:\OldPos=1
			Else				 :\dx= 3:\dy= 3:\CurPos=1:\OldPos=0:End If
	End Select
	\DRec=0
	If MAP(\MapX,\MapY) ##[$80CD] \CurPos
		\DRec ##[$80CE] \CurPos
		Select(\CurPos)
			Case 0 : \MapY-1
			Case 1 : \MapY+1
			Case 2 : \MapX-1
			Case 3 : \MapX+1
		End Select
		\ClockWise=NOT \ClockWise
	Else
		BallSound=True
		\DRec ##[$80CE] \OldPos
	End If
Else
	\sx=\sx+\dx
	\sy=\sy+\dy
	ShowSprite 0,\sx,\sy,0
	\Steps-1
	If BallSound
		BallSound=False
		If\sx<160
			Sound 9,2
		Else
			Sound 9,1
		EndIf
	EndIf
End If

Return







.SB_UmphUpdate
;************************************************
;
; Subroutine Umph Update
;
; Updates Umphs
;
;************************************************

newmem Ump()

NoOfUmphsLeft=NoOfUmphs-NoOfUmphsOut

;BitMapOutput CBitMap
;Locate 0,10
;Print "NL:",NoOfUmphsLeft," NU:",NoOfUmphs," NO:",NoOfUmphsOut,"	 "

If MoreUmphs AND UmphAble
	If *UmphBase=Goodie
		Goodie\S\Kill=True
		globalloc Ump()
		AddFirst Ash()
		Ump()\Action=6,0,5,6,0,0,0,Ash()
		Ash()\x=PosX(5),PosY(6),0,0,0,UmphBaseFlash,Ump(),False
		Ash()\Steps=50
		*UmphBase=Ump()
		NoOfUmphsOut+1
	Else
		If *UmphBase\S\Steps=50
			*UmphBase\S\ImList=UmphBaseFlash
			NoOfUmphsOut+1
		End If
	EndIf
	If *UmphBase\Action=0
		If NoOfUmphsLeft>0
			MoreUmphs=globalloc (Ump())
			If MoreUmphs
				AddFirst Ash()
				Ump()\Action=6,0,5,6,0,0,0,Ash()
				Ash()\x=PosX(5),PosY(6),0,0,0,UmphBaseNorm,Ump(),False
				If Level <15
					Ash()\Steps=65+Rnd(150-Level*10)
					If Ash()\Steps<51 : Ash()\Steps=51 : EndIf
				Else
					Ash()\Steps=51
				EndIf
				*UmphBase=Ump()
			Else
				AddFirst Ash()
				Goodie\Action=0,0,5,6,0,0,0,Ash()
				Ash()\x=PosX(5),PosY(6),0,0,0,UmphBaseNorm,Goodie,False
				*UmphBase=Goodie
				UmphAble	= False
				MoreUmphs = True
			EndIf
		Else
			AddFirst Ash()
			Goodie\Action=0,0,5,6,0,0,0,Ash()
			Ash()\x=PosX(5),PosY(6),0,0,0,SGoodie,Goodie,False
			Things(5,6)=8
			MoreUmphs=False
			Sound 15,3
		EndIf
	EndIf
EndIf

newmem Ump()

DoneOne=False

While globfree(Ump())

	If Ump()\Action=6 OR Ump()\Action=5 : Goto Uover :	EndIf

	*U.AnimShape=Ump()\S
	II.w=*U\ImList\I[ImNo]
	XX.w=*U\x
	YY.w=*U\y

	If Ball\Active AND (NOT Ball\Blow)
		##[$80CA] Ump()\S
		If PColl(XX-8,YY-8,16,16,Ball\sx-1,Ball\sy-1,2,2)
			Ump()\Action=0 : Ump()\OldAction=5
			Ball\Blow=True : Ball\dx=0 : Ball\dy=0
		End If
	End If

	If Ump()\OldAction=5 AND Ump()\Action=0
		globalloc Sco()
		Score+500
		Sco()\x=*U\x
		Sco()\y=*U\y
		Sco()\s=166
		Sco()\o=20
		NoOfUmphs-1
		NoOfUmphsOut-1
		UmphAble=True
		If (*U\ImList=UmSquashed)OR(*U\ImList=UmSquaHor)
			Sound 10,3
		Else
			Sound 13,3
		EndIf
		*U\Kill=True
		freelast Ump()
		Goto Uover
	EndIf

	newmem App()
	While globfree(App())
		If App()\Action =0 :Goto AUover:EndIf
		##[$80CA] *U
		*A.AnimShape=App()\S
		Select(App()\Action)
			Case 1:
				If *U\ImList=UPshLft OR *U\ImList=UPshRgt
					If NOT SpritesHit(II,XX,YY,49,*A\x,*A\y)
						##[$80BE] Select
						Goto AUover
					 EndIf
				Else
					If NOT PColl(XX,YY,16,16,*A\x,*A\y,16,16)
						##[$80BE] Select
						Goto AUover
					EndIf
				EndIf

				If(Ump()\CurDir AND $C)=0:##[$80BE] Select : Goto AUover :EndIf

				Select(App()\CurDir)
					Case 4
						If Ump()\CurDir=4
							*U\ImList=UmSquaHor
							*U\Steps=*A\Steps+2
							*U\vx=*A\vx
							*U\x =*A\x+DX*10
							Ump()\Action=5
							Ump()\OldAction=5
							##[$80BE] Select:##[$80BE] Select:Goto Uover
						EndIf
						*U\ImList=UPshRgt:DX=-1:CM=2:OM=3
					 Case 8
						If Ump()\CurDir=8
							*U\ImList=UmSquaHor
							*U\Steps=*A\Steps+2
							*U\vx=*A\vx
							*U\x =*A\x+DX*10
							Ump()\Action=5
							Ump()\OldAction=5
							##[$80BE] Select:##[$80BE] Select:Goto Uover
						EndIf
						*U\ImList=UPshLft:DX= 1:CM=3:OM=2
				End Select

				##[$80CA] App()

				Ump()\Action=1:Ump()\OldAction=1
				If (MAP(\MapX,\MapY) ##[$80CD] CM)AND(*ApMap(\MapX+DX,\MapY)=0)
					Ump()\MapX=\MapX+DX : *U\x =*A\x+18*DX
					*U\y =*A\y		 : Ump()\MapY=\MapY
					*U\vx=*A\vx		: *U\Steps=*A\Steps
				Else
					Tmp=*A\x-*U\x
					If (Tmp>-8)AND(Tmp<8)
						*U\ImList=UmSquaHor
						*U\Steps=*A\Steps+2
						*U\vx=*A\vx
						*U\x =*A\x+DX*10
						Ump()\Action=5
						Ump()\OldAction=5
					Else
						\C\MapX=\MapX-2*DX			:\C\S\vx			=-*A\vx
						\C\Action=1						 :\C\S\Steps	 =HashSteps-*A\Steps
						*ApMap(\MapX,\MapY)=0	 :\MapX	=\MapX-DX
						*A\vx=-*A\vx						:\CurDir=0
						\CurDir ##[$80CE] OM
						*A\Steps=HashSteps-*A\Steps:*ApMap(\MapX,\MapY)=App()
						Ump()\CurDir=0					:Ump()\OldDir =0
						Ump()\CurDir ##[$80CE] OM	:Ump()\OldDir ##[$80CE] OM
						*U\x =*A\x+18*DX				:Ump()\MapX	 =\MapX+DX
						*U\vx=*A\vx						 :*U\Steps		 =*A\Steps
					EndIf
				EndIf

			Default:
				If NOT SpritesHit(II,XX,YY,49,*A\x,*A\y)
					##[$80BE] Select
					Goto AUover
				EndIf
				##[$80CA] *U
				Ump()\Action=5		: \Steps=*A\Steps-3
				Ump()\OldAction=5 : \vx=*A\vx
				\ImList=UmSquashed: \vy=*A\vy
				\y+2
				If(\Steps<0) : \Steps=0 : EndIf

		End Select

		Goto Uover
		AUover

	Wend

	##[$80CA] Ump()

	CNIF #Test=0
		If PColl(\S\x-1,\S\y-1,2,2,MrDo\S\x-1,MrDo\S\y-1,2,2)
			MrDo\S\vx = 0
			MrDo\S\vy = 0
			\S\vx		 = 0
			\S\vy		 = 0
			Alive		 = False
			DoneOne	 = True
		EndIf
	CEND

	If DoneOne	: Goto Uover : EndIf

	If \Action<>0 : Goto Uover : EndIf


	\CurDir=0
	DX=\MapX-MrDo\MapX
	DY=\MapY-MrDo\MapY
	R=Rnd(10)

	;Get Initial direction

	Mutate=False

	If \OldAction=3
		Dig=True
		\CurDir=\OldDir
	Else
		If(DX>0) : \CurDir ##[$80CE] 2 : End If
		If(DX<0) : \CurDir ##[$80CE] 3 : End If
		If(DY>0) : \CurDir ##[$80CE] 0 : End If
		If(DY<0) : \CurDir ##[$80CE] 1 : End If
		DigDir=\CurDir
		NL = NOT(\OldDir)
		\CurDir=(\CurDir AND MAP(\MapX,\MapY)) AND NL
		Dig=False
	EndIf


	If \CurDir=0
		\CurDir=MAP(\MapX,\MapY) AND NL
		If (Rnd(200)-10*Level)<10
			If NOT Dig
				Mutate=True : \CurDir=DigDir
			EndIf
		EndIf
		If \OldAction=4 AND Mutate
			Dig=True			: \CurDir=DigDir
			Mutate=False
		EndIf
		If \CurDir=0	; Rem we have found a dead End !!
			\CurDir=\OldDir
		End If
		If (\CurDir ##[$80CD] 0)AND(\CurDir ##[$80CD] 1)
			If R<5 :\CurDir ##[$80CF] 0:Else \CurDir ##[$80CF] 1:End If
		End If
		If (\CurDir ##[$80CD] 2)AND(\CurDir ##[$80CD] 3)
			If R>5 :\CurDir ##[$80CF] 3:Else \CurDir ##[$80CF] 2:End If
		End If
	End If

	If((\CurDir AND 3)<>0) AND((\CurDir AND $C)<>0)
		If R<5
			\CurDir=(\CurDir AND 3)
		Else
			\CurDir=(\CurDir AND $C)
		End If
	End If

	\OldDir= NOT(\CurDir)

	If(\CurDir AND 3) <>0:\OldDir=\OldDir AND 3	: EndIf
	If(\CurDir AND $C)<>0:\OldDir=\OldDir AND $C : EndIf

	TX=\MapX : TY=\MapY

	\S\vx=0
	\S\vy=0
	DX=0

	If \CurDir ##[$80CD] 0:*U\vy=-HashSpeed:TY-1:*U\ImList=UmUp	 :CM=0:OM=1:End If
	If \CurDir ##[$80CD] 1:*U\vy= HashSpeed:TY+1:*U\ImList=UmDown :CM=1:OM=0:End If
	If \CurDir ##[$80CD] 2:*U\vx=-HashSpeed:TX-1:*U\ImList=UmLeft :CM=2:OM=3:DX=-1:End If
	If \CurDir ##[$80CD] 3:*U\vx= HashSpeed:TX+1:*U\ImList=UmRight:CM=3:OM=2:DX= 1:End If

	If MAP(\MapX,\MapY) ##[$80CD] CM : Mutate=False : EndIf

	If (TX>11)OR(TX<0)OR(TY>12)OR(TY<0) :Goto Uover:EndIf

	*U\Steps=HashSteps

	\Action=1
	\OldAction=1

	If *ApMap(TX,TY)<>0
		If TX=0
			 TX=\MapX:TY=\MapY
			\OldDir=\CurDir
			*U\vx=0
			*U\vy=0
			Goto NoWay
		EndIf
		If((\CurDir AND $C)<>0)AND(*ApMap(TX,TY)\Action=0)AND(*ApMap(TX+DX,TY)=0)AND(MAP(TX,TY) ##[$80CD] CM)
			\Action=2
			\OldAction=2
			*TmpApple=*ApMap(TX,TY)
			*TmpApple\Action=1
			*TmpApple\S\Steps= HashSteps
			If \CurDir ##[$80CD] 2
				*U\ImList=UPshLft: *TmpApple\S\vx=-HashSpeed
				*TmpApple\MapX-1 : *ApMap(TX-1,TY)=*TmpApple
			Else
				*U\ImList=UPshRgt: *TmpApple\S\vx=	HashSpeed
				*TmpApple\MapX+1 : *ApMap(TX+1,TY)=*TmpApple
			EndIf
			*TmpApple\CurDir=\CurDir
			*TmpApple\C=Ump()
			*ApMap(TX,TY)=0
		Else
			TX=\MapX:TY=\MapY
			\OldDir=\CurDir
			*U\vx=0
			*U\vy=0
		EndIf
	NoWay
		Dig=False:Mutate=False
	EndIf

	If Mutate
		TX=\MapX:TY=\MapY
		\OldDir=\CurDir
		*U\vx=0
		*U\vy=0
		*U\Steps=HashSteps*3
		\Action=3
		\OldAction=3
		Select(*U\ImList)
			Case UmLeft : *U\ImList=UmMtLeft
			Case UmRight: *U\ImList=UmMtRight
			Case UmUp	 : *U\ImList=UmMtUp
			Case UmDown : *U\ImList=UmMtDown
		End Select
	EndIf

	If (Dig)
		If Things(TX,TY) ##[$80CD] 0
			Things(TX,TY) ##[$80CF] 0
			Cherries-1
		EndIf
		\Action=4
		\OldAction=4
		Select(*U\ImList)
			Case UmLeft : *U\ImList=UmDigLeft
			Case UmRight: *U\ImList=UmDigRight
			Case UmUp	 : *U\ImList=UmDigUp
			Case UmDown : *U\ImList=UmDigDown
		End Select
		MAP(\MapX,\MapY) ##[$80CE] CM
		globalloc Mup()
		Mup()\x=PosX(\MapX)
		Mup()\y=PosY(\MapY)
		Mup()\s=MAP(\MapX,\MapY)-1
		Mup()\o=False
		MAP(TX,TY) ##[$80CE] OM
		globalloc Mup()
		Mup()\x=PosX(TX)
		Mup()\y=PosY(TY)
		Mup()\s=MAP(TX,TY)-1
		Mup()\o=False
	End If

	\MapX=TX
	\MapY=TY
	DoneOne=True

	Uover

Wend

Return








.SB_AppleUpdate
;************************************************
;
; Subroutine Apple Update
;
; Updates apples
;
;************************************************


newmem App()

While globfree(App())

	##[$80CA] App()
	*A.AnimShape=App()\S

	If LetterActive
		*L.AnimShape=LM\S
		If PColl(*L\x-2,*L\y-2,4,4,*A\x-6,*A\y-6,12,12)
			*A\Kill=True
			*ApMap(\MapX,\MapY)=0
			LM\S\ImList=LMEat
			LMovx=LM\S\vx
			LMovy=LM\S\vy
			LMosteps=LM\S\Steps
			*L\vx=0
			*L\vy=0
			*L\Steps=HashSteps*10
			LM\Action=2
			LM\OldAction=2
			freelast App()
			Goto over
		EndIf
	EndIf

	If \OldAction=3
		If \Action<>0 : Goto over :EndIf
		\Action=3
		If *A\ImList=APSplit2
			*A\Kill=True
			*ApMap(\MapX,\MapY)=0
			If (NOT DiamondActive)AND(Rnd(200)<3)
				AddFirst Ash()
				Diamond\Action=0,0,5,6,0,0,0,Ash()
				Ash()\x=*A\x,*A\y,0,0,0,SDiamond,Diamond,False
				Things(App()\MapX,App()\MapY)=2
				DiamondActive=True
				Sound 15,3
			Else
				If (NOT ExtraDoActive)AND(Rnd(300)<3)
					AddFirst Ash()
					ExtraDo\Action=0,0,5,6,0,0,0,Ash()
					Ash()\x=*A\x,*A\y,0,0,0,SExtraDo,ExtraDo,False
					Things(App()\MapX,App()\MapY)=16
					ExtraDoActive=True
					Sound 15,3
				EndIf
			EndIf
			NoApples-1
			freelast App()
			Goto over
		EndIf
		If *A\ImList=APSplit1:*A\ImList=APSplit2:EndIf
		If *A\ImList=APNorm
			If *A\x > 160
				Sound 12,1
			Else
				Sound 12,2
			EndIf
			*A\ImList=APSplit1
		EndIf
		*A\Steps=4
	EndIf

	If MAP(\MapX,\MapY+1)=0		 : Goto over : EndIf
	If \MapY=12								 : Goto over : EndIf
	If \Action<>0							 : Goto over : EndIf
	If *ApMap(\MapX,\MapY+1)<>0 : Goto over : EndIf
	If Things(\MapX,\MapY+1)<>0 : Goto over : EndIf

	If ((\MapX=MrDo\MapX)AND(\MapY+1=MrDo\MapY)): Goto over :EndIf

	TmpY=\MapY+1
	While(MAP(\MapX,TmpY)##[$80CD]1)AND(TmpY<12)AND(*ApMap(\MapX,TmpY+1)=0)AND(Things(\MapX,TmpY+1)=0)
		TmpY+1
	Wend
	TmpY=TmpY-\MapY
	\Action=2
	If(TmpY>1)AND((MAP(\MapX,\MapY+TmpY+1)=0)OR(*ApMap(\MapX,\MapY+TmpY+1)<>0))
		\Action=3
	EndIf
	*ApMap(\MapX,\MapY)=0
	\S\vy	 =3			 ;6 AppleSpeed
	\S\Steps=6*TmpY	;3
	If (NOT(MAP(\MapX,\MapY)##[$80CD]1))AND(MAP(\MapX,\MapY)<>0)
		MAP(\MapX,\MapY) ##[$80CE] 1
		globalloc Mup()
		Mup()\x=PosX(\MapX)
		Mup()\y=PosY(\MapY)
		Mup()\s=MAP(\MapX,\MapY)-1
		Mup()\o=False
		MAP(\MapX,\MapY+1) ##[$80CE] 0
		globalloc Mup()
		Mup()\x=PosX(\MapX)
		Mup()\y=PosY(\MapY+1)
		Mup()\s=MAP(\MapX,\MapY+1)-1
		Mup()\o=False
	EndIf
	\MapY=\MapY+TmpY
	*ApMap(\MapX,\MapY)=App()
	\OldAction=\Action

over
Wend

Return




.SB_PlyColl
;************************************************
;
; Subroutine PlyColl
;
; Check MrDo Apple Collisions
;
;************************************************

newmem App()
While globfree(App())
	*A.AnimShape=App()\S

	Select(App()\Action)
		Case 0

		Case 1

			If NOT	PColl(*A\x-8,*A\y-8,16,16,MrDo\S\x-8,MrDo\S\y-8,16,16)
				##[$80BE] Select
				Goto DoOver
			EndIf

			Select(App()\CurDir)
				Case 4 :DX=-1:CM=2:OM=3
				Case 8 :DX= 1:CM=3:OM=2
			End Select

			If NOT (MrDo\CurDir ##[$80CD] OM) ; = App()\CurDir
				If PColl(*A\x-6,*A\y-8,12,16,MrDo\S\x-6,MrDo\S\y-8,12,16)AND(MrDo\Action=0)
					##[$80CA] App()
					If (MAP(MrDo\MapX,MrDo\MapY) ##[$80CD] CM)AND(*ApMap(MrDo\MapX+DX,MrDo\MapY)=0)
						MrDo\Action = 5				: MrDo\OldAction = 5
						MrDo\MapX	 = \MapX+DX
						MrDo\S\vx	 = *A\vx		: MrDo\S\Steps	 = HashSteps
					Else
						If Joyx(1)<>(-1*DX)
							Alive=False
							MrDo\Action		 = 4
							MrDo\OldAction	= 4
							MrDo\S\ImList	 = DoSquaHor
							MrDo\S\x				= *A\x+DX*10
							MrDo\S\vx			 = *A\vx
							MrDo\S\Steps		= *A\Steps
						EndIf
					EndIf
				EndIf
				##[$80BE] Select
				Goto DoOver
			EndIf

			Select(App()\CurDir)
				Case 4 :MrDo\S\ImList=DPshRgt
				Case 8 :MrDo\S\ImList=DPshLft
			End Select

			##[$80CA] App()
			MrDo\Action=5:MrDo\OldAction=5
			If (MAP(\MapX,\MapY) ##[$80CD] CM)AND(*ApMap(MrDo\MapX+DX,MrDo\MapY)=0)
				MrDo\MapX = \MapX+DX : MrDo\S\x		 = *A\x+18*DX
				MrDo\S\y	= *A\y		 : MrDo\MapY		= \MapY
				MrDo\S\vx = *A\vx		: MrDo\S\Steps = *A\Steps
			Else
				If Joyx(1)=(-1*DX)
					\C\MapX		 = \MapX-2*DX	: \C\S\vx		= -*A\vx
					\C\Action	 = 1					 : \C\S\Steps = HashSteps-*A\Steps
					*ApMap(\MapX,\MapY)=0		 : \MapX			= \MapX-DX
					*A\vx			 = -*A\vx			: \CurDir		= 0
					\CurDir ##[$80CE] OM
					*A\Steps		= HashSteps-*A\Steps : *ApMap(\MapX,\MapY)=App()
					MrDo\CurDir = 0							 : MrDo\OldDir	 = 0
					MrDo\CurDir ##[$80CE] OM				 : MrDo\OldDir ##[$80CE] OM
					MrDo\S\x		= *A\x+18*DX			: MrDo\MapX		 = \MapX+DX
					MrDo\S\vx	 = *A\vx					 : MrDo\S\Steps	= *A\Steps
				Else
					If PColl(*A\x-6,*A\y-8,12,16,MrDo\S\x-6,MrDo\S\y-8,12,16)
						Alive=False
						MrDo\Action=4
						MrDo\OldAction=4
						MrDo\S\ImList=DoSquaHor
						MrDo\S\x=*A\x+DX*10
						MrDo\S\vx=*A\vx
						MrDo\S\Steps=*A\Steps
					EndIf
				EndIf
			EndIf

		Default :
			If PColl(*A\x-1,*A\y-1,2,2,MrDo\S\x-1,MrDo\S\y-1,2,2)
				MrDo\S\vx		 = *A\vx
				MrDo\S\vy		 = *A\vy
				MrDo\S\ImList = DoSquashed
				MrDo\S\Steps	= *A\Steps
				MrDo\Action	 = 4
				MrDo\OldAction= 4
				Alive=False
			EndIf

	End Select

	DoOver

Wend

Return






.SB_PlyAction
;************************************************
;
; Subroutine PlyAction
;
; Gets joystick input & acts accordingly
; Updates map update list
;
;************************************************

##[$80CA] MrDo

If NOT Alive Then Return

If Joyb(1)<>0 : Fire = True : Else Fire=False : EndIf

If \Action<>0
	If (\CurDir AND $C) <>0
		DDX=0
		Joy=Joyx(1)
		If (Joy=-1)AND(\CurDir ##[$80CD] 3)
			\S\ImList=DoLeft	: \CurDir=4 : JM=2 : DDX=-1
		EndIf
		If (Joy= 1)AND(\CurDir ##[$80CD] 2)
			\S\ImList=DoRight : \CurDir=8 : JM=3 : DDX= 1
		EndIf
		If (\Action<>5)AND(DDX<>0)AND(*ApMap(\MapX+DDX,\MapY)=0)
			\S\vx=-\S\vx : \MapX=\MapX+DDX : \S\Steps=HashSteps-\S\Steps
		EndIf
	Else
		DDY=0
		Joy=Joyy(1)
		If (Joy=-1)AND(\CurDir ##[$80CD] 1)
			\S\ImList=DoUp	 : \CurDir=1 : JM=0 : DDY=-1
		EndIf
		If (Joy= 1)AND(\CurDir ##[$80CD] 0)
			\S\ImList=DoDown : \CurDir=2 : JM=1 : DDY= 1
		EndIf
		If (\Action<>5)AND(DDY<>0)AND(*ApMap(\MapX,\MapY+DDY)=0)
			\S\vy=-\S\vy : \MapY=\MapY+DDY : \S\Steps=HashSteps-\S\Steps
		EndIf
	EndIf
	Return
EndIf


Joy=Joyr(1)

DX=0 : DY=0

Select(Joy)
	Case 0
		\S\ImList=DoUp	 :DY=-1:JM=0:OM=1
	Case 1
		If \OldDir ##[$80CD] 0	:\S\ImList=DoRight:DX=1 :JM=3:OM=2
		Else								 :\S\ImList=DoUp	 :DY=-1:JM=0:OM=1:EndIf
		If \MapY=0					 :\S\ImList=DoRight:DX=1 :JM=3:OM=2:EndIf
		If \MapX=11					:\S\ImList=DoUp	 :DY=-1:JM=0:OM=1:EndIf
	Case 2
		\S\ImList=DoRight:DX=1 :JM=3:OM=2
	Case 3
		If \OldDir ##[$80CD] 1	:\S\ImList=DoRight:DX=1 :JM=3:OM=2
		Else								 :\S\ImList=DoDown :DY=1 :JM=1:OM=0:EndIf
		If \MapY=12					:\S\ImList=DoRight:DX=1 :JM=3:OM=2:EndIf
		If \MapX=11					:\S\ImList=DoDown :DY=1 :JM=1:OM=0:EndIf
	Case 4
		\S\ImList=DoDown :DY=1 :JM=1:OM=0
	Case 5
		If \OldDir ##[$80CD] 1	:\S\ImList=DoLeft :DX=-1:JM=2:OM=3
		Else								 :\S\ImList=DoDown :DY=1 :JM=1:OM=0:EndIf
		If \MapY=12					:\S\ImList=DoLeft :DX=-1:JM=2:OM=3:EndIf
		If \MapX=0					 :\S\ImList=DoDown :DY=1 :JM=1:OM=0:EndIf
	Case 6
		\S\ImList=DoLeft :DX=-1:JM=2:OM=3
	Case 7
		If \OldDir ##[$80CD] 0	:\S\ImList=DoLeft:DX=-1:JM=2:OM=3
		Else								 :\S\ImList=DoUp	:DY=-1:JM=0:OM=1:EndIf
		If \MapX=0					 :\S\ImList=DoUp	:DY=-1:JM=0:OM=1:EndIf
		If \MapY=0					 :\S\ImList=DoLeft:DX=-1:JM=2:OM=3:EndIf
	Case 8
		If \OldAction = 3
			Select MrDo\S\ImList
				Case DoDigRight : MrDo\S\ImList=DoRight
				Case DoDigLeft	: MrDo\S\ImList=DoLeft
				Case DoDigUp		: MrDo\S\ImList=DoUp
				Case DoDigDown	: MrDo\S\ImList=DoDown
			End Select
		EndIf
		SCount=0
		##[$80BE] Select
		Return
End Select

If NOT(\CurDir ##[$80CD] JM)
	MrDo\Action=1
	MrDo\OldAction=1
	DX=0:DY=0
	\CurDir=0
	\CurDir ##[$80CE] JM
	MrDo\S\Steps=1
EndIf

If(\MapX+DX)<0 :DX=0:EndIf
If(\MapX+DX)>11:DX=0:EndIf
If(\MapY+DY)<0 :DY=0:EndIf
If(\MapY+DY)>12:DY=0:EndIf

If (DX=0) AND (DY=0) : Return : EndIf

If (*ApMap(\MapX+DX,\MapY+DY)<>0)AND(*ApMap(\MapX+DX,\MapY+DY)\Action=0)
	If DX=0 : Return : EndIf
	If DX=-1
		\S\ImList = DPshLft
	Else
		\S\ImList = DPshRgt
	EndIf
	If(\MapX+2*DX>=0)AND(\MapX+2*DX<12)
		If (MAP(\MapX+2*DX,\MapY) <>0) AND (*ApMap(\MapX+2*DX,\MapY)=0)
			\Action=2
			\OldAction=2
			*TmpApple=*ApMap(\MapX+DX,\MapY)
			*TmpApple\Action=1
			*TmpApple\S\vx=DX * HashSpeed
			*TmpApple\S\vy=DY * HashSpeed
			*TmpApple\S\Steps= HashSteps
			*ApMap(\MapX+2*DX,\MapY)=*TmpApple
			*TmpApple\MapX=\MapX+2*DX
			*TmpApple\CurDir=MrDo\CurDir
			*TmpApple\C=MrDo
			*ApMap(\MapX+DX,\MapY)=0
		Else
			Return
		EndIf
	Else
		Return
	EndIf
EndIf

If NOT(MAP(\MapX,\MapY) ##[$80CD] JM)
	\Action	 = 3
	\OldAction= 3
	Select (MrDo\S\ImList)
		Case DoRight : MrDo\S\ImList=DoDigRight
		Case DoLeft	: MrDo\S\ImList=DoDigLeft
		Case DoUp		: MrDo\S\ImList=DoDigUp
		Case DoDown	: MrDo\S\ImList=DoDigDown
	End Select
	MAP(\MapX,\MapY) ##[$80CE] JM
	globalloc Mup()
	Mup()\x=PosX(\MapX)
	Mup()\y=PosY(\MapY)
	Mup()\s=MAP(\MapX,\MapY)-1
	Mup()\o=False
	\MapX=\MapX+DX
	\MapY=\MapY+DY
	MAP(\MapX,\MapY) ##[$80CE] OM
	globalloc Mup()
	Mup()\x=PosX(\MapX)
	Mup()\y=PosY(\MapY)
	Mup()\s=MAP(\MapX,\MapY)-1
	Mup()\o=False
Else
	\MapX=\MapX+DX
	\MapY=\MapY+DY
EndIf

If \Action=0 : \Action=1 :EndIf

\S\vx=DX * HashSpeed
\S\vy=DY * HashSpeed
\S\Steps=	HashSteps
\OldDir=\CurDir

If Things(\MapX,\MapY) ##[$80CD] 0
	Things(\MapX,\MapY) ##[$80CF] 0
	globalloc Sco()
	Sco()\x=PosX(\MapX)
	Sco()\y=PosY(\MapY)
	Sound SCount,3
	If	SCount=7:Sco()\s=165:SCount=0:Score+200
	Else				:Sco()\s=164:SCount+1:Score+50
	EndIf
	Sco()\o=15
	Cherries-1
Else
	SCount=0
EndIf

If Things(\MapX,\MapY) ##[$80CD] 1
	Things(\MapX,\MapY) ##[$80CF] 1
	globalloc Sco()
	Sco()\x=PosX(\MapX)
	Sco()\y=PosY(\MapY)
	Sco()\s=176
	Sco()\o=60
	Diamond\S\Kill= True
	DiamondActive = False
	Score+10000
	Sound 14,3
EndIf

If Things(\MapX,\MapY) ##[$80CD] 3
	Things(\MapX,\MapY) ##[$80CF] 3
	globalloc Sco()
	Sco()\x=PosX(\MapX)
	Sco()\y=PosY(\MapY)
	Sco()\s=GScoShape
	Sco()\o=40
	Goodie\S\Kill=True
	Score=Score+GSco
	MaraTime=True
	Gosub SB_MaraInit
EndIf

If Things(\MapX,\MapY) ##[$80CD] 4
	Things(\MapX,\MapY) ##[$80CF] 4
	ExtraDo\S\Kill= True
	ExtraDoActive = False
	Gosub SB_ExtraMrDo
EndIf


Return







.SB_UpDate
;************************************************
;
; Subroutine UpDate
;
; Updates the screen
;
;************************************************



Use lmaxlen CBitMap
UnBuffer CBitMap

newmem Mup()
While globfree(Mup())
	##[$80CA] Mup()
	longdiv	\s,\x,\y
	If \o
		freelast Mup()
	Else
		\o=True
	EndIf
Wend

UpDate+1
UpDate=UpDate AND HashUpDate
If UpDate=0 : ImNo+1 : ImNo = ImNo & 3 : EndIf

newmem Ash()
While globfree(Ash())
	##[$80CA] Ash()
	If \Steps<>0
		\Steps-1
		\x=\x+\vx
		\y=\y+\vy
	Else
		\vx=0
		\vy=0
		\C\Action=0
	EndIf
	BBlit CBitMap,\ImList\I[ImNo],\x,\y
	If \Kill
		freelast Ash()
	EndIf
Wend

newmem Sco()
While globfree(Sco())
	##[$80CA] Sco()
	If \o=0
		freelast Sco()
	Else
		BBlit CBitMap,\s,\x,\y
		\o-1
	EndIf
Wend

Return







.SB_GameInit
;************************************************
;
; Subroutine GameInit
;
; Initialises Game
;
;************************************************

;LUT for screen positions
For Y=0 To 12
	PosY(Y)=18*Y+#YOff
	PosX(Y)=18*Y+#XOff
	MAP(Y,13)=0
Next

;Umph AnimShapes
##[$80CA] UmphBaseNorm	: \I[0]= 78:\I[1]= 78:\I[2]= 78:\I[3]= 78
##[$80CA] UmphBaseFlash : \I[0]= 78:\I[1]= 78:\I[2]= 79:\I[3]= 79
##[$80CA] UmLeft				: \I[0]= 85:\I[1]= 86:\I[2]= 85:\I[3]= 87
##[$80CA] UmRight			 : \I[0]= 79:\I[1]= 80:\I[2]= 79:\I[3]= 81
##[$80CA] UmUp					: \I[0]= 88:\I[1]= 89:\I[2]= 88:\I[3]= 90
##[$80CA] UmDown				: \I[0]= 82:\I[1]= 83:\I[2]= 82:\I[3]= 84
##[$80CA] UmSquaHor		 : \I[0]= 77:\I[1]= 77:\I[2]= 77:\I[3]= 77
##[$80CA] UmSquashed		: \I[0]= 91:\I[1]= 91:\I[2]= 91:\I[3]= 91
##[$80CA] UPshRgt			 : \I[0]= 92:\I[1]= 93:\I[2]= 92:\I[3]= 94
##[$80CA] UPshLft			 : \I[0]= 95:\I[1]= 96:\I[2]= 95:\I[3]= 97
##[$80CA] UmDigRight		: \I[0]=111:\I[1]=112:\I[2]=111:\I[3]=113
##[$80CA] UmDigLeft		 : \I[0]=114:\I[1]=115:\I[2]=114:\I[3]=116
##[$80CA] UmDigDown		 : \I[0]=125:\I[1]=126:\I[2]=125:\I[3]=127
##[$80CA] UmDigUp			 : \I[0]=128:\I[1]=129:\I[2]=128:\I[3]=130
##[$80CA] UmMtLeft			: \I[0]= 85:\I[1]= 99:\I[2]= 85:\I[3]= 99
##[$80CA] UmMtRight		 : \I[0]= 79:\I[1]= 98:\I[2]= 79:\I[3]= 98
##[$80CA] UmMtUp				: \I[0]= 88:\I[1]=100:\I[2]= 88:\I[3]=100
##[$80CA] UmMtDown			: \I[0]= 82:\I[1]=101:\I[2]= 82:\I[3]=101

;Maras
##[$80CA] MaraRight	 : \I[0]=149:\I[1]=150:\I[2]=151:\I[3]=150
##[$80CA] MaraDown		: \I[0]=152:\I[1]=153:\I[2]=154:\I[3]=153
##[$80CA] MaraUp			: \I[0]=155:\I[1]=156:\I[2]=157:\I[3]=156
##[$80CA] MaraLeft		: \I[0]=158:\I[1]=159:\I[2]=160:\I[3]=159
##[$80CA] MaraEat		 : \I[0]=161:\I[1]=162:\I[2]=163:\I[3]=162


;Letter Monster
##[$80CA] LME	 : \I[0]=131:\I[1]=132:\I[2]=133:\I[3]=132 ;E
##[$80CA] LMX	 : \I[0]=134:\I[1]=135:\I[2]=136:\I[3]=135 ;X
##[$80CA] LMT	 : \I[0]=137:\I[1]=138:\I[2]=139:\I[3]=138 ;T
##[$80CA] LMR	 : \I[0]=140:\I[1]=141:\I[2]=142:\I[3]=141 ;R
##[$80CA] LMA	 : \I[0]=143:\I[1]=144:\I[2]=145:\I[3]=144 ;A
##[$80CA] LMEat : \I[0]=146:\I[1]=147:\I[2]=148:\I[3]=147 ;EAT
EXTRA(0)\x=135,11,54,False,LME
EXTRA(1)\x=147,11,55,False,LMX
EXTRA(2)\x=160,11,56,False,LMT
EXTRA(3)\x=173,11,57,False,LMR
EXTRA(4)\x=185,11,58,False,LMA

;Specials
##[$80CA] SDiamond:\I[0]=50:\I[1]=51:\I[2]=52:\I[3]=53
DiamondActive=False
##[$80CA] SExtraDo	:\I[0]=45:\I[1]=46:\I[2]=47:\I[3]=46
ExtraDoActive=False


;MrDo
##[$80CA] DoLeft		: \I[0]= 65:\I[1]= 66:\I[2]= 67:\I[3]= 66
##[$80CA] DoRight	 : \I[0]= 59:\I[1]= 60:\I[2]= 61:\I[3]= 60
##[$80CA] DoUp			: \I[0]= 68:\I[1]= 69:\I[2]= 70:\I[3]= 69
##[$80CA] DoDown		: \I[0]= 62:\I[1]= 63:\I[2]= 64:\I[3]= 63
##[$80CA] DPshLft	 : \I[0]= 74:\I[1]= 75:\I[2]= 74:\I[3]= 76
##[$80CA] DPshRgt	 : \I[0]= 71:\I[1]= 72:\I[2]= 71:\I[3]= 73
##[$80CA] DoDead		: \I[0]= 59:\I[1]= 62:\I[2]= 59:\I[3]= 68
##[$80CA] DoDigLeft : \I[0]=107:\I[1]=108:\I[2]=109:\I[3]=110
##[$80CA] DoDigRight: \I[0]=103:\I[1]=104:\I[2]=105:\I[3]=106
##[$80CA] DoDigDown : \I[0]=121:\I[1]=122:\I[2]=123:\I[3]=124
##[$80CA] DoDigUp	 : \I[0]=117:\I[1]=118:\I[2]=119:\I[3]=120
##[$80CA] DoSquashed: \I[0]=102:\I[1]=102:\I[2]=102:\I[3]=102
##[$80CA] DoSquaHor : \I[0]= 48:\I[1]= 48:\I[2]= 48:\I[3]= 48


;Apple
##[$80CA] APNorm	:\I[0]=42:\I[1]=42:\I[2]=42:\I[3]=42
##[$80CA] APSplit1:\I[0]=43:\I[1]=43:\I[2]=43:\I[3]=43
##[$80CA] APSplit2:\I[0]=44:\I[1]=44:\I[2]=44:\I[3]=44

;draw info
VWait
Show CBitMap
CBitMap=1-CBitMap
Use lmaxlen CBitMap
BlockScroll
longdiv 178,25,35
longdiv 179,25,114
longdiv 180,28,14
longdiv 181,63,12

If NoOfPlayers=1
	longdiv 178,294,35
	longdiv 179,294,114
	longdiv 180,278,14
	longdiv 182,314,12
EndIf

CBitMap=1-CBitMap
VWait
Show CBitMap
ShapesBitMap 1-CBitMap,CBitMap

;Scores & Extra both players

For i=0 To 1
	PlyLevel(i) = 0
	PlyExtra(i) = 0
	PlyScore(i) = 0
	PlyLives(i) = #Lives
Next i

Return







.SB_DrawCurrentMap
;************************************************
;
; Subroutine DrawCurrentMap
;
; re-initialises current level
;
;************************************************
VWait
Show CBitMap
CBitMap=1-CBitMap
Use lmaxlen CBitMap

Gosub SB_SelectMap

Read Blck(1),Blck(2),G

##[$80CA] SGoodie:\I[0]=G:\I[1]=G:\I[2]=G:\I[3]=G

Acnt=0
Cherries=0
For Y=0 To 12
	For X=0 To 11
		Read SP
		SP=((SP ASR 4) AND 3)
		longdiv Blck(SP),PosX(X),PosY(Y)
		If Things(X,Y) ##[$80CD] 0
			longdiv 41,PosX(X),PosY(Y)
			Cherries+1
		Else
			Things(X,Y)=0
		EndIf
		If(MAP(X,Y)<>0)
			longdiv MAP(X,Y)-1,PosX(X),PosY(Y)
		EndIf
		*ApMap(X,Y)=0
		If PlyApMap(CurrentPlayer,X,Y)=1
			globalloc App()
			##[$80CA] App()
			\Action		= 0
			\CurDir		= 0
			\OldDir		= 0
			\OldAction = 0
			\MapX			= X
			\MapY			= Y
			*ApMap(X,Y)=App()
			globalloc Ash()
			##[$80CA] Ash()
			\x=PosX(X),PosY(Y),0,0,0,APNorm,App(),False
			App()\S=Ash()
			Ash()\C=App()
			Acnt+1
		EndIf
	Next X
Next Y
NoApples=Acnt

;setup extra
longdiv 177,160,11
For i=0 To 4
	If EXTRA ##[$80CD] i
		longdiv EXTRA(i)\s,EXTRA(i)\x,EXTRA(i)\y
	EndIf
Next i

VWait
Show CBitMap
ShapesBitMap CBitMap,1-CBitMap
CBitMap=1-CBitMap
Use lmaxlen CBitMap

;SetUp UmphBase
globalloc Ash()
globalloc Ump()
##[$80CA] Ump():\Action=6,0,5,6,0,0,0,Ash()
Things(5,6)=4
*UmphBase=Ump()
##[$80CA] Ash()
\x=PosX(Ump()\MapX),PosY(Ump()\MapY),0,0,0,UmphBaseNorm,Ump(),False

;setup MrDo
globalloc Ash()
##[$80CA] MrDo:\Action=0,0,6,12,4,4,0,Ash()
##[$80CA] Ash():
\x=PosX(MrDo\MapX),PosY(MrDo\MapY),0,0,0,DoLeft,MrDo,False
JM=2

;setup ball

Ball\Able	=True
Ball\Active=False

Return




.SB_LevelInit
;************************************************
;
; Subroutine LevelInit
;
; initialises current level
;
;************************************************
VWait
Show CBitMap
CBitMap=1-CBitMap
Use lmaxlen CBitMap

Gosub SB_SelectMap

Read Blck(1),Blck(2)
Read G

##[$80CA] SGoodie:\I[0]=G:\I[1]=G:\I[2]=G:\I[3]=G

For Y=0 To 12
	For X=0 To 11
		Read MAP(X,Y)
	Next X
Next Y

For Y=0 To 12
	For X=0 To 11
		Things(X,Y)=0
		SP=((MAP(X,Y)/16) AND 3)
		longdiv Blck(SP),PosX(X),PosY(Y)
		If (MAP.b(X,Y) AND $80)=$80
			longdiv 41,PosX(X),PosY(Y)
			Things(X,Y)=1
		EndIf
		MAP(X,Y)=MAP(X,Y) AND $F
		If(MAP(X,Y)<>0)
			longdiv MAP(X,Y)-1,PosX(X),PosY(Y)
		EndIf
		*ApMap(X,Y)=0
	Next X
Next Y

;Setup Apples
Acnt=0
While Acnt<#AppleMax
For x=1 To 10
	For y=1 To 9
		If Acnt<#AppleMax
			If(MAP(x,y+1)=0)AND(MAP(x,y)=0)AND(Things(x,y)=0)
				If(*ApMap(x-1,y)=0)AND(*ApMap(x,y-1)=0)AND(*ApMap(x-1,y-1)=0)AND(*ApMap(x,y)=0)AND(*ApMap(x+1,y-1)=0)
					If(Rnd(50)<10)
						globalloc App()
						##[$80CA] App()
						\Action		= 0
						\CurDir		= 0
						\OldDir		= 0
						\OldAction = 0
						\MapX			= x
						\MapY			= y
						*ApMap(x,y)=App()
						globalloc Ash()
						##[$80CA] Ash()
						\x=PosX(x),PosY(y),0,0,0,APNorm,App(),False
						App()\S=Ash()
						Ash()\C=App()
						Acnt+1
					EndIf
				EndIf
			EndIf
		EndIf
	Next y
Next x
Wend

NoApples=Acnt

;setup extra
longdiv 177,160,11
For i=0 To 4
	If EXTRA ##[$80CD] i
		longdiv EXTRA(i)\s,EXTRA(i)\x,EXTRA(i)\y
	EndIf
Next i


VWait
Show CBitMap
ShapesBitMap CBitMap,1-CBitMap
CBitMap=1-CBitMap
Use lmaxlen CBitMap

;SetUp UmphBase
globalloc Ash()
globalloc Ump()
##[$80CA] Ump():\Action=6,0,5,6,0,0,0,Ash()
Things(5,6)=4
*UmphBase=Ump()
##[$80CA] Ash()
\x=PosX(Ump()\MapX),PosY(Ump()\MapY),0,0,0,UmphBaseNorm,Ump(),False

NoOfUmphs=8+Level/2

;setup MrDo
globalloc Ash()
##[$80CA] MrDo:\Action=0,0,6,12,4,4,0,Ash()
##[$80CA] Ash():
\x=PosX(MrDo\MapX),PosY(MrDo\MapY),0,0,0,DoLeft,MrDo,False
JM=2

;setup ball

Ball\Able	=True
Ball\Active=False

Cherries=40

Return









.SB_SelectMap
;************************************************
;
; Subroutine SelectMap
;
;************************************************

Select MPNO
	Case 0:##[$80C8] MAP0	:	Case 1:##[$80C8] MAP1
	Case 2:##[$80C8] MAP2	:	Case 3:##[$80C8] MAP3
	Case 4:##[$80C8] MAP4	:	Case 5:##[$80C8] MAP5
	Case 6:##[$80C8] MAP6	:	Case 7:##[$80C8] MAP7
	Case 8:##[$80C8] MAP8	:	Case 9:##[$80C8] MAP9
 End Select

Return






.MapData

MAP0
	Data.b 22,22,29
	Data.b $10,$2A,$1C,$2C,$1C,$2C,$16,$20,$10,$20,$10,$20
	Data.b $2A,$15,$20,$90,$A0,$10,$23,$10,$A0,$90,$A0,$90
	Data.b $11,$20,$10,$A0,$90,$20,$13,$20,$90,$A0,$90,$A0
	Data.b $20,$10,$20,$90,$A0,$10,$23,$10,$20,$10,$20,$10
	Data.b $10,$20,$10,$A0,$90,$20,$13,$20,$10,$20,$10,$20
	Data.b $20,$10,$20,$10,$20,$10,$23,$10,$20,$10,$20,$10
	Data.b $90,$A0,$90,$A0,$10,$28,$17,$20,$10,$20,$10,$20
	Data.b $A0,$90,$A0,$90,$20,$10,$23,$10,$20,$90,$A0,$10
	Data.b $10,$20,$10,$20,$10,$20,$13,$20,$10,$A0,$90,$20
	Data.b $20,$90,$A0,$90,$A0,$10,$23,$10,$20,$90,$A0,$10
	Data.b $10,$A0,$90,$A0,$90,$20,$13,$20,$10,$A0,$90,$20
	Data.b $22,$10,$20,$10,$20,$10,$23,$10,$20,$10,$20,$12
	Data.b $19,$2C,$1C,$2C,$1C,$2C,$1D,$2C,$1C,$2C,$1C,$25

MAP1
	Data.b 21,21,30
	Data.b $10,$20,$1A,$2C,$1C,$2C,$1C,$2C,$1C,$26,$10,$20
	Data.b $20,$1A,$25,$10,$20,$10,$20,$10,$20,$19,$26,$10
	Data.b $1A,$25,$90,$A0,$90,$A0,$10,$20,$10,$20,$19,$26
	Data.b $21,$10,$A0,$90,$A0,$90,$20,$10,$A0,$90,$20,$13
	Data.b $10,$20,$10,$20,$10,$20,$10,$20,$90,$A0,$10,$23
	Data.b $A0,$90,$20,$10,$20,$10,$20,$10,$A0,$90,$20,$13
	Data.b $90,$A0,$10,$20,$10,$22,$10,$20,$90,$A0,$1A,$25
	Data.b $A0,$90,$20,$10,$20,$1B,$2C,$1C,$2C,$1C,$25,$10
	Data.b $90,$A0,$10,$2A,$1C,$25,$10,$20,$10,$20,$90,$A0
	Data.b $20,$1A,$2C,$15,$A0,$90,$A0,$90,$20,$10,$A0,$90
	Data.b $1A,$25,$10,$20,$90,$A0,$90,$A0,$10,$20,$90,$A0
	Data.b $23,$10,$20,$10,$20,$10,$20,$10,$20,$10,$A0,$90
	Data.b $19,$2C,$1C,$2C,$1C,$2C,$1C,$2C,$1C,$2C,$1C,$24

MAP2
	Data.b 23,23,31
	Data.b $10,$20,$1A,$2C,$1C,$2C,$1C,$2C,$1C,$26,$10,$20
	Data.b $20,$1A,$25,$10,$20,$10,$20,$90,$A0,$19,$26,$10
	Data.b $1A,$25,$90,$A0,$90,$A0,$10,$A0,$90,$20,$19,$26
	Data.b $21,$10,$A0,$90,$A0,$90,$20,$90,$A0,$10,$20,$13
	Data.b $10,$20,$10,$20,$10,$20,$10,$A0,$90,$20,$1A,$25
	Data.b $A0,$90,$A0,$90,$20,$10,$20,$10,$20,$1A,$25,$10
	Data.b $90,$A0,$90,$A0,$10,$28,$1C,$2C,$1C,$27,$10,$20
	Data.b $20,$10,$20,$10,$20,$10,$20,$10,$20,$19,$26,$10
	Data.b $10,$20,$10,$A0,$90,$20,$10,$20,$10,$20,$19,$26
	Data.b $22,$10,$20,$90,$A0,$10,$A0,$90,$A0,$90,$20,$13
	Data.b $19,$26,$10,$A0,$90,$20,$90,$A0,$90,$A0,$1A,$25
	Data.b $20,$19,$26,$90,$A0,$10,$20,$10,$20,$1A,$25,$10
	Data.b $10,$20,$19,$2C,$1C,$2C,$1C,$2C,$1C,$25,$10,$20

MAP3
	Data.b 15,16,32
	Data.b $10,$20,$90,$A0,$90,$A0,$1A,$2C,$1C,$26,$10,$20
	Data.b $20,$10,$A0,$90,$A0,$90,$23,$10,$20,$13,$20,$10
	Data.b $90,$A0,$10,$20,$10,$2A,$15,$20,$10,$23,$90,$A0
	Data.b $A0,$90,$20,$10,$2A,$15,$20,$10,$20,$13,$A0,$90
	Data.b $90,$A0,$10,$2A,$15,$20,$10,$20,$10,$23,$90,$A0
	Data.b $A0,$90,$2A,$15,$20,$10,$A0,$90,$20,$13,$A0,$90
	Data.b $10,$2A,$15,$20,$1A,$24,$90,$A0,$10,$23,$10,$20
	Data.b $2A,$15,$20,$10,$23,$10,$A0,$90,$20,$13,$20,$10
	Data.b $13,$20,$10,$20,$13,$20,$90,$A0,$10,$23,$10,$20
	Data.b $29,$1C,$2C,$1C,$2D,$1C,$2C,$1C,$2C,$1F,$2C,$14
	Data.b $10,$20,$10,$20,$10,$20,$10,$20,$10,$23,$10,$20
	Data.b $20,$90,$A0,$90,$A0,$10,$20,$10,$20,$13,$20,$10
	Data.b $10,$A0,$90,$A0,$90,$20,$18,$2C,$1C,$25,$10,$20

MAP4
	Data.b 20,20,33
	Data.b $1A,$2C,$1C,$2C,$1C,$2C,$1C,$2C,$1C,$2C,$1C,$24
	Data.b $23,$90,$A0,$90,$A0,$10,$20,$10,$20,$10,$20,$10
	Data.b $13,$A0,$90,$A0,$90,$20,$10,$20,$10,$20,$10,$20
	Data.b $23,$10,$20,$10,$20,$90,$A0,$90,$A0,$10,$A0,$90
	Data.b $19,$26,$10,$20,$10,$A0,$90,$A0,$90,$20,$90,$A0
	Data.b $20,$19,$26,$10,$20,$10,$20,$10,$20,$10,$A0,$90
	Data.b $10,$20,$19,$2C,$1C,$2C,$1C,$2C,$1C,$26,$90,$A0
	Data.b $20,$10,$A0,$90,$20,$10,$20,$10,$20,$19,$26,$10
	Data.b $10,$20,$90,$A0,$10,$20,$90,$A0,$90,$A0,$19,$26
	Data.b $22,$10,$A0,$90,$20,$10,$A0,$90,$A0,$90,$20,$13
	Data.b $19,$26,$90,$A0,$10,$20,$10,$20,$10,$20,$1A,$25
	Data.b $20,$19,$26,$10,$20,$10,$20,$10,$20,$1A,$25,$10
	Data.b $10,$20,$19,$2C,$1C,$2C,$1C,$2C,$1C,$25,$10,$20

MAP5
	Data.b 28,28,36
	Data.b $10,$20,$1A,$2C,$1C,$2C,$1C,$2C,$1C,$26,$10,$20
	Data.b $20,$1A,$25,$10,$20,$90,$A0,$90,$A0,$19,$26,$10
	Data.b $1A,$25,$90,$A0,$10,$A0,$90,$A0,$90,$20,$19,$26
	Data.b $23,$10,$A0,$90,$20,$10,$20,$10,$20,$10,$20,$11
	Data.b $13,$20,$90,$A0,$10,$20,$10,$20,$90,$A0,$90,$A0
	Data.b $23,$10,$A0,$90,$20,$10,$20,$10,$A0,$90,$A0,$90
	Data.b $1B,$2C,$1C,$2C,$1C,$2C,$1C,$2C,$1C,$2C,$16,$20
	Data.b $23,$10,$20,$10,$20,$10,$20,$10,$20,$10,$29,$16
	Data.b $13,$A0,$90,$A0,$90,$20,$10,$A0,$90,$20,$10,$23
	Data.b $23,$90,$A0,$90,$A0,$10,$20,$90,$A0,$10,$20,$13
	Data.b $19,$26,$10,$20,$10,$20,$10,$A0,$90,$20,$1A,$25
	Data.b $20,$19,$26,$10,$20,$10,$20,$90,$A0,$1A,$25,$10
	Data.b $10,$20,$19,$2C,$1C,$2C,$1C,$2C,$1C,$25,$10,$20

MAP6
	Data.b 17,18,37
	Data.b $10,$2A,$1C,$2C,$1C,$2C,$1C,$2C,$1C,$2C,$1C,$26
	Data.b $2A,$15,$A0,$90,$20,$90,$A0,$90,$A0,$10,$20,$13
	Data.b $11,$20,$90,$A0,$10,$A0,$90,$A0,$90,$20,$1A,$25
	Data.b $20,$10,$A0,$90,$20,$10,$20,$10,$20,$1A,$25,$10
	Data.b $10,$20,$90,$A0,$10,$20,$10,$20,$1A,$25,$10,$20
	Data.b $20,$10,$20,$10,$20,$10,$20,$1A,$25,$10,$20,$10
	Data.b $90,$A0,$90,$A0,$10,$28,$1E,$25,$10,$20,$10,$20
	Data.b $A0,$90,$A0,$90,$20,$10,$23,$10,$20,$90,$A0,$10
	Data.b $10,$20,$10,$20,$10,$20,$13,$20,$10,$A0,$90,$20
	Data.b $20,$10,$A0,$90,$A0,$90,$23,$10,$20,$90,$A0,$10
	Data.b $10,$20,$90,$A0,$90,$A0,$13,$20,$10,$A0,$90,$20
	Data.b $20,$10,$20,$10,$20,$10,$23,$10,$20,$10,$20,$10
	Data.b $10,$20,$10,$20,$10,$20,$11,$20,$10,$20,$10,$20

MAP7
	Data.b 19,19,38
	Data.b $10,$20,$1A,$2C,$1C,$2C,$1C,$2C,$1C,$26,$10,$20
	Data.b $20,$1A,$25,$10,$20,$10,$20,$90,$A0,$19,$26,$10
	Data.b $1A,$25,$90,$A0,$90,$A0,$10,$A0,$90,$20,$19,$26
	Data.b $23,$10,$A0,$90,$A0,$90,$20,$90,$A0,$10,$20,$13
	Data.b $19,$26,$10,$20,$10,$20,$10,$A0,$90,$20,$1A,$25
	Data.b $20,$19,$26,$10,$20,$10,$20,$10,$20,$1A,$25,$10
	Data.b $10,$20,$1B,$2C,$1C,$2C,$1C,$2C,$1C,$27,$10,$20
	Data.b $20,$1A,$25,$10,$20,$90,$A0,$90,$A0,$19,$26,$10
	Data.b $1A,$25,$90,$A0,$10,$A0,$90,$A0,$90,$20,$19,$26
	Data.b $23,$10,$A0,$90,$20,$10,$20,$10,$20,$10,$20,$13
	Data.b $13,$20,$90,$A0,$10,$20,$90,$A0,$90,$A0,$10,$23
	Data.b $29,$16,$A0,$90,$20,$10,$A0,$90,$A0,$90,$2A,$15
	Data.b $10,$29,$1C,$2C,$1C,$2C,$1C,$2C,$1C,$2C,$15,$20

MAP8
	Data.b 24,25,39
	Data.b $10,$20,$1A,$2C,$1C,$2C,$1C,$2C,$1C,$26,$10,$20
	Data.b $20,$1A,$25,$90,$A0,$90,$A0,$10,$20,$19,$26,$10
	Data.b $1A,$25,$10,$A0,$90,$A0,$90,$20,$90,$A0,$19,$26
	Data.b $23,$10,$20,$10,$20,$10,$20,$10,$A0,$90,$20,$13
	Data.b $13,$20,$90,$A0,$90,$A0,$10,$20,$90,$A0,$10,$23
	Data.b $29,$16,$A0,$90,$A0,$90,$20,$10,$A0,$90,$20,$13
	Data.b $10,$29,$1C,$2C,$1C,$2C,$1C,$2C,$1C,$2C,$1C,$27
	Data.b $20,$10,$A0,$90,$20,$10,$20,$10,$20,$10,$20,$13
	Data.b $10,$20,$90,$A0,$10,$20,$10,$A0,$90,$A0,$90,$23
	Data.b $22,$10,$A0,$90,$20,$10,$20,$90,$A0,$90,$A0,$13
	Data.b $19,$26,$90,$A0,$10,$20,$10,$20,$10,$20,$1A,$25
	Data.b $20,$19,$26,$10,$20,$10,$20,$10,$20,$1A,$25,$10
	Data.b $10,$20,$19,$2C,$1C,$2C,$1C,$2C,$1C,$25,$10,$20

MAP9
	Data.b 26,27,40
	Data.b $10,$2A,$1C,$2C,$1C,$2C,$1C,$2C,$1C,$2C,$16,$20
	Data.b $1A,$27,$10,$A0,$90,$A0,$90,$20,$90,$A0,$19,$26
	Data.b $13,$29,$16,$A0,$90,$A0,$90,$20,$90,$A0,$10,$23
	Data.b $13,$20,$19,$26,$10,$20,$10,$20,$90,$A0,$10,$23
	Data.b $13,$20,$10,$29,$16,$20,$10,$20,$90,$A0,$10,$23
	Data.b $13,$20,$90,$A0,$19,$26,$10,$20,$10,$A0,$90,$23
	Data.b $13,$20,$90,$A0,$10,$29,$16,$20,$10,$A0,$90,$23
	Data.b $13,$20,$90,$A0,$10,$20,$19,$26,$10,$A0,$90,$23
	Data.b $13,$20,$90,$A0,$10,$20,$10,$29,$16,$A0,$90,$23
	Data.b $13,$20,$10,$20,$10,$20,$10,$20,$19,$26,$10,$23
	Data.b $13,$20,$10,$20,$10,$A0,$90,$A0,$90,$29,$16,$23
	Data.b $19,$26,$10,$20,$10,$A0,$90,$A0,$90,$20,$1B,$25
	Data.b $10,$29,$1C,$2C,$1C,$2C,$1C,$2C,$1C,$2C,$15,$20
