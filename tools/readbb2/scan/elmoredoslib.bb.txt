; ascii translation of /Users/simon/Google Drive/amiga/w/abcstuff/libsdev/userlibsrc/ElmoreDosLib.bb
+;
; #elmoredoslib=109 (rev bum6)
;

Macro pushreg:MOVE.l `1,-(a7):End Macro
Macro pullreg:MOVE.l (a7)+,`1:End Macro
Macro pushregs:MOVEM.l `1,-(a7):End Macro
Macro pullregs:MOVEM.l (a7)+,`1:End Macro
Macro error:MOVE.l #`1,d0:TRAP#0:`1:Dc.b `2,0:Event:End Macro

#allocstring=$cf01
#freestring=$cf02
#globalalloc=$c002
#globalfree=$c003
#longmult=$ca01

.DOS_LIB
!libheader{#elmoredoslib,init,0,finit,0}



!acommand{#long}
!args{#string}
!libs
!subs{_chdir+1,0,0}
!name {"ChDir","(Path$) ;Change directory: Function version returns FALSE for failure"}



!afunction{#long}
!args
!libs
!subs{_pathlock+1,0,0}
!name {"PathLock",";Returns lock of current path"}



!acommand{#byte}
!args
!libs
!subs{_getdirentry+1,0,0}
!name{"MoreEntries",";TRUE=Another entry was read:	FALSE=No more entries"}



!afunction{#string}
!args
!libs
!subs{_entryname,0,0}
!name{"EntryName$",";Filename of current directory entry"}


!afunction{#byte}
!args
!libs
!subs{_entrytype,0,0}
!name{"EntryDIR",";Returns TRUE if entry is a sub-directory, FALSE for files"}


!afunction{#string}
!args
!libs
!subs{_entrybits,0,0}
!name{"EntryBits$",";Returns protection-bits for directory entry [HSARWED]"}


!afunction{#long}
!args
!libs
!subs{_entrysize,0,0}
!name{"EntrySize",";Returns size in bytes of current directory entry"}

!afunction{#long}
!args
!libs
!subs{_entrydate,0,0}
!name{"EntryDate",";Returns entry date as number of days since 1/1/1978"}


!afunction{#byte}
!args
!libs
!subs{_entryhour,0,0}
!name{"EntryHour",";Returns hour (0-23) entry was last changed"}


!afunction{#byte}
!args
!libs
!subs{_entrymins,0,0}
!name{"EntryMins",";Returns minutes (0-59) entry was last changed"}

!afunction{#word}
!args
!libs
!subs{_entrysecs,0,0}
!name{"EntrySecs",";Returns seconds (0-59) entry was last changed"}



!afunction{#string}
!args
!libs
!subs{_entrycomment,0,0}
!name{"EntryComment$",";Returns comment-string associated with entry"}


!acommand{#byte}
!args{#string,#string}
!libs
!subs{_copy+1,0,0}
!name{"CopyFile","(File1$,File2$) ;Returns TRUE if file was copied successfully"}

!astatement
!args{#long}
!libs
!subs{_makecbuf,0,0}
!name{"SetCopyBuffer","256+	;Set disk buffer for 'CopyFile'"}


!acommand{#byte}
!args{#string,#string}
!libs
!subs{_namefile+1,0,0}
!name{"NameFile","(OldName$,NewName$) ;Returns TRUE if file could be renamed"}


!acommand{#byte}
!args{#string}
!libs
!subs{_makedir+1,0,0}
!name{"MakeDir","(PathName$) ;Returns TRUE if directory could be created"}



!acommand{#byte}
!args{#string}
!libs
!subs{_diskinfo+1,0,0}
!name{"AnalyzeDisk","(DriveName$) ;Returns TRUE if device name is valid"}


!afunction{#long}
!args
!libs
!subs{_diskunit,0,0}
!name{"DiskUnit",";Returns unit# of last drive analyzed"}

!afunction{#long}
!args
!libs
!subs{_diskerrs,0,0}
!name{"DiskErrors",";Number of soft errors on last drive analyzed"}

!afunction{#long}
!args
!libs
!subs{_disksize,0,0}
!name{"DiskCapacity",";Capacity in bytes of last drive analyzed"}

!afunction{#long}
!args
!libs
!subs{_diskused,0,0}
!name{"DiskUsed",";No. bytes used of last analyzed drive"}

!afunction{#long}
!args
!libs
!subs{_diskblock,0,0}
!name{"DiskBlocks",";Bytes per block of last drive analyzed"}


!afunction{#long}
!args
!libs
!subs{_diskfree,0,0}
!name{"DiskFree",";No. free bytes on last analyzed disk"}




.LIB_END

!libfin



init:!nullsub{_libinit,0,0}
finit:!nullsub{_libclose,0,0}





lockname:
TST.l doslibbase
BNE havedos

CLR.l d0
!error{errNO_DOS,"Couldn't open DOS library!!!????"}

havedos:
MOVE.l doslibbase,a6

MOVE.l -4(a2),d1
ALibJsr #allocstring
MOVE.l d0,d1
!pushreg{d0}
MOVE.l #-2,d2		 ;Accessmode READ
JSR _Lock(a6)
MOVE.l d0,tlock	 ;New lock (from name)
!pullreg{d0}
ALibJsr #freestring

RTS





._chdir
BSR lockname
TST.l tlock
BNE cdcont

CLR.l d0
RTS	 ;return null!


cdcont:
;We gotta remember this lock too, as the "lastlock,"
;which will be closed.

MOVE.l lastlock,d1
CMP.l olddirlock,d1
BEQ dontunlockus

MOVE.l lastlock,d1	;Is this needed???? I dunno!
TST.l lastlock
BEQ dontunlockus		;(If zero)

JSR _UnLock(a6)
MOVE.l tlock,lastlock

dontunlockus:
MOVE.l tlock,d1
JSR _CurrentDir(a6)

MOVE.l tlock,d1
MOVE.l fibpointer,d2
JSR _Examine(a6)

TST.l d0
BEQ cdfail

BSR _entrytype
TST.l d0
BEQ cdfail

MOVEQ.l #-1,d0
RTS


cdfail:
MOVE.l doslibbase,a6
MOVE.l tlock,d1
JSR _UnLock(a6)

MOVE.l ramname,d1
MOVEQ.l #-2,d2

JSR _Lock(a6)
MOVE.l d0,tlock

CLR.l d0
RTS



._pathlock
MOVE.l tlock,d0
RTS



;at last entry, flush the FIB:

._getdirentry
MOVE.l tlock,d1
MOVE.l fibpointer,d2

MOVE.l doslibbase,a6

JSR _ExNext(a6)

TST.l d0
SNE d0
RTS




getnullstring:
CLR.l	 d0						;Start looking from zero
TST.l (a0)
BEQ ntdone

ntsearchloop:
MOVE.b 0(a0,d0),d2
TST.b	d2
BEQ		 ntdone
MOVE.b	d2,(a3)+
ADDQ		#1,d0
BRA		 ntsearchloop
ntdone:
RTS




._entryname
MOVE.l fibpointer,a0
;LEA 8(a0),a0
ADD.l #8,a0
BRA getnullstring



._entrytype
MOVE.l fibpointer,a0

TST.l SizeOf.FileInfoBlock\fib_DirEntryType(a0)

SPL d0

RTS




._entrybits
MOVE.l fibpointer,a0
MOVE.l SizeOf.FileInfoBlock\fib_Protection(a0),d1

MOVE.l a3,a0
MOVE.l #"----",(a3)+
MOVE.l #"----",(a3)+
MOVEQ.l #8,d0


bit7:
BTST #7,d1
BEQ bit6
MOVE.b #"H",(a0)

bit6:
BTST #6,d1
BEQ bit5
MOVE.b #"S",1(a0)


bit5:
BTST #5,d1
BEQ bit4
MOVE.b #"P",2(a0)


bit4:
BTST #4,d1
BEQ bit3
MOVE.b #"A",3(a0)


bit3:
BTST #3,d1
BNE bit2
MOVE.b #"R",4(a0)

bit2:
BTST #2,d1
BNE bit1
MOVE.b #"W",5(a0)

bit1:
BTST #1,d1
BNE bit0
MOVE.b #"E",6(a0)

bit0:
BTST #0,d1
BNE donebits
MOVE.b #"D",7(a0)


donebits:
RTS









._entrysize
MOVE.l fibpointer,a0
MOVE.l SizeOf.FileInfoBlock\fib_Size(a0),d0
RTS



._entrydate
MOVE.l fibpointer,a0
LEA SizeOf.FileInfoBlock\fib_Date(a0),a0
MOVE.l (a0),d0
RTS


._entryhour
BSR entrytime
CLR.l d0
DIVU #60,d1
MOVE d1,d0
RTS


._entrymins
BSR entrytime
DIVU #60,d1
SWAP d1
MOVE.w d1,d0

RTS


._entrysecs
MOVE.l fibpointer,a0
LEA SizeOf.FileInfoBlock\fib_Date(a0),a0
MOVE.l 8(a0),d1
CLR.l d0

DIVU #50,d1
MOVE d1,d0
RTS



entrytime:
MOVE.l fibpointer,a0
LEA SizeOf.FileInfoBlock\fib_Date(a0),a0
MOVE.l 4(a0),d1
RTS




._entrycomment
MOVE.l fibpointer,a0
ADD.l #SizeOf.FileInfoBlock\fib_Comment,a0
BRA getnullstring





._copy



BSR gfiles


docopy:
;Read fist file:
MOVE.l f1name,d1
MOVE.l #1005,d2 ;Old file...

MOVE.l doslibbase,a6
JSR _Open(a6)

TST.l d0
BEQ copyerror

;Okay, success so far!
MOVE.l d0,oldhandle

;Now read new handle...

MOVE.l f2name,d1
MOVE.l #1006,d2 ;New file....

JSR _Open(a6)

TST.l d0
BEQ copyerror

MOVE.l d0,newhandle

;Okay, now make a buffer:

MOVE.l defcopybuff,d0
MOVE.l #65536,d1
ALibJsr #globalalloc
MOVE.l d0,filebuff


copyloop:
MOVE.l oldhandle,d1
MOVE.l filebuff,d2
MOVE.l defcopybuff,d3

JSR _Read(a6)
MOVE.l d0,amtcopied

TST.l d0
BEQ donecopying
BMI copyerror

MOVE.l newhandle,d1
MOVE.l filebuff,d2
MOVE.l amtcopied,d3

JSR _Write(a6)

TST.l d0
BMI copyerror

BRA copyloop

copyerror:
CLR.l d0
BRA copyclean

donecopying:
MOVEQ.l #-1,d0


copyclean:
;Deallocate buffer, strings & close filehandles....

!pushreg{d0}		;Remember our TRUE/FALSE return value...

TST.l filebuff
BEQ nofreecbuff

MOVE.l filebuff,a1
MOVE.l defcopybuff,d0
ALibJsr #globalfree


nofreecbuff:

TST.l f1name
BEQ nofreef1name

MOVE.l f1name,d0
ALibJsr #freestring


nofreef1name:

TST.l f2name
BEQ nofreef2name

MOVE.l f2name,d0
ALibJsr #freestring


nofreef2name:
;close new handle
MOVE.l doslibbase,a6
TST.l newhandle
BEQ closeold
MOVE.l newhandle,d1

JSR _Close(a6)

closeold:
TST.l oldhandle
BEQ copyreturn
MOVE.l oldhandle,d1

JSR _Close(a6)


copyreturn:
CLR.l f1name
CLR.l f2name
CLR.l newhandle
CLR.l oldhandle
CLR.l amtcopied

!pullreg{d0}
RTS



._makecbuf
CMP.l #256,d0
BGE goodcbuf
!error{badcbuf,"'SetCopyBuffer' must be set to *AT LEAST* 256 bytes!"}

goodcbuf:
MOVE.l d0,defcopybuff
RTS




gfiles:
!pushregs{d0-d1/a2-a3}

MOVE.l -4(a2),d1
ALibJsr #allocstring
MOVE.l d0,f1name

!pullregs{a2-a3/d0-d1}
MOVE.l d1,d0
MOVE.l -8(a2),d1
ALibJsr #allocstring
MOVE.l d0,f2name

RTS



._namefile
BSR gfiles
MOVE.l doslibbase,a6

MOVE.l f1name,d1
MOVE.l f2name,d2

JSR _Rename(a6)

TST.l d0
SNE d0
RTS


._makedir
MOVE.l -4(a2),d1
ALibJsr #allocstring
MOVE.l d0,d1
MOVE.l d0,f1name

MOVE.l doslibbase,a6
JSR _CreateDir(a6)

TST.l d0
BEQ dirend

MOVE.l d0,d1
JSR _UnLock(a6)

MOVEQ.l #-1,d0

dirend:
!pushreg{d0}
MOVE.l f1name,d0
ALibJsr #freestring

!pullreg{d0}
RTS




._diskinfo
MOVE.l -4(a2),d1
ALibJsr #allocstring
MOVE.l d0,d1
MOVE.l d0,f1name

MOVE.l #SizeOf.InfoData,d0
MOVE.l #65536,d1
ALibJsr #globalalloc
MOVE.l d0,infodata

MOVE.l doslibbase,a6
MOVE.l f1name,d1
MOVEQ.l #-2,d2
JSR _Lock(a6)
TST.l d0
BEQ infodone

MOVE.l d0,infolock

MOVE.l d0,d1
MOVE.l infodata,d2

JSR _Info(a6)
TST.l d0
BEQ infodone


MOVE.l infodata,a0

MOVE.l (a0),derrs
MOVE.l 4(a0),dunit

MOVE.l SizeOf.InfoData\id_BytesPerBlock(a0),dblock

MOVE.l SizeOf.InfoData\id_NumBlocks(a0),dsize

MOVE.l SizeOf.InfoData\id_NumBlocksUsed(a0),dused

MOVEQ.l #-1,d0

infodone:
;Unlock, de-allocate, free string:

;(Remember our TRUE/FALSE)
!pushreg{d0}

TST.l infolock
BEQ noinfolock
MOVE.l infolock,d1
JSR _UnLock(a6)

noinfolock:

TST.l infodata
BEQ noinfodata
MOVE.l infodata,a1
MOVE.l #SizeOf.InfoData,d0
ALibJsr #globalfree

noinfodata:
TST.l f1name
BEQ noinfofile
MOVE.l f1name,d0
ALibJsr #freestring

noinfofile:
!pullreg{d0}

TST.l d0
SNE d0
RTS




._diskused
MOVE.l dused,d0
MOVE.l dblock,d1
ALibJsr #longmult
RTS



._disksize
MOVE.l dsize,d0
MOVE.l dblock,d1
ALibJsr #longmult
RTS


._diskerrs
MOVE.l derrs,d0:RTS


._diskunit
MOVE.l dunit,d0:RTS


._diskblock
MOVE.l dblock,d0
RTS


._diskfree
MOVE.l dsize,d0
SUB.l dused,d0
MOVE.l dblock,d1

ALibJsr #longmult

RTS







.;;;;;;;;;;;;
._libinit
CLR.l olddirlock
CLR.l lastlock

LEA dosname,a1
MOVEQ#0,d0
MOVE.l 4,a6
JSR _OpenLibrary(a6)
MOVE.l d0,doslibbase
MOVE.l d0,a6

CLR.l d1
JSR _CurrentDir(a6)

MOVE.l d0,olddirlock
MOVE.l d0,tlock

MOVE.l d0,d1
JSR _CurrentDir(a6)

MOVE.l d0,d1
JSR _UnLock(a6)


;Allocate a FIB:
MOVE.l #SizeOf.FileInfoBlock,d0
MOVE.l #65536,d1
ALibJsr #globalalloc
MOVE.l d0,fibpointer

MOVE.l tlock,d1
MOVE.l d0,d2

JSR _Examine(a6)


failinit:
RTS


._libclose
MOVE.l doslibbase,a6

MOVE.l tlock,d1

CMP.l olddirlock,d1
BEQ DontUnlock

JSR _UnLock(a6)

DontUnlock:

MOVE.l olddirlock,d1
JSR _CurrentDir(a6)

RTS

olddirlock:
Dc.l 0

lastlock:
Dc.l 0

doslibbase:
Dc.l 0

tlock:
Dc.l 0

dosname:
Dc.b "dos.library",0
Event

fibpointer:
Dc.l 0

ramname:
Dc.b "RAM:",0
Event


f1name:			 Dc.l 0
f2name:			 Dc.l 0
newhandle:		Dc.l 0
oldhandle:		Dc.l 0
filebuff:		 Dc.l 0
defcopybuff:	Dc.l 8192
amtcopied:		Dc.l 0

par1l:				Dc.l 0
par1t:				Dc.l 0

infolock:		 Dc.l 0
infodata:		 Dc.l 0
dunit:				Dc.l 0
derrs:				Dc.l 0
dsize:				Dc.l 0
dused:				Dc.l 0
dblock:			 Dc.l 0