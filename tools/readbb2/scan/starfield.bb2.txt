; ascii translation of /Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/out/stuff/shit/stevemc/Starfield.bb2
;================================================================
; Draw a nice little starfield....
; Written by Stephen McNamara of Leading Edge Software
;
; Alter #num to change the number of starss in the field,
; Higher numbers for faster processors!
; Try:		#num=1500 for a standard 1200
;				 #num=2300 for a fastram 1200
;				 #num=5500 for a 030 50 mhz
;				 #num=???	for a 500/600
;================================================================

#num=2300

WBStartup

DEFTYPE.w
DEFTYPE.l h

; Lowres bitmap star field drawer
; Table points to a structure:
;														 +0=num of stars
;														 +2=null field
;														 +4=list of x,y,speed co-ordinates (words)
Statement Drawfield {table.l,bitm.l,deltax.w,deltay.w}
SDrawfield:
	UNLK			a4
	MOVEM.l	 a4-a6,-(a7)

	MOVE.l		d0,a0
	MOVE.l		d1,a6
	ADDQ.l		#8,a6
	MOVE.l		(a6),a1

	MOVE.l		d2,d4
	MOVE.l		d3,d5
	MOVE.w		(a0),d7
	SUBQ.w		#1,d7
	ADDQ.l		#6,a0

	LEA			 ytable(pc),a5
	MOVEQ.l	 #0,d3
	MOVEQ.l	 #0,d2
	MOVEQ.l	 #0,d0
	MOVEQ.l	 #0,d1
'loop
	MOVE.w		(a0)+,d0
	MOVE.w		(a0),d1
	MOVE.w		2(a0),d2

	TST.w		 d4
	BEQ			 'no_x_shift
	BMI			 'xneg
	ADD.w		 d0,d1
	CMPI.w		#320,d1
	BLS			 'no_x_shift
	SUB.w		 #320,d1
	BRA			 'no_x_shift
'xneg:
	SUB.w		 d0,d1
	BPL			 'no_x_shift
	ADD.w		 #320,d1
'no_x_shift:
	TST.w		 d5
	BEQ			 'no_y_shift
	BMI			 'yneg
	ADD.w		 d0,d2
	CMPI.w		#256,d2
	BLS			 'no_y_shift
	SUB.w		 #256,d2
	BRA			 'no_y_shift
'yneg:
	SUB.w		 d0,d2
	BPL			 'no_y_shift
	ADD.w		 #256,d2
'no_y_shift:
	MOVE.w		d1,(a0)+
	MOVE.w		d2,(a0)+

	MOVE.w		d1,d3
	ASR.w		 #3,d3

	ASL.w		 #1,d2
	ADD.w		 0(a5,d2),d3

	NOT.b		 d1

	BSET			d1,0(a1,d3.w)
	DBRA			d7,'loop

	MOVEM.l	 (a7)+,a4-a6
	RTS

ytable:
	Event
	Dc.w 0,40,80,120,160,200,240,280,320,360,400,440,480,520,560,600
	Dc.w 640,680,720,760,800,840,880,920,960,1000,1040,1080,1120,1160,1200,1240
	Dc.w 1280,1320,1360,1400,1440,1480,1520,1560,1600,1640,1680,1720,1760,1800,1840,1880
	Dc.w 1920,1960,2000,2040,2080,2120,2160,2200,2240,2280,2320,2360,2400,2440,2480,2520
	Dc.w 2560,2600,2640,2680,2720,2760,2800,2840,2880,2920,2960,3000,3040,3080,3120,3160
	Dc.w 3200,3240,3280,3320,3360,3400,3440,3480,3520,3560,3600,3640,3680,3720,3760,3800
	Dc.w 3840,3880,3920,3960,4000,4040,4080,4120,4160,4200,4240,4280,4320,4360,4400,4440
	Dc.w 4480,4520,4560,4600,4640,4680,4720,4760,4800,4840,4880,4920,4960,5000,5040,5080
	Dc.w 5120,5160,5200,5240,5280,5320,5360,5400,5440,5480,5520,5560,5600,5640,5680,5720
	Dc.w 5760,5800,5840,5880,5920,5960,6000,6040,6080,6120,6160,6200,6240,6280,6320,6360
	Dc.w 6400,6440,6480,6520,6560,6600,6640,6680,6720,6760,6800,6840,6880,6920,6960,7000
	Dc.w 7040,7080,7120,7160,7200,7240,7280,7320,7360,7400,7440,7480,7520,7560,7600,7640
	Dc.w 7680,7720,7760,7800,7840,7880,7920,7960,8000,8040,8080,8120,8160,8200,8240,8280
	Dc.w 8320,8360,8400,8440,8480,8520,8560,8600,8640,8680,8720,8760,8800,8840,8880,8920
	Dc.w 8960,9000,9040,9080,9120,9160,9200,9240,9280,9320,9360,9400,9440,9480,9520,9560
	Dc.w 9600,9640,9680,9720,9760,9800,9840,9880,9920,9960,10000,10040,10080,10120,10160,10200

End Statement

Statement assembler_cls{a.l}
	UNLK a4:MOVE.l d0,a0:ADD.l #10240,a0
	MOVEQ #0,d0:MOVEQ #0,d1:MOVEQ #0,d2:MOVEQ #0,d3:MOVEQ #0,d4
	MOVEQ #0,d5:MOVEQ #0,d6:MOVE.l d0,a1:MOVE.l d0,a2:MOVE.l d0,a3
	MOVE #255,d7
	loop1:MOVEM.l d0-d6/a1-a3,-(a0):DBRA d7,loop1
	RTS
End Statement

NEWTYPE .dotplot
	spd.w
	x.w
	y.w
End NEWTYPE

#num=2300
Dim plots.dotplot(#num)

plots(0)\spd=#num
plots(0)\x=0
plots(0)\y=0

For h=1 To #num
	plots(h)\x=Int(Rnd(319))
	plots(h)\y=Int(Rnd(255))
	plots(h)\spd=Int(Rnd(6))+1
Next h

BitMap 0,320,256,2
BitMap 1,320,256,2
BLITZ
Slice 0,44,2
Show 0
##[$AE83] 0,0

Green 1,15,15,15
Green 2,15,0,0

dbuffer=0
Use BitMap 0 : BitMapOutput 0
Repeat
	VWait
	Show dbuffer
	dbuffer=1-dbuffer
	assembler_cls{Peek.l(Addr BitMap(dbuffer)+8)}
	Drawfield{&plots(0),Addr BitMap(dbuffer),-1,0}
Until Joyb(0)
End
