; ascii translation of /Users/simon/Google Drive/amiga/w/sega/shit/dev/dev/jold.bb





If Peek.w($f00004)=Peek.w($f00004)
	End


EndIf


NEWTYPE .phrase:a.l:b.l:End NEWTYPE

NEWTYPE .jbmap

	dwidth.w	 ;0
	dheight.w	;2
	iwidth.w	 ;4
	iheight.w	;6

	dtype.w		;8
	depth.w		;10
	pitch.w		;12

	idata.l		;14
	ilink.l		;18

	xpos.w		 ;22
	ypos.w		 ;24
	iscroll.w	;26
	flags.w		;28

	hscale.b	 ;30
	vscale.b	 ;31

	firstphrase.phrase ;32
	secondphrase.phrase ;32
	thirdphrase.phrase ;32

End NEWTYPE



Function.l jint{a.l}
	AsmExit
End Function


;
;CNIF 1=0

#ypos=$2e
#width=320
#hite=240
#mem=#width*#hite*2 ;*2=word/pix, *2=double buffered


Macro bm SizeOf .jbmap\`1(a0):End Macro


Statement InitBmap{*bmap.jbmap}
	;
	MOVE.l d0,a0
	;
	MOVE.l !bm{idata},d0:LSR.l#3,d0:MOVEQ#43-32,d2:ASL.l d2,d0
	MOVE.l !bm{ilink},d1:LSR.l#3,d1:MOVE.l d1,d2:LSR.l#8,d2:OR d2,d0
	MOVEQ#24,d2:LSL.ld2,d1
	MOVE !bm{dheight},d2:EXT.l d2:MOVEQ#14,d3:ASL.ld3,d2:OR.ld2,d1
	MOVE !bm{ypos},d2:ASL#3,d2:OR d2,d1:OR !bm{dtype},d1
	MOVEM.l d0-d1,!bm{firstphrase}
	;
	MOVE !bm{iscroll},d0:EXT.l d0:ASL.l#8,d0:ASL.l#3,d0
	OR !bm{flags},d0:ASL.l#6,d0
	MOVE !bm{iwidth},d1:EXT.l d1:ROR.l#4,d1:OR d1,d0
	ROL.l#8,d1:ROL.l#6,d1
	OR!bm{dwidth},d1:ASL.l#3,d1:OR!bm{pitch},d1:ASL.l#3,d1:OR!bm{depth},d1
	ASL.l#8,d1:ASL.l#4,d1:OR !bm{xpos},d1
	MOVEM.l d0-d1,!bm{secondphrase}

	MOVEQ #0,d0:MOVE.w !bm{hscale},d0:ROR.w #8,d0
	MOVE.l d0,!bm{thirdphrase+4}

	;
	AsmExit
	;
End Statement


Function.l GetMem{size.l}
	MOVEQ #0,d1:SysJsr $c002:AsmExit
End Function

Statement HeadBmap{*bmap1.jbmap}
	ADD.l #32,d0:SWAP d0:MOVE.l d0,$f00020:AsmExit

End Statement



CNIF 1=0


:MOVEQ#3+10,d2:ROL.l d2,d0:OR.w d0,d1



	MOVE.l a0,d1:LSR.l #3,d1:LSL.l #8,d1:LSL.l #43-32-8,d1
	MOVE.l #$85 LSL 3,d0	 ;ypos
	ORI.l #$15 LSL 14,d0	 ;height
	MOVE.l $204,d2:BSR linkobj2
	MOVE.l d1, (a0)
	MOVE.l d0,4(a0)
	;
	MOVE.l #4 LSL 12,d0		 ;depth
	ORI.l #1 LSL 15,d0			;pitch
	ORI.l #80 LSL 18,d0		 ;data width
	ORI.l #80 LSL 28,d0		 ;image width...
	MOVE.l #80 LSR 4,d1		;...
	ORI.l #1 LSL 15,d1			;colour 0 = transparent
	MOVE.l d1, 8(a0)
	MOVE.l d0,12(a0):AsmExit

	linkobj2		 ;d0,d1=src obj, d2=dest
	LSR.l #3,d2:MOVE.l d2,d3
	LSL.l #8,d2:LSL.l #8,d2:LSL.l #8,d2:OR.l d2,d0
	LSR.l #8,d3:OR.l d3,d1:RTS

End Statement

;CEND

CEND




CNIF1=0
Statement InitBmap{wid.l,hth.l,typ.l,dep.l,pit.l,*bmap.jbmap}

	mem.l=wid*hth*2
	dest.l=GetMem{mem}
	*bmap\_data[0]=dest

	*bmap\t0=0
	*bmap\t1=0
	*bmap\t2=0
	*bmap\t3=0
	*bmap\t4=0
	*bmap\t5=0

																						 ;xpos
																						 ;ypos
																						 ;link

	*bmap\t0 OR	($5e ASL 3)									 ;ypos

	*bmap\t0 OR	(typ&7)											;type

	*bmap\t0 OR ((hth&1023) LSL 14 )					;height

	*bmap\t0 OR (((Peek.l($204) ASR 3)&2097144) ASL 24) ;stopat

	*bmap\t1 OR (((Peek.l($204) ASR 3)&2097144) ASR 8) ;stopat
	*bmap\t1 OR (((dest ASR 3)&2097151) LSL (43-32))	;data


	*bmap\t2 OR ((dep&7) LSL 12)							;depth
	*bmap\t2 OR ((1) LSL 15)			;pitch

	*bmap\t2 OR (((wid*2 ASR 3)&1023) LSL 18);dwidth
	*bmap\t2 OR (((wid*2 ASR 3)&1023) LSL 28);dwidth
	*bmap\t3 OR (((wid*2 ASR 3)&1023) LSR 4) ;dwidth

	*bmap\t3 OR (1 LSL 15) ; transparent colour 0

End Statement

;CEND

Statement RefrBmap{*bmap.jbmap}
	*bmap\l0=*bmap\t0
	*bmap\l1=*bmap\t1
	*bmap\l2=*bmap\t2
	*bmap\l3=*bmap\t3
	*bmap\l4=*bmap\t4
	*bmap\l5=*bmap\t5

End Statement
CEND


CNIF 1=0
Statement LinkBmap{*bmap1.jbmap,*bmap2.jbmap}
	*bmap2\l0=(*bmap2\l0&	 $ffffff) OR (*bmap1\l0 OR (NOT $ffffff))
	*bmap2\l1=(*bmap2\l1&(NOT $7ff)) OR (*bmap1\l1 OR (			 $7ff))

	mylink.l=((*bmap2+8) ASR 2) &$fffff ;data!
	*bmap1\l0=(*bmap1\l0&	$ffffff) OR (mylink LSL 24 OR (NOT $ffffff))
	*bmap1\l1=(*bmap1\l1&	$ffffff) OR (mylink LSR (32-24) OR (NOT $ffffff))


End Statement
CEND


Macro rungpu
	MOVE.l `1 LSL 2+$f03000,$f02110:MOVE.l #1,$ff8:MOVE.l #1,$f02114
End Macro

Macro waitgpu
	'w_g`@:MOVE.l $ff8,d0:BTST #0,d0:BNE 'w_g`@
End Macro

Macro rundsp
	MOVE.l `1 LSL 2+$f1b000,$f1a110:MOVE.l #1,$ff0:MOVE.l #1,$f1a114
End Macro

Macro waitdsp
	'w_d`@:MOVE.l $ff0,d0:BTST #0,d0:BNE 'w_d`@
End Macro

Macro waitblit
	MOVE.l $f02238,d0
	'w_b`@
	MOVE.l $f02238,d0:BTST #0,d0:BEQ 'w_b`@
End Macro

#superstacksize=256
#userstacksize=256

#ypos=$2e
#width=320
#hite=240
#mem=#width*#hite*2 ;*2=word/pix, *2=double buffered

#nd=256

#bmap1=$400
#bmap2=$404
#bmapobj1=$410		 ;original
#bmapobj2=$420		;working
#bmapobj3=$430		;working
#framecnt=$440		;frames...

#startang=$500
#modk=$510
#velx=$550
#vely=$560
#posx=$570
#posy=$580
#vert=$590

#mysincos=$600
#myworld=$610
#mycomp=$620


.begin
BSR initos

MOVE.l #$00a600a6,$f00038:MOVE #$656,$f0003c
MOVE #ypos,$f00046:MOVE #ypos+hite+hite,$f00048

CNIF 1=0
	LEA gpu_1(pc),a0:LEA gpu_1f(pc),a1:LEA $f03000,a2
	BSR copymem:!waitgpu:!rungpu{0}

	LEA dsp_1(pc),a0:LEA dsp_1f(pc),a1:LEA $f1b000,a2
	BSR copymem:!waitdsp:!rundsp{0}
CEND



Statement CreateBmap{wid.l,hth.l,dep.l,pitch.l,dtype.w,flags.l,*bm.jbmap}

	Select depth	;bytes per pix
		Case 0:bppix= 1 ASR 3
		Case 1:bbpix= 2 ASR 3
		Case 2:bbpix= 4 ASR 3
		Case 3:bbpix= 8 ASR 3
		Case 4:bbpix=16 ASR 3
		Case 5:bbpix=32 ASR 3
	End Select


	*bm\iwidth=wid*bppix*pitch ASR 3	 ;phrases!
	*bm\dwidth=*bm\iwidth
	*bm\iheight=hth
	*bm\dheight=hth
	*bm\depth=dep
	*bm\pitch=pitch
	*bm\dtype=dtype
	*bm\hscale=32
	*bm\vscale=32
	*bm\iscroll=0

	*bm\flags=flags
	*bm\firstphrase\a=0,0
	*bm\secondphrase\a=0,0
	*bm\thirdphrase\a=0,0

	mem.l=(*bm\iwidth*pitch ASL 3)*hth
;	*bm\idata=GetMem{mem.l}
End Statement

;MOVE.l #$fff000f0,d3:LEA bmap1,a2:LEA bmapobj1,a3:BSR initbmap
;MOVE.l #$00f0fff0,d3:LEA bmap2,a2:LEA bmapobj2,a3:BSR initbmap
;MOVE.l #$00000000,d3:LEA bmap1,a2:LEA bmapobj1,a3:BSR initbmap
;MOVE.l #$00000000,d3:LEA bmap2,a2:LEA bmapobj2,a3:BSR initbmap


*mybmap1.jbmap=GetMem{SizeOf.jbmap}
*mybmap2.jbmap=GetMem{SizeOf.jbmap}

;------------------

CreateBmap{320,240,4,1,0,0,*mybmap1}
;*mybmap1\dwidth=80			;underneath
;*mybmap1\dheight=240
;*mybmap1\iwidth=80
;*mybmap1\iheight=240

;*mybmap1\dtype=0
;*mybmap1\depth=4
;*mybmap1\pitch=1

*mybmap1\idata=GetMem{320*240*2}
*mybmap1\ilink=&*mybmap2\firstphrase

*mybmap1\xpos=0
*mybmap1\ypos=$2e
;*mybmap1\iscroll=0

;*mybmap1\flags=$0
;*mybmap1\thirdphrase\a=0,0

;---------------------

CreateBmap{320,240,4,1,1,$200,*mybmap2}
;*mybmap2\dwidth=80			;top
;*mybmap2\dheight=240
;*mybmap2\iwidth=80
;*mybmap2\iheight=240

;*mybmap2\dtype=1
;*mybmap2\depth=4
;*mybmap2\pitch=1

mem.l=(*mybmap2\iwidth**mybmap2\pitch ASL 3)**mybmap2\iheight
*mybmap2\idata=GetMem{mem.l}
*mybmap2\ilink=Peek.l($204)

*mybmap2\xpos=0
*mybmap2\ypos=$2e
;*mybmap2\iscroll=0

;*mybmap2\flags=$200
;*mybmap2\thirdphrase\a=0,0
;*mybmap2\hscale=32
;*mybmap2\vscale=32

;-------------------



InitBmap{*mybmap1.jbmap}
InitBmap{*mybmap2.jbmap}
HeadBmap{*mybmap1}



;MOVE.l #320*256*4,d0:BSR alloc
;MOVE.l a0,mycomp



LEA vbdb(pc),a0:MOVEQ #1,d0:BSR initvbint:BSR vbinton


wacked.w=Off

MOVE #$ffff,$f00058
MOVE #$6c0,$f00028
MOVE #$6c7,$f00028	 ;RGB!


For y.l=0 To 239
	start.l=*mybmap1\idata+y*320*2

	For x.w=0 To 319 Step 2


		uu.q=(y&31-15.5)*(y&31-15.5)
		u.l=uu ASR 1
		vv.q=(x&31-15.5)*(x&31-15.5)
		v.l=vv ASR 3

		v=u+v ASL 6



;		v.l=((x ASR 4) +1) ASL 5
		Poke.w start,v:start+2
		Poke.w start,v:start+2
	Next
Next


For y.l=0 To 200;39
	start.l=*mybmap2\idata+y*320*2

	For x.w=0 To 100 Step 2


		If (x&8)=0
			v=0
		Else
			v.l=((x ASR 4) +1)
		EndIf

		Poke.w start,v:start+2
		Poke.w start,v:start+2
	Next
Next





;MOVE #$6c1,$f00028	 ;CRY!
;MOVE #$ac1,$f00028	 ;CRY!
MOVE #$6c7,$f00028	 ;RGB!
;MOVE #$7c1,$f00028	 ;RGB!




.mainloop
Repeat

;	!waitdsp:!waitgpu:!waitblit	;wait till previous frame rendered!

	MOVE framecnt,d7:'wdb:CMP framecnt,d7:BEQ 'wdb

;	InitBmap{*mybmap1.jbmap}
;	InitBmap{*mybmap2.jbmap}
;	HeadBmap{*mybmap1}

;	*mybmap2\xpos=xscr*2
;	xscr=(xscr+1)&127



	xsc=(xsc+1)&127
	*mybmap2\hscale=xsc
;	*mybmap2\vscale=xsc

	Poke.w $f00058,mysilly.w:mysilly+1
	Poke.w $f0002a,mysilly.w:mysilly+1

	;MOVE.l bmap1,d0	 :MOVE.l bmap2,d1
	;MOVE.l d1,bmap1	 :MOVE.l d0,bmap2
	;MOVE.l bmapobj1,d0:MOVE.l bmapobj2,d1
	;MOVE.l d1,bmapobj1:MOVE.l d0,bmapobj2


	;Start of new frame!

	;!waitgpu
	;MOVE.l bmap1,a0
	;MOVE.l a0	 ,$f03f00
	;!rungpu{1}


Until 1=0




CNIF 1=0



	.joyread
	CLR.w d1

	MOVE #$800e,$f14000:MOVE $f14000,d0
	BTST #8,d0:BNE 'notup:ADD.w #$075,d1:'notup
	BTST #9,d0:BNE 'notdo:SUB.w #$075,d1:'notdo

	BTST #10,d0:BNE 'notle:ADD.l #40,startang:'notle
	BTST #11,d0:BNE 'notri:SUB.l #40,startang:'notri

	MOVE #$800e,$f14000:MOVE $f14002,d0
	BTST #1,d0:BNE 'notbb:ADD.l #1000,vert::'notbb
	MOVE #$800b,$f14000:MOVE $f14002,d0
	BTST #1,d0:BNE 'notba:SUB.l #1000,vert:'notba

CEND



;********************** APPLI SUBS ******************************


.initbmap			;a2=^bmap,a3=OLP
;
MOVE.l #mem,d0:BSR alloc
MOVE.l a0,(a2)
MOVE.l a0,a1:MOVE.l #mem/4,d1
'loop1:MOVE.l d3,(a1)+:SUBQ.l #1,d1:BNE 'loop1


;
MOVE.l a0,d1:LSR.l #3,d1:LSL.l #8,d1:LSL.l #43-32-8,d1
MOVE.l #ypos LSL 3,d0
ORI.l #hite LSL 14,d0
MOVE.l stopat,d2:BSR linkobj
MOVE.l d1, (a3)
MOVE.l d0,4(a3)
;
MOVE.l #4 LSL 12,d0		 ;depth
ORI.l #1 LSL 15,d0			;pitch
ORI.l #80 LSL 18,d0		 ;data width
ORI.l #80 LSL 28,d0		 ;image width...
MOVE.l #80 LSR 4,d1		;...
ORI.l #1 LSL 15,d1			;colour 0 = transparent
MOVE.l d1, 8(a3)
MOVE.l d0,12(a3):RTS

vbdb	;vertical blank double buffer...
ADDQ #1,framecnt
;LEA bmapobj2,a0:LEA bmapobj3,a1:MOVE.l a1,d0
;MOVE.l (a0)+,(a1)+:MOVE.l (a0)+,(a1)+
;MOVE.l (a0)+,(a1)+:MOVE.l (a0)+,(a1)+
;SWAP d0:MOVE.l d0,$f00020

	InitBmap{*mybmap1.jbmap}
	InitBmap{*mybmap2.jbmap}
	HeadBmap{*mybmap1}


RTS




linkobj		 ;d0,d1=src obj, d2=dest
LSR.l #3,d2:MOVE.l d2,d3
LSL.l #8,d2:LSL.l #8,d2:LSL.l #8,d2:OR.l d2,d0
LSR.l #8,d3:OR.l d3,d1:RTS


CNIF 1=0

.printd2
;
;RTS
;
;print d2 at d0,d1
;
MOVEM.l d2-d4/a2,-(a7)
;
MOVE.l bmap1,a0							;where it goes
MULU #320,d1:ADD.l d1,a0:LSL #2,d0:AND #$fff0,d0:ADD d0,a0
MOVE.l d2,d0
;
MOVEQ #7,d4
'loop
ROL.l #4,d0:MOVE d0,d2:AND #15,d2
LEA digs(pc),a1:LSL #4,d2:ADD d2,a1						 ;start of digit
MOVEQ #7,d3:MOVE.l a0,a2
'loop2
MOVE.l (a1),(a2):MOVE.l 4(a1),4(a2)
MOVE.l 8(a1),16(a2):MOVE.l 12(a1),20(a2)
;
LEA 576(a1),a1:LEA 1280(a2),a2
DBF d3,'loop2
LEA 32(a0),a0:DBF d4,'loop
;
MOVEM.l (a7)+,d2-d4/a2:RTS

Event
CEND



	gpu_1
;	IncBin "gpu"
	gpu_1f

	dsp_1
;	IncBin "dsp"
	dsp_1f







;********************** JAGOS SUBS ******************************
.
.jagos
;
;OK, well need some zero page locations...
;
#allocat=$200
#stopat=$204
#vbint=$208
#gpint=$20c
#obint=$210
#tiint=$214
#dsint=$218
#_INT1=$21c

copymem		 ;a0=src, a1=srcf, a2=dest
;
CMP.l a1,a0:BCC 'done:MOVE.l (a0)+,(a2)+:BRA copymem
'done:RTS

initos
;
CLR.l $ff0:CLR.l $ff8:
MOVE.l #$200000,allocat:MOVE.l (a7),a0
MOVE.l allocat,a7:SUB.l #superstacksize,allocat:MOVE #0,sr
MOVE.l allocat,a7:SUB.l #userstacksize,allocat:MOVE.l a0,-(a7)
;
MOVE #$1f00,_INT1:LEA inthandler(pc),a0:MOVE.l a0,$100
;
MOVEQ #8,d0:BSR alloc:CLR.l (a0):MOVE.l #4,4(a0):MOVE.l a0,stopat
MOVE.l a0,d0:SWAP d0:MOVE.l d0,$f00020:RTS



alloc ;d0=size, return a0=mem
MOVE.l 4,a6:MOVEQ #0,d1:JSR -204(a6):MOVE.l d0,a0:RTS

vbinton:OR #1,_INT1:MOVE _INT1,$f000e0:RTS
vbintoff:ANDI #$fffe,_INT1:MOVE _INT1,$f000e0:RTS

inthandler
;
MOVEM.l d0-d2/a0-a1,-(a7)
;
MOVE $f000e0,d2:ANDI #$1f,d2:MOVE d2,d0
LSL #8,d0:OR d2,d0:MOVE d0,$f000e0
;
LSR #1,d2:BCC 'novbint:MOVE.l vbint,a0:JSR (a0):'novbint
LSR #1,d2:BCC 'nogpint:MOVE.l gpint,a0:JSR (a0):'nogpint
LSR #1,d2:BCC 'noobint:MOVE.l obint,a0:JSR (a0):'noobint
LSR #1,d2:BCC 'notiint:MOVE.l tiint,a0:JSR (a0):'notiint
LSR #1,d2:BCC 'nodsint:MOVE.l dsint,a0:JSR (a0):'nodsint
;
MOVE d0,$f000e2
;
MOVEM.l (a7)+,d0-d2/a0-a1:RTE


initvbint	;d0=scanline, a0=address of code
MOVE d0,$f0004e:MOVE.l a0,vbint:RTS


