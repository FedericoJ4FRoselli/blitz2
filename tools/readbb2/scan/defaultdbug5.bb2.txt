; ascii translation of /Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/out/stuff/les/defaultdbug5.bb2,/Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/out/stuff/shit/defaultdbug5.bb2,/Users/simon/Google Drive/amiga/w/lha/bbold/bum8/les/defaultdbug5.bb2,/Users/simon/Google Drive/amiga/w/lha/bbold/bum8/shit/defaultdbug5.bb2
#test=1
;If TaskName$(0)<>"Blitz ][ Debug Proc" AND #test=1 Then End


;Updated to include a register listing by

;			 Stephen McNamara of Leading Edge Software

;Feel free to piss around with any changes made ;-).
;Note: most changes are in the routine 'getevent'

;SOME NEW STUFF!
NEWTYPE.typeiteminfo
	name$								 ; Name of item
	typ.b								 ; type of data
	skip.b								; amount to skip to next item
End NEWTYPE

Dim List typelist.typeiteminfo(30)
typelength.w=0
typepointer.l=0
typetitle$=""
typewidth.w=0
tracenum.w=0							; Object number to trace

;Evaluate request types:
#_null=0
#_memwindow=1
#_newtypewindow=2
#_newtypewindowmax=3


newtypewindow.b=False
regswin.b=True
memwin.b=True
evalrequest.b=0
mempointer.l=0
memwinheight.w=0
memwinsize.w=0
reply.w=0
num.w=0
sr$=String$(Chr$(0),6)

rega$=String$(" ",31+2+16)
regb$=String$(" ",4)
MaxLen strg$=128
MaxLen stringinp$=128

stringinp$=""

;Original text follows

;==================================================

;OK, here's the source code to the Blitz2 default debugger.
;
;The debugger system works like this...
;
;When Blitz2 is first run, the program 'Blitz2:dbug/defaultdbug'
;is LoadSeg 'ed into memory. When a program is run from within
;Blitz2, the debug prog get's started up via 'CreateProc'. The
;new compiler menu option 'Load Debug Module' allows a different
;debugger to be used instead of 'defaultdbug'.
;
;Note that the debug prog (eg: this prog) and the main prog (the
;program actually being debugged) run as separate tasks.

;***************************************************************;

;The debug program is supplied the following routines by the main
;prog. The debug prog is supplied a look up table of the functions
;via the task control block USERDATA pointer. Have a look at the
;!d_call{} macro and d_sethandler{}, d_detoke{} procedures in the
;code to see how I call them. Note that most of these will NOT have
;any effect until the next program statement is executed.

;SETHANDLER - call this when the debugger has done all it's setup
;stuff (eg: opening windows etc), and is ready to be used and
;abused. SETHANDLER requires A0 to be pointing to a table of
;debug routines (see below) - checkout the 'htable' table in
;the program code...

;DETOKE - this allows you to detokenise a line of program source.
;On input, A0 = tokenised text and A1 = buffer to place detokenised
;text into.

;FINDOFFSET - given A0 = tokenised source line and D0=statement
;offset, this function will return D0 = detokenised statement
;offset.

;EVAL - Evaluates the null terminated string in A0. The answer
;eventually gets returned via 'EVALHANDLER' (see below).

;EXEC - Executes the null terminated string in A0. Any errors in
;execution get reported through 'EVALHANDLER' (see below).

;QUIT - call this to end program execution - but don't actually do
;anything (eg: 'END'!) until the main prog calls your 'CLEANUP'
;routine (see below).

;SKIP - call this to cause the next program statement to be
;'skipped' or ignored

;****************************************************************;

;The debug program needs to supply the following routines to
;the main prog. Note that these routines will be called by another
;task (not the debug task), and therefore should only perform
;very simple operations (eg: setting flags, or 'Signal' ing the
;debug task).

;STATEHANDLER - called before the execution of every line of
;program code, except for stuff in supervisor mode (ie: interupts).
;This routine is only allowed to play with A0 and A1 (to keep things
;fast). On entry, A0 contains a pointer to an 'info' block:
;
; NEWTYPE.statehandlerinfo
;	 DREGS[8]		;contents of data registers D0...D7
;	 AREGS[8]		;contents of address registers A0...A7
;	 *PC.pcinfo	;program counter
;	 CC.w				;condition codes
; END NEWTYPE
;
;The *PC entry points to another 'info' block:

;
; NEWTYPE.pcinfo
;	 *SRC.src		;pointer to start of source code line
;	 OFFSET.w		;pointer to offset in source line of current statement.
;	 SKIP.w			;offset to next statement (so we can skip this one
;							 ;if we want!)
; END NEWTYPE
;
; NEWTYPE.src
;	 *NEXT.src	 ;pointer to next line
;	 *PREV.src	 ;pointer to previous line
;	 CHARS.b		 ;how many characters in line
;	 CHRS[0]		 ;actual tokenised source code
; END NEWTYPE
;
;The actual program code starts 8 bytes after PC...
;On exit, your statehandler return should return with the Z flag
;set if it's OK to run the statement. If the Z flag is clear, then
;the statement will not be executed, and your 'WAITHANDLER' routine
;will eventually be called (see below).

;SUPERHANDLER - called when a runtime error occurs in supervisor
;mode. A0 points to a null terminated string describing the error.

;USERHANDLER - called when a runtime error occurs in user
;mode. A0 points to a null terminated string describing the error.

;WAITHANDLER - called whenever a program statement is NOT executed.
;The main purpose of this function is to allow for a 'Step' function.

;EVALHANDLER - called with either the result of an EVAL call (see
;above), or when errors occur during either an EVAL or an EXEC.

;CLEANUP - called when the debug program is required to finish.
;This may be triggered by an 'End' statement in the main prog,
;or a call to 'QUIT' (see above). As this is called by the main prog
;task, and not the debug task, this routine should really only
;inform the debug task to end.

;******************************************************************;

;Note that in this version, I've used a 'checkflag/VWait' type
;approach to intertask communication. This is due purely to laziness
;on my part (been too busy writing a game...) and would be much more
;elegant if replaced by an exec 'Signal' or (gasp!) 'PutMsg' type
;system...

;******************************************************************;

;Screentags tags
#Left					 =$80000021
#Top						=$80000022
#Width					=$80000023
#Height				 =$80000024
#_Depth				 =$80000025
#DetailPen			=$80000026
#_BlockPen			=$80000027
#Title					=$80000028
#Colors				 =$80000029
#ErrorCode			=$8000002A
#Font					 =$8000002B
#SysFont				=$8000002C
#_Type					=$8000002D
#_BitMap				=$8000002E
#PubName				=$8000002F
#PubSig				 =$80000030
#PubTask				=$80000031
#DisplayID			=$80000032
#DClip					=$80000033
#Overscan			 =$80000034
#Obsolete1			=$80000035

#ShowTitle			=$80000036
#Behind				 =$80000037
#_Quiet				 =$80000038
#AutoScroll		 =$80000039
#Pens					 =$8000003A
#FullPalette		=$8000003B
#ColorMapEntries=$8000003C
#Parent				 =$8000003D
#Draggable			=$8000003E
#Exclusive			=$8000003F

#SharePens			=$80000040
#BackFill			 =$80000041
#_Interleaved	 =$80000042
#Colors32			 =$80000043
#VideoControl	 =$80000044
#FrontChild		 =$80000045
#BackChild			=$80000046
#LikeWorkbench	=$80000047
#Reserved			 =$80000048

DEFTYPE.l
#bufflen=4096:#buffand=#bufflen-1

Macro d_call
	MOVE.l d_table(pc),a2:MOVE.l `1 LSL 2(a2),a2:JSR (a2)
End Macro

Statement d_sethandler{}
	LEA htable(pc),a0:!d_call{2}
End Statement

Function$ d_detoke{sa}
	Shared d_d$
	GetReg a0,sa:GetReg a1,&d_d$
	!d_call{3}
	Function Return d_d$
End Function

Statement d_eval{t$}
	Shared d_ev$
	d_ev$=t$:GetReg a0,&d_ev$:!d_call{4}
End Statement

Statement d_exec{t$}
	Shared d_ex$
	d_ex$=t$:GetReg a0,&d_ex$:!d_call{5}
End Statement

Statement d_quit{}
	!d_call{6}
End Statement

Statement d_skip{}
	!d_call{8}
End Statement

Macro d_basic
	MOVE.l d_a5(pc),a5
End Macro

NEWTYPE.d_event	;a debug event!
		;
t.w ;type...0=supervisor error
		;			 1=user error
		;			 2=eval result
		;			 3=trace this line...
		;			 4=end
		;
i.w ;buffer put val!
s$	;string
		;
End NEWTYPE

Dim List d_e.d_event(10)

.add_event
Statement add_event{t,s$}
	;
	Shared d_e()
	##[$FE8C]
	If AddLast(d_e())
		d_e()\t=t
		MOVE bufferput(pc),d0:SUBQ #4,d0:AND #buffand,d0:PutReg d0,d_e()\i
		d_e()\s=s$
	EndIf
	##[$FE8D]
End Statement

MOVE.l 4,a0:MOVE.l 276(a0),a0:MOVE.l 88(a0),d_table:MOVE.l a5,d_a5
MaxLen d_d$=256:MaxLen d_ev$=256:MaxLen d_ex$=256
Poke.l ?d_dadd,&d_d$
statego.w=0:dstatus.w=0:prtcode.w=0:Poke.l ?statego_,&statego
buffmem=##[$FE97](#bufflen,$10001):Poke.l ?buffmem_,buffmem:CLR bufferput
;
Goto mainstart

d_dadd:	 Dc.l 0
d_table:	Dc.l 0
d_a5:		 Dc.l 0
statego_: Dc.l 0
buffmem_: Dc.l 0
bufferput:Dc 0

htable:	;handler table
Dc.l d_statehandler,d_superhandler,d_userhandler
Dc.l d_waithandler,d_evalhandler,d_cleanup

d_statehandler:
	MOVE.l a0,mybuffer
	MOVE.l buffmem_(pc),a1:ADD bufferput(pc),a1:MOVE.l 64(a0),(a1)
	ADDQ #4,bufferput:ANDI #buffand,bufferput
	MOVE.l statego_(pc),a1:TST (a1)
	RTS

.mybuffer: Dc.l 0

	d_superhandler:
	!d_basic:PutReg a0,sa
	Gosub stopit:add_event{0,Peek$(sa)}
	RTS

d_userhandler:
	!d_basic:PutReg a0,sa
	Gosub stopit:add_event{1,Peek$(sa)}
	RTS

d_waithandler:
	!d_basic
	If prtcode		;print code out?
		prtbusy=-1
		add_event{3,""} ;print me out!
		While prtbusy:VWait:Wend	;wait till printed!
	EndIf
	If dstatus=2	;stopped?
		While stepcnt=0 AND dstatus=2:VWait:Wend:stepcnt-1
	EndIf
	RTS

d_evalhandler:
	;
	!d_basic:PutReg a0,sa
	add_event{2,Peek$(sa)}
	RTS

d_cleanup:
	;
	!d_basic:add_event{4,""}:RTS

;*****************************************************************

;Take a binary number representing the status register
;and fill out a string with letters where bits are set
;in the number.
;E.g. SR=%01001
;becomes a string like: " N	C"
.AsmStuff:
Statement GetSR {buf.l,sr.w}
AsmGetSR:
	MOVE.l	d0,a0
	MOVE.l	#$2d2d2d2d,(a0)
	MOVE.w	#$2d00,4(a0)

'C:
	BTST		#0,d1
	BEQ		 'V
	MOVE.b	#"C",4(a0)
'V:
	BTST		#1,d1
	BEQ		 'Z
	MOVE.b	#"V",3(a0)
'Z:
	BTST		#2,d1
	BEQ		 'N
	MOVE.b	#"Z",2(a0)
'N:
	BTST		#3,d1
	BEQ		 'X
	MOVE.b	#"N",1(a0)
'X:
	BTST		#4,d1
	BEQ		 'endthis
	MOVE.b	#"X",(a0)
'endthis:
	AsmExit
End Statement

Macro HexConvertNum
convertnum`1:
	CMPI.b	#9,d2
	BLS		 'skipit
	ADD.b	 #"A"-10,d2
	MOVE.b	d2,(a0)+
	BRA		 'jumpit
'skipit
	ADD.b	 #"0",d2
	MOVE.b	d2,(a0)+
'jumpit
End Macro

Statement HexWord{source.l,address.l,num.w}
AsmHexWord:
	MOVE.w	d2,d6
	SUBQ.w	#1,d6
	MOVE.l	d1,a0
	MOVE.l	d0,a1
hexwordloop:
	MOVE.w	(a1)+,d0

	MOVE.w	d0,d2
	ANDI.w	#$f000,d2
	ROL.w	 #4,d2
	!HexConvertNum {0}

	MOVE.w	d0,d2
	ANDI.w	#$f00,d2
	ASR.w	 #8,d2
	!HexConvertNum {1}

	MOVE.w	d0,d2
	ANDI.w	#$f0,d2
	ASR.w	 #4,d2
	!HexConvertNum {2}

	MOVE.w	d0,d2
	ANDI.w	#$f,d2
	!HexConvertNum {3}

	ADDQ.l	#1,a0
	DBRA		d6,hexwordloop
	AsmExit
End Statement

Macro StringConvertNum
	CMPI.b	#31,d2
	BGT		 'skipit`1
	MOVE.b	#".",d2
'skipit`1:
	MOVE.b	d2,(a0)+
End Macro

Statement CheckNMove {mydata.l,address.l}
AsmCheckNMove:
	MOVE.l	d1,a0

	MOVE.l	d0,d2
	SWAP		d2
	ANDI.l	#$ff00,d2
	ROL.w	 #8,d2
	!StringConvertNum{0}
	MOVE.l	d0,d2
	SWAP		d2
	ANDI.l	#$ff,d2
	!StringConvertNum{1}
	MOVE.l	d0,d2
	ANDI.l	#$ff00,d2
	ASR.w	 #8,d2
	!StringConvertNum{2}
	MOVE.l	d0,d2
	ANDI.l	#$ff,d2
	!StringConvertNum{3}

	AsmExit
End Statement

.TypeWindow:
Statement RefreshTypeWindow{}
	Shared typelist(),typelength,typepointer
	Shared newtypewindow,typewidth,ix,iy

	Use localstat 6
	inw.w=InnerWidth
	inh.w=InnerHeight
	ad.l=typepointer
	Use lmaxlen 1
	BitMapOutput 1
	Boxf 0,0,inw-typewidth,inh AND %1111111111111000,0
	Locate 0,0
	If typepointer
		NPrint Hex$(typepointer)
		y=9
		newmem typelist()
		While globfree(typelist())
			a.b=typelist()\typ
			Select a
				Case 1
					NPrint ".b ",Hex$(Peek.b(ad))
				Case 2
					NPrint ".w ",Hex$(Peek.w(ad))
				Case 3
					NPrint ".l ",Hex$(Peek.l(ad))
				Case 4
					Print ".s "
					If Peek.l(ad)<>0 Then NPrint Peek$(Peek.l(ad))," " Else NPrint ""
			End Select
			ad+typelist()\skip
			y+8
		Wend
	Else
		Print "No object found"
	EndIf

	BitMaptoWindow 1,6,0,0,ix+typewidth,iy,inw-typewidth,inh AND %1111111111111000
End Statement

Statement NewTypeWindow{address.l}
	Shared typelist(),typetitle$,typelength,typepointer
	Shared stepcnt,evalrequest
	Shared newtypewindow,typewidth,ix,iy,tracenum

	typetitle$=Peek$(address)
	address+Len(typetitle$)+1
	ClearList typelist()
	typelength=7
	num.w=0

	Repeat
		a$=Peek$(address)
		address+Len(a$)+1
		If a$
			num+1
			If Len(a$)>typelength Then typelength=Len(a$)
			AddLast typelist()
			typelist()\name=a$
			typelist()\typ=Peek.b(address)
			skp.b=Peek.b(address+1)
			If skp=-1
				Select typelist()\typ
					Case 1
						sk=1
					Case 2
						skp=2
					Case 3
						skp=4
					Case 4
						skp=4
				End Select
			EndIf
			typelist()\skip=skp
			address+2
		EndIf
	Until a$=""

	winheight.w=(num ASL 3)+23

	ox.w=0
	oy.w=12
	ow.w=320
	If newtypewindow
		Use localstat 6
		ow=WindowWidth
		ox=WindowX
		oy=WindowY : If oy+winheight>##[$B590] Then oy=##[$B590]-winheight
	EndIf
	newtypewindow=False

	StringText$ 2,4
	workstart 1,ix,iy,0,1,"O"

	tracenum=0

	SizeLimits 160,winheight,640,winheight
	localstat 6,ox,oy,ow,winheight,$100f|$200000,"Newtype: "+typetitle$+" #"+Str$(tracenum),1,2,1
	arrmult 0

	typewidth=(typelength ASL 3)+8+16

	WLine ix+typewidth-5,iy,ix+typewidth-5,iy+InnerHeight-1,1

	WLocate 16,1
	NPrint "Address"
	newmem typelist()
	oy=9
	While globfree(typelist())
		WLocate 16,oy : oy+8
		NPrint LSet$(typelist()\name,typelength)
	Wend

	CNIF #test=0
		d_eval{"Addr "+typetitle$+"("+Str$(tracenum)+")"}
		stepcnt+1
		evalrequest=#_newtypewindow
	CELSE
		typepointer=Addr MidHandle(0)
		RefreshTypeWindow{}
	CEND
End Statement

;*****************************************************************

.mainstart
AddIDCMP $400

;Leading Edge Software *********************************

lmaxlen 1,640,256,1
lmaxlen 0,640,100,1
CNIF #test=1
	GetaShape 0,0,0,16,16
CEND

scrtitle$="LES Blitz Debugger v0.1"

regswinx.w=0
regswiny.w=135-87
Gosub InitRegsWin

newlocarr 0,0,"Help"
MenuItem 0,0,0,0,"Status register			","1"
MenuItem 0,0,0,1,"About debugger","2"
MenuItem 0,0,0,2,"About LES","3"

ww=440:wh=121
Gosub initgads

newlocarr 0,2,"Objects"
MenuItem 0,0,2,0,"==Trace objects==" : MenuColour 0,2,0,Off
ad.l=?MyTypes
num=1
Repeat
	ad2.l=Peek.l(ad)
	ad+4
	If ad2
		a$=Peek$(ad2)
		MenuItem 0,0,2,num,a$
		num+1
	EndIf
Until ad2=0

;Leading Edge Software *********************************

Gosub findsc:wx=0 : wy=135 : Gosub openwindow

CNIF #test=0
	d_sethandler{}
CEND

Gosub RedrawMem
Gosub RedrawRegs

.mainloop
Repeat
	Gosub getevent
	gad=GadgetHit
	i$=Inkey$
	evq.l=EventQualifier
	evw.l=EventWindow
	kbshift.b=evq AND %11
	If ev=256
		If MenuHit=1
			evw=0
			ev=64
			gad=ItemHit+1
			i$=""
		EndIf
		If MenuHit=2
			mytype.w=ItemHit-1
			NewTypeWindow{Peek.l(?MyTypes+(mytype ASL 2))}
			ev=0
		EndIf
	EndIf
	Select ev
		Case 2	;newsize
			Gosub CorruptWindow
		Case 4	;refresh
			Gosub CorruptWindow
		Case 64 ;gadget up
			If evw=6
				CNIF #test=0
					d_eval{"Maximum "+typetitle$}
					stepcnt+1
					evalrequest=#_newtypewindowmax
				CEND
			Else
				Select gad
					Case 1	;stop
						If dstatus<>2 Then !d_call{1}
					Case 2	;step
						stepcnt+1
					Case 3	;skip
						If dstatus=2 Then !d_call{8}:stepcnt+1
					Case 4	;trace
						##[$FE8C]:dstatus=1:statego=-1:##[$FE8D]
					Case 5	;run
						If dstatus
							cil=0:pb=0:Gosub refwindow:li=0:lt$=""
							##[$FE8C]
							prtcode=0:dstatus=0:statego=0
							##[$FE8D]
						EndIf
					Case 6	;<<
						If dstatus=2 Then Gosub backward
					Case 7	;>>
						If dstatus=2 AND pb<>0 Then Gosub forward
					Case 8	;execute
						t$="Execute...":Gosub getascii:ex$=t$
						If ex$ Then d_exec{ex$}:stepcnt+1
					Case 9	;evaluate
						t$="Evaluate...":Gosub getascii:ev$=t$
						If ev$ Then d_eval{ev$}:stepcnt+1
					Case 10
						regswin=NOT(regswin)
						If regswin
							localstat 2,regswinx,regswiny,640,87,%1110|$20|$200000,"Register window",-1,-1
							arrmult 0
							Gosub InitRegsWin
							Gosub RedrawRegs
						Else
							Use localstat 2
							regswinx=WindowX
							regswiny=WindowY
							CloseWindow 2
							Use localstat 0
;							Gosub InitRegsWin
;							BitMaptoWindow 0,2,0,0,ix+4,iy+1,630,88
						EndIf
					Case 11
						memwin=NOT(memwin)
						If memwin
							SizeLimits 640-ww,100,640-ww,256
							localstat 3,memwinx,memwiny,memwinw,memwinh,$2f|$200000,"Memory window",1,2
							arrmult 0
							Gosub RedrawMem
						Else
							Use localstat 3
							memwinx=WindowX
							memwiny=WindowY
							memwinw=WindowWidth
							memwinh=WindowHeight
							CloseWindow 3
							Use localstat 0
						EndIf
				End Select
			EndIf
		Case 256
			Select ItemHit
				Case 0
					ad=?help_sr
				Case 1
					ad=?help_debug
				Case 2
					ad=?help_LES
			End Select
			reply=##[$9B01]("Help...",Peek$(ad),"_Okay")
		Case 512
			If evw=1 OR evw=0
				CNIF #test=1
					End
				CELSE
					d_quit{}:stepcnt+1
				CEND
			Else
				Select evw
					Case 2
						regswin=NOT(regswin)
						Use localstat 2
						regswinx=WindowX
						regswiny=WindowY
						CloseWindow 2
						Use localstat 0
					Case 3
						memwin=NOT(memwin)
						Use localstat 3
						memwinx=WindowX
						memwiny=WindowY
						memwinw=WindowWidth
						memwinh=WindowHeight
						CloseWindow 3
						Use localstat 0
					Case 6
						CloseWindow 6
						Use localstat 0
						newtypewindow=False
				End Select
			EndIf
		Case 1024
			Select EventCode
				Case $42
					If newtypewindow Then RefreshTypeWindow{}
				Case $4c
					Gosub checkw
					flag.b=False
					num=1 : If kbshift Then num=ch
					If li
						For h=1 To num
							If Peek.l(il+4)
								il=Peek.l(il+4):aflag=True
							EndIf
						Next h
						If aflag Then Gosub prtcode2
					EndIf
				Case $4d
					Gosub checkw
					flag.b=False
					num=1 : If kbshift Then num=ch
					If li
						For h=1 To num
							If Peek.l(il)
								il=Peek.l(il):aflag=True
							EndIf
						Next h
						If aflag Gosub prtcode2
					EndIf
				Case $45
					CNIF #test=1
						End
					CELSE
						d_quit{}:stepcnt+1
					CEND
				Case $3e
					If memwin
						jump.w=4
						If kbshift Then jump=(memwinsize ASL 2)
						mempointer-jump
						If mempointer<0 Then mempointer=0
						Gosub RedrawMem
					EndIf
				Case $1e
					If memwin
						jump.w=4
						If kbshift Then jump=(memwinsize ASL 2)
						mempointer+jump
						Gosub RedrawMem
					EndIf
				Case $37
					If memwin
						If kbshift
							num.w=##[$9B07]("Memory location","Enter bitmap number to jump to:",0,9999,0)
							d_eval{"Addr Bitmap("+Str$(num)+")"}
							stepcnt+1
							evalrequest=#_memwindow
						Else
							strg$=##[$9B08]("Memory location","Enter address to jump to:",16)
							If strg$
								If Instr(strg$,":")
									strg$="?"+Left$(strg$,Instr(strg$,":"))
									d_eval{strg$}
									stepcnt+1
									evalrequest=#_memwindow
								Else
									a$=LCase$(Left$(strg$,1))
									mflag.b=False
									If a$="(" AND Len(strg$)=4
										strg$=Mid$(strg$,2,2)
										a$=LCase$(Left$(strg$,1))
										mflag=True
									EndIf
									If (a$="a" OR a$="d") AND Len(strg$)=2
										Gosub Movetoregister
									Else
										mempointer=Val(strg$)
									EndIf
									Gosub RedrawMem
								EndIf
							EndIf
						EndIf
					EndIf
			End Select
	End Select
Forever

.CorruptWindow:
	Select evw
		Case 0
			Gosub newsize:;Gosub refwindow
			Gosub refwindow
		Case 3
			Use localstat 3
			InnerCls
			memwinsize=InnerHeight ASR 3
			Gosub RedrawMem
		Case 6
			Use localstat 6
			RefreshTypeWindow{}
	End Select
Return

Movetoregister:
	a=Val(Right$(strg$,1))
	If a>=0 AND a<=7
		ad=Peek.l(?mybuffer)
		mempointer=Peek.l(ad+32+(32*(a$="d"))+(a ASL 2))
		If mflag Then mempointer=Peek.l(mempointer)
	Else
		reply.w=##[$9B01]("LES Debugger","Invalid register number!","Ok")
	EndIf
Return

.backoff
	If pb
		pb=0:i=Peek.l(buffmem+cb):mc=-1:Gosub prtcode
	EndIf
Return

.backward
	If pb=0 Then bb=cb
	bb-4 AND #buffand:i=Peek.l(buffmem+bb)
	If i=0
		If pb=0 Then Return
		bb+4 AND #buffand:t$="At end of buffer":Goto wprint
	EndIf
	pb=-1:mc=-1:Goto prtcode

.forward
	bb+4 AND #buffand
	If (bb+4 AND #buffand)=Peek.w(?bufferput) Then pb=0
	i=Peek.l(buffmem+bb):mc=-1:Goto prtcode

.checkw
;	If ih<8 Then wh=25+16:Goto openwindow
Return

.prtcode
;
;i=info
;
;mc=-1 to make current
;cil=current ins. line, cio=current offset
;
	Gosub checkw:il=Peek.l(i):io=Peek.w(i+4)-9
	If mc Then cil=il:cio=io:mc=0
	;
	Gosub prtcode2
	;
	li=i:Return

prtcode2
	BitMapOutput 1
	##[$A08C] 1
	;
	y=ym:i2=il
	While y<=ih-8 AND i2<>0
		Gosub prti2:y+8:i2=Peek.l(i2)
	Wend
	While y<=ih-8:y+8:Wend

	y=ym-8:i2=Peek.l(il+4)
	While y>=0 AND i2<>0
		Gosub prti2:y-8:i2=Peek.l(i2+4)
	Wend
	While y>=0:y-8:Wend
	;
	BitMaptoWindow 1,0,0,0,ix,iy,iw,ih
Return

.prti2 ;i2 at y
;
	GetReg a0,i2+9
	MOVE.l d_dadd(pc),a1:!d_call{3}:SUB.l d_dadd(pc),a1:SUBQ #1,a1
	MOVE.l d_dadd(pc),a0:MOVE.l a1,-(a0)
	;
	If i2=cil
		GetReg a0,i2+9:GetReg d0,cio:!d_call{7}:PutReg d0,cio2
		d_d$=Left$(d_d$,cio2)+" "+Mid$(d_d$,cio2+1)
	EndIf
	;
	;WLocate 0,y:WColour 1,0:Print LSet$(d_d$,cw)
	mylen.w=Len(d_d$) : If mylen>cw Then mylen=cw
	Locate 0,y ASR 3 : Print Left$(d_d$,mylen) ;LSet$(d_d$,cw)
	;
	If i2=cil
		Locate cio2,y ASR 3
		If pb
			Print ">"
		Else
			Colour 0,1 : Print " " : Colour 1,0
		EndIf
	EndIf
;
Return

.wprint
	Gosub checkw
	Use localstat 0
	WLine ix,wprinty,ix+iw-1,wprinty,1
	WBox ix,wprinty+1,ix+iw-1,iy+ih+11,0

;	Wline WLeftOff,iy+ih-1,WLeftOff+InnerWidth-1,iy+ih-1,1
;	WBox WLeftOff,iy+ih,WLeftOff+InnerWidth-1,WTopOff+InnerHeight-1,0
	WLocate WLeftOff,wprinty-iy+2:WColour 1,0:Print LSet$(t$,cw-1)
	lt$=t$
Return

.initgads
	StringText$ 4,2:SetString 2,1
	gx=4:gn=1
	newlocarr 0,1,"Shortcuts"
	Repeat
		Read t$,but$
		If t$<>""
			gf=0:If gn=10 Then gx+64
			workstart 0,gx,12,gf,gn,t$:gx+Len(t$)LSL 3+8
			MenuItem 0,0,1,gn-1,t$+"				 ",but$
			gn+1
		EndIf
	Until t$=""

;	Borders Off
Return

Data$ "BREAK","B","STEP","S","SKIP","I","TRACE","T"
Data$ "RUN","R","<<",",",">>",".","EXEC","X"
Data$ "EVAL","E","REGISTERS","D","MEMORY",""
Data$ "",""

.findsc
	;Screen 0,0,0,640,256,2,$8000,"LES Blitz2 Debugger v0.01",1,2
	If #test=1 Then Poke.l ?scrbehind+4,0
	ScreenTags 0,scrtitle$,?myscreentags
	CNIF #test=0
		localstat 4,0,0,640,256,$900|$200000,"",1,2
	CELSE
		localstat 4,0,0,640,256,$1900|$200000,"",1,2
	CEND
	arrmult 0
	CatchDosErrs
	s0=Peek.l(Addr allocst(0))
	sw=Peek.w(s0+12):sh=Peek.w(s0+14)
Return

.myscreentags:
							Dc.l	#LikeWorkbench,1
	scrdepth:	 Dc.l	#_Depth,2
	scrscroll:	Dc.l	#AutoScroll,1
	scrbehind:	Dc.l	#Behind,-1
							Dc.l	0,0

.refwindow
	If li<>0 OR lt$<>""
		If li Then i=li:Gosub prtcode
		WBox ix,iy+(ch ASL 3),ix+iw-1,wprinty-1,0
		t$=lt$:Gosub wprint
	EndIf
Return

.getascii
	strg$=##[$9B08]("LES Debugger",t$,128,stringinp$)
	t$=strg$
	stringinp$=t$
Return

.openwindow
	arrmult 0
	ScreensBitMap 0,2

	localstat 1,0,12,640,26,%1110|$20|$200000,"Program control window",1,2,0
	arrmult 0
	localstat 2,regswinx,regswiny,640,87,%1110|$20|$200000,"Register window",1,2
	arrmult 0
	SizeLimits 640-ww,100,640-ww,256
	localstat 3,wx+ww,wy,640-ww,wh,$2f|$200000,"Memory window",1,2
	arrmult 0
	SizeLimits ww,wh,640,256
	localstat 0,wx,wy,ww,wh,$2f|$200000,"Source code window",1,2:w0=Peek.l(Addr localstat(0))
	arrmult 0

	memwinheight=InnerHeight
	memwinsize=InnerHeight ASR 3

	Use localstat 0
	WindowInput 0

.newsize
	ix=WLeftOff:iy=WTopOff:iw=InnerWidth:ih=InnerHeight-12

	cw=iw LSR 3:ch=ih LSR 3
	ym=ch LSR 1:If ch&1=0 Then ym-1
	ym LSL 3:spc$=String$(" ",cw)
	wprinty=iy+ih+2

;	BitMap 1,cw ASL 3,ch ASL 3,1
Return

.stopit
	prtcode=-1:stepcnt=0:dstatus=2:statego=-1
Return

.getevent
	Repeat
		While locfree(d_e())
			If memwin Then Gosub RedrawMem
			If regswin Then Gosub RedrawRegs
			If newtypewindow Then RefreshTypeWindow{}
			Select d_e()\t
			Case 0	;supervisor mode error!
				t$="(*) "+d_e()\s:Gosub wprint:Gosub goterr
			Case 1	;user mode error!
				t$=d_e()\s:Gosub wprint:Gosub goterr
			Case 2	;eval/exec result!
				t$=d_e()\s
				Select evalrequest
					Case #_memwindow
						mempointer=Val(d_e()\s)
						Gosub RedrawMem
						t$=""
						evalrequest=0
					Case #_newtypewindow
						pntr.l=Val(d_e()\s)
						typepointer=pntr
						t$=""
						evalrequest=0
						newtypewindow=True
						RefreshTypeWindow{}
					Case #_newtypewindowmax
						pntr.l=Val(d_e()\s)
						tracenum=##[$9B07]("Trace object","Select object number to trace:",0,pntr-1)
						d_eval{"Addr "+typetitle$+"("+Str$(tracenum)+")"}
						stepcnt+1
						evalrequest=#_newtypewindow
						t$=""
						WTitle "Newtype: "+typetitle$+" #"+Str$(tracenum),scrtitle$
				End Select
				Gosub wprint
			Case 3	;dump code baby!
				cb=d_e()\i:i=Peek.l(buffmem+cb)
				pb=0:mc=-1:Gosub prtcode:prtbusy=0
			Case 4	;outa-here
				For h=0 To 9
					CloseWindow h
				Next h
				CloseScreen 0
				##[$FE99] buffmem,#bufflen:End
			End Select
			MaxLen d_e()\s=0:freelast d_e()
		Wend
		ev=Event:If ev=0 Then ##[$FF29]
	Until ev
Return

.RedrawMem:
	a$=String$(" ",10)
	b$="		"
	Use localstat 3
	ad.l=mempointer
	For h=0 To memwinsize-1
		HexWord{ad,&a$,2}
		WLocate 0,h ASL 3
		CheckNMove{Peek.l(ad),&b$}
		Print Hex$(ad)+" "+a$+" "+b$
		ad+4
	Next h
Return

.RedrawRegs:
	ad=Peek.l(?mybuffer)
	BitMapOutput 0
	Colour 1
	For h=0 To 7
;data regs
		Locate 3,h
		dreg.l=Peek.l(ad)
		Print Hex$(dreg)
		CheckNMove{dreg,&regb$}
		Print " ",regb$
;address regs
		Locate 21,h
		areg.l=Peek.l(ad+32)
		Print Hex$(areg)
		ad+4

		HexWord{areg,&rega$,6}

		CheckNMove{Peek.l(areg),&rega$+32}
		CheckNMove{Peek.l(areg+4),&rega$+37}
		CheckNMove{Peek.l(areg+8),&rega$+42}

		Print " ",rega$
	Next h
	mysr.w=Peek.w(ad+32+4)
	Locate 4,8 : Print Right$(Hex$(mysr),4),"		"
	GetSR{&sr$,mysr}
	Print sr$
	BitMaptoWindow 0,2,0,0,ix+4,iy+1,630,72
	Use localstat 0
Return

.InitRegsWin:
	BitMapOutput 0
	Locate 0,0
	##[$A08C] 0
	For h=0 To 7
		NPrint "d",h,"=--------			 a",h,"=--------"
	Next h
	Locate 0,8 : Print "sr= ----		-----"
Return

.goterr:
	ShowScreen 0
	Activate 0
Return

help_sr:
	Dc.b "Status register flags:",10
	Dc.b "		C: Carry",10
	Dc.b "		O: Overflow",10
	Dc.b "		Z: Zero",10
	Dc.b "		N: Negative",10
	Dc.b "		X: Extension",0

	Event
help_debug:
	Dc.b "This program handles runtime error",10,"debugging for programs compiled",10
	Dc.b "and run inside Blitz Basic 2.",10," ",10,"The original version was written by",10
	Dc.b "Mark Sibly of ACID software. This",10,"version has been updated and",10
	Dc.b "improved by Stephen McNamara of",10,"Leading Edge Software.",0

	Event
help_LES:
	Dc.b "Who are they?",0

MyTypes:
	Dc.l PaletteType
	Dc.l BitmapType
	Dc.l ModuleType
	Dc.l BlitzfontType
	Dc.l ShapeType
	Dc.l TapeType
	Dc.l StencilType
	Dc.l QueueType
	Dc.l FileType
	Dc.l 0

;Types: 1=byte, 2=word, 3=long, 4=string
PaletteType:
Dc.b "palette",0
Dc.b "*_pdata",0,3,-1
Dc.b "numcols",0,2,-1
Dc.b "[locol",0,2,-1
Dc.b "hicol",0,2,-1
Dc.b "speed",0,2,-1
Dc.b "var]",0,2,-1
Dc.b 0
BitmapType:
Dc.b "bitmap",0
Dc.b "_ebwidth",0,2,-1
Dc.b "_height",0,2,-1
Dc.b "_depth",0,2,-1
Dc.b "_pad",0,2,-1
Dc.b "_plane0",0,3,-1
Dc.b "_plane1",0,3,-1
Dc.b "_plane2",0,3,-1
Dc.b "_plane3",0,3,-1
Dc.b "_plane4",0,3,-1
Dc.b "_plane5",0,3,-1
Dc.b "_plane6",0,3,-1
Dc.b "_plane7",0,3,-1
Dc.b "_pad[22]",0,1,22
Dc.b "_isreal",0,2,-1
Dc.b 0

ModuleType:
Dc.b "module",0
Dc.b "_mt_data",0,3,-1
Dc.b "_length",0,3,-1
Dc.b 0

BlitzfontType:
Dc.b "blitzfont",0
Dc.b "_font",0,3,-1
Dc.b 0

ShapeType:
Dc.b "shape",0
Dc.b "_pixelwidth",0,2,-1
Dc.b "_pixelheight",0,2,-1
Dc.b "_depth",0,2,-1
Dc.b "_ebwidth",0,2,-1
Dc.b "_bltsize",0,2,-1
Dc.b "_xhandle",0,2,-1
Dc.b "_yhandle",0,2,-1
Dc.b "_data",0,3,-1
Dc.b "_cookie",0,3,-1
Dc.b "_onebpmem",0,2,-1
Dc.b "_onebpmemx",0,2,-1
Dc.b "_allbpmem",0,2,-1
Dc.b "_allbpmemx",0,2,-1
Dc.b "_pad[2]",0,1,2
Dc.b 0

TapeType:
Dc.b "tape",0
Dc.b "_ielist",0,3,-1
Dc.b "_timevalhi",0,3,-1
Dc.b "_timevallo",0,3,-1
Dc.b "_pad[4]",0,1,4
Dc.b 0

StencilType:
Dc.b "stencil",0
Dc.b "_ebwidth",0,2,-1
Dc.b "_height",0,2,-1
Dc.b "_data",0,3,-1
Dc.b 0

QueueType:
Dc.b "queue",0
Dc.b "*currentitem",0,3,-1
Dc.b "*nextitem",0,3,-1
Dc.b "_length",0,3,-1
Dc.b "_pad[4]",0,1,4
Dc.b 0

FileType:
Dc.b "file",0
Dc.b "_handle",0,3,-1
Dc.b "_reclen",0,3,-1
Dc.b "_pad[4]",0,1,4
Dc.b "*fields",0,3,-1
Dc.b "_buffer",0,3,-1
Dc.b "_flags",0,2,-1
Dc.b "_valid",0,2,-1
Dc.b "_seekoff",0,2,-1
Dc.b "_seek",0,3,-1
Dc.b 0

dummyvalue:
	Print "Cudd"
