; ascii translation of /Users/simon/Google Drive/amiga/w/disks/crap/bum6old/u/oz/casey/Process.bb2,/Users/simon/Google Drive/amiga/w/lha/bbold/disks/crap/bum6old/u/oz/casey/Process.bb2
WBStartup

Screen 0,5

MenuTitle 0,0,"PROJECT"
MenuItem 0,0,0,0,"CLS"
MenuItem 0,0,0,1,"SAVE"
SubItem 0,0,0,1,0,"IFF "
SubItem 0,0,0,1,1,"RAW "
MenuItem 0,0,0,2,"LOAD"
SubItem 0,0,0,2,0,"IFF "
SubItem 0,0,0,2,1,"RAW "

MenuItem 0,0,0,3,"QUIT"
MenuTitle 0,1,"Actions"
MenuItem 0,0,1,0,"Difference"
MenuItem 0,0,1,1,"Average"
MenuItem 0,0,1,2,"Invert"
MenuItem 0,0,1,3,"Histogram"
MenuItem 0,0,1,4,"Enhance"
MenuItem 0,0,1,5,"Threshold"
MenuItem 0,0,1,6,"Emboss"

Window 0,0,0,320,DispHeight-12,$1900,"Processor",22,24

WLocate 0,20
SetMenu 0

MaxLen path$=192
MaxLen name$=192

For p=0 To 31
Green p,Rnd(15),Rnd(15),Rnd(15)
Next p

ScreensBitMap 0,0
Dim table.l(255)
Dim Ptable.w(31)

sWindow.l=Peek.l(Addr Window(0))
sScreen.l=Peek.l(sWindow+46)
sBitMap.l=Peek.l(sScreen+88)

buf1.l=##[$FE97](81920,65537)
If buf1=0 Then Goto Fail1

buf2.l=##[$FE97](81920,65537)
If buf2=0 Then Goto Fail2

table.l=##[$FE97](1024,65537)
If table=0 Then Goto Fail3

;Grey Scale palette
Green 0,0,0,0
For v=0 To 15
Green v,v,v,v
Next v

For p=16 To 31
Green p,Rnd(15),Rnd(15),Rnd(15)
Next p
Green 24,15,0,0
Green 25,15,15,0
Green 26,0,0,15
min.w=0:max.w=0
limit.w=127 ;default threshold value

loopit:
ev.l=WaitEvent
mh.l=MenuHit
ih.l=ItemHit
sh.l=SubHit
If ev<>256 Then Goto loopit
If mh=1 Then Goto DoAction
If mh<>0 Then Goto loopit
If ih=3 Then Goto Fail3
If ih=2 AND sh=1 Then Gosub LoadRaw:Gosub Display
If ih=2 AND sh=0 Then Gosub LoadIFF
If ih=1 AND sh=1 Then Gosub SaveRaw
If ih=1 AND sh=0 Then Gosub SaveIFF
If ih=0 Then WCls

Goto loopit
DoAction:
If mh<>1 Then Goto loopit
If ih=0 Then Gosub Difference:Gosub Display
If ih=1 Then Gosub Average:Gosub Display
If ih=2 Then Gosub Invert:Gosub Display
If ih=3 Then Gosub DrawHistogram
If ih=4 Then Gosub Enhance:Gosub Display
If ih=5 Then Gosub Threshold:Gosub Display
If ih=6 Then Gosub Emboss:Gosub Display

Goto loopit


Fail3:
##[$FE99] table,1024
Fail2:
##[$FE99] buf2,81920
Fail1:
##[$FE99] buf1,81920

End

LoadRaw:
f$="scene"+Chr$(0)
fHandle.l=0
fHandle=##[$FE01](f$,1005)
If fHandle=0 Then Return
rLen.l=##[$FE03](fHandle,buf1,81920)
If rLen<0 Then Return
If fHandle<>0 Then ##[$FE02] fHandle
ShowScreen 0
;Grey Scale palette
For v=0 To 15
Green v,v,v,v
Next v
For v=16 To 31
Green v,Rnd(15),Rnd(15),Rnd(15)
Next v
Return

SaveRaw:
Return

LoadIFF:
Green 0,8,8,8
Green 1,0,0,0
Green 2,15,15,15
Green 3,14,14,0

p$=""
p$=FileRequest$("FileToLoad",path$,name$)
If p$="" Then Return

LoadScreen	0,p$
LoadPalette 0,p$

Use SetCycle 0
ShowScreen 0

For v=0 To 31
r.w=Blue(v)
g.w=Palette(v)
b.w=PalRGB(v)
a.w=Int((r+g+b)/3)
Ptable(v)=a

;RGB v,a,a,a
Next v

Gosub Convert

;Grey Scale palette
For v=0 To 15
Green v,v,v,v
Next v
For v=16 To 31
Green v,Rnd(15),Rnd(15),Rnd(15)
Next v
Gosub Store
Return

SaveIFF:
Green 0,8,8,8
Green 1,0,0,0
Green 2,15,15,15
Green 3,14,14,0

p$=""
p$=FileRequest$("FileToSave",path$,name$)
Green 0,0,0,0
Green 1,1,1,1
Green 2,2,2,2
Green 3,3,3,3

If p$="" Then Return
ShowScreen 0
Gosub Display
SaveScreen 0,p$

Return

DrawHistogram:
Gosub ComputeMaxMin
For x=0 To 255
q.l=Peek.l(table+x*4)
q=q/30
If q>199 Then q=199
Line x,0,x,q,27
Next x
Line min,0,min,199,28
Line max,0,max,199,29
Return

ComputeMaxMin:
Gosub PixelCount
min.w=0:max.w=0
For x=0 To 255
q.l=Peek.l(table+x*4)
If q<>0 AND min=0 Then min=x
If q<>0 AND max<x Then max=x
Next x
Return

PixelCount:
For x=0 To 255:Poke.l table+x*4,0:Next
GetReg d3,table
GetReg d1,buf1
MOVE.l d1,a2
CLR.l	d5
LLP1:
MOVE.l d3,a3
CLR.l	d0
MOVE.b (a2)+,d0
LSL.l	#2,d0
ADDA.l d0,a3
MOVE.l (a3),d1
ADDQ	 #1,d1
MOVE.l d1,(a3)
ADDQ.l #1,d5
CMP.l	#81920,d5
BNE		LLP1
Return

Store:
GetReg d0,sBitMap
GetReg d1,buf1
MOVEM.l d0-d7/a0-a6,-(a7)
MOVE.l d0,a0
MOVE.l d1,a6
MOVE.l 8(a0),a1
MOVE.l 12(a0),a2
MOVE.l 16(a0),a3
MOVE.l 20(a0),a4
CLR.l	d6		 ;count words
LP1:
MOVE.w (a1)+,d1
MOVE.w (a2)+,d2
MOVE.w (a3)+,d3
MOVE.w (a4)+,d4
CLR.l	d7		 ;count bits
LP2:
CLR.l	d0
ROXL.w #1,d4
ROXL.b #1,d0
ROXL.w #1,d3
ROXL.b #1,d0
ROXL.w #1,d2
ROXL.b #1,d0
ROXL.w #1,d1
ROXL.b #1,d0
MULU	 #17,d0
MOVE.b d0,(a6)+ ;store in buf1
ADDQ	 #1,d7
CMP.w	#16,d7
BNE		LP2
ADDQ.l #1,d6
CMP.l	#5120,d6
BNE		LP1
MOVEM.l (a7)+,d0-d7/a0-a6
Return

Display:
GetReg d0,sBitMap
GetReg d1,buf1
MOVEM.l d0-d7/a0-a6,-(a7)
MOVE.l d0,a0
MOVE.l d1,a6
MOVE.l 8(a0),a1
MOVE.l 12(a0),a2
MOVE.l 16(a0),a3
MOVE.l 20(a0),a4
MOVE.l 24(a0),a5
CLR.l	d6		 ;count bytes
LL1:
CLR.l	d7		 ;count bits
LL2:
CLR.l	d0
MOVE.b (a6)+,d0 ;read buf1
DIVU	 #17,d0
ROXR.b #1,d0
ROXL.w #1,d1
ROXR.b #1,d0
ROXL.w #1,d2
ROXR.b #1,d0
ROXL.w #1,d3
ROXR.b #1,d0
ROXL.w #1,d4
ADDQ	 #1,d7
CMP.w	#16,d7
BNE		LL2
MOVE.w d1,(a1)+
MOVE.w d2,(a2)+
MOVE.w d3,(a3)+
MOVE.w d4,(a4)+
MOVE.w #0,(a5)+
ADDQ.l #1,d6
CMP.l	#5120,d6
BNE		LL1
MOVEM.l (a7)+,d0-d7/a0-a6
Return

Enhance:
Gosub ComputeMaxMin
GetReg d1,min
GetReg d2,max
GetReg d3,buf1
MOVEM.l d0-d6/a0-a6,-(a7)

;subtract min from pixel values

MOVE.l d3,a1
CLR.l	d5
LPY1:
CLR.l	d0
MOVE.b (a1),d0
SUB.b	d1,d0		;pixel-min
BCC		skp
CLR.l	d0			 ;if <0 then=0
skp:
MOVE.b d0,(a1)+
ADDQ.l #1,d5
CMP.l	#81920,d5
BNE		LPY1

;multiply pixel values by factor

SUB.w	d1,d2		 ;d2=max-min
MOVE.w #$FF00,d1
DIVU.w d2,d1		 ;d1=factor
CLR.l	d5
MOVE.l d3,a1
LPY2:
CLR.l	d0
CLR.l	d2
MOVE.b (a1),d0
MULU.w d1,d0
LSR.w	#8,d0
MOVE.b d0,(a1)+
ADDQ.l #1,d5
CMP.l	#81920,d5
BNE		LPY2
MOVEM.l (a7)+,d0-d6/a0-a6
Return

Average:
GetReg d0,buf1
GetReg d1,buf2
MOVE.l d0,a1
MOVE.l d1,a2
MOVE.l #81920,d3
LPA:
CLR.l	d0
CLR.l	d1
MOVE.b -321(a1),d1
ADD.w	d1,d0
MOVE.b -320(a1),d1
ADDX.w	d1,d0
MOVE.b -319(a1),d1
ADDX.w d1,d0
MOVE.b -1(a1),d1
ADDX.w d1,d0
MOVE.b 1(a1),d1
ADDX.w d1,d0
MOVE.b 321(a1),d1
ADDX.w d1,d0
MOVE.b 320(a1),d1
ADDX.w d1,d0
MOVE.b 319(a1),d1
ADDX.w d1,d0
LSR.w	#3,d0
MOVE.b (a1)+,d1
ADDX.w d1,d0
LSR.w	#1,d0
MOVE.b d0,(a2)+
SUBQ.l #1,d3
BNE		LPA
GetReg d0,buf1
GetReg d1,buf2
MOVE.l d0,a1
MOVE.l d1,a2
MOVE.l #81920,d3
LPM:
MOVE.b (a2)+,(a1)+
SUBQ.l #1,d3
BNE		LPM
Return

Difference:
GetReg d0,buf1
GetReg d1,buf2
MOVE.l d0,a1
MOVE.l d1,a2
MOVE.l #81920,d3
LPD:
CLR.l	d0
CLR.l	d1
MOVE.b -321(a1),d1
ADD.w	d1,d0
MOVE.b -320(a1),d1
ADDX.w	d1,d0
MOVE.b -319(a1),d1
ADDX.w d1,d0
MOVE.b -1(a1),d1
ADDX.w d1,d0
MOVE.b 1(a1),d1
ADDX.w d1,d0
MOVE.b 321(a1),d1
ADDX.w d1,d0
MOVE.b 320(a1),d1
ADDX.w d1,d0
MOVE.b 319(a1),d1
ADDX.w d1,d0
LSR.w	#3,d0
MOVE.b (a1)+,d1
SUB.w	d1,d0
BPL		SKD
CLR.l	d0
SKD:
LSL.w	#4,d0
MOVE.b d0,(a2)+
SUBQ.l #1,d3
BNE		LPD

GetReg d0,buf1
GetReg d1,buf2
MOVE.l d0,a1
MOVE.l d1,a2
MOVE.l #81920,d3
LPM1:
MOVE.b (a2)+,(a1)+
SUBQ.l #1,d3
BNE		LPM1
Return

Threshold:
GetReg d0,buf1
GetReg d1,limit
MOVE.l d0,a1
MOVE.l #81920,d3
LPT:
CLR.l	d0
CLR.l	d2
MOVE.b (a1),d0
CMP.w	d1,d0
BMI		SKT
MOVE.w #255,d2
SKT:
MOVE.b d2,(a1)+
SUBQ.l #1,d3
BNE		LPT
Return

Invert:
GetReg d0,buf1
MOVE.l d0,a1
MOVE.l #81920,d3
LPI:
MOVE.b #255,d1
MOVE.b (a1),d0
SUB.b	d0,d1
MOVE.b d1,(a1)+
SUBQ.l #1,d3
BNE		LPI
Return


Convert:
GetReg d0,sBitMap
GetReg d1,buf1
MOVEM.l d0-d7/a0-a6,-(a7)
MOVE.l d0,a0
MOVE.l d1,a6
MOVE.l 8(a0),a1
MOVE.l 12(a0),a2
MOVE.l 16(a0),a3
MOVE.l 20(a0),a4
MOVE.l 24(a0),a5
CLR.l	d6		 ;count words
OLP1:
MOVE.w (a1)+,d1
MOVE.w (a2)+,d2
MOVE.w (a3)+,d3
MOVE.w (a4)+,d4
MOVE.w (a5)+,d5
CLR.l	d7		 ;count bits
OLP2:
CLR.l	d0
ROXL.w #1,d5
ROXL.b #1,d0
ROXL.w #1,d4
ROXL.b #1,d0
ROXL.w #1,d3
ROXL.b #1,d0
ROXL.w #1,d2
ROXL.b #1,d0
ROXL.w #1,d1
ROXL.b #1,d0
;MULU	 #17,d0
MOVE.b d0,(a6)+ ;store in buf1
ADDQ	 #1,d7
CMP.w	#16,d7
BNE		OLP2
ADDQ	 #1,d6
CMP.l	#5120,d6
BNE		OLP1
MOVEM.l (a7)+,d0-d7/a0-a6

;change values

GetReg d0,buf1
GetReg d1,&Ptable(0)
MOVE.l d0,a1
MOVE.l d1,a2
MOVE.l #81920,d3
LOPT:
CLR.l	d0
CLR.l	d1
MOVE.b (a1),d0
;DIVU	 #17,d0
MOVE.w d0,d1
MOVE.l a2,a3
LSL.w	#1,d1 ;d1 x 2
ADD.l	d1,a2
MOVE.w (a2),d0	;get new
MOVE.l a3,a2
;MULU	 #17,d0
MOVE.b d0,(a1)+
SUBQ.l #1,d3
BNE		LOPT

GetReg d0,sBitMap
GetReg d1,buf1
MOVEM.l d0-d7/a0-a6,-(a7)
MOVE.l d0,a0
MOVE.l d1,a6
MOVE.l 8(a0),a1
MOVE.l 12(a0),a2
MOVE.l 16(a0),a3
MOVE.l 20(a0),a4
MOVE.l 24(a0),a5
CLR.l	d6		 ;count bytes
OLL1:
CLR.l	d7		 ;count bits
OLL2:
CLR.l	d0
MOVE.b (a6)+,d0 ;read buf1
;DIVU	 #17,d0
ROXR.b #1,d0
ROXL.w #1,d1
ROXR.b #1,d0
ROXL.w #1,d2
ROXR.b #1,d0
ROXL.w #1,d3
ROXR.b #1,d0
ROXL.w #1,d4
ROXR.b #1,d0
ROXL.w #1,d5
ADDQ	 #1,d7
CMP.w	#16,d7
BNE		OLL2
MOVE.w d1,(a1)+
MOVE.w d2,(a2)+
MOVE.w d3,(a3)+
MOVE.w d4,(a4)+
MOVE.w d5,(a5)+
ADDQ	 #1,d6
CMP.l	#5120,d6
BNE		OLL1
MOVEM.l (a7)+,d0-d7/a0-a6

Return

Emboss:
GetReg d0,buf1
GetReg d1,buf2
MOVE.l d0,a1
MOVE.l d1,a2
MOVE.l #81920,d3
LPAA:
CLR.l	d0
CLR.l	d1
MOVE.b -321(a1),d1
ADD.w	d1,d0
MOVE.b -320(a1),d1
ADDX.w	d1,d0
MOVE.b -1(a1),d1
ADDX.w d1,d0
MOVE.b -319(a1),d1
ADDX.w d1,d0
LSR.w	#2,d0
MOVE.b (a1)+,d1
SUB.b	d1,d0
LSL.b	#3,d0
MOVE.b #127,d4
CMP.b	#96,d0
BGT		ok
ADD.b	d0,d4
ok:
MOVE.b d4,(a2)+
SUBQ.l #1,d3
BNE		LPAA
GetReg d0,buf1
GetReg d1,buf2
MOVE.l d0,a1
MOVE.l d1,a2
MOVE.l #81920,d3
LPMM:
MOVE.b (a2)+,(a1)+
SUBQ.l #1,d3
BNE		LPMM
Return

