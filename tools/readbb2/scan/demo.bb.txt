; ascii translation of /Users/simon/Google Drive/amiga/w/abc/acid/3d/old/demo.bb,/Users/simon/Google Drive/amiga/w/abcstuff/acid/3d/old/demo.bb,/Users/simon/Google Drive/amiga/w/lha/bbold/3d/demo.bb
;
; hmmm demo of Blitz2 3D library
;
; not looking that cool at present....
; poor man's 3d, wot a load of shit...

#iso=0				 ;change to 1 for red/blue 3d glasses

DEFTYPE .w

NEWTYPE .xyz:x.q:y:z:End NEWTYPE

NEWTYPE .matrix:m.w[9]:End NEWTYPE

NEWTYPE .part3d
	*sister.part3d
	*child.part3d
	*parent.part3d
	*frame.w
	rota.xyz:rotv:rot
	posa.xyz:posv:pos
	id.matrix
	vertpos.w[3]
	view.matrix
	animvals.w[16]
End NEWTYPE

.initialise

	BitMap 0,320,256,3
	BitMap 1,320,256,3
	BitMap 2,320,8,3:Use BitMap 2:For y=0 To 7:Line 0,y,319,y,y:Next

	##[$AB82] 0,0,1,2,0,50*65536+50 ;,0,0,320,200
	##[$AB82] 1,0,1,2,0,60*65536+60,256,0,64,64

	##[$AB01] 1,2 ;1,6

	Gosub setuppalette

	BLITZ:BlitzKeys On

	InitCopList 0,44,256,$13003,8,8,0
	DisplayPalette 0,0
	CreateDisplay 0

	Mouse On:h=1024:MouseArea -h,-h,h,h

	DEFTYPE .part3d *ship,*curr,*scan

	Dim List shapes.part3d(200)

	Gosub setupshapes

; wow interupt routine can do the main move routine

SetInt 5
	update-1:If update<0
		USEPATH *ship
		mx=MouseXSpeed:my=MouseYSpeed
		j=Joyb(0):d=1:If j AND 2 Then d=-1:j=1
		;
		\rot\z+mx ASL 2
		\rot\y+\rot\z ASR 4				 ;(\rot\z ASR 5) *j
	;	\rot\x+my
		\pos\y-my*4
	;(\pos\y+my,-100,-500)
		\animvals[0]=d	 ;1
		\animvals[1]=j*7
		\animvals[2]=3
		##[$AA02] shapes()
		If \pos\y>0 Then \pos\y=0
		update=3
	EndIf
End SetInt

.mainloop
	While Inkey$=""
		VWait
		DisplayBitMap 0,db
		db=1-db
		##[$AB02] 0,db,shapes(),*ship
	Wend
	VWait 4:End

.setupshapes
	USEPATH shapes()
	Gosub pyramids
	Gosub viewer
	Return

pyramids:
	d=1000
	For x=-3 To 3
	 For y=-3 To 3
		 If AddItem (shapes())
			 \pos\x=x*d,0,y*d
			 \rot\x=0,0,0
			 \frame=?pyramid
			 \animvals[0]=1
		 EndIf
	 Next
	Next
	Return

viewer:
	AddItem shapes()							;viewer
	*ship.part3d=shapes()
	Return

;		Gosub movenme
;		Gosub moveship
;		Gosub dofire
;		DrawScene3D 0,db,shapes(),*ship
;		*scan\pos\x=*ship\pos\x
;		*scan\pos\z=*ship\pos\z
;		*scan\rot\y=*ship\rot\y
;		DrawScene3D 1,db,shapes(),*scan
;	Wend
;	VWait 4:End


.dofire
	USEPATH shapes()
	If Joyb(0)&2 AND rl<1
		If AddItem(shapes())
			\pos\x=*ship\pos\x,*ship\pos\y,*ship\pos\z
			\rot\x=*ship\rot\x,*ship\rot\y,*ship\rot\z
			\rotv\x=0,0,0
			\posv\x=0,0,0
			\frame=?sphere
			\animvals[0]=-1
			\animvals[1]=8
			\animvals[2]=3
			\animvals[15]=20 ;life time
		EndIf
		rl=16
	Else
		If Joyb(0)&2=0 Then rl=-1
		rl-1
	EndIf
	Return

.movenme
	USEPATH shapes()
	ResetList shapes():*curr=*ship
	While NextItem(shapes())
		Select \frame
			Case ?dart
				\rot\y=##[$AA03](shapes(),*ship)
				\rot\x=##[$AA04](shapes(),*ship)
				*curr=shapes()
			Case ?sphere
				\animvals[15]-1
				If \animvals[15]<1 Then KillItem shapes()
		End Select
	Wend
	Return

.moveship:
	USEPATH *ship ;shapes()
	mx=MouseXSpeed
	my=MouseYSpeed
	j=Joyb(0)&1
	\rot\z+mx ASL 2
	\rot\y+\rot\z ASR 4				 ;(\rot\z ASR 5) *j
;	\rot\x+my
	\pos\y-my*4
;(\pos\y+my,-100,-500)
	\animvals[0]=-1
	\animvals[1]=j*7
	\animvals[2]=3
	##[$AA02] shapes()
	If \pos\y>0 Then \pos\y=0
	Return

.setuppalette
	Restore rgbcols
	For i=0 To 7
		Read rr.w,gg.w,bb.w:StopCycle 0,i,rr,gg,bb
	Next
	Return
rgbcols:
	Data.w 0,0,0,2,10,5,5,4,11,12,12,12
	Data.w 8,8,8,13,9,0,8,10,14,12,3,2

.setup3d
	USEPATH shapes()
	d=10
	For x=0 To 3
	 For y=0 To 3
		 If AddItem (shapes())
			 \pos\x=x*d,0,y*d
			 \rot\x=0,0,0
			 \frame=?pyramid
			 \animvals[0]=1
		 EndIf
	 Next
	Next

	For i=1 To 10								;16 boxes
		If AddItem(shapes())
			USEPATH shapes()
			\pos\x=Rnd(15535),0,Rnd(15535)
			\rot\x=0,0,0
			\rotv\x=0,0,0
			\frame=?dart
			\animvals[0]=-1
			\animvals[1]=4
			\animvals[2]=3
		EndIf
	Next

	AddItem shapes()							;viewer
	*ship.part3d=shapes()

	AddItem shapes()							;scanner
	*scan.part3d=shapes()
	\pos\x=0,-20000,0			;hi up
	\rot\x=-1024,0,0			 ;pointing straight down
	\animvals[0]=1

	Return

;-----------------------------------------------------------------------

.frames:


.dart
	Dc.l 0,0
	Dc.w $10,25000,0
	Dc.w 6						 ;7 shifted verts
	Dc 0,0,7
	Dc -8,0,-8
	Dc 8,0,-8
	Dc -7,0,-8
	Dc 7,0,-8
	Dc 0,-7,-8
	Dc.w 0
	Dc.w 0
	Dc.w 0
	Dc 3,0,$10,$30,$20,0,3,0,0 ;top
	Dc 3,0,$60,$40,$10,0,4,0,0 ;rtop
	Dc 3,0,$50,$60,$10,0,5,0,0 ;ltop
	Dc 3,0,$40,$60,$50,0,6,0,0 ;back
	Dc 3,0,$10,$20,$30,0,7,0,0 ;bottom
	Dc 0,0

.pyramid:
	Dc.l 0,0
	Dc.w $100,20000,0
	#p=9:#q=-9:#h=-10
	Dc.w 5
	Dc #p,0,#q
	Dc #p,0,#p
	Dc #q,0,#p
	Dc #q,0,#q
	Dc 0,#h,0
	Dc.w 0
	Dc.w 0
	Dc.w 0
	Dc.w 3,0,$20,$10,$50,0,$3,0,0
	Dc.w 3,0,$30,$20,$50,0,$4,0,0
	Dc.w 3,0,$40,$30,$50,0,$3,0,0
	Dc.w 3,0,$10,$40,$50,0,$4,0,0
	Dc.w 0,0

.sphere:
	Dc.l 0,0
	Dc.w 400,6000,0
	Dc.w 0
	Dc.w 0
	Dc.w 0
	Dc.w 0
	Dc 2,2,$00,150
	Dc.l $3,0
	Dc.w 0,0

.plane:
	#s=14:#m=-14
	Dc.l 0,0
	Dc.w $10,25000,0
	Dc.w 4
	Dc #m,#m,0
	Dc #s,#m,0
	Dc #s,#s,0
	Dc #m,#s,0
	Dc.w 0,0,0
	Dc.w 4,0,$10,$20,$30,$40,$0000,$0000,0,0
	Dc.w 4,0,$40,$30,$20,$10,$0000,$0000,0,0
;	Dc.w 4,0,$10,$20,$30,$40,$0100,$0002,0,0
;	Dc.w 4,0,$40,$30,$20,$10,$0100,$0002,0,0
	Dc.w 0,0


.cube:
	Dc.l 0,0
	Dc.w $10,16000,0

	#s=8:#m=-8

	Dc.w 8
	Dc #m,#m,#s
	Dc #s,#s,#m
	Dc #s,#s,#s
	Dc #m,#s,#m
	Dc #s,#m,#m
	Dc #s,#m,#s
	Dc #m,#s,#s
	Dc #m,#m,#m

	Dc.w 0
	Dc.w 0
	Dc.w 0

	Dc.w 4,0,$10,$70,$30,$60,$6666,$1,0,0
	Dc.w 4,0,$10,$80,$40,$70,$2222,$2,0,0
	Dc.w 4,0,$10,$60,$50,$80,$3333,$3,0,0
	Dc.w 4,0,$20,$50,$60,$30,$4444,$4,0,0
	Dc.w 4,0,$20,$40,$80,$50,$5555,$5,0,0
	Dc.w 4,0,$20,$30,$70,$40,$7777,$7,0,0

	Dc.w 0,0

.grid:
	Dc.l 0,0
	Dc.w $10,6000,0

	#s=8:#m=-8

	Dc.w 8
	Dc #m,#m,#s
	Dc #s,#s,#m
	Dc #s,#s,#s
	Dc #m,#s,#m
	Dc #s,#m,#m
	Dc #s,#m,#s
	Dc #m,#s,#s
	Dc #m,#m,#m

	Dc.w 0
	Dc.w 0
	Dc.w 0

	Dc.w 32,1	;16 lines

	Dc $10,$70,$70,$30,$30,$60,$60,$10
	Dc $10,$80,$80,$40,$40,$70,$70,$10
	Dc $10,$60,$60,$50,$50,$80,$80,$10
	Dc $20,$50,$50,$60,$60,$30,$30,$20
;	Dc $20,$40,$40,$80,$80,$50,$50,$20
;	Dc $20,$30,$30,$70,$70,$40,$40,$20
	Dc 2,0,0,0

	Dc.w 0,0


.myshape:
	Dc.l 0,0
	Dc.w 200,6000,0
	Dc.w 0
	Dc.w 0
	Dc.w 0
	Dc.w 0
	Dc	 2,4,$00,0
	Dc.l 0,0
	Dc.w 0,0
