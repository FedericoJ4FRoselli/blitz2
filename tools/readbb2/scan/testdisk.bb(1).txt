; ascii translation of /Users/simon/Google Drive/amiga/w/sw/testdisk.bb
;
; read guardian data disk program
;

;sa.l=LoadSeg_("rawseg"):sa LSL 2:sa+4

sphead.l=128
spdata.l=$20000
psize.l=sphead+spdata								 ;+split+map

diskbuff.l=25600

InitBank 0,psize,0				 ;a pattern (psize)
InitBank 1,diskbuff,65538	;floppy disk buffer (25600)

Poke.l ?pbuff,BankLoc(0)
Poke.l ?dbuff,BankLoc(1)

BLITZ
VWait 20

lmaxlen 0,320,256,1
InitCopList 0,1
DisplayBitMap 0,0
CreateDisplay 0
BitMapOutput 0

StopCycle 0,0,0,0,0
StopCycle 0,1,0,15,0
DisplayPalette 0,0

Repeat
	BlockScroll:VWait 2:Locate 0,20:Print "Insert Disk and Press Mouse Button"
	;
	MouseWait
	;
	MOVE.l	#0,d0
	MOVE.l	#0,wanted
	MOVE.l	dbuff(pc),d1
	MOVE.l	d1,a0
	CLR.l	 (a0)
	BSR		 findvolume
	MOVE.l	d7,vname
	;
	r.l=Peek.l(?vname)
	If r=0 OR r=-1
		BlockScroll:VWait 2:Locate 0,20:Print "DISK IS NOT GOOD, INFACT IT IS BAD"
	Else
		BlockScroll:VWait 2:Locate 0,20:Print "		DISK ID IS ",Peek$(?vname)
		If Len(Peek$(?vname))<4 Then Print "????"
	EndIf
	VWait 100
Forever

dbuff:Dc.l 0
pbuff:Dc.l 0
vname:Dc.l 0,0,0
;loadfile: ;d0=filename,d1=buffer d2=chipbuffer

; readlen - 512*24	xc does 512*26

#useblit	= 0											 ;use blitter?
#readlen	= 512*24									;how many raw bytes in a track...
#datalen	= #readlen/2							;how much data on a track
#tracks	 = 160										 ;how many tracks
#disksize = #datalen*(#tracks-1)
#sync		 = $4489									 ;sync marker.
#oddsync	= $4489									 ;for odd tracks!
#sync2		= $2aaa									 ;following sync for safety.
#readlen2 = #readlen+16
#datalen2 = #readlen2/2

#bufflen=#readlen+#datalen+#datalen+1024 ;1024

#control=$bfde00
#bitint=1

;Function.l LoadFile{name.l,memory.l,chipbuffer.l}
;
loadfile:
;
;return d1=start address, d0=length : d0=0 if error!
;dir track already loaded into dirbuff...
 MOVEM.l a3-a6,-(a7)
 LEA PLANETWO(pc),a0:MOVE.l d2,(a0)
 MOVE.l d0,a0:MOVE.l d1,a1							;:MOVE.l d2,PLANETWO
 LEA loadat(pc),a2	;save start address..
 MOVE.l a1,(a2)
 MOVEM.l a0/a1,-(a7)
 BSR InitAll
 BSR ReadDir
 MOVEM.l (a7)+,a0/a1
 MOVE.l dirbuff(pc),a1
 MOVE 4(a1),d1
 BEQ lerr
 LEA 12(a1),a1
 SUBQ #1,d1
lloop:
 MOVE.l a0,a2
 MOVE.l a1,a3
lloop2:
 MOVE.b (a2)+,d6
 MOVE.b (a3)+,d7
 CMP.b #"A",d6
 BCS nolcd6
 CMP.b #"Z",d6
 BHI nolcd6
 OR.b #$20,d6
nolcd6:
 CMP.b #"A",d7
 BCS nolcd7
 CMP.b #"Z",d7
 BHI nolcd7
 OR.b #$20,d7
nolcd7:
 CMP.b d6,d7
 BNE nnext
 TST.b -1(a3)
 BNE lloop2
 BRA gotfile
nnext:
 LEA 40(a1),a1
 DBF d1,lloop
lerr		;can't find file!!
 MOVEQ #0,d0
 RTS
gotfile		;a1=dir entry
 MOVE 36(a1),d7 ;track
 MOVEQ #0,d6
 MOVE 38(a1),d6 ;offset
 MOVE.l 32(a1),d5 ;length
 LEA loadlen(pc),a0
 MOVE.l d5,(a0)

 LEA loadat(pc),a0	;get start address..
 MOVE.l (a0),d0
 MOVE.l d0,a5
 ADDQ.l #7,d5
 AND #$fff8,d5 ;align length!

;gotta seek first track...

 SUB track(pc),d7
 BPL in

;seek backwards!

 MOVE #12890-2150,d0 ;cause we're reversing dir.
 BSR wwait
 NEG d7
 SUBQ #1,d7
outloop
 BSR stepoutquick
 DBF d7,outloop
 MOVE #12890-2150,d0 ;cause we're reversing dir.
 BSR wwait
 BRA here

in:
 BEQ here
 SUBQ #1,d7
inloop
 BSR stepin
 DBF d7,inloop

here	;at correct start track...

 BSR decodesetup

 BSR readraw
 BSR startstep

 MOVE.l readbuff(pc),a1
 ADD.l d6,a1
 MOVEQ #0,d3
 MOVE #datalen,d3
 SUB d6,d3
 BSR decodeme

qloop
 BSR finishwait

 TST.l d5
 BEQ readdone

 BSR readraw
 BSR startstep

 MOVE.l readbuff(pc),a1
 MOVEQ #0,d3
 MOVE #datalen,d3
 BSR decodeme

 BRA qloop

readdone:

 BSET #2,$bfd100 ;upper head		change to bclr!
 BSET #1,$bfd100 ;dir=out
'loop2
 BSR dostepquick
 BTST #4,$bfe001 ;track 0?
 BNE 'loop2
; BSR dostepquick
; BRA 'loop2

'skip

 BSR finishdisk
 MOVE.l loadat(pc),d1
 MOVE.l loadlen(pc),d0
 MOVEM.l (a7)+,a3-a6:RTS

decodesetup:
 MOVE.l #$55555555,d2
 RTS

decodeme:
 CMP.l d3,d5
 BCC 'skip
 MOVE.l d5,d3

'skip
 LEA datalen2(a1),a2
 SUB.l d3,d5
 LSR #2,d3
 SUBQ #1,d3

'loop:
 MOVE.l (a1)+,d0
 AND.l d2,d0
 ADD.l d0,d0
 MOVE.l (a2)+,d1
 AND.l d2,d1
 OR.l d1,d0
 MOVE.l d0,(a5)+
 DBF d3,'loop
 RTS

ReadDir:
 BSR startdisk
 BSR readraw
 MOVE.l readbuff(pc),a1
 MOVE.l dirbuff(pc),a5
 MOVE.l #datalen,d3
 MOVE.l d3,d5
 BSR decodesetup
 BRA decodeme

startstep:
 BSET #1,$bfd100
 LEA track(pc),a0
 ADDQ #1,(a0)
 MOVE track(pc),d0
 LSR #1,d0
 BCC 'skip
 BSET #2,$bfd100 ;side
 MOVEQ #72,d0
 BRA startwait
'skip
 BCLR #2,$bfd100 ;side
 NOP
 BCLR #0,$bfd100
 NOP
 NOP
 BSET #0,$bfd100 ;start step
 MOVE #2150+1000,d0 ;#12890,d0
 BRA startwait

readraw:
 MOVE.l syncbuff2(pc),$020(a6)
 MOVE #sync,$07e(a6)
 LEA track+1(pc),a0
 BTST #0,(a0)
 BEQ 'skip
 MOVE #oddsync,$07e(a6)
'skip
 MOVE #$8400,$09e(a6)
 MOVE #2,$09c(a6)
 MOVE #$4000,$024(a6)
 MOVE #$8000+readlen2/2+2,$024(a6)
 MOVE #$8000+readlen2/2+2,$024(a6)

 LEA timeouts(pc),a0
 MOVE #500,(a0)

'loop3
 MOVE #7159+80,d0
 BSR startwait

'loop
 BTST #1,$01f(a6)
 BNE dmadone
 BTST #0,control				;$bfde00 ;was $f00 *********************
 BNE 'loop

 SUBQ #1,(a0)
 BNE 'loop3

;timeout!

dmadone
 MOVE #$4000,$024(a6)
 MOVE.b #$fe,d0
 AND.b d0,control						;$bfdf00			;stop timer.
 BTST #bitint,$bfdd00				;clear any int.

;!!!!! get the checksum!!!!!
 MOVEM.l d1-d7/a0-a6,-(a7)
 MOVE.l dirbuff(pc),a0
 BSR dodecode ;code d0 0=OK
 MOVEM.l (a7)+,d1-d7/a0-a6
 TST.w d0
 BEQ ok

; MOVE.w #$fff,d0
;lpp
; MOVE.w d0,d1
; AND.w #$003,d1
; MOVE.w d1,$dff180
; DBF d0,lpp
; BRA readraw

ok
 RTS

dodecode;a0=dest
 ;
 MOVE.l readbuff(pc),a1
 LEA datalen2(a1),a2
 MOVE.l #$55555555,d2
 MOVE #datalen2/4-1,d3
 ;
'loop
 MOVE.l (a1)+,d0
 AND.l d2,d0
 ADD.l d0,d0
 MOVE.l (a2)+,d1
 AND.l d2,d1
 OR.l d1,d0
 MOVE.l d0,(a0)+
 DBF d3,'loop

;get & verify the checksum!!
 MOVE.l a0,-(a7)
 MOVE.l dirbuff(pc),a0
 CLR.l d0
 MOVE.l #datalen/4-1,d3
 ADD.l d0,d0
chklp
 MOVE.l (a0)+,d4
 ADDX.l d4,d0
 DBF d3,chklp
 MOVE.l #-1,d1
 SUB.l d0,d1
 MOVE.l dirbuff(pc),a0
 ADD.l #datalen+4,a0
 MOVE.l (a0),d2
 MOVE.l (a7)+,a0

 MOVEQ #0,d0 ;chk ok!!
 CMP.l d2,d1
 BEQ 'ok
 MOVEQ #1,d0 ;NOT OK!!!
'ok
 RTS

startwait:										 ;d0=delay
 MOVE.b #$7f-bitint,$bfdd00		;7e before
 MOVE.b #0,$bfde00						 ;!!!
 MOVE.b d0,$bfd400						 ;low byte...
 LSR #8,d0
 MOVE.b d0,$bfd500			;hi byte!
 MOVE.b #9,control			;$bfde00			;
 RTS

;startwait:									 ;d0=delay
; MOVE.b #$7e,$bfdd00		;!!!
; MOVE.b #0,$bfdf00			;!!!
; MOVE.b d0,$bfd600 ;low byte...
; LSR #8,d0
; MOVE.b d0,$bfd700 ;hi byte!
; MOVE.b #9,$bfdf00 ;!!!
; RTS

InitAll:
 MOVE.l PLANETWO(pc),a0

 LEA dirbuff(pc),a1
 MOVE.l a0,(a1)
 LEA datalen2(a0),a0

 LEA syncbuff(pc),a1
 MOVE.l a0,(a1)
 ADDQ #2,a0

 LEA syncbuff2(pc),a1
 MOVE.l a0,(a1)
 ADDQ #2,a0

 LEA readbuff(pc),a1
 MOVE.l a0,(a1)
 LEA readlen2(a0),a0

 LEA writebufff(pc),a1
 MOVE.l a0,(a1)

 RTS

startdisk:
 MOVE.l #$dff000,a6

; move.b $bfdf00,d0
; and.b #$c0,d0
; or.b #$08,d0
; move.b d0,$bfdf00
; move.b #$7f,$bfdd00
; btst #0,$bfdd00

 MOVE #$7fff,$09e(a6)
 MOVE #$9100,$09e(a6)
 MOVE #$8010,$096(a6)
 MOVE #sync,$07e(a6)

 BSR waitdisk

 BCLR #2,$bfd100 ;upper head
 BSET #1,$bfd100 ;dir=out
'loop2
 BTST #4,$bfe001 ;track 0?
 BEQ 'skip
 BSR dostepquick
 BRA 'loop2

'skip:
 BCLR #1,$bfd100 ;dir=in
 MOVE #tracks/2-2,d7
'loop3
 BSR dostepquick
 DBF d7,'loop3
 LEA track(pc),a0
 CLR (a0)
 RTS

selectdrive:
 MOVE drive(pc),d0
 ADDQ #3,d0
 BSET d0,$bfd100
 NOP
 BCLR d0,$bfd100
 RTS

waitdisk:
 BCLR #7,$bfd100 ;motor on
 BSR selectdrive
'loop
 BTST #5,$bfe001
 BNE 'loop ;motor ready?
 RTS

stepin:	 ;step inwards
 BSET #1,$bfd100 ;seek in...
 LEA track(pc),a0
 ADDQ #1,(a0)
 MOVE track(pc),d0
 LSR #1,d0
 BCC 'skip
 BSET #2,$bfd100
 MOVEQ #72,d0
 BSR wwait
 RTS
'skip
 BCLR #2,$bfd100 ;side
 BRA dostep

stepoutquick:	 ;step outwards
 BCLR #1,$bfd100 ;seek out...
 LEA track(pc),a0
 SUBQ #1,(a0)
 MOVE track(pc),d0
 LSR #1,d0
 BCS 'skip
 BCLR #2,$bfd100
 MOVEQ #72,d0
 BSR wwait
 RTS
'skip
 BSET #2,$bfd100 ;side
 NOP
 BCLR #0,$bfd100
 NOP
 NOP
 BSET #0,$bfd100 ;start step
 MOVE #2150+100,d0 ;#12890,d0
 BRA wwait

stepout:	 ;step outwards
 BCLR #1,$bfd100 ;seek out...
 LEA track(pc),a0
 SUBQ #1,(a0)
 MOVE track(pc),d0
 LSR #1,d0
 BCS 'skip
 BCLR #2,$bfd100
 MOVEQ #72,d0
 BSR wwait
 RTS
'skip
 BSET #2,$bfd100 ;side
 BRA dostep
dostepquick
 NOP
 BCLR #0,$bfd100
 NOP
 NOP
 BSET #0,$bfd100 ;start step
 MOVE #2150+100,d0 ;#12890,d0
 BRA wwait
dostep
 BCLR #0,$bfd100
 NOP
 NOP
 BSET #0,$bfd100 ;start step
 MOVE #2150+1000,d0 ;#12890,d0

wwait
 BSR startwait

finishwait
; btst #0,$bfdd00
; beq finishwait
 BTST #0,control			;$bfdf00
 BNE finishwait
 RTS

drive:Dc 0 ;0-3
track:Dc 0 ;0 -> tracks-1
loadat:Dc.l 0
loadlen:Dc.l 0
returncode:Dc.l 0

dirbuff:Dc.l 0
syncbuff:Dc.l 0
syncbuff2:Dc.l 0
readbuff:Dc.l 0
writebufff:Dc.l 0
timeouts:Dc 0

CheckId:	 ;d0=id to check with
 MOVE.l dirbuff(pc),a0
 CMP.l (a0),d0
 RTS

WaitId:		;d0=id
 MOVE.l d0,-(a7)
'loop0:
 MOVE track(pc),d0
 BEQ 'loop
 BSR stepout
 BRA 'loop0
'loop:
 BSR finishdisk
 BSR waitdisk
 BSR ReadDir
 MOVE.l (a7),d0
 BSR CheckId
 BNE 'loop
 ADDQ #4,a7
 RTS

finishdisk:
 BSET #7,$bfd100 ;motor off
 BSR selectdrive
 BSET d0,$bfd100
 RTS

findvolume:
	MOVEM.l a3-a6,-(a7)
	BSR		 FindVolume
	MOVEM.l (a7)+,a3-a6
	RTS

FindVolume:	;check all drives for discs and match disc #..
 LEA		wanted(pc),a0
 MOVE.l d0,(a0)				 ;wanted
 MOVE.l d1,4(a0)				;planetwo
 BSR InitAll
; MOVE.w drive(pc),startdrive

checkloop
;turn motor on...
 MOVE.l #$c0000,d7						 ;WOZ $60000
 BCLR #7,$bfd100 ;motor on
 BSR selectdrive
'loop
 BTST #5,$bfe001
 BEQ motorok ;motor ready??
 SUBQ.l #1,d7
 BNE 'loop

;timed out - no disc or drive available..

 MOVEQ#0,d7:RTS

; BRA motorok wo shit!

;checknext
; BSET #7,$bfd100 ;motor off
; BSR selectdrive
; BSET d0,$bfd100
; NOP
; NOP
; ADDQ.w #1,drive
; MOVEQ#3,d0
; AND.w d0,drive															 ;!!!!!!0,1,2,3..
; MOVE.w startdrive(pc),d0 ;back to first one??
; CMP.w drive(pc),d0
; BNE checkloop
;NONE!!!
; MOVEQ #0,d7
; RTS

motorok	;there is a disc here..
 BSR ReadDir
 MOVE.l dirbuff(pc),a0
 MOVE.l (a0),d7
 RTS

; MOVE.l dirbuff(pc),a0
; CMP.l (a0),d0
; BEQ gotvolume
; MOVEQ#0,d7
; RTS

; BRA checknext ;try next drive...
gotvolume
 MOVEQ #-1,d7
 RTS

wanted:Dc.l 0					 ;volume # we want..
PLANETWO:Dc.l 0
startdrive:Dc.w 0
