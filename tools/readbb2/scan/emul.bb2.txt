; ascii translation of /Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/map/emul.bb2
+
;
;digital electronic emulation...
;
;primitive gates have only ONE output!
;
;loop
;
;OK, start with a 'to do' list of gates.
;
;do the one with the lowest propagation delay...reduce propagation delay
;by this ones delay
;
;do logic based on inputs.
;
;if an output changes...set corresponding input on another gate, and add other
;gate to 'to do' list (unless output is tri-stated)
;
;goto loop
;
;gate types....
;
;$01 = toggle switch...
;$02 = momentary switch...
;$03 = GREEN LED
;$04 = RED LED
;$05 = BLUE LED
;$06 = YELLOW LED

;$10 = 2 input AND
;$20 = 2 input OR
;$30 = 2 input EOR
;$40 = 2 input NAND
;$50 = 2 input NOR
;$60 = 2 input NEOR
;$70 = 1 input yes gate
;$71 = 1 input/1 cntrl tristate yes gate
;$80 = 1 input not gate
;$81 = 1 input/1 cntrl tristate not gate

#maxgo=4	;max gate outputs

NEWTYPE.gate
;
t.w		 ;type of gate
p.w		 ;propagation delay
i.b		 ;input states (8)
o.b		 ;state of output (0,1 or <0 for tristated)
og.w[#maxgo] ;which gates output goes to. (0=none)
oi.w[#maxgo] ;which input output goes to.
;
End NEWTYPE

NEWTYPE.todo
;
g.w		 ;gate#
d.w		 ;current delay amount
;
End NEWTYPE

Dim g.gate(16384)		 ;16384 gates in circuit max
Dim ##[$80B3] do.todo(256) ;256 to do items

;add 2 switches

g(1)\t=$01,0,0,0
g(1)\og[0]=3
g(1)\oi[0]=0
;
g(2)\t=$01,0,0,0
g(2)\og[0]=3
g(2)\oi[0]=1
;
g(3)\t=$20,35,0,0
g(3)\og[0]=4
g(3)\oi[0]=0

g(4)\t=$03,0,0,0
g(4)\og[0]=0
g(4)\oi[0]=0

main

Print "Switch 1 = ":s1$=Edit$(80)
If s1$="1" Then g(1)\i=1 Else g(1)\i=0
Print "Switch 2 = ":s2$=Edit$(80)
If s2$="1" Then g(2)\i=1 Else g(2)\i=0

;
;add switches to 'todo' list
;

ClearList do()
AddLast do():do()\g=1,g(1)\p
AddLast do():do()\g=2,g(2)\p

Gosub emulate

Goto main

emulate
;
;find lowest delay amount in 'todo' list
;
md=32767
newmem do():n=-1
While globfree(do())
	If do()\d<md Then md=do()\d
Wend
If md=32767 Then Return

newmem do()
While globfree(do())
If do()\d=md Then Goto got
Wend
got

g=do()\g:freelast do()
;
newmem do()
While globfree(do())
	do()\d-md
Wend

i=g(g)\i:o=g(g)\o:oo=o
;
Select g(g)\t
Case $01	;toggle switch
	o=i&1
Case $03	;green LED
	If i&1 Then NPrint "ON" Else NPrint "OFF"
Case $10	;2 input and
	If i&3=3 Then o=1 Else o=0
Case $20	;2 input or
	If i&3 Then o=1 Else o=0
Case $30	;2 input eor
	If i&3=2 OR i&3=1 Then o=1 Else o=0
Case $40	;2 input nand
Case $50	;2 input nor
Case $60	;2 input neor
Case $70	;yes gate
	o=i&1
Case $71	;tristate yes gate
Case $80	;not gate
	o=1-i&1
Case $81	;tristate not gate
End Select
;
g(g)\o=o
;
If o<>oo AND o>=0 ;changed? and not tristated?
	For k=0 To #maxgo-1
	og=g(g)\og[k]
	If og
		oi=g(g)\oi[k]	;bit number of input
		If o
			g(og)\i ##[$80CE] oi
		Else
			g(og)\i ##[$80CF] oi
		EndIf
		AddLast do()
		do()\g=og,g(og)\p
	EndIf
	Next
EndIf

Goto emulate
