; ascii translation of /Users/simon/Google Drive/amiga/w/abc/bums/out/sockets/socketlib9.bb2,/Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/out/sockets/socketlib9.bb2
;
; socketlib - Draft 9
; Copyright Spiral Vortex Productions 1995
; This is a IN-PROGRESS OF WRITING source, if it causes
; any damage to whatever, IT'S NOT MY FAULT <G>
; E-Mail me at cwl@tze1.demon.co.uk or the blitz-list
; for bug-reports, ideas, other socket functions.
;

#socketlib = 15

!libheader{#socketlib,init,0,finit,0}


; This function must be executed and the result tested for
; before any of the library functions are to be used.
!afunction{#long}
!args
!libs
!subs{_opensoclib,0,0}
!name{"OpenSocketLib","; Returns SocketBase if sucessful"}

; Blitz does not auto close the library.  This MUST be done
; by hand.
!astatement
!args
!libs
!subs{_closesoclib,0,0}
!name{"CloseSocketLib","; Closes Socket library"}

; Creates an endpoint for communication and returns
; a descriptor.
; On error it returns -1 and sets ErrNo.
!afunction{#long}
!args
!libs
!subs{_socket,0,0}
!name{"Socket","; Returns a socket descriptor"}

; Returns the internet style addr from an internet name.
; If no host is found -1 is returned.
!afunction{#long}
!args{#string}
!libs
!subs{_gethostbyname,0,0}
!name{"GetHostByName","('name'); Returns inet_addr of 'name'"}

; Binds a name to the socket.
; On error returns -1 and sets ErrNo
!afunction{#long}
!args{#long, #word}
!libs
!subs{_bind,0,0}
!name{"Bind","(s, port); Bind a name to a socket"}

; Returns the internet style addr from an internet addr
; On error returns -1 and set ErrNo
; NOTE returned value is unsigned, blitz does not
; support unsigned long directly.
!afunction{#long}
!args{#string}
!libs
!subs{_inet_addr,0,0}
!name{"Inet_Addr","('address'); Returns inet_addr of 'address'"}

; Returns the value stored in ErrNo
!afunction{#long}
!args
!libs
!subs{_errno,0,0}
!name{"ErrNo","; Returns ErrNo from last library call failure"}

; Returns the port number of a socket descriptor.
; On error returns -1 and sets ErrNo
!afunction{#long}
!args{#long}
!libs
!subs{_getsockname,0,0}
!name{"GetSockName","(s); Returns port nmumber of socket s"}

; Attempts to connect socket (s) to addr (inet_addr)
; port (port)
; On error returns -1 and sets ErrNo
!afunction{#long}
!args{#long,#long,#word}
!libs
!subs{_connect,0,0}
!name{"Connect","(s,inet_addr,port)"}

; Returns whats in the receive queue of the specified socket.
; ONLY use on connected sockets!!!
!afunction{#string}
!args{#long}
!libs
!subs{_recv,0,0}
!name{"Recv","(s)"}


; Send a string to a specified socket
; Returns number of bytes sent or -1 on error.
; Sets ErrNo on error
!afunction{#long}
!args{#long,#string}
!libs
!subs{_send,0,0}
!name{"Send","(s, string)"}

; sigmp
; 12 = c
; 13 = d
; 14 = e
; 15 = f
; if sigmp <> 12 then if Ctrl-C is pressed return value is -1
; and errno = 4
; use FD functions to set select masks
; These work slightly different than the C method which
; uses macros.
; See SDK's for more information
!afunction{#long}
!args{#long,#long,#long,#long}
!libs
!subs{_waitselect,0,0}
!name{"WaitSelect","(s, timeout secs, timeout micro, sigmp); s = max socket, sigmp = signal mask"}

; Function to set select masks
!astatement
!args{#long}
!libs
!subs{_r_fd_set,0,0}
!name{"R_FD_SET",""}

!afunction{#long}
!args{#long}
!libs
!subs{_r_fd_isset,0,0}
!name{"R_FD_ISSET",""}

!astatement
!args{#long}
!libs
!subs{_r_fd_clr,0,0}
!name{"R_FD_CLR",""}

!astatement
!args
!libs
!subs{_r_fd_zero,0,0}
!name{"R_FD_ZERO",""}

!astatement
!args{#long}
!libs
!subs{_w_fd_set,0,0}
!name{"W_FD_SET",""}

!afunction{#long}
!args{#long}
!libs
!subs{_w_fd_isset,0,0}
!name{"W_FD_ISSET",""}

!astatement
!args{#long}
!libs
!subs{_w_fd_clr,0,0}
!name{"W_FD_CLR",""}

!astatement
!args
!libs
!subs{_w_fd_zero,0,0}
!name{"W_FD_ZERO",""}

!astatement
!args{#long}
!libs
!subs{_e_fd_set,0,0}
!name{"E_FD_SET",""}

!afunction{#long}
!args{#long}
!libs
!subs{_e_fd_isset,0,0}
!name{"E_FD_ISSET",""}

!astatement
!args{#long}
!libs
!subs{_e_fd_clr,0,0}
!name{"E_FD_CLR",""}

!astatement
!args
!libs
!subs{_e_fd_zero,0,0}
!name{"E_FD_ZERO",""}


; Closes the specified socket and releases it's resources
!astatement
!args{#long}
!libs
!subs{_closesocket,0,0}
!name{"CloseSocket","(s)"}

init:!nullsub{_codeinit,0,0}

finit:!nullsub{_codefinit,0,0}

!libfin

;----------------------------------------------------------------

_codeinit:
;  RTS
  MOVE.l #$400,d0
  MOVEQ #0,d1
  ALibJsr $c002
  MOVE.l d0,buf
  RTS

_codefinit:
;  RTS
  MOVE.l buf(pc),a1
  MOVE.l #$400,d1
  ALibJsr $c003
  RTS

._opensoclib
  LEA socname(pc),a1:MOVEQ #0,d0:MOVE.l 4,a6:JSR _OpenLibrary(a6)
  MOVE.l d0,socbase:RTS

._closesoclib:
  MOVE.l socbase(pc),d0:BEQ noclose:MOVE.l d0,a1:MOVE.l 4,a6
  JSR _CloseLibrary(a6):CLR.l socbase:noclose:RTS

._socket:
  MOVEQ.l #2,d0
  MOVEQ.l #1,d1
  MOVEQ.l #0,d2
  MOVE.l socbase(pc),a6
  JSR -30(a6)
  RTS

._gethostbyname:
  MOVE.l socbase(pc),a6
  MOVE.l d0,a0
  JSR -210(a6)
  TST.l d0
  BNE hostexists
  MOVEQ #-1,d0
  RTS
hostexists:
; hostent struct must be copied if required.
  MOVEA.l d0,a0
  MOVE.l 16(a0),a0
  MOVE.l (a0),a0
  MOVE.l (a0),d0

  RTS

._bind
  MOVE.l socbase(pc),a6
  MOVE.w d1,sin_port
  LEA sockaddr_in(pc),a0
;  MOVEQ #0,d1
;  MOVE.b sin_len,d1
; is sin_len always 16???
  MOVEQ #16,d1
  JSR -36(a6)
  RTS

._inet_addr
  MOVE.l socbase(pc),a6
  MOVE.l d0,a0
  JSR -180(a6)
  RTS

._errno
  MOVE.l socbase(pc),a6
  JSR -162(a6)
  RTS

._getsockname
  MOVE.l socbase(pc),a6
  LEA sockaddr_in(pc),a0
  LEA sin_len(pc),a1
  JSR -102(a6)
  MOVEQ #0,d0
  MOVE.w sin_port(pc),d0
  RTS

._connect
  MOVE.l socbase(pc),a6
  MOVE.l d1,sin_addr
  MOVE.w d2,sin_port
  LEA sockaddr_in(pc),a0
  MOVEQ #16,d1
  JSR -54(a6)
  RTS

._recv
  MOVE.l socbase(pc),a6
  MOVE.l buf(pc),a0
  MOVE.l #1024,d1
  MOVEQ #0,d2
  JSR -78(a6)
  MOVE.l buf(pc),a0
scrhnull2:
  MOVE.b (a0)+,(a3)+
  BNE scrhnull2
  MOVE.l #0,(a3)+
  RTS

._send
  MOVE.l socbase(pc),a6
  MOVE.l d1,a0
  MOVE.l -4(a2),d1
  MOVEQ #0,d2
  JSR -66(a6)
  RTS


._waitselect
  MOVEM.l a3-a6,-(a7)
  ADDQ #1,d0
  LEA readfds(pc),a0
  LEA writefds(pc),a1
  LEA exceptfds(pc),a2
  TST.l d1
  BNE time
  TST.l d2
  BNE time
  MOVEA.l #0,a3
  BRA notime
time:
  MOVE.l d1,tv_secs
  MOVE.l d2,tv_micro
  LEA timeval(pc),a3
notime:
  MOVEQ #1,d1
  LSL.l d3,d1
  MOVE.l d1,sigmp
  LEA sigmp(pc),a4
  MOVE.l a4,d1
  MOVE.l socbase(pc),a6
  JSR -126(a6)
  MOVEM.l (a7)+,a3-a6
  RTS

._fd_set:
  OR.l d1,(a1)
  RTS

._fd_isset:
  AND.l (a1),d1
  TST.l d1
  BNE yep
  MOVEQ #0,d0
  RTS
yep:
  MOVEQ #-1,d0
  RTS

._fd_clr:
  NOT.l d1
  AND.l d1,(a1)
  RTS

_readfds:
  MOVE.l d0,d1
  LSR.l #5,d1
  LSL.l #2,d1
  LEA readfds(pc),a0
  LEA 0(a0,d1),a1
  AND.l #%00011111,d0
  MOVEQ #1,d1
  LSL.l d0,d1
  RTS

_writefds:
  MOVE.l d0,d1
  LSR.l #5,d1
  LSL.l #2,d1
  LEA writefds(pc),a0
  LEA 0(a0,d1),a1
  AND.l #%00011111,d0
  MOVEQ #1,d1
  LSL.l d0,d1
  RTS

_exceptfds:
  MOVE.l d0,d1
  LSR.l #5,d1
  LSL.l #2,d1
  LEA exceptfds(pc),a0
  LEA 0(a0,d1),a1
  AND.l #%00011111,d0
  MOVEQ #1,d1
  LSL.l d0,d1
  RTS

._r_fd
_r_fd_set:
  BSR _readfds
  BRA _fd_set
_r_fd_isset:
  BSR _readfds
  BRA _fd_isset
_r_fd_clr:
  BSR _readfds
  BRA _fd_clr
_r_fd_zero:
  LEA readfds(pc),a0
  CLR.l (a0)+
  CLR.l (a0)
  RTS

._w_fd
_w_fd_set:
  BSR _writefds
  BRA _fd_set
_w_fd_isset:
  BSR _writefds
  BRA _fd_isset
_w_fd_clr:
  BSR _writefds
  BRA _fd_clr
_w_fd_zero:
  LEA writefds(pc),a0
  CLR.l (a0)+
  CLR.l (a0)
  RTS

._e_fd
_e_fd_set:
  BSR _exceptfds
  BRA _fd_set
_e_fd_isset:
  BSR _exceptfds
  BRA _fd_isset
_e_fd_clr:
  BSR _exceptfds
  BRA _fd_clr
_e_fd_zero:
  LEA exceptfds(pc),a0
  CLR.l (a0)+
  CLR.l (a0)
  RTS

._closesocket
  MOVE.l socbase(pc),a6
  JSR -120(a6)
  RTS



socname:  Dc.b  "bsdsocket.library",0
Even
socbase:  Dc.l  0

sockaddr_in:
  sin_len:
          Dc.b  16
  sin_family:
          Dc.b  2
  sin_port:
          Dc.w  0
  sin_addr:
          Dc.l  0
  sin_zero:
          Ds.b  8

buf:
  Dc.l 0


; 64 bits (2 longs)
; do not touch
readfds:
  Ds.l 2
writefds:
  Ds.l 2
exceptfds:
  Ds.l 2

sigmp:
  Dc.l 0

timeval:
  tv_secs:
    Dc.l 0
  tv_micro:
    Dc.l 0







