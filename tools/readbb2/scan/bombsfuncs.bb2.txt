; ascii translation of /Users/simon/Google Drive/amiga/w/abc/bums/bum8/Bombs/BombsFuncs.bb2,/Users/simon/Google Drive/amiga/w/abc/bums/old/bum8/Games/Bombs/BombsFuncs.bb2,/Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/bum8/Bombs/BombsFuncs.bb2,/Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/old/bum8/Games/Bombs/BombsFuncs.bb2,/Users/simon/Google Drive/amiga/w/lha/bbold/bum8/bombs/BombsFuncs.bb2
;
;
; Bombs Funcs
;
;
; Created by ARV
;
; started 01-06-1994
; BLITZ2 Version 01-06-1994
; last modified 17-10-1994

; =======================================
; =======================================

Statement ResetVars{ *bombptr.gameVars}
; Re-initializes the game variables for a (re)start
.ResetVars
##[$80CA] *bombptr
		\xcoord = 0
		\ycoord = 0
		\leftWide = 0
		\leftHigh = 0
		\timeInProgress = 0
		\gameInProgress = 0
		\rating = 0
		\openedSquares = 0
		\markedBombs = 0
		\falseBombs = 0
		\totalBombs = 0
		\closeState = 0
		\pauseState = 0
		\restartState = 0
		\progressBar\xcoord = \displayXCoord
		\progressBar\ycoord = \displayYCoord-22
		For i.b=1 To 10
				\scrollArrows[i]\displayed = False
		Next i
End Statement	;ResetVars

; =======================================

Statement PlaceBombs{ *bombptr.gameVars}
; PLACES THE REQUIRED NUMBER OF BOMBS IN THE GRID
; Just uses bombs of typenr=-1 for now
.PlaceBombs
##[$80CA] *bombptr
		\totalSquares = \wide * \high
; Reset all squares to closed and bombs unknown
		For i.l=1 To \totalSquares
				\square[i]\hasBomb = 0
				\square[i]\state = 0
		Next i
; Calculate the number of bombs required
		\totalBombs = \totalSquares * \percentageBombs / 100
; Place the bombs
		i = 0
		##[$80BB]
				rndnum = !Random{ 1, \totalSquares+1}
				If \square[rndnum]\hasBomb=0
						\square[rndnum]\hasBomb = \bombs\typenr
						i=i+1
				End If
		##[$80BC] i=\totalBombs
End Statement	; PlaceBombs

; =======================================

Function.b CheckTopLeft{ *bombptr.gameVars, num.l, mode.b}
; If there is a square to the top-left of the square "num", then
;		 if "mode" = #peekBomb then it returns 1
;		 if "mode" = #peekState it returns the state of the square
; If there is no square to the top-left of the square "num", then
;		 the function returns -1 no matter what the "mode" was
.CheckTopLeft
##[$80CA] *bombptr
		If (num ##[$80B9] \wide<>1) AND (num>\wide)
				Select mode
					Case #peekBomb
						If \square[num-1-\wide]\hasBomb<0 Then Function Return 1
					Case #peekState
						Function Return \square[num-1-\wide]\state
				End Select
		End If
		Function Return -1
End Function	;CheckTopLeft

; =======================================

Function.b CheckTop{ *bombptr.gameVars, num.l, mode.b}
; If there is a square to the top of the square "num", then
;		 if "mode" = #peekBomb then it returns 1
;		 if "mode" = #peekState it returns the state of the square
; If there is no square to the top of the square "num", then
;		 the function returns -1 no matter what the "mode" was
.CheckTop
##[$80CA] *bombptr
		If (num>\wide)
				Select mode
					Case #peekBomb
						If \square[num-\wide]\hasBomb<0 Then Function Return 1
					Case #peekState
						Function Return \square[num-\wide]\state
				End Select
		End If
		Function Return -1
End Function	;CheckTop

; =======================================

Function.b CheckTopRight{ *bombptr.gameVars, num.l, mode.b}
; If there is a square to the top-right of the square "num", then
;		 if "mode" = #peekBomb then it returns 1
;		 if "mode" = #peekState it returns the state of the square
; If there is no square to the top-right of the square "num", then
;		 the function returns -1 no matter what the "mode" was
.CheckTopRight
##[$80CA] *bombptr
		If (num ##[$80B9] \wide<>0) AND (num>\wide)
				Select mode
					Case #peekBomb
						If \square[num+1-\wide]\hasBomb<0 Then Function Return 1
					Case #peekState
						Function Return \square[num+1-\wide]\state
				End Select
		End If
		Function Return -1
End Function	;CheckTopRight

; =======================================

Function CheckLeft{ *bombptr.gameVars, num.l, mode.b}
; If there is a square to the left of the square "num", then
;		 if "mode" = #peekBomb then it returns 1
;		 if "mode" = #peekState it returns the state of the square
; If there is no square to the left of the square "num", then
;		 the function returns -1 no matter what the "mode" was
.CheckLeft
##[$80CA] *bombptr
		If (num ##[$80B9] \wide<>1)
				Select mode
					Case #peekBomb
						If \square[num-1]\hasBomb<0 Then Function Return 1
					Case #peekState
						Function Return \square[num-1]\state
				End Select
		End If
		Function Return -1
End Function	;CheckLeft

; =======================================

Function CheckRight{ *bombptr.gameVars, num.l, mode.b}
; If there is a square to the right of the square "num", then
;		 if "mode" = #peekBomb then it returns 1
;		 if "mode" = #peekState it returns the state of the square
; If there is no square to the right of the square "num", then
;		 the function returns -1 no matter what the "mode" was
.CheckRight
##[$80CA] *bombptr
		If (num ##[$80B9] \wide<>0)
				Select mode
					Case #peekBomb
						If \square[num+1]\hasBomb<0 Then Function Return 1
					Case #peekState
						Function Return \square[num+1]\state
				End Select
		End If
		Function Return -1
End Function	;CheckRight

; =======================================

Function CheckBottomLeft{ *bombptr.gameVars, num.l, mode.b}
; If there is a square to the bottom-left of the square "num", then
;		 if "mode" = #peekBomb then it returns 1
;		 if "mode" = #peekState it returns the state of the square
; If there is no square to the bottom-left of the square "num", then
;		 the function returns -1 no matter what the "mode" was
.CheckBottomLeft
##[$80CA] *bombptr
		If (num ##[$80B9] \wide<>1) AND (num<=\totalSquares-\wide)
				Select mode
					Case #peekBomb
						If \square[num-1+\wide]\hasBomb<0 Then Function Return 1
					Case #peekState
						Function Return \square[num-1+\wide]\state
				End Select
		End If
		Function Return -1
End Function	;CheckBottomLeft

; =======================================

Function CheckBottom{ *bombptr.gameVars, num.l, mode.b}
; If there is a square to the bottom of the square "num", then
;		 if "mode" = #peekBomb then it returns 1
;		 if "mode" = #peekState it returns the state of the square
; If there is no square to the bottom of the square "num", then
;		 the function returns -1 no matter what the "mode" was
.CheckBottom
##[$80CA] *bombptr
		If (num<=\totalSquares-\wide)
				Select mode
					Case #peekBomb
						If \square[num+\wide]\hasBomb<0 Then Function Return 1
					Case #peekState
						Function Return \square[num+\wide]\state
				End Select
		End If
		Function Return -1
End Function	;CheckBottom

; =======================================

Function CheckBottomRight{ *bombptr.gameVars, num.l, mode.b}
; If there is a square to the bottom-right of the square "num", then
;		 if "mode" = #peekBomb then it returns 1
;		 if "mode" = #peekState it returns the state of the square
; If there is no square to the bottom-right of the square "num", then
;		 the function returns -1 no matter what the "mode" was
.CheckBottomRight
##[$80CA] *bombptr
		If (num ##[$80B9] \wide<>0) AND (num<\totalSquares-\wide)
				Select mode
					Case #peekBomb
						If \square[num+1+\wide]\hasBomb<0 Then Function Return 1
					Case #peekState
						Function Return \square[num+1+\wide]\state
				End Select
		End If
		Function Return -1
End Function	;CheckBottomRight

; =======================================

Statement CalcBombNum{ *bombptr.gameVars, num.l}
; Calculates the number of bombs surrounding the square "num"
; and sets *bombptr\square[num]\hasBomb accordingly
.CalcBombNum
		total.b = 0
		i.b = CheckTopLeft{ *bombptr, num, #peekBomb}:	If i<>-1 Then total = total + 1
		i = CheckTop{ *bombptr, num, #peekBomb}:				If i<>-1 Then total = total + 1
		i = CheckTopRight{ *bombptr, num, #peekBomb}:	 If i<>-1 Then total = total + 1
		i = CheckLeft{ *bombptr, num, #peekBomb}:			 If i<>-1 Then total = total + 1
		i = CheckRight{ *bombptr, num, #peekBomb}:			If i<>-1 Then total = total + 1
		i = CheckBottomLeft{ *bombptr, num, #peekBomb}: If i<>-1 Then total = total + 1
		i = CheckBottom{ *bombptr, num, #peekBomb}:		 If i<>-1 Then total = total + 1
		i = CheckBottomRight{ *bombptr, num, #peekBomb}:If i<>-1 Then total = total + 1
		*bombptr\square[num]\hasBomb = total
End Statement	;CalcBombNum

; =======================================

Statement CheckMark{ *bombptr.gameVars, num.l}
; Checks to see if the newly marked square is has a bomb
; and increases/decreases \falseBombs accordingly
.CheckMark
##[$80CA] *bombptr
		If \square[num]\hasBomb<>\bombs\typenr
;		 there is no bomb here
				Select \square[num]\state
					Case 0
;						 square was just unmarked
						\falseBombs = \falseBombs - 1
					Case 4
;						 square was just marked
						\falseBombs = \falseBombs + 1
				End Select
		End If
End Statement	;CheckMark

; =======================================

Function.l FindNum{ *bombptr.gameVars}
; Returns the number of the square that was clicked on
.FindNum
##[$80CA] *bombptr
		num.l = ((\ycoord-\displayYCoord)/10+\leftHigh)*\wide + (\xcoord-\displayXCoord)/10+\leftWide+1
		Function Return num
End Function	;FindNum

; =======================================
; =======================================
