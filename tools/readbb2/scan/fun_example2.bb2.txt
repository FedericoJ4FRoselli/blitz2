; ascii translation of /Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/out/stuff/math/FUN_Example2.bb2,/Users/simon/Google Drive/amiga/w/lha/bbold/bum8/math/FUN_Example2.bb2
NoCli
WBStartup

INCDIR	"FUN_Math:"
Include "FUN_Matrix.bb2"

NEWTYPE.Line_Type
	p1.w
	p2.w
End NEWTYPE

Dim vertex_list.Vector_Type(7)
Dim output_list.Vector_Type(7)
Dim cube.Line_Type(11)

DEFTYPE.Matrix_Type Final
DEFTYPE.Matrix_Type Temp1
DEFTYPE.Matrix_Type Temp2
DEFTYPE.Matrix_Type Temp3

WbToScreen 0
##[$FFB5]

Restore Cube_Data
For points.b=0 To 7
	Read	vertex_list(points)\x
	Read	vertex_list(points)\y
	Read	vertex_list(points)\z
	vertex_list(points)\s=1
Next points
For lines.b=0 To 11
	Read cube(lines)\p1
	Read cube(lines)\p2
Next lines

BitMap 0,200,180,1
Window 0,10,10,200,180,$8|$2|$1000,"Matrix Example 2",0,1
Use BitMap 0
xrot.w=0
yrot.w=67
zrot.w=194
sby.q=1
sdelta.q=0.03

Repeat
 xrot+1 : If xrot>359 Then xrot=0
 yrot+1 : If yrot>359 Then yrot=0
 zrot+1 : If zrot>359 Then zrot=0
 sby+sdelta
 If (sdelta>0) AND (sby>=4) Then sdelta=0-sdelta
 If (sdelta<0) AND (sby<=0.5) Then sdelta=0-sdelta


 build_rotation_matrix{#ABOUT_Y,&Temp2,yrot}
 build_rotation_matrix{#ABOUT_X,&Temp1,xrot}
 concatenate_matrix{&Temp1,&Temp2,&Temp3}
 build_rotation_matrix{#ABOUT_Z,&Temp1,zrot}
 concatenate_matrix{&Temp1,&Temp3,&Temp2}
 build_scale_matrix{&Temp1,sby,sby,sby}
 concatenate_matrix{&Temp1,&Temp2,&Temp3}

 build_translation_matrix{&Temp1,100,90,0}
 concatenate_matrix{&Temp1,&Temp3,&Final}

 For points=0 To 7
	apply_matrix{&Final,&vertex_list(points),&output_list(points)}
 Next points
 BlockScroll 0
 For lines=0 To 11
	Line output_list(cube(lines)\p1)\x,output_list(cube(lines)\p1)\y,output_list(cube(lines)\p2)\x,output_list(cube(lines)\p2)\y,1
 Next lines
 VWait
 BitMaptoWindow 0,0,5,14,5,14,190,166
 ev.l=Event
Until ev=$200

##[$FFB4]
End

Cube_Data:
	Data.w	-20,20,20
	Data.w	20,20,20
	Data.w	20,-20,20
	Data.w	-20,-20,20
	Data.w	-20,20,-20
	Data.w	20,20,-20
	Data.w	20,-20,-20
	Data.w	-20,-20,-20
Line_Data:
	Data.w	0,1
	Data.w	1,2
	Data.w	2,3
	Data.w	3,0
	Data.w	0,4
	Data.w	4,5
	Data.w	5,6
	Data.w	6,2
	Data.w	1,5
	Data.w	4,7
	Data.w	7,6
	Data.w	7,3