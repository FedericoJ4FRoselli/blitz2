; ascii translation of /Users/simon/Google Drive/amiga/w/lha/bbold/bum8/math/FUN_Example4AGA.bb2
+##[$80CC]
##[$80C3]

##[$80BF]	"FUN_Math:"
Include "FUN_Matrix.bb2"

NEWTYPE.Facet_Type
	Points.w[4]
	fcolour.w
	cmask.b
End NEWTYPE

NEWTYPE.Point_Type
	x.w
	y.w
End NEWTYPE

Dim vertex_list.Vector_Type(7)
Dim facet_list.Facet_Type(5)
Dim output_list.Vector_Type(7)
Dim polygon.Point_Type(4)

DEFTYPE.Matrix_Type Final
DEFTYPE.Matrix_Type Temp1
DEFTYPE.Matrix_Type Temp2
DEFTYPE.Matrix_Type Temp3

DEFTYPE.Vector_Type VTemp1
DEFTYPE.Vector_Type VTemp2
DEFTYPE.Vector_Type Normal

##[$80C8] Cube_Data
For points.b=0 To 7
	Read	vertex_list(points)\x
	Read	vertex_list(points)\y
	Read	vertex_list(points)\z
	vertex_list(points)\s=1
Next points

For sides.b=0 To 5
	For points.b=0 To 3
		Read	facet_list(sides)\Points[points]
	Next points
	Read facet_list(sides)\fcolour
	Read facet_list(sides)\cmask
Next sides

lmaxlen 0,320,200,4
lmaxlen 1,320,200,4

DecodePalette 0,8

physical.b=0
logical.b=1

BLITZ

InitCopList 0,42,199,$10003,0,8,0	;$12016 <- does not work on 1200's!!!
CreateDisplay 0
DisplayBitMap 0,physical
DisplayPalette 0,0
Use lmaxlen logical

xrot.w=0
yrot.w=67 ;67
zrot.w=194 ;194
sby.q=1.5

##[$80BB]
 xrot+2 : If xrot>359 Then xrot=360-xrot
 yrot+2 : If yrot>359 Then yrot=360-yrot
 zrot+2 : If zrot>359 Then zrot=360-zrot

 build_rotation_matrix{#ABOUT_Y,&Temp2,yrot}
 build_rotation_matrix{#ABOUT_X,&Temp1,xrot}
 concatenate_matrix{&Temp1,&Temp2,&Temp3}
 build_rotation_matrix{#ABOUT_Z,&Temp1,zrot}
 concatenate_matrix{&Temp1,&Temp3,&Temp2}
 build_scale_matrix{&Temp1,sby,sby,sby}
 concatenate_matrix{&Temp1,&Temp2,&Temp3}

 build_translation_matrix{&Temp1,160,100,0}
 concatenate_matrix{&Temp1,&Temp3,&Final}
 BlockScroll 0
 For points=0 To 7
	apply_matrix{&Final,&vertex_list(points),&output_list(points)}
 Next points
 For sides=0 To 5
	subtract_vectors{&output_list(facet_list(sides)\Points[2]),&output_list(facet_list(sides)\Points[1]),&VTemp1}
	subtract_vectors{&output_list(facet_list(sides)\Points[3]),&output_list(facet_list(sides)\Points[1]),&VTemp2}
	cross_product{&VTemp2,&VTemp1,&Normal}
	If Normal\z>0
		VTemp1\x=1,0.25,1,1
		e.q=vector_angle{&Normal,&VTemp1}*128+127
		If e<1 Then e=1
		If e>255 Then e=255
		c.w=facet_list(sides)\fcolour
		m.b=facet_list(sides)\cmask
		AGAGreen 0,c,e,e,e
		For points=0 To 3
			polygon(points)\x=output_list(facet_list(sides)\Points[points])\x,output_list(facet_list(sides)\Points[points])\y
		Next points
		Polyf 4,&polygon(0),c
	EndIf
 Next sides
 VWait
 If physical=1
		logical=1
		physical=0
 Else
		logical=0
		physical=1
 EndIf
 DisplayBitMap 0,physical
 DisplayPalette 0,0
 Use lmaxlen logical
##[$80BC] Joyb(1)

End

Cube_Data:
	Data.w	-20,20,20
	Data.w	20,20,20
	Data.w	20,-20,20
	Data.w	-20,-20,20
	Data.w	-20,20,-20
	Data.w	20,20,-20
	Data.w	20,-20,-20
	Data.w	-20,-20,-20
Facet_Data:
	Data.w	0,3,2,1,1,7
	Data.w	0,1,5,4,2,7
	Data.w	4,5,6,7,3,7
	Data.w	7,6,2,3,4,7
	Data.w	1,2,6,5,5,7
	Data.w	4,7,3,0,6,7



