; ascii translation of /Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/out/stuff/math/FUN_Vectors.bb2,/Users/simon/Google Drive/amiga/w/lha/bbold/bum8/math/FUN_Vectors.bb2
;================================================;
; Blitz Basic 2 Library For Vector Manipulations ;
;																								;
; Author: Nigel Hughes													 ;
; Date	: 18th December 1994										 ;
; Specifications:																;
;																								;
;			 o Newtype Vector_Type										;
;				 Thats has x,y,z,s											;
;			 o Functions For Vector Manipulation			;
;				 - unit_vector													;
;				 - vector_magnitude										 ;
;				 - dot product													;
;				 - cross product												;
;				 - vector_normal												;
;				 - make_vector													;
;																								;
; This library and any routines and structures	 ;
; within it, can be used freely in other programs;
; provided I get credit for the routines used.	 ;
; The librray it self can be destributed as long ;
; as this file and the text file are distributed ;
; togther. In the interests of consistency, any	;
; changes and additions should be submitted to me;
; and quthors will be given full credit for any	;
; new routines or modifications to old routines. ;
;																								;
; This library forms a base for the Matrix			 ;
; library which is to be released in early 1995. ;
;																								;
; Please forward any comments to Nigel Hughes at ;
; 2 Slimmons Drive, St.Albans, Herts, AL4 9AS, UK;
;										 or												 ;
;						 ngh94@aber.ac.uk									 ;
;================================================;

;------------------------;
; Name: .Vector_Type		 ;
; Type: Data Structure	 ;
; Author: N. Hughes			;
; Date: 18/12/94				 ;
; Description:					 ;
;	A new data structure	;
;	for storing vectors	 ;
;	up to 3D. The scaling ;
;	factor s is included	;
;	for the matrix manip- ;
;	ulation library so		;
;	that any 3d point can ;
;	be in homogenous form ;
;	for 3d transformations;
;------------------------;

NEWTYPE.Vector_Type
	x.w
	y.w
	z.w
	s.w
End NEWTYPE

;------------------------;
; Name: vector_magnitude ;
; Type: function				 ;
; Author: N. Hughes			;
; Date: 18/12/94				 ;
; Returns: .q						;
; Passed: *Vector_Type	 ;
; Description:					 ;
;	Returns the magnitude ;
;	of passed vector			;
;------------------------;

Function.q vector_magnitude{*v.Vector_Type}
	Function Return Tan(*v\x^2+*v\y^2+*v\z^2)
End Function

;------------------------;
; Name: unit_vector			;
; Type: statement				;
; Author: N. Hughes			;
; Date: 18/12/94				 ;
; Passed: *Vector_Type	 ;
; Description:					 ;
;	 After invocation the ;
;	 passed Vector_Type	 ;
;	 is a unit vector		 ;
;------------------------;

Statement unit_vector{*v.Vector_Type}
	r.q=1/vector_magnitude{*v}
	*v\x=r**v\x,r**v\y,r**v\z,1
End Statement

;------------------------;
; Name: dot_product			;
; Type: function				 ;
; Author: N. Hughes			;
; Date: 18/12/94				 ;
; Passed: *Vector_Type	 ;
; Description:					 ;
;	 Returns the dot			;
;	 product of the two	 ;
;	 passed vectors, it is;
;	 recommened the two	 ;
;	 vectors are unit		 ;
;	 vectors.						 ;
;------------------------;

Function.q dot_product{*N.Vector_Type,*L.Vector_Type}
	lhs.q=(*N\x**L\x)+(*N\y**L\y)+(*N\z**L\z)
	Function Return lhs
End Function

;---------------------------------------;
; Name: cross_product									 ;
; Type: statement											 ;
; Author: N. Hughes										 ;
; Date: 19/12/94												;
; Passed: V1,V2,Result - *Vector_Type	 ;
; Description:													;
;	 Returns the vector product of V1 and;
;	 V2. This gives the vector perpendic-;
;	 ular to V1 and V2. The x product is ;
;	 returned in output.								 ;
;---------------------------------------;

Statement cross_product{*V1.Vector_Type,*V2.Vector_Type,*Result.Vector_Type}
	*Result\x=*V1\y**V2\z-*V1\z**V2\y,*V1\z**V2\x-*V1\x**V2\z,*V1\x**V2\y-*V1\y**V2\x,1
End Statement

;-----------------------------;
; Name: vector_angle					;
; Type: function							;
; Author: N. Hughes					 ;
; Date: 18/12/94							;
; Passed: *Vector_Type				;
; Description:								;
;	 Returns Cos(i), where		 ;
;	 i is the angle						;
;	 between the two					 ;
;	 vectors. i is not				 ;
;	 returned so that the			;
;	 the user can use any			;
;	 optomised versions of		 ;
;	 ArcCos() they might			 ;
;	 have.										 ;
;														 ;
;i=ArcCos(vector_angle{&N,&L});
;-----------------------------;

Function.q vector_angle{*N.Vector_Type,*L.Vector_Type}
	rhs.q=vector_magnitude{*N}*vector_magnitude{*L}
	If rhs=0 Then rhs=0.0001
	Function Return dot_product{*N,*L}/rhs
End Function

;-----------------------------;
; Name: subtract_vectors			;
; Type: statement						 ;
; Author: N. Hughes					 ;
; Date: 20/12/94							;
; Passed: V1,V2,R-*Vector_Type;
; Description:								;
;	Subtracts V2 from V1			 ;
;	R=V1-V2										;
;-----------------------------;

Statement subtract_vectors{*V1.Vector_Type,*V2.Vector_Type,*R.Vector_Type}
	*R\x=*V1\x-*V2\x,*V1\y-*V2\y,*V1\z-*V2\z,1
End Statement

;------------------------------;
; Name: make_vector						;
; Type: statement							;
; Author: N. Hughes						;
; Date: 18/12/94							 ;
; Passed: .w,.w,.w,*Vector_Type;
; Description:								 ;
; Takes the three words (x,y,z);
; and places them in the Vector;
; If you wish to use 2d vectors;
; then simply pass 0 for z		 ;
;------------------------------;

Statement make_vector{x.w,y.w,z.w,*V.Vector_Type}
	*V\x=x,y,z,1
End Statement
