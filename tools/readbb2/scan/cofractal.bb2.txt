; ascii translation of /Users/simon/Google Drive/amiga/w/abc/bums/bum8/Examples/cofractal.bb2,/Users/simon/Google Drive/amiga/w/abc/bums/old/bum8/Examples/cofractal.bb2,/Users/simon/Google Drive/amiga/w/abc/bums/out/bailey/COFractal.bb2,/Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/bum8/Examples/cofractal.bb2,/Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/old/bum8/Examples/cofractal.bb2,/Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/out/bailey/COFractal.bb2
;;*******************************************************;;
;;																											 ;;
;;	Cack-O-Fractal Drawing System by Ted Bailey					;;
;;																											 ;;
;;	A program that lets you design and decode your own	 ;;
;;	simple images using the Collage Theorum, affine			;;
;;	transformations and the Random Iteration Algorithm.	;;
;;	My first Intuition program ever - April 1994				 ;;
;;																											 ;;
;;*******************************************************;;

##[$80C3]:##[$80B4]:End:End ##[$80B4]
#maxtrans=20

NEWTYPE .bxcrd
	x0.w:y0:x1:y1:x2:y2:x3:y3
End NEWTYPE

NEWTYPE .crds
	bxn.w:bxa.q:bxh.w:bxw.w:h.b:v.b
	coords.bxcrd
End NEWTYPE

NEWTYPE .ifs
	a.q:b:c:d:e:f:p
End NEWTYPE

Dim List trans.crds(#maxtrans-1)
Dim List table.ifs(#maxtrans-1)
Dim List table2.ifs(#maxtrans-1)

Dim a.q(4,3), b.q(4,3), z.q(4), w.q(4), ans.q(3)
Dim bxx.w(3), bxy.w(3)

; trans.crds holds the co-ords for each filled box/transformation.
; table.ifs hold the codes to regenerate the image.
; table2.ifs is a copy of table.ifs.
; a and z are used in the simultaneous equation solver.
; b and w are work arrays for the sim. eq. solver.
; ans holds the 3 solutions to each set of 4 equations.
; bxx and bxy are used to find max and min box coord values
; when drawing a filled box.


StopCycle 0,0,0,0,0:StopCycle 0,1,13,13,13:StopCycle 0,2,2,3,3:StopCycle 0,3,4,4,5
StopCycle 0,4,1,4,7:StopCycle 0,5,4,5,7:StopCycle 0,6,3,3,14:StopCycle 0,7,6,13,9

lmaxlen 0,640,200,3
allocst 0,3+8:Use SetCycle 0

DefaultIDCMP $8|$10|$100|$400|$40000|$80000
localstat 0,0,0,640,200,$1480,"Cack-O-Fractal Drawing System",1,1,0,0
PositionSuperBitMap 0,0
;
; this is the 'drawing' window and as polygons are being drawn
; (using polyf) we need to attach a superduperbitmap.


newlocarr 0,0," Project "
MenuItem	0,0,0,0,"New Project			"
MenuItem	0,0,0,1,"Load Table			 ","L"
MenuItem	0,0,0,2,"Save Table			 ","S"
MenuItem	0,0,0,3,"Make Table			 ","M"
MenuItem	0,0,0,4,"About						"
MenuItem	0,0,0,5,"Quit						 ","Q"

newlocarr 0,1," Drawing Options "
MenuItem	0,0,1,0,"	Set Grid Size						 "
MenuItem	0,3,1,1,"	Grid	On/Off							"
MenuItem	0,0,1,2,"	Set Box Size							"
MenuItem	0,0,1,3,"	Flip Box Vertically			 ","V"
MenuItem	0,0,1,4,"	Flip Box Horizontally		 ","H"
MenuItem	0,0,1,5,"	Rotate Box								","R"

newlocarr 0,2," Decoding Options "
MenuItem	0,0,2,0,"	Decode Table			 ","D"
MenuItem	0,1,2,1,"	Colour On/Off			","C"
MenuItem	0,0,2,2,"	Colour options	"+Chr$(187)+" "
SubItemOff 160,8
SubItem 0,4,2,2,0,"	Random Colour			"
SubItem 0,2,2,2,1,"	Colour Shade			 "
SubItem 0,1,2,2,2,"	256 Colours				"
MenuItem	0,3,2,3,"	Hi-Res						 ","1"
MenuItem	0,3,2,4,"	Interlace					","2"
MenuItem	0,1,2,5,"	Auto-Scale				 ","A"
MenuItem	0,0,2,6,"	Demo"

newlocarr 0,3," Shade Options "
MenuItem 0,4,3,0,"	Top to Bottom			"
MenuItem 0,2,3,1,"	Bottom to Top			"
MenuItem 0,2,3,2,"	Left to Right			"
MenuItem 0,2,3,3,"	Right to Left			"
MenuItem 0,2,3,4,"	Towards Centre		 "
MenuItem 0,2,3,5,"	Away from Centre	 "

arrmult 0
If ExecVersion<39 Then MenuColour 0,2,2,2,Off		 ; no aga
grdszx.w=20:grdszy.w=20:Gosub drawgrd


DefaultIDCMP $8|$40000
localstat 1,0,200,640,35,$0,"",1,1
;
; this is the status and messages window


bxh.w=20:bxw.w=20:obxh.w=20:obxw.w=20 ; height, width
bxa.q=0:obxa.q=0:bxn.w=1						 ; ang. of rotation, noumber
v.b=1:h.b=1:ov.b=v:oh.b=h						; flags to check if 'flipped'
full.b=0:aga.b=1:sopt.b=0						; other flags
rancol.b=-1:orancol.b=-1						 ;

; Any variables with 'o' as their first letter are old values,
; which are required to remove the old shape outline.
; The outline is drawn to window 0 using wline not to
; the attached bitmap. Filled shapes are drawn to the bitmap
; using polyf.

MenuColour 0,2,2,Off
For n=0 To 5
	MenuColour 0,3,n,Off
Next
Use localstat 1
	WColour 4,0
	WLocate 20,1:Print "xpos ="
	WLocate 120,1:Print "ypos ="
	WLocate 220,1:Print "boxw ="
	WLocate 320,1:Print "boxh ="
	WLocate 420,1:Print "boxa ="
	WLocate 520,1:Print "boxn ="
	WColour 5,0
	WLocate 25,11:Print "F1 - size shape"
	WLocate 225,11:Print "F2 - rotate shape"
	WLocate 425,11:Print "F3 - default shape"
	WLocate 35,21:Print "F4 - pick up last filled shape"
	WLocate 325,21:Print "F5 - delete last filled shape"
Use localstat 0

									 ;;*********************;;
									 ;;			MAIN LOOP			;;
									 ;;*********************;;

##[$80BB]
	;
	ev.l=WaitEvent
	lw=EventWindow
	a$=Inkey$
	obxh=bxh:obxw=bxw:obxa=bxa
	opx=px:opy=py:px=WMouseX:py=WMouseY
	;
	Select ev.l
		Case $8
			If MButtons=1
				Gosub plcfbx
			Else
				If MButtons=2 Then epx=EMouseX:epy=EMouseY
			EndIf
		Case $100
			If MenuList(0,2,1)
				MenuColour 0,2,2,On
			Else
				MenuColour 0,2,2,Off
			EndIf
			;
			Select MenuHit
				Case 0
					If ItemHit=0 Then Gosub newpr
					If ItemHit=1 Then Gosub loadt
					If ItemHit=2 Then Gosub savet
					If ItemHit=3 Then Gosub maket
					If ItemHit=4 Then Gosub about
					If ItemHit=5 Then End
				Case 1
					If ItemHit=0 Then Gosub setgrd
					If ItemHit=1 Then Gosub gridst
					If ItemHit=2 Then Gosub setbx
					If ItemHit=3 Then v=-1*v
					If ItemHit=4 Then h=-1*h
					If ItemHit=5 Then Gosub rotbx
				Case 2
					If ItemHit=0 Then Gosub dcod:Activate 0
					If ItemHit=1
						If MenuList(0,2,1)
							MenuColour 0,2,2,On
						Else
							MenuColour 0,2,2,Off
						EndIf
					EndIf
					If SubHit=0
						If orancol<>rancol
							rancol=-1*rancol
						EndIf
						For n=0 To 5
							MenuColour 0,3,n,Off
						Next
					EndIf
					If SubHit=1
						orancol=rancol
						rancol=-1*rancol
						For n=0 To 5
							MenuColour 0,3,n,On
						Next
					EndIf
					If SubHit=2 Then aga=-1*aga
					If ItemHit=6 Then Gosub demo:Activate 0
				Case 3
					If ItemHit=0 Then sopt=0
					If ItemHit=1 Then sopt=1
					If ItemHit=2 Then sopt=2
					If ItemHit=3 Then sopt=3
					If ItemHit=4 Then sopt=4
					If ItemHit=5 Then sopt=5
			End Select
		Case $400
			If RawKey=$50 Then If full=0 Then Gosub setbx
			If RawKey=$51 Then If full=0 Then Gosub rotbx
			If RawKey=$52
				obxh=bxh:obxw=bxw:bxh=20:bxw=20 ; reset box to default
				obxa=bxa:bxa=0									;							 values
				v=1:h=1:ov=v:oh=h							 ;
			EndIf
			If RawKey=$53 Then If pickedup=0 Then Gosub pickupfbx
			If RawKey=$54 Then If bxn>1 Then Gosub killfbx
		Case $40000
			If lw=1 Then Activate 0
		Case $80000
			If lw=0 Then Activate 0
	End Select
	;
	FlushEvents $10:If full=0 Then Gosub drawbx
	;
	Use localstat 1
		WColour 1,0
		WLocate 80,1:Print px,"	"
		WLocate 180,1:Print py,"	"
		WLocate 280,1:Print bxw,"	"
		WLocate 380,1:Print bxh,"	"
		WLocate 480,1:Print ang,"	"
		cbx=bxn:If cbx>#maxtrans Then cbx=#maxtrans
		WLocate 580,1:Print cbx,"	"
	Use localstat 0
	;
##[$80C7]


											;;********************;;
											;;		SUB-ROUTINES		;;
											;;********************;;

.drawgrd
	For ln=grdszx To 640 Step grdszx
		WLine ln,0,ln,200,4
	Next
	For ln=grdszy To 200 Step grdszy
		WLine 0,ln,640,ln,5
	Next
Return


.drawbx
	;
	obxang1=HSin(obxa):obxang2=HCos(obxa)
	;
	ox1=opx:oy1=opy
	ox2=ox1-obxang1*obxh*ov
	oy2=oy1-obxang2*obxh*ov
	ox3=ox2:oy3=oy2
	ox4=ox2+obxang2*obxw*oh
	oy4=oy2-obxang1*obxw*oh
	ox5=ox4:oy5=oy4
	ox6=ox4+obxang1*obxh*ov
	oy6=oy4+obxang2*obxh*ov
	ox7=ox6:oy7=oy6
	ox8=ox1:oy8=oy1
	;
	bxang1=HSin(bxa):bxang2=HCos(bxa)
	;
	x1=px:y1=py
	x2=x1-bxang1*bxh*v
	y2=y1-bxang2*bxh*v
	x3=x2:y3=y2
	x4=x2+bxang2*bxw*h
	y4=y2-bxang1*bxw*h
	x5=x4:y5=y4
	x6=x4+bxang1*bxh*v
	y6=y4+bxang2*bxh*v
	x7=x6:y7=y6
	x8=x1:y8=y1
	;
	ov=v:oh=h
	;
	WJam2
	WLine ox1,oy1,ox2,oy2,ox3,oy3,ox4,oy4,0
	WLine ox5,oy5,ox6,oy6,ox7,oy7,ox8,oy8,0
	WLine x1,y1,x2,y2,x3,y3,x4,y4,7
	WLine x5,y5,x6,y6,x7,y7,x8,y8,7
	WJam1
Return


.plcfbx
	;
	bxx(0)=x1:bxx(1)=x2:bxx(2)=x4:bxx(3)=x6:Sort bxx()
	bxy(0)=y1:bxy(1)=y2:bxy(2)=y4:bxy(3)=y6:Sort bxy()
	minxb=bxx(0):maxxb=bxx(3):minyb=bxy(0):maxyb=bxy(3)
	;
	If	(minxb>=1 AND maxxb<=639) AND (minyb>=1 AND maxyb<=199)
		;
		If globalloc(trans())
			pickedup=0
			##[$80CA] trans()
			\bxh=bxh:\bxw=bxw
			\bxa=bxa:\bxn=bxn
			\h=h:\v=v
			##[$80CA] trans()\coords
			\x0=x1:\y0=y1				;
			\x1=x2:\y1=y2				;	place co-ords of box
			\x2=x4:\y2=y4				;			 corners in list
			\x3=x6:\y3=y6				;
			;
			Gosub drawfbx
			WLine \x3,\y3,\x0,\y0,7
			;
			bxn=QLimit(bxn+1,1,#maxtrans+1)
			If bxn=#maxtrans+1
				WLine x1,y1,x2,y2,x3,y3,x4,y4,0
				WLine x5,y5,x6,y6,x7,y7,x8,y8,0
				full=1
			EndIf
		Else
			Gosub pickupfbx
		EndIf
		;
	EndIf
Return


.drawfbx
	##[$80CA] trans()\coords
	pnt.bxcrd\x0=\x0,\y0,\x1,\y1,\x2,\y2,\x3,\y3
	;
	ang1=HSin(trans()\bxa)					 ; this is for a small white box
	ang2=HCos(trans()\bxa)					 ; that marks bottom left on the
	height=6:width=6								; transformation	(0,0)
	;															 ;
	pnt2.bxcrd\x0=trans()\coords\x0 ;
	pnt2.bxcrd\y0=trans()\coords\y0
	pnt2.bxcrd\x1=pnt2.bxcrd\x0-ang1*height*trans()\v
	pnt2.bxcrd\y1=pnt2.bxcrd\y0-ang2*height*trans()\v
	pnt2.bxcrd\x2=pnt2.bxcrd\x1+ang2*width*trans()\h
	pnt2.bxcrd\y2=pnt2.bxcrd\y1-ang1*width*trans()\h
	pnt2.bxcrd\x3=pnt2.bxcrd\x2+ang1*height*trans()\v
	pnt2.bxcrd\y3=pnt2.bxcrd\y2+ang2*height*trans()\v
	;
	GetSuperBitMap
	Use lmaxlen 0:Polyf 4,pnt,7:Polyf 4,pnt2,1
	PutSuperBitMap
Return


.pickupfbx
	##[$80CA] trans()
	done=0
	If ev.l=$400								; pick up last box
		;
		newmem trans()
		If LastItem(trans())
			pickedup=1
			;
			##[$80CA] trans()
			bxh=\bxh:bxw=\bxw
			bxa=\bxa:bxn=\bxn
			h=\h:v=\v
			##[$80CA] trans()\coords
			x1=\x0:y1=\y0
			x2=\x1:y2=\y1
			x4=\x2:y4=\y2
			x6=\x3:y6=\y3
			;
		EndIf
		;
	Else												; pick up box under cursor
		;
		newmem trans()
		While globfree(trans())
		Wend
		;
	EndIf
	;;
	Gosub killfbx:bxn+1
	;;
Return


.killfbx
	freelast trans():full=0:bxn-1
	InnerCls																	 ;	redraw filled
	If MenuList(0,2,1) Then Gosub drawgrd	 ;					boxes
	newmem trans()													;
	While globfree(trans())										;
		Gosub drawfbx														;
		WLine \x0,\y0,\x1,\y1,\x1,\y1,\x2,\y2,0	;
		WLine \x2,\y2,\x3,\y3,\x3,\y3,\x0,\y0,0	;
	Wend																			 ;
	;
	If pickedup=0 AND bxn<#maxtrans						;	redraw normal
		 WJam2																	 ;			 wire box
		 WLine x1,y1,x2,y2,x3,y3,x4,y4,7				 ;
		 WLine x5,y5,x6,y6,x7,y7,x8,y8,7				 ;
		 WJam1																	 ;
	Else																			 ;
		 bxang1=HSin(bxa):bxang2=HCos(bxa)				 ;
		 ;																			 ;
		 x1=px:y1=py														 ;
		 x2=x1-bxang1*bxh*v											;
		 y2=y1-bxang2*bxh*v											;
		 x3=x2:y3=y2														 ;
		 x4=x2+bxang2*bxw*h
		 y4=y2-bxang1*bxw*h
		 x5=x4:y5=y4
		 x6=x4+bxang1*bxh*v
		 y6=y4+bxang2*bxh*v
		 x7=x6:y7=y6
		 x8=x1:y8=y1
		 WJam2
		 WLine x1,y1,x2,y2,x3,y3,x4,y4,7
		 WLine x5,y5,x6,y6,x7,y7,x8,y8,7
		 WJam1
		 obxh=bxh:obxw=bxw:obxa=bxa
		 FlushEvents
	EndIf
Return


.newpr
	opx=epx:opy=epy
	ClearList table()
	ClearList table2()
	ClearList trans()
	bxh=20:bxw=20:obxh=20:obxw=20
	bxa=0:obxa=0:bxn=1
	v=1:h=1:ov=v:oh=h
	full=0
	InnerCls
	If MenuList(0,2,1) Then Gosub drawgrd
Return


.loadt
Return


.savet
Return


.maket
	If LastItem(trans())
		Dim List table(trans()\bxn-1) ; Can I do this ?!
	EndIf
	;
	newmem trans()
	While globfree(trans())
		a(1,1)=0:a(2,1)=0		;	these are the original
		a(1,2)=0:a(2,2)=1		;	image coordinates i.e
		a(1,3)=1:a(2,3)=1		;	the edges of the grid
		a(3,1)=1:a(4,1)=1		;
		a(3,2)=1:a(4,2)=0		;
		a(3,3)=1:a(4,3)=1		;
		z(1)=trans()\coords\x0/640	 ;	these are the transformation
		z(2)=trans()\coords\x1/640	 ;	x coordinates using an x scale
		z(3)=trans()\coords\x2/640	 ;	of 0 to 1 (x value/640)
		z(4)=trans()\coords\x3/640	 ;
		Gosub solvequ
		If globalloc(table())
			table()\a=ans(1)		;	solutions to four simultaneous
			table()\b=ans(2)		;		equations with three unkowns
			table()\e=ans(3)		;
			z(1)=1-trans()\coords\y0/200	 ; makes 0,0 the bottom left
			z(2)=1-trans()\coords\y1/200	 ;							of the image
			z(3)=1-trans()\coords\y2/200	 ;					 (1-y value/200)
			z(4)=1-trans()\coords\y3/200	 ; y scale is also 0 to 1
			Gosub solvequ
			table()\c=ans(1)
			table()\d=ans(2)
			table()\f=ans(3)
		EndIf
	Wend
	;
	Gosub calcprob
	Gosub dispt
Return


.solvequ
;
; Simultaneous linear equation solver using the Gauss-Seidel
; iterative technique.				(Errr....	 yeh ok then)
;
; x1*a+y1*b+e=x1'	four of these equations (4 x' coords)
; x1*c+y1*d+f=y1'	and four of these.
;
; x1,y1 are the original image x and y coords (0,1)
; x1',y1' are the transformation x and y coords (scale of 0,1)
; a,b,c,d,e,f are the solutions
;
	For i=1 To 4
		For j=1 To 3
			b(i,j)=a(i,j)
		Next
		w(i)=z(i)
	Next
		;
		For i=1 To 3
				bl=Abs(b(i,i))
				l=i
				il=i+1
				For j=il To 3
					If Abs(b(j,i)) < bl
						Goto nextone
					EndIf
					bl=Abs(b(j,i))
					l=j
		nextone:
				Next
				;
				If l=i
					For j=il To 3
						t=b(j,i)/b(i,i)
						For k=il To 3
							b(j,k)=b(j,k)-t*b(i,k)
						Next
						w(j)=w(j)-t*w(i)
					Next
					Goto nexttwo
				EndIf
				;
				For j=1 To 3
					hl=b(l,j)
					b(l,j)=b(i,j)
					b(i,j)=hl
				Next
				hl=w(l)
				w(l)=w(i)
				w(i)=hl
				;
				For j=il To 3
					t=b(j,i)/b(i,i)
					For k=il To 3
						b(j,k)=b(j,k)-t*b(i,k)
					Next
					w(j)=w(j)-t*w(i)
				Next
		nexttwo:
		Next
		;
	ans(3)=w(3)/b(3,3)
	For i= 3 To 1 Step -1
		s6=0
		For j=i+1 To 3
			s6=s6+(b(i,j)*ans(j))
		Next
		ans(i)=(w(i)-s6)/b(i,i)
	Next
Return


.calcprob
	;
	; The probability is required due to the method of decoding
	; which is the random iteration algorithm.
	;
	##[$80CA] table()
	newmem table()
	While globfree(table())
		denom=(\a*\d)-(\b*\c)				; add all transformation areas
		sumofdenom=sumofdenom+denom	; together
	Wend
	newmem table()
	While globfree(table())
		numer=(\a*\d)-(\b*\c)				; prob=area of transformation
		\p=QAbs(numer/sumofdenom)		;						 / area of image
	Wend
Return


.dispt
	##[$80CA] table()

	If LastItem(trans())
		Dim List table2(trans()\bxn-1)	;	here it is again !
	EndIf

	Use allocst 0

	StringText$ On:SetString 2,3:StringText$ 4,2

	ButtonGroup 0:SelectMode 1,5
	workstart 0,100,182,0,1,"EDIT"
	workstart 0,280,182,0,2,"DECODE"
	workstart 0,500,182,0,3,"EXIT"

	DefaultIDCMP $8|$10|$20|$40|$100|$400|$40000|$80000
	localstat 3,0,0,640,200,$1000,"Cack-O-Fractal Drawing System",1,3,0
	arrmult 0


	WColour 6,0
	WLocate 120,5:Print "A"
	WLocate 185,5:Print "B"
	WLocate 250,5:Print "C"
	WLocate 315,5:Print "D"
	WLocate 378,5:Print "E"
	WLocate 443,5:Print "F"
	WLocate 507,5:Print "P"
	WColour 3,0

	Use localstat 1
		InnerCls
	Use localstat 3

	NPrint "":WColour 3,0
	Format "0.000"
	newmem table()
	While globfree(table())
		Print "						 "
		NPrint	\a,"	 ",\b,"	 ",\c,"	 ",\d,"	 ",\e,"	 ",\f,"	 ",\p
		If globalloc(table2())
			table2()\a=\a,\b,\c,\d,\e,\f,\p
		EndIf
	Wend

	flag=0
	##[$80BB]
		ev.l=WaitEvent
		lw=EventWindow
		If ev.l=$40
			 Select GadgetHit
					Case 1
						Menus Off
						##[$C620] 0,1
						##[$C620] 0,2
						Gosub editt
						##[$C61F] 0,1
						##[$C61F] 0,2
						Menus On
					Case 2
						Gosub dcod
						Activate 3
					Case 3
						flag=1
			 End Select
		EndIf
		If ev.l=$100
			Select MenuHit
				Case 1
					If ItemHit=0 Then Gosub dcod:Activate 3
					If ItemHit=6 Then Gosub demo:Activate 3
			End Select
		EndIf
		If ev.l=$40000 AND lw=1 Then Activate 3
		If ev.l=$80000 AND lw=0 Then Activate 3
	##[$80BC] flag=1

	Format "###":FlushEvents:CloseWindow 3
	Use localstat 1
	WColour 4,0
	WLocate 20,1:Print "xpos ="
	WLocate 120,1:Print "ypos ="
	WLocate 220,1:Print "boxw ="
	WLocate 320,1:Print "boxh ="
	WLocate 420,1:Print "boxa ="
	WLocate 520,1:Print "boxn ="
	WColour 5,0
	WLocate 25,11:Print "F1 - size shape"
	WLocate 225,11:Print "F2 - rotate shape"
	WLocate 425,11:Print "F3 - default shape"
	WLocate 35,21:Print "F4 - pick up last filled shape"
	WLocate 325,21:Print "F5 - delete last filled shape"
	Use localstat 0:Activate 0
Return


.about
Return


.editt
	##[$80CA] table()

	If LastItem(trans())
		Dim editpos(6,trans()\bxn-1)
	EndIf

	y=0
	newmem table()
	While globfree(table())
		editpos(0,y)=\a:editpos(1,y)=\b
		editpos(2,y)=\c:editpos(3,y)=\d
		editpos(4,y)=\e:editpos(5,y)=\f
		editpos(6,y)=\p
		y+1
	Wend

	flag2=0:x=0:y=0
	##[$80BB]
		ev.l=WaitEvent
		lw=EventWindow

		If ev.l=$40 AND GadgetHit=3 Then flag2=1
		If ev.l=$40000 AND lw=1 Then Activate 3
		If ev.l=$80000 AND lw=0 Then Activate 3

		WLocate x*50+50,y*8+4
		EditFrom x
		editpos(x,y)=Edit(editpos(x,y),5)
		x=Editat

		Select EditExit
			Case 13				; return
			Case 27				; esc
				flag2=1
			Case 28				; up
			Case 29				; down
			Case 30				; left
				If x>1 Then x-1
			Case 31				; right
				If x<8 Then x+1
		End Select

	##[$80BC] flag2=1
Return


.dcod
	##[$80CA] table2()
	demorun=0
	newmem table2()
	If globfree(table2())
		Dim List table.ifs(trans()\bxn-1)
		newmem table2()
		While globfree(table2())
			If globalloc(table())
			 table()\a=\a,\b,\c,\d,\e,\f,\p
			EndIf
		Wend
		;
		Gosub screenchk
		Gosub decode
		;
		FlushEvents:CloseScreen 1
		Use allocst 0:Use localstat 0:Activate 0
	EndIf
Return


.screenchk
	dh=DispHeight
	If MenuList(0,2,4) Then intlc=16:sh=dh*2 Else intlc=0:sh=dh
	If MenuList(0,2,3) Then hires=8:sw=640 Else hires=0:sw=320
	If MenuList(0,2,1)
		If hires=8 Then nbpl=3 Else nbpl=4
	Else
		nbpl=0
	EndIf
	;
	If aga=-1
		If hires=8 Then viewm=$8000 Else viewm=$0000
		If intlc=16 Then viewm=viewm+$4
		allocst 1,0,0,sw,sh,8,viewm,"",0,0
	Else
		allocst 1,1+nbpl+hires+intlc
	EndIf
	Green 0,0,0,0:Green 1,0,0,0:Green 2,0,0,0:Green 3,0,0,0
	ScreensBitMap 1,1
	;
	DefaultIDCMP $8|$100
	ww=320:wh=sh/2
	localstat 4,0,0,ww,wh,$0800,"",0,0
	;
	; this window is needed when calling the asl file requester so
	; that the bitmap being drawn is not destroyed.

	If MenuList(0,2,5) AND demorun=0	; auto-scale ?
		Gosub calcscales
	Else
		If hires=0 Then xscale=320 Else xscale=640
		If intlc=0 Then yscale=256 Else yscale=512
		xoff=0:yoff=0
	EndIf
	;
Return


.calcscales
		##[$80CA] table()
		finished=0:x=0:y=0:settle=0
		minx=0:maxx=0:xscale=0
		miny=0:maxy=0:yscale=0
		##[$80BB]
			newmem table()
			While globfree(table())
				n=Rnd
				If n <= \p
					newx=\a*x + \b*y + \e
					newy=\c*x + \d*y + \f
					x=newx
					y=newy
					xco_ord=x*sw
					yco_ord=y*sh
					##[$80BE] While:Goto storecrd
				EndIf
			Wend
		storecrd:
		If settle>10
			If xco_ord>maxx Then maxx=xco_ord Else If xco_ord<minx Then minx=xco_ord
			If yco_ord>maxy Then maxy=yco_ord Else If yco_ord<miny Then miny=yco_ord
		Else
			settle+1
		EndIf
		finished+1
		##[$80BC] finished=1500
		;
		xsize=maxx-minx
		ysize=maxy-miny
		;
		xscale=(sw/xsize)*sw
		yscale=(sh/ysize)*sh
		;
		Gosub calcoffs
Return


.calcoffs
		##[$80CA] table()
		finished=0:x=0:y=0:settle=0
		minx=0:maxx=0:xoff=0
		miny=0:maxy=0:yoff=0
		##[$80BB]
			newmem table()
			While globfree(table())
				n=Rnd
				If n <= \p
					newx=\a*x + \b*y + \e
					newy=\c*x + \d*y + \f
					x=newx
					y=newy
					xco_ord=x*xscale
					yco_ord=yscale-y*yscale
					##[$80BE] While:Goto storecrd2
				EndIf
			Wend
		storecrd2:
		If settle>10
			If xco_ord>maxx Then maxx=xco_ord Else If xco_ord<minx Then minx=xco_ord
			If yco_ord>maxy Then maxy=yco_ord Else If yco_ord<miny Then miny=yco_ord
		Else
			settle+1
		EndIf
		finished+1
		##[$80BC] finished=1500
		;
		If minx<0 Then xoff=QAbs(minx)
		If maxx>sw Then xoff=sw-maxx
		If miny<0 Then yoff=QAbs(miny)
		If maxy>sh Then yoff=sh-maxy
		;
Return


.decode
	##[$80CA] table()
	x=0:y=0:settle=0	; initialise x and y co-ords and settling time
	jb=0							; initialise joystick button flag
	;;
	;;
	If MenuList(0,2,1)														; colour on ?
		;
		If rancol=-1
			;
			If aga=-1																		;
				rcol=255																	 ;
				AGAGreen 1,0,0,0,0												; set up
				For n=1 To rcol														; palette
					AGAGreen 1,n,Rnd(255),Rnd(255),Rnd(255) ; for random
				Next																			 ; colour
			Else																				 ;
				If hires=0 Then rcol=31 Else rcol=15			 ;
				StopCycle 1,0,0,0,0													 ;
				For n=1 To rcol														;
					StopCycle 1,n,Rnd(15),Rnd(15),Rnd(15)			 ;
				Next																			 ;
			EndIf																				;
			;
		Else
			;
			If aga=-1																		;
				cshd=255																	 ;
				AGAGreen 1,0,0,0,0												; set up
				For n=1 To cshd														; palette
					AGAGreen 1,n,n/2,n/3,n									; for colour
				Next																			 ; shade
			Else																				 ;
				If hires=0 Then cshd=31 Else cshd=15			 ;
				StopCycle 1,0,0,0,0													 ;
				For n=1 To cshd														;
					If cshd<15															 ;
						StopCycle 1,n,2,n,2											 ;
					Else																		 ;
						StopCycle 1,n,n/2,15,n/2									;
					EndIf																		;
				Next																			 ;
			EndIf																				;
			;
		EndIf
		;
	Else
		;
		StopCycle 1,0,0,0,0:StopCycle 1,1,15,15,15					 ; black'n'white
		;
	EndIf
	;;
	Use lmaxlen 1:Use SetCycle 1:BlockScroll
	;;
	If MenuList(0,2,1)						; use colour decode routine ?
		;
		If rancol=-1
			##[$80BB]																		;
				newmem table()											 ; random colour
				While globfree(table())								 ;			 routine
					n=Rnd																 ;
					If n <= \p
						newx=\a*x + \b*y + \e
						newy=\c*x + \d*y + \f
						x=newx
						y=newy
						xco_ord=(x*xscale)+xoff
						yco_ord=(yscale-y*yscale)+yoff
						##[$80BE] While:Goto nextitc
					EndIf
				Wend
				nextitc:
				If Cls(xco_ord,yco_ord)=0
					If settle>10 Then Point xco_ord,yco_ord,Rnd(rcol) Else settle+1
				EndIf
				jb=Joyb(0)
			##[$80BC] jb<>0:VWait 30
			;
		Else
			;
			ch=sh/cshd+1:cw=sw/cshd+1								 ;
			##[$80BB]																		; colour shade
				newmem table()											 ;			routine
				While globfree(table())								 ;
					n=Rnd
					If n <= \p
						newx=\a*x + \b*y + \e
						newy=\c*x + \d*y + \f
						x=newx
						y=newy
						xco_ord=(x*xscale)+xoff
						yco_ord=(yscale-y*yscale)+yoff
						##[$80BE] While:Goto nextitcs
					EndIf
				Wend
				nextitcs:
				Select sopt
					Case 0
						col=Int(yco_ord/ch)
					Case 1
						col=cshd-Int(yco_ord/ch)
					Case 2
						col=Int(xco_ord/cw)
					Case 3
						col=cshd-Int(xco_ord/cw)
					Case 4
						 mw=QAbs(xco_ord-sw/2):mh=QAbs(yco_ord-sh/2)
						 r=Tan(mh*mh+mw*mw):col=cshd-Int(r/ch)
					Case 5
						 mw=QAbs(xco_ord-sw/2):mh=QAbs(yco_ord-sh/2)
						 r=Tan(mh*mh+mw*mw):col=Int(r/ch)
				End Select
				col=QLimit(col,1,cshd)
				If settle>10 Then Point xco_ord,yco_ord,col Else settle+1
				jb=Joyb(0)
			##[$80BC] jb<>0:VWait
		EndIf
		;
	Else														 ; use black and white
		;
		##[$80BB]
			newmem table()
			While globfree(table())
				n=Rnd
				If n <= \p
					newx=\a*x + \b*y + \e
					newy=\c*x + \d*y + \f
					x=newx
					y=newy
					xco_ord=(x*xscale)+xoff
					yco_ord=(yscale-y*yscale)+yoff
					##[$80BE] While:Goto nextitbw
				EndIf
			Wend
			nextitbw:
			If settle>10 Then Point xco_ord,yco_ord,1 Else settle+1
			jb=Joyb(0)
		##[$80BC] jb<>0:VWait 30
		;
	EndIf
	;;
;	If jb=2								 ; right mouse button to save image
;		RGB 1,15,15,15
;		MaxLen pa$=192
;		MaxLen fi$=192
;		f$=ASLFileRequest$("Save Image as IFF",pa$,fi$,0,0,ww,wh)
;		;
;		If f$
;			SaveBitmap 1,f$,1
;		EndIf
;	EndIf
	If demorun=0 Then CloseWindow 4
Return


.setgrd
Return


.gridst
	##[$80CA] trans()\coords
	opx=epx:opy=epy
	If MenuList(0,1,1)=0
		InnerCls
		newmem trans()													; Redraw Filled
		While globfree(trans())										;				 boxes
			Gosub drawfbx														;
			WLine \x0,\y0,\x1,\y1,\x1,\y1,\x2,\y2,0	;
			WLine \x2,\y2,\x3,\y3,\x3,\y3,\x0,\y0,0	;
		Wend																			 ;
		Activate 0
	Else
		InnerCls
		Gosub drawgrd
		newmem trans()
		While globfree(trans())
			Gosub drawfbx
			WLine \x0,\y0,\x1,\y1,\x1,\y1,\x2,\y2,0
			WLine \x2,\y2,\x3,\y3,\x3,\y3,\x0,\y0,0
		Wend
		Activate 0
	EndIf
Return


.setbx
	opx=px:opy=py
	If ev.l=$400							 ; Set box size with mouse
		;
		Menus Off
		##[$80BB]
			ev.l=WaitEvent
			obxh=bxh:obxw=bxw
			;
			If x6>x1							 ; Get orientation of box for sizing
				If WMouseX>px+10 Then bxw=WMouseX-px
			Else
				If WMouseX<px-10 Then bxw=px-WMouseX
			EndIf
			;
			If y2<y1
				If WMouseY<py-10 Then bxh=py-WMouseY
			Else
				If WMouseY>py+10 Then bxh=WMouseY-py
			EndIf
			;
			Gosub drawbx
			;
			Use localstat 1
			WColour 7,0
			WLocate 220,1:Print "boxw ="
			WLocate 320,1:Print "boxh ="
			WColour 1,0
			WLocate 280,1:Print bxw,"	"
			WLocate 380,1:Print bxh,"	"
			Use localstat 0
		##[$80BC] ev.l=$8
		Menus On
		;
	Else												; Set box size with keyboard
		;
		Print "bike thing "
		;
	EndIf
	obxh=bxh:obxw=bxw
Return


.rotbx
	opx=px:opy=py
	If ev.l=$400
		Menus Off
		Use localstat 1
		WColour 7,0
		WLocate 420,1:Print "boxa ="
		WColour 1,0
		WLocate 480,1:Print ang,"	"
		Use localstat 0
		WaitEvent
		##[$80BB]
			ev.l=Event
			obxa=bxa
			If WMouseX<px-5
				bxa+0.005:If bxa>(2*##[$80BA]) Then bxa-(2*##[$80BA])
			EndIf
			If WMouseX<px-15
				bxa+0.05:If bxa>(2*##[$80BA]) Then bxa-(2*##[$80BA])
			EndIf
			If WMouseX>px+5
				bxa-0.005:If bxa<-(2*##[$80BA]) Then bxa+(2*##[$80BA])
			EndIf
			If WMouseX>px+15
				bxa-0.05:If bxa<-(2*##[$80BA]) Then bxa+(2*##[$80BA])
			EndIf
			;
			If obxa<>bxa
				 Gosub drawbx
				 If bxa<=0
					 ang=-1*Int(bxa*180/##[$80BA])
				 Else
					 ang=360-Int(bxa*180/##[$80BA])
				 EndIf
			EndIf
			;
			Use localstat 1
			WColour 7,0
			WLocate 420,1:Print "boxa ="
			WColour 1,0
			WLocate 480,1:Print ang,"	"
			Use localstat 0
		##[$80BC] ev.l=$8
		Menus On
	Else
		Print ""
	EndIf
	obxa=bxa
Return


.demo
	##[$80CA] table()
	demorun=1
	Gosub screenchk
	##[$80C8] datastrt
	;
	For image=1 To 9
		Use lmaxlen 1:BlockScroll
		;
		Read ntrans
		Dim List table.ifs(ntrans)
		For i=0 To ntrans-1
			globalloc table()
			Read \a,\b,\c,\d,\e,\f,\p
		Next
		;
		Gosub calcscales
		If image=9 Then demorun=0
		Gosub decode
	Next
	;
	FlushEvents:CloseScreen 1
	Use allocst 0:Use localstat 0:Activate 0
Return


.datastrt
;
; The first data line contains the number of transformations.
; The remaining lines are the Iterated Function System codes
; for the images.
;

;
; Acid fractal
;
Data 11
Data 0.25,0,0,0.2,0,0.8,0.1
Data 0,0.1,-0.8,0,0,0.8,0.1
Data 0,0.05,-0.2,0,0.1,0.6,0.1
Data 0,0.1,-0.8,0,0.15,0.8,0.1
Data 0.2,0,0,0.2,0.3,0.8,0.1
Data 0,0.1,-0.6,0,0.3,0.8,0.1
Data 0.2,0,0,0.2,0.3,0,0.1
Data 0,0.1,-1,0,0.55,1,0.1
Data 0,0.1,-1,0,0.7,1,0.17
Data 0.15,0.09,-0.5,0.11,0.76,0.89,0.1
Data -0.15,0.09,-0.5,-0.11,0.91,0.61,0.1

;
; M.F.Barnsley's Fern Leaf
;
Data 4
Data 0,0,0,0.16,0,0,0.01
Data 0.2,-0.26,0.23,0.22,0,1.6,0.07
Data -0.15,0.28,0.26,0.24,0,0.44,0.07
Data 0.85,0.04,-0.04,0.85,0,1.6,0.85

;
; Spirals
;
Data 2
Data -0.15,0,0,-0.15,-0.75,-0.25,0.1
Data 1.179,-0.594,0.594,0.467,0,0,0.9

;
; A fractal tree ?
;
Data 4
Data 0,0,0,0.5,0,0,0.05
Data 0.1,0,0,0.1,0,0.2,0.15
Data 0.42,-0.42,0.42,0.42,0,0.2,0.4
Data 0.42,0.42,-0.42,0.42,0,0.2,0.4

;
; Fern Leaf
;
Data 4
Data 0.504,-0.121,0.089,0.685,0.248,0.25,0.5
Data 0.214,-0.378,0.214,0.378,0.393,0.044,0.2
Data 0.2,0.354,-0.2,0.354,0.4,0.367,0.2
Data 0.025,0,0,0.35,0.495,0,0.1

;
; Sierpinski Triangle
;
Data 3
Data 0.5,0,0,0.5,0,0,0.33
Data 0.5,0,0,0.5,0.5,0,0.33
Data 0.5,0,0,0.5,0.25,0.433,0.34

;
; Snowflake
;
Data 5
Data 0.382,0,0,0.382,0.138,0.074,0.2
Data 0.382,0,0,0.382,0.48,0.074,0.2
Data 0.382,0,0,0.382,0.585,0.399,0.2
Data 0.382,0,0,0.382,0.31,0.6,0.2
Data 0.382,0,0,0.382,0.033,0.399,0.2

;
; Ted fractal
;
Data 9
Data 0.3,0,0,0.2,0,0.8,0.1
Data 0,0.1,-0.8,0,0.1,0.8,0.14
Data 0,0.1,-1,0,0.35,1,0.17
Data 0.2,0,0,0.2,0.45,0.8,0.07
Data 0.2,0,0,0.2,0.45,0.4,0.07
Data 0.2,0,0,0.2,0.45,0,0.07
Data 0,0.1,-1,0,0.7,1,0.17
Data 0.15,0.09,-0.5,0.11,0.76,0.89,0.1
Data -0.15,0.09,-0.5,-0.11,0.91,0.61,0.1

;
; A fractal shape !
;
Data 2
Data 0.498,-0.448,0.448,0.498,0.468,-0.181,0.5
Data 0.498,-0.448,0.448,0.498,0.381,0.233,0.5
