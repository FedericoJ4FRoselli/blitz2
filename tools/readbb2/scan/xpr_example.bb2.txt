; ascii translation of /Users/simon/Google Drive/amiga/w/abc/bums/bum8/Examples/xpr_example.BB2,/Users/simon/Google Drive/amiga/w/abc/bums/old/bum8/Examples/xpr_example.BB2,/Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/bum8/Examples/xpr_example.BB2,/Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/old/bum8/Examples/xpr_example.BB2
; $VER: XPR_Example 1.0 (1.11.94)
; AUTHOR: Robert Newman
;
; This code REQUIRES WB2.0+ and possibly Blitz v1.9.
;
; This program demonstates how the XPR protocol libraries
; can be accessed from within Blitz.
;
; I've implemented all the callbacks necessary for ZModem
; to function in send and receive mode.
;
; Most of this code was pulled from a FIDO point mailer I'm
; writing, so if you spot any bugs or improve on this program
; I would like to here about it.
;
; I would've broken this example up into more managable functions
; but GetReg doesn't work to well in a function.
;
; This example uses my own serial commands simply because
; when I started writing my mailer Blitz's own commands
; were bugged.	I haven't tried using Blitz's serial commands
; since v1.7 so you MAY be able to get the program to run
; with them.	If you succeed let me know.
;
; EMail	: rob@frontier.dungeon.com
; FidoNet: 2:2501/307.37
;
; Specs for XPR libraries/hosts are available from aminet:
; /pub/aminet/comm/term/xpr2001.lha

Function.b initserial{devname$,unit.l,baud.l,serflags.b,buffsize.l}
	Shared *SerialMP.MsgPort, *SerialIO.IOExtSer

	result.l = False
	*SerialMP = 0
	*SerialIO = 0

	*SerialMP = ##[$FEE2]
	If *SerialMP
		*SerialIO = ##[$FEE0](*SerialMP, SizeOf .IOExtSer)
		If *SerialIO
			*SerialIO\io_SerFlags = serflags
			*SerialIO\io_RBufLen = buffsize
			If ##[$FEC0] (&devname$,unit,*SerialIO,0) = 0
				*SerialIO\io_SerFlags = serflags
				*SerialIO\io_Baud = baud
				*SerialIO\io_BrkTime = 250000
				*SerialIO\IOSer\io_Command = #SDCMD_SETPARAMS
				*SerialIO\io_StopBits = 1
				*SerialIO\io_ReadLen = 8
				*SerialIO\io_WriteLen = 8
				##[$FEC2] (*SerialIO)
				result.l = True
			Else
				##[$FEE1](*SerialIO)
				*SerialIO = 0
				##[$FEE3](*SerialMP)
				*SerialMP = 0
			EndIf
		Else
			##[$FEE3] (*SerialMP)
			*SerialMP = 0
		EndIf
	EndIf

	Function Return result
End Function

Statement shutdownserial{}
	Shared *SerialMP.MsgPort, *SerialIO.IOExtSer

	If *SerialIO
		*SerialIO\IOSer\io_Command = #CMD_FLUSH
		##[$FEC2] (*SerialIO)
		*SerialIO\IOSer\io_Command = #CMD_CLEAR
		##[$FEC2] (*SerialIO)

		##[$FEC1] (*SerialIO)

		##[$FEE1] (*SerialIO)
		*SerialIO = 0
		If *SerialMP
			##[$FEE3] (*SerialMP)
			*SerialMP = 0
		EndIf
	EndIf

End Statement


Function.b CheckCarrier{}
	Shared *SerialIO


	If *SerialIO
		*SerialIO\IOSer\io_Command = #SDCMD_QUERY
		##[$FEC2] (*SerialIO)
		If (*SerialIO\io_Status AND 32)
			result.b = False
		Else
			result.b = True
		EndIf
	Else
		result.b = False
	EndIf

	Function Return result
End Function



#tag = $80080000
#GTTX_Text = #tag+11
#GTNM_Number = #tag+13

Statement OpenTransferWindow{}
	; Open a window for showing transfer
	; progress.

	fontwidth.w	= 8
	fontheight.w = 8
	GadgetHeight.w = fontheight+3

	xlineup.w = 120

	currentY.w = 1

	; Protocol
	GTText 0,50,xlineup,currentY,fontwidth*50,GadgetHeight,"Protocol",1,""
	currentY+GadgetHeight+1

	; Filename
	GTText 0,51,xlineup,currentY,fontwidth*50,GadgetHeight,"FileName",1,""
	currentY+GadgetHeight+1

	; FileSize
	GTNumber 0,52,xlineup,currentY,fontwidth*50,GadgetHeight,"FileSize",1,0
	currentY+GadgetHeight+1

	; Message
	GTText 0,53,xlineup,currentY,fontwidth*50,GadgetHeight,"Message",1,""
	currentY+GadgetHeight+1

	; Error Message
	GTText 0,54,xlineup,currentY,fontwidth*50,GadgetHeight,"Error MSG",1,""
	currentY+GadgetHeight+1

	; Blocks
	GTNumber 0,55,xlineup,currentY,fontwidth*50,GadgetHeight,"Blocks",1,0
	currentY+GadgetHeight+1

	; Block Size
	GTNumber 0,56,xlineup,currentY,fontwidth*50,GadgetHeight,"Block Size",1,0
	currentY+GadgetHeight+1

	; Bytes
	GTNumber 0,57,xlineup,currentY,fontwidth*50,GadgetHeight,"Bytes",1,0
	currentY+GadgetHeight+1

	; Errors
	GTNumber 0,58,xlineup,currentY,fontwidth*50,GadgetHeight,"Errors",1,0
	currentY+GadgetHeight+1

	; Timeouts
	GTNumber 0,59,xlineup,currentY,fontwidth*50,GadgetHeight,"Timeouts",1,0
	currentY+GadgetHeight+1

	; PKT Type
	GTText 0,60,xlineup,currentY,fontwidth*50,GadgetHeight,"PKT Type",1,""
	currentY+GadgetHeight+1

	; PKT Delay
	GTNumber 0,61,xlineup,currentY,fontwidth*50,GadgetHeight,"PKT Delay",1,0
	currentY+GadgetHeight+1

	; CHAR Delay
	GTNumber 0,62,xlineup,currentY,fontwidth*50,GadgetHeight,"CHAR Delay",1,0
	currentY+GadgetHeight+1

	; BLOCK CHECK
	GTText 0,63,xlineup,currentY,fontwidth*50,GadgetHeight,"Block Check",1,""
	currentY+GadgetHeight+1

	; EXPECTED TIME
	GTText 0,64,xlineup,currentY,fontwidth*50,GadgetHeight,"Expected",1,""
	currentY+GadgetHeight+1

	; ELAPSED TIME
	GTText 0,65,xlineup,currentY,fontwidth*50,GadgetHeight,"Elapsed",1,""
	currentY+GadgetHeight+1

	; Data Rate
	GTNumber 0,66,xlineup,currentY,fontwidth*50,GadgetHeight,"Data Rate",1,0
	currentY+GadgetHeight+1

	WindowTags 0,$2|$4|$8|$1000,"XPR",#WA_IDCMP,#IDCMP_CLOSEWINDOW,#WA_InnerWidth,fontwidth*70,#WA_InnerHeight,currentY
	WindowFont 0
	DefaultOutput
	AttachGTList 0,0
End Statement

;------------------------------------------------------------------
; These NEWTYPEs/CONSTANTS are required by XPR libraries.
; Converted from xproto.h

NEWTYPE .XPR_IO
	xpr_filename.l	 ;File name(s)
	xpr_fopen.l			;Open file
	xpr_fclose.l		 ;Close file
	xpr_fread.l			;Get UBYTE from file
	xpr_fwrite.l		 ;Put string to file
	xpr_sread.l			;Get UBYTE from serial
	xpr_swrite.l		 ;Put string to serial
	xpr_sflush.l		 ;Flush serial input buffer
	xpr_update.l		 ;Print stuff
	xpr_chkabort.l	 ;Check for abort
	xpr_chkmisc.l		;Check misc. stuff
	xpr_gets.l			 ;Get string interactively
	xpr_setserial.l	;Set and Get serial info
	xpr_ffirst.l		 ;Find first file name
	xpr_fnext.l			;Find next file name
	xpr_finfo.l			;Return file info
	xpr_fseek.l			;Seek in a file
	xpr_extension.l	;Number of extensions
	xpr_data.l			 ;Initialized by Setup.
	xpr_options.l		;Multiple XPR options.
	xpr_unlink.l		 ;Delete a file.
	xpr_squery.l		 ;Query serial device
	xpr_getptr.l		 ;Get various host ptrs
End NEWTYPE

NEWTYPE .XPR_UPDATE
	xpru_updatemask.l		 ;
	*xpru_protocol				;
	*xpru_filename				;
	xpru_filesize.l			 ;
	*xpru_msg						 ;
	*xpru_errormsg				;
	xpru_blocks.l				 ;
	xpru_blocksize.l			;
	xpru_bytes.l					;
	xpru_errors.l				 ;
	xpru_timeouts.l			 ;
	xpru_packettype.l		 ;
	xpru_packetdelay.l		;
	xpru_chardelay.l			;
	*xpru_blockcheck.l		;
	*xpru_expecttime.l		;
	*xpru_elapsedtime.l	 ;
	xpru_datarate.l			 ;
	xpru_reserved1.l			;
	xpru_reserved2.l			;
	xpru_reserved3.l			;
	xpru_reserved4.l			;
	xpru_reserved5.l			;
End NEWTYPE

#XPRU_PROTOCOL		 =$00000001
#XPRU_FILENAME		 =$00000002
#XPRU_FILESIZE		 =$00000004
#XPRU_MSG					=$00000008
#XPRU_ERRORMSG		 =$00000010
#XPRU_BLOCKS			 =$00000020
#XPRU_BLOCKSIZE		=$00000040
#XPRU_BYTES				=$00000080
#XPRU_ERRORS			 =$00000100
#XPRU_TIMEOUTS		 =$00000200
#XPRU_PACKETTYPE	 =$00000400
#XPRU_PACKETDELAY	=$00000800
#XPRU_CHARDELAY		=$00001000
#XPRU_BLOCKCHECK	 =$00002000
#XPRU_EXPECTTIME	 =$00004000
#XPRU_ELAPSEDTIME	=$00008000
#XPRU_DATARATE		 =$00010000

#XProtocolCleanup	=-$1e
#XProtocolSetup		=-$24
#XProtocolSend		 =-$2a
#XProtocolReceive	=-$30
#XProtocolHostMon	=-$36
#XProtocolUserMon	=-$3c

NEWTYPE .XPRHOST
	*XPRBase.Library
	XPRCommand.l
	XPRData$
	XPRResult.l
	XPRWindowOpen.b
End NEWTYPE

;-----------------------------------------------------------------
; Main program starts here
.MAIN_PROGRAM

WBStartup
WbToScreen 0

LoadFont 0,"topaz.font",8


; This list stores names of files to be sent
Dim List Send$(100)


;Initialize XPR_IO structure for library

;XPR defaults

DEFTYPE .XPR_IO XPRConfig
USEPATH XPRConfig.XPR_IO

\xpr_filename	= 0
\xpr_fopen		 = ?xlib_fopen
\xpr_fclose		= ?xlib_fclose
\xpr_fread		 = ?xlib_fread
\xpr_fwrite		= ?xlib_fwrite
\xpr_sread		 = ?xlib_sread
\xpr_swrite		= ?xlib_swrite
\xpr_sflush		= ?xlib_sflush
\xpr_update		= ?xlib_update
\xpr_chkabort	= ?xlib_chkabort
\xpr_chkmisc	 = 0
\xpr_gets			= ?xlib_gets
\xpr_setserial = 0
\xpr_ffirst		= ?xlib_ffirst
\xpr_fnext		 = ?xlib_ffirst
\xpr_finfo		 = ?xlib_finfo
\xpr_fseek		 = ?xlib_fseek
\xpr_extension = 4
\xpr_data			= 0
\xpr_options	 = 0
\xpr_unlink		= ?xlib_unlink
\xpr_squery		= ?xlib_squery
\xpr_getptr		= 0


; xlib_sread needs a timer, so allocate one from the timer.device

DEFTYPE .MsgPort		 *TimerMP
DEFTYPE .timerequest *TimerIO

*TimerMP.MsgPort = ##[$FEE2]
If *TimerMP
	; Message port created OK

	*TimerIO.timerequest = ##[$FEE0](*TimerMP, SizeOf .timerequest)
	If *TimerIO
		; IORequest created OK

		If ##[$FEC0]("timer.device",#UNIT_MICROHZ,*TimerIO,0)
			; device failed to open
			; should never happen so I'll ignore it! ;-)
		EndIf
	Else
		; CreateIORequest failed. Release message port

		##[$FEE3](*TimerMP)
		*TimerMP = 0
	EndIf
EndIf

DEFTYPE .XPRHOST Config

Config\XPRBase = 0,0,"",0,False


; Now open the serial device
;
; Device name : serial.device
; Unit number : 0
; Speed(BPS)	: 19200
; IO_SERFLAGS : XDISABLED		; XON/XOFF disabled.
;							 7WIRE				; RTS/CTS flow control
; Buffer size : 8192 bytes

If NOT initserial{"serial.device",0,19200,#SERF_XDISABLED|#SERF_7WIRE,8192}
	temp.l = ##[$A281]("XPR Example","Failed to open serial device","OK")
EndIf

; Open the XPR protocol library
; I'm using zmodem but others should work.

Config\XPRBase = ##[$FECF]("xprzmodem.library",0)
If Config\XPRBase = 0
	temp.l = ##[$A281]("XPR Example","I couldn't open the xprzmodem.library","OK")
EndIf


If *SerialIO AND *TimerIO AND Config\XPRBase
	; XPR, serial and timer are OK

; This piece of code was added so I could test this
; program with nullmodem.device.

;	dial$="ATDT1211221"+Chr$(13)
;	*SerialIO\IOSer\io_Command = #CMD_WRITE
;	*SerialIO\IOSer\io_Length = -1
;	*SerialIO\IOSer\io_Data = &dial$
;	DoIO_(*SerialIO)

	; Configure the XPR library

	Config\XPRCommand = #XProtocolSetup

	; This the the XPR library configuration string
	; Consult library docs

	Config\XPRData = "TN,ON,B16,F0,E10,M1024,AN,DN,KY,RN,SN,PRAM:"

	Gosub CALLXPR

	If ##[$A281]("XPR Example","Which would you like to do?","SEND FILE|RECEIVE FILE(S)")
		; Send file

		MaxLen pa$=192
		MaxLen fi$=192

		ClearList Send$()

		; you could add a loop here to allow multiple files
		; to be sent.
		If AddItem(Send$())
			Send$() = ASLFileRequest$("Select file to send",pa$,fi$)
		EndIf

		Config\XPRCommand = #XProtocolSend
		Config\XPRData = ""

		ResetList Send$()
		Gosub CALLXPR

		NPrint "Transfer complete. Library return code: ",Config\XPRResult

	Else

		; Receive file(s)

		Config\XPRCommand = #XProtocolReceive
		Config\XPRData = ""

		Gosub CALLXPR

		NPrint "Transfer complete. Library return code: ",Config\XPRResult

	EndIf

EndIf

; Transfers complete
; Release system resources and quit

Gosub Tidyup

;ClickMouse
End


.CALLXPR:
	XPRConfig\xpr_filename = &Config\XPRData
	GetReg	d3,&XPRConfig.XPR_IO
	GetReg	d4,Config\XPRBase + Config\XPRCommand
	GetReg	d6,Config\XPRBase

	JSR SaveBlitz
	MOVE.l d6,a6
	MOVE.l d4,a1
	MOVE.l d3,a0
	JSR (a1)
	JSR RestoreBlitz
	PutReg d0,Config\XPRResult
	CloseWindow 0
	Config\XPRWindowOpen = False
	Return


.Tidyup:

If Config\XPRBase
	; Ask library to tidyup

	Config\XPRCommand = #XProtocolCleanup
	Config\XPRData = ""
	Gosub CALLXPR

	; Close XPR library

	##[$FEBB](Config\XPRBase)
	Config\XPRBase = 0
EndIf


If *TimerIO
	; release timer

	##[$FEC1](*TimerIO)

	##[$FEE1](*TimerIO)
	*TimerIO = 0

	##[$FEE3](*TimerMP)
	*TimerMP = 0

EndIf

shutdownserial{}

Return


;----------------------------------------------------------------------
; The XPR callback functions.	These routines are called by the library
; when required.

.xlib_fopen:
	; Open a file requested by the XPR library and return result.

	MOVEM.l d2-d7/a2-a6,-(a7)
	JSR RestoreBlitz
	PutReg a1,accessmode.l
	PutReg a0,fname.l
	fname$= Peek$(fname)
	result.l = 0
	Select UCase$(Peek$(accessmode))
		Case "R"
			result.l = ##[$FE01](&fname$,#MODE_OLDFILE)
		Case "W"
			result.l = ##[$FE01](&fname$,#MODE_NEWFILE)
		Case "A"
			result.l = ##[$FE01](&fname$,#MODE_READWRITE)
			If result.l
				temp.l = ##[$FE07](result,0,#OFFSET_END)
			EndIf
		Case "A+"
			result.l = ##[$FE01](&fname$,#MODE_READWRITE)
			If result.l
				temp.l = ##[$FE07](result,0,#OFFSET_END)
			EndIf
		Case "R+"
			temp.l = ##[$FE0A](&fname$,#ACCESS_READ)
			If temp
				result.l = ##[$FE01](&fname$,#MODE_READWRITE)
				##[$FE0B](temp)
			EndIf
		Case "W+"
			result.l = ##[$FE01](&fname$,#MODE_READWRITE)
	End Select
	GetReg d0,result.l
	JSR SaveBlitz
	MOVEM.l (a7)+,d2-d7/a2-a6
	RTS


.xlib_fclose:
	; Close a file

	MOVEM.l d2-d7/a2-a6,-(a7)
	JSR RestoreBlitz
	PutReg a0,fnum.l
	##[$FE02](fnum)
	JSR SaveBlitz
	MOVEQ.l #0,d0
	MOVEM.l (a7)+,d2-d7/a2-a6
	RTS


.xlib_fwrite:
	; Write a block of memory to file

	MOVEM.l d2-d7/a2-a6,-(a7)
	JSR RestoreBlitz
	PutReg a0,buff.l
	PutReg d0,size.l
	PutReg d1,counter.l
	PutReg a1,fnum.l
	GetReg d0,(##[$FE04](fnum,buff,counter*size) / size)
	JSR SaveBlitz
	MOVEM.l (a7)+,d2-d7/a2-a6
	RTS


.xlib_fread:
	; Read a block from file to memory

	MOVEM.l d2-d7/a2-a6,-(a7)
	JSR RestoreBlitz
	PutReg a0,buff.l
	PutReg d0,size.l
	PutReg d1,counter.l
	PutReg a1,fnum.l
	GetReg d0,(##[$FE03](fnum,buff,counter*size) / size)
	JSR SaveBlitz
	MOVEM.l (a7)+,d2-d7/a2-a6
	RTS


.xlib_fseek:
	; Seek to a specified point within a file

	MOVEM.l d2-d7/a2-a6,-(a7)
	JSR RestoreBlitz
	PutReg a0,fnum.l
	PutReg d1,origin.l
	PutReg d0,offset.l
	result.l = 0
	Select origin
		Case 0
			result.l = ##[$FE07](fnum,offset,#OFFSET_BEGINNING)
		Case 1
			result.l = ##[$FE07](fnum,offset,#OFFSET_CURRENT)
		Case 2
			result.l = ##[$FE07](fnum,offset,#OFFSET_END)
		Default
			result.l = -1
	End Select
	GetReg d0,result.l
	JSR SaveBlitz
	MOVEM.l (a7)+,d2-d7/a2-a6
	RTS


.xlib_finfo:
	; Get information on a given file

	MOVEM.l d2-d7/a2-a6,-(a7)
	JSR RestoreBlitz
	PutReg a0,fname.l
	PutReg d0,typeofinfo.l
	fname$=Peek$(fname)
	Select typeofinfo
		Case 1
			result.l=##[$BE15](fname$)
		Case 2
			result.l=1	; ALWAYS SEND IN BINARY MODE
		Default
			result.l=0
	End Select
	GetReg d0,result.l
	JSR SaveBlitz
	MOVEM.l (a7)+,d2-d7/a2-a6
	RTS


.xlib_sread:
	; Read data from serial device

	MOVEM.l d2-d7/a2-a6,-(a7)
	JSR RestoreBlitz
	PutReg a0,buff.l
	PutReg d1,timeout.l
	PutReg d0,size.l
	If CheckCarrier{}
		If timeout.l = 0
			; read all available characters in buffer
			*SerialIO\IOSer\io_Command = #SDCMD_QUERY
			##[$FEC2](*SerialIO)
			If *SerialIO\IOSer\io_Actual < size.l
				size.l = *SerialIO\IOSer\io_Actual
			EndIf
			If size.l
				*SerialIO\IOSer\io_Command = #CMD_READ
				*SerialIO\IOSer\io_Length = size.l
				*SerialIO\IOSer\io_Data = buff.l
				##[$FEC2](*SerialIO)
			EndIf
			result.l = size.l
		Else
			; read from serial until timer expires or buffer full

			result.l = 0

			*TimerIO\tr_node\io_Command = #TR_ADDREQUEST
			*TimerIO\tr_time\tv_secs	= timeout/1000000
			*TimerIO\tr_time\tv_micro = timeout MOD 1000000

			*SerialIO\IOSer\io_Command = #CMD_READ
			*SerialIO\IOSer\io_Length = size.l
			*SerialIO\IOSer\io_Data = buff.l

			mask.l = (1 ASL *SerialMP\mp_SigBit) | (1 ASL *TimerMP\mp_SigBit)
			; clear signals
			temp.l = ##[$FEA9]( 0 , mask.l)

			##[$FEC3](*SerialIO)	 ; Start serial read
			##[$FEC3](*TimerIO)		; Start timer

			temp.l = ##[$FEAB](mask.l)
			If (temp.l AND (1 ASL *SerialMP\mp_SigBit))
				; Buffer full
				; Clear Serial message port
				##[$FEC5](*SerialIO)
				; abort the timer
				If ##[$FEC4] (*TimerIO)=0 Then ##[$FEC6] (*TimerIO)
				##[$FEC5] (*TimerIO)
				result.l = *SerialIO\IOSer\io_Actual
			Else
				If (temp.l AND (1 ASL *TimerMP\mp_SigBit))
					; Time up
					; abort serial read
					If ##[$FEC4](*SerialIO) =0 Then ##[$FEC6](*SerialIO)
					##[$FEC5](*SerialIO)
					; Clear timer message port
					##[$FEC5](*TimerIO)
					If *SerialIO\IOSer\io_Actual
						; data was read
						result.l = *SerialIO\IOSer\io_Actual
					Else
						; query serial to be sure
						*SerialIO\IOSer\io_Command = #SDCMD_QUERY
						##[$FEC2](*SerialIO)
						If (size > *SerialIO\IOSer\io_Actual)
							size.l = *SerialIO\IOSer\io_Actual
						EndIf
						If size.l
							; read 'em in!
							*SerialIO\IOSer\io_Command = #CMD_READ
							*SerialIO\IOSer\io_Length = size.l
							*SerialIO\IOSer\io_Data = buff.l
							##[$FEC2](*SerialIO)
						EndIf
						result.l = size.l
					EndIf
				EndIf
			EndIf
		EndIf
	Else
		result.l = -1
	EndIf
	GetReg d0,result.l
	JSR SaveBlitz
	MOVEM.l (a7)+,d2-d7/a2-a6
	RTS


.xlib_gets:
	MOVEQ.l #0,d0
	RTS


.xlib_ffirst:
	; Return name of file to send

	MOVEM.l d2-d7/a2-a6,-(a7)
	JSR RestoreBlitz
	PutReg a0,buff.l
	PutReg a1,fname.l

	If NextItem(Send$())
		Poke$ buff, Send$()
		result.l = -1
	Else
		; All files sent
		result.l = 0
	EndIf

	GetReg d0,result.l
	JSR SaveBlitz
	MOVEM.l (a7)+,d2-d7/a2-a6
	RTS


.xlib_swrite:
	; Send memory block through serial

	MOVEM.l d2-d7/a2-a6,-(a7)
	JSR RestoreBlitz
	PutReg a0,buff.l
	PutReg d0,size.l
	If CheckCarrier{}
		*SerialIO\IOSer\io_Command = #CMD_WRITE
		*SerialIO\IOSer\io_Length = size.l
		*SerialIO\IOSer\io_Data = buff.l
		##[$FEC2](*SerialIO)
		result.l = 0
	Else
		result.l = -1
	EndIf
	GetReg d0,result.l
	JSR SaveBlitz
	MOVEM.l (a7)+,d2-d7/a2-a6
	RTS


.xlib_sflush:
	; Flush serial buffer

	MOVEM.l d2-d7/a2-a6,-(a7)
	JSR RestoreBlitz
	*SerialIO\IOSer\io_Command = #CMD_CLEAR
	##[$FEC2](*SerialIO)
	MOVEQ.l #0,d0
	JSR SaveBlitz
	MOVEM.l (a7)+,d2-d7/a2-a6
	RTS


.xlib_unlink
	; Delete file

	MOVEM.l d2-d7/a2-a6,-(a7)
	JSR RestoreBlitz
	PutReg a0,fname.l
	KillFile Peek$(fname)
	MOVEQ.l #0,d0						; always return successful
	JSR SaveBlitz
	MOVEM.l (a7)+,d2-d7/a2-a6
	RTS


.xlib_squery:
	; get number of bytes in serial buffer

	MOVEM.l d2-d7/a2-a6,-(a7)
	JSR RestoreBlitz
	*SerialIO\IOSer\io_Command = #SDCMD_QUERY
	##[$FEC2](*SerialIO)
	GetReg d0,*SerialIO\IOSer\io_Actual
	JSR SaveBlitz
	MOVEM.l (a7)+,d2-d7/a2-a6
	RTS


.xlib_chkabort:
	; check for user abort

	MOVEM.l d2-d7/a2-a6,-(a7)
	JSR RestoreBlitz
	If Event = $200
		result.l = 1
	Else
		result.l = 0
	EndIf
	GetReg d0,result.l
	JSR SaveBlitz
	MOVEM.l (a7)+,d2-d7/a2-a6
	RTS


.RestoreBlitz:
	MOVE.l a4store,a4
	MOVE.l a5store,a5
	MOVE.l a6store,a6
	RTS


.SaveBlitz:
	MOVE.l a4,a4store
	MOVE.l a5,a5store
	MOVE.l a6,a6store
	RTS


a4store:
	Ds.l 1
a5store:
	Ds.l 1
a6store:
	Ds.l 1
	Event


.xlib_update
	MOVEM.l d2-d7/a2-a6,-(a7)
	JSR RestoreBlitz
	PutReg a0,*updatestruct.XPR_UPDATE

	If NOT Config\XPRWindowOpen
		; Window not open,	Open transfer window
		OpenTransferWindow{}
		Config\XPRWindowOpen = True
	EndIf

	If (*updatestruct\xpru_updatemask AND #XPRU_PROTOCOL)
		GTSetAttrs 0,50,#GTTX_Text,Peek$(*updatestruct\xpru_protocol)
	EndIf

	If (*updatestruct\xpru_updatemask AND #XPRU_FILENAME)
		GTSetAttrs 0,51,#GTTX_Text,Peek$(*updatestruct\xpru_filename)
	EndIf

	If (*updatestruct\xpru_updatemask AND #XPRU_FILESIZE)
		GTSetAttrs 0,52,#GTNM_Number,*updatestruct\xpru_filesize
	EndIf

	If (*updatestruct\xpru_updatemask AND #XPRU_MSG)
		GTSetAttrs 0,53,#GTTX_Text,Peek$(*updatestruct\xpru_msg)
	EndIf

	If (*updatestruct\xpru_updatemask AND #XPRU_ERRORMSG)
		GTSetAttrs 0,54,#GTTX_Text,Peek$(*updatestruct\xpru_errormsg)
	EndIf

	If (*updatestruct\xpru_updatemask AND #XPRU_BLOCKS)
		GTSetAttrs 0,55,#GTNM_Number,*updatestruct\xpru_blocks
	EndIf

	If (*updatestruct\xpru_updatemask AND #XPRU_BLOCKSIZE)
		GTSetAttrs 0,56,#GTNM_Number,*updatestruct\xpru_blocksize
	EndIf

	If (*updatestruct\xpru_updatemask AND #XPRU_BYTES)
		GTSetAttrs 0,57,#GTNM_Number,*updatestruct\xpru_bytes
	EndIf

	If (*updatestruct\xpru_updatemask AND #XPRU_ERRORS)
		GTSetAttrs 0,58,#GTNM_Number,*updatestruct\xpru_errors
	EndIf

	If (*updatestruct\xpru_updatemask AND #XPRU_TIMEOUTS)
		GTSetAttrs 0,59,#GTNM_Number,*updatestruct\xpru_timeouts
	EndIf

	If (*updatestruct\xpru_updatemask AND #XPRU_PACKETTYPE)
		GTSetAttrs 0,60,#GTTX_Text,Peek$(*updatestruct\xpru_packettype)
	EndIf

	If (*updatestruct\xpru_updatemask AND #XPRU_PACKETDELAY)
		GTSetAttrs 0,61,#GTNM_Number,*updatestruct\xpru_packetdelay
	EndIf

	If (*updatestruct\xpru_updatemask AND #XPRU_CHARDELAY)
		GTSetAttrs 0,62,#GTNM_Number,*updatestruct\xpru_chardelay
	EndIf

	If (*updatestruct\xpru_updatemask AND #XPRU_BLOCKCHECK)
		GTSetAttrs 0,63,#GTTX_Text,Peek$(*updatestruct\xpru_blockcheck)
	EndIf

	If (*updatestruct\xpru_updatemask AND #XPRU_EXPECTTIME)
		GTSetAttrs 0,64,#GTTX_Text,Peek$(*updatestruct\xpru_expecttime)
	EndIf

	If (*updatestruct\xpru_updatemask AND #XPRU_ELAPSEDTIME)
		GTSetAttrs 0,65,#GTTX_Text,Peek$(*updatestruct\xpru_elapsedtime)
	EndIf

	If (*updatestruct\xpru_updatemask AND #XPRU_DATARATE)
		GTSetAttrs 0,66,#GTNM_Number,*updatestruct\xpru_datarate
	EndIf

	JSR SaveBlitz
	MOVEM.l (a7)+,d2-d7/a2-a6
	RTS

