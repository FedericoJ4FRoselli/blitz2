; ascii translation of /Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/out/stuff/shit/vs/TTypes/TTypes.bb2,/Users/simon/Google Drive/amiga/w/abcstuff/acid/bums/out/stuff/vs/TTypes/TTypes.bb2,/Users/simon/Google Drive/amiga/w/lha/bbold/bum8/vs/TTypes/TTypes.bb2
; ##################################################
; #																								#
; # ToolType function that gets a tooltype for ya! #
; #																								#
; #						Written by Mark Tiffany						 #
; #				 e-mail : PHY93003@bham.ac.uk					 #
; #																								#
; #								 Version : 1.01								 #
; #						 Last Updated : 7/6/94							#
; #																								#
; # Feel free to modify the code, but send me what #
; #	you do change in the function if it improves	#
; #		it or you come up with a new function...		#
; # And you can distribute it freely too....if you #
; #							_REALLY_ want to....							#
; #																								#
; ##################################################

;REQUIREMENTS
;============
; You need the icon.library to access these functions.
; As far as I am aware and able to test, tooltypes will work on ANY
; machine - its just theyve only really been used since WB2.04 came
; along.	You could have the resident file Blitzlibs:amigalibs.res
; for the .Gadget structure rather than have the fake one here.

;FUNCTIONS PROVIDED
;==================
;success	 = OpenToolType{FileName}
;success	 = SaveToolType{FileName}
;ToolInfo$ = GetToolType{ToolTypeName}
;success	 = PutToolType{ToolTypeName,ToolValue,Enabled}
;success	 = CloseToolType{}

;USAGE
;=====
; XINCLUDE this file into the file you wish to use it in.	If you use
; the resident file amigalibs.res then remove the fake gadget structure below.
; The demo stuff at the bottom should be either removed or commented out.
; (I would prefer commenting out if you intend to distribute this...)
; When you want the tooltype info, first call OpenToolType to get the info.
; Then use GetToolType and PutToolType to find the info you need.
; Finally, call SaveToolType to close the file and save any changes made.
; You MUST have the Open part first, and the Save or Close part to tidy things up.

;CODE FOLLOWS -> Dont Look!	:)
;============

;INITIALIZATION STUFF
;====================

; Fake .Gadget Structure...

NEWTYPE .TT_FakeGadget
*N.w : a.w : b.w : c.w : d.w : e.w : f.w : g.w
*h.w : *i.w : *j.w : k.l : *l.b : m.w : *o.b
End	NEWTYPE

; The DiskObject Structure - This is needed to check the tooltype

NEWTYPE.TT_DiskObject
do_Magic.w
do_Version.w
do_Gadget.TT_FakeGadget
do_Type.b
pad1.b
*do_DefaultTool.b
*do_ToolTypes.l	 ; Looks like this is what we want...
do_CurrentX.l
do_CurrentY.l
*do_DrawerData.b	; normally .DrawerData but we dont need it
*do_ToolWindow.b
do_StackSize.l
End NEWTYPE

; ToolTypeInfo -> contains the tooltype list

NEWTYPE.TT_ToolTypeInfo
a.l:b:c:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t
End NEWTYPE

Dim TT_nttpoint.l(20),TT_ntt$(20)
;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <- This Line _IS_ needed! - Its the best way To do it!

;FUNCTION CODE
;=============

Function.b OpenToolType{Fl$}
; ####################################################################
; # Open a files ToolType for Inspection														 #
; # INPUTS	: Fl$ = File to be opened																#
; # OUTPUT	: True/false if it succeeded														 #
; ####################################################################
Shared *TT_ToolTypes.TT_ToolTypeInfo,*TT_DiskObject.TT_DiskObject,TT_nttpoint(),TT_ntt$()
	ret=False
	If ##[$BE15](Fl$)
		*TT_DiskObject.TT_DiskObject=##[$F585](Fl$)
		If *TT_DiskObject
			*TT_ToolTypes.TT_ToolTypeInfo=*TT_DiskObject\do_ToolTypes
			ret=True
			If *TT_ToolTypes\a>0 Then TT_nttpoint(0)=*TT_ToolTypes\a Else Goto cheat
			If *TT_ToolTypes\b>0 Then TT_nttpoint(1)=*TT_ToolTypes\b Else Goto cheat
			If *TT_ToolTypes\c>0 Then TT_nttpoint(2)=*TT_ToolTypes\c Else Goto cheat
			If *TT_ToolTypes\d>0 Then TT_nttpoint(3)=*TT_ToolTypes\d Else Goto cheat
			If *TT_ToolTypes\e>0 Then TT_nttpoint(4)=*TT_ToolTypes\e Else Goto cheat
			If *TT_ToolTypes\f>0 Then TT_nttpoint(5)=*TT_ToolTypes\f Else Goto cheat
			If *TT_ToolTypes\g>0 Then TT_nttpoint(6)=*TT_ToolTypes\g Else Goto cheat
			If *TT_ToolTypes\h>0 Then TT_nttpoint(7)=*TT_ToolTypes\h Else Goto cheat
			If *TT_ToolTypes\i>0 Then TT_nttpoint(8)=*TT_ToolTypes\i Else Goto cheat
			If *TT_ToolTypes\j>0 Then TT_nttpoint(9)=*TT_ToolTypes\j Else Goto cheat
			If *TT_ToolTypes\k>0 Then TT_nttpoint(10)=*TT_ToolTypes\k Else Goto cheat
			If *TT_ToolTypes\l>0 Then TT_nttpoint(11)=*TT_ToolTypes\l Else Goto cheat
			If *TT_ToolTypes\m>0 Then TT_nttpoint(12)=*TT_ToolTypes\m Else Goto cheat
			If *TT_ToolTypes\n>0 Then TT_nttpoint(13)=*TT_ToolTypes\n Else Goto cheat
			If *TT_ToolTypes\o>0 Then TT_nttpoint(14)=*TT_ToolTypes\o Else Goto cheat
			If *TT_ToolTypes\p>0 Then TT_nttpoint(15)=*TT_ToolTypes\p Else Goto cheat
			If *TT_ToolTypes\q>0 Then TT_nttpoint(16)=*TT_ToolTypes\q Else Goto cheat
			If *TT_ToolTypes\r>0 Then TT_nttpoint(17)=*TT_ToolTypes\r Else Goto cheat
			If *TT_ToolTypes\s>0 Then TT_nttpoint(18)=*TT_ToolTypes\s Else Goto cheat
			If *TT_ToolTypes\t>0 Then TT_nttpoint(19)=*TT_ToolTypes\t Else Goto cheat
			ret=False
cheat:
			For i=0 To 20
				If TT_nttpoint(i)>0 Then TT_ntt$(i)=Peek$(TT_nttpoint(i))
			Next i
		EndIf
	EndIf
	Function Return ret
End Function

Function.b SaveToolType{Fl$}
; ####################################################################
; # Saves + Closes a files ToolType after Inspection								 #
; # INPUTS	: Fl$ = File to be closed																#
; # OUTPUT	: True/false if it succeeded														 #
; ####################################################################
Shared *TT_ToolTypes.TT_ToolTypeInfo,*TT_DiskObject.TT_DiskObject,TT_nttpoint(),TT_ntt$()
	ret=False
	If ##[$BE15](Fl$)
		If *TT_DiskObject
			##[$F586] Fl$,*TT_DiskObject
			##[$F587] *TT_DiskObject
			ret=True
		EndIf
	EndIf
	Function Return ret
End Function

Function.b CloseToolType{}
; ####################################################################
; # Closes a files ToolType after Inspection												 #
; # INPUTS	: None																									 #
; # OUTPUT	: True/false if it succeeded														 #
; ####################################################################
Shared *TT_ToolTypes.TT_ToolTypeInfo,*TT_DiskObject.TT_DiskObject,TT_nttpoint(),TT_ntt$()
	ret=False
	If *TT_DiskObject
		##[$F587] *TT_DiskObject
		ret=True
	EndIf
	Function Return ret
End Function

Function.s GetToolType{TType$}
; ####################################################################
; # Get the tooltype info matching TType$														#
; # INPUTS	: TType$ = ToolType name to check												#
; # OUTPUT	: "" if tooltype not found / ToolType is bracketed out	 #
; #																		/ the file is not present		 #
; #																		/ is TTYPE=	 (no parameters) #
; #					 >TType$< if tooltype name is there on its own					#
; #					 >Value<	if tooltype is in the form CX_POPUP=TRUE			#
; ####################################################################
Shared *TT_ToolTypes.TT_ToolTypeInfo,*TT_DiskObject.TT_DiskObject,TT_nttpoint(),TT_ntt$()
	r$=""
	If *TT_DiskObject
		i=0
		pos=-1
		##[$80BB]
			If UCase$(TT_ntt$(i))=TType$
				r$=TType$:pos=i
			Else
				If Len(TT_ntt$(i))>=Len(TType$)+1
					If UCase$(Left$(TT_ntt$(i),Len(TType$)+1))=TType$+"="
						r$=UCase$(Right$(TT_ntt$(i),Len(TT_ntt$(i))-1-Len(TType$))):pos=i
					EndIf
				EndIf
			EndIf
			i+1
		##[$80BC] (i=21)OR(pos>=0)
	EndIf
	Function Return r$
End Function

Function.b PutToolType{TType$,TValue$,TOn}
; ###################################################
; # Put the tooltype+value stated into file.				#
; # Set TOn to false to Bracket out that part			 #
; # If the tooltype is bracketted out as (ToolType) #
; # then it can recognised and replaced.	This will #
; # also work for (ToolType=Value) unlike AOS!	:)	#
; # INPUTS : TType$	= ToolType to change					 #
; #					TValue$ = Value to give to the TType	 #
; #					TOn		 = Is this tooltype enabled?		#
; # OUTPUT : True/False if it worked								#
; ###################################################
Shared *TT_ToolTypes.TT_ToolTypeInfo,*TT_DiskObject.TT_DiskObject,TT_nttpoint(),TT_ntt$()
	TType$=UCase$(TType$)
	ret=False
	i=0
	pos=-1
	##[$80BB]
		If UCase$(TT_ntt$(i))=TType$
			pos=i
		Else
			If Len(TT_ntt$(i))>=Len(TType$)+1
				If UCase$(Left$(TT_ntt$(i),Len(TType$)+1))=TType$+"="
					pos=i
				Else
					If Len(TT_ntt$(i))>=Len(TType$)+2
						t$=UCase$(Left$(TT_ntt$(i),Len(TType$)+2))
						If t$="("+TType$+")" OR t$="("+TType$+"="
							pos=i
						EndIf
					EndIf
				EndIf
			EndIf
		EndIf
		i+1
	##[$80BC] (i=21)OR(pos>=0)
	If TValue$<>""
		TTV$=TType$+"="+TValue$
	Else
		TTV$=TType$
	EndIf
	If TOn Else TTV$="("+TTV$+")": EndIf
;	TTV$+Chr$(0)
	If pos>=0
		TT_ntt$(pos)=TTV$
		ret=True
	Else
		i=0
		ret=False
		##[$80BB]
			If TT_ntt$(i)="" Then TT_ntt$(i)=TTV$:ret=True
			i+1
		##[$80BC] (ret)OR(i=21)
	EndIf
	If ret
		For i=0 To 20
			TT_nttpoint(i)=&TT_ntt$(i)
		Next i
		*TT_DiskObject\do_ToolTypes=&TT_nttpoint(0)
	EndIf
	Function Return ret
End Function

;EXAMPLE CODE
;============

; (IF YOU GET RID OF THIS BIT THEN THE ABOVE CAN BE XINCLUDED INTO A FILE)

; You need to set this to a file you have and dont mind the Tooltypes modified in.

;FilName$="RAM:TEST"

;#NuTToolTypes=6

;If OpenToolType{FilName$}

;	For i=1 To #NuTToolTypes
;		Read ttn$
;		t$=GetToolType{ttn$}
;		If t$<>"" Then NPrint "YO! FOUND -> ",ttn$," VALUE=",t$
;	Next i
;
;	For i=1 To 15
;		If PutToolType{"CX_POPUP"+Str$(i),"TRUE",True} Then NPrint "Changed CX_POPUP"
;	Next i
;	If GetToolType{"CX_POPKEY"}<>""
;		n=PutToolType{"CX_POPKEY","TRUE",False}: NPrint "Deactivated CX_POPKEY"
;	Else
;		n=PutToolType{"CX_POPKEY","TRUE",True}:NPrint "Activated CX_POPKEY"
;	EndIf
;	n=SaveToolType{FilName$}
;EndIf

;MouseWait

;Data.s DONOTWAIT,STARTPRI,CX_PRIORITY,CX_POPKEY,CX_POPUP,DRAWER

;END
;===
