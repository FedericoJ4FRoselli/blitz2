; ascii translation of /Users/simon/Google Drive/amiga/w/sega/shit/dev/dev/j.bb
.N



#a=1
#j=2
#s=3
#n=4

#c=#a



CNIF #c<>#a
	If Peek.w($f00004)=Peek.w($f00004)
		End
	EndIf

CEND


Statement Safe{}
	CNIF #c=#j
		MOVE.l #320000,d0
		toplup
			MOVE d0,$f0002a
			SUBQ.l #1,d0
		BGE toplup
	CEND
	CNIF #c=#a
;		MouseWait
	CEND

End Statement

CNIF #c=#j
	BSR initjagos
CEND

Gosub InitOs
Gosub InitMem
Gosub InitVars
Gosub SetUpWorld
CNIF #c=#a
	Gosub DoMainA
CELSE
	Gosub DoMain
CEND



End




.NTypes
NEWTYPE .phrase:a.l:b.l:End NEWTYPE
NEWTYPE .jbmap

	dwidth.w	 ;0
	dheight.w	;2
	iwidth.w	 ;4
	iheight.w	;6

	dtype.w		;8
	depth.w		;10
	pitch.w		;12

	idata.l		;14
	ilink.l		;18

	xpos.w		 ;22
	ypos.w		 ;24
	iscroll.w	;26
	flags.w		;28

	hscale.b	 ;30
	vscale.b	 ;31

	firstphrase.phrase ;32
	secondphrase.phrase
	thirdphrase.phrase

	pixwidth.w
	realflags.l
	bltwidth.w
	blitflags.l

End NEWTYPE

NEWTYPE .ij		:i.q:j:k:l				:End NEWTYPE
NEWTYPE .frend :lti.w:ltj:rti:rtj:End NEWTYPE

.DefTypes
DEFTYPE.l sincos
DEFTYPE.l trisize
DEFTYPE.ij bez
DEFTYPE.w pts,pts1,pts2,pts3,pts3

CNIF #c=#j
	DEFTYPE.l bld
	DEFTYPE.jbmap *bmr1,*bmr2,*bmr
	#framecnt=$440		;frames...

CEND




Function.l jint{a.l}
	AsmExit
End Function

Function.q jabs{a.q}
	TST.l d0:BGE notneg:NEG.l d0:notneg
	AsmExit
End Function

Function.q jfrac{a.q}
	SWAP d0:CLR.w d0:SWAP d0
	AsmExit
End Function

Function.q jlimit{a.q,b.q,c.q}
			 CMP.l d0,d1:BLE testhi:MOVE.l d1,d0:AsmExit
testhi:CMP.l d0,d2:BGE dunit :MOVE.l d2,d0:dunit:AsmExit
End Function

Function.q jwrap{a.q,b.q,c.q}
			 CMP.l d0,d1:BLE testlo:ADD.l d2,d0:SUB.l d1,d0:AsmExit
testlo:CMP.l d0,d2:BGE dunt :SUB.l d2,d0:ADD.l d1,d0:dunt:AsmExit
End Function

Function .q jsgn{a.q}
	CMP.l #0,d0:BGT big:BLT small:MOVEQ #0,d0:AsmExit
	big:MOVEQ #1,d0:SWAP d0:AsmExit
	small:MOVEQ #-1,d0:SWAP d0:CLR.w d0:AsmExit
End Function

Function.q jext{a.w}
	EXT.l d0:AsmExit
End Function

Function.l jin{a.q,b.q}
	SWAP d1:MOVE d1,d0:SWAP d0:AsmExit
End Function

Function.l jfr{a.q,b.q}
	SWAP d0:MOVE d1,d0:SWAP d0:AsmExit
End Function

Function .q jsin{a.q} ;0..1=2*pi

Shared sincos.l
	myang=jfrac{a}ASL 9
	ad.l=sincos+((myang&511) ASL 2)
	f=jfrac{myang}:of=1-f

	qs=Peek.w(ad	)*of+Peek.w(ad+4)*f
;	qc=Peek.w(ad+2)*of+Peek.w(ad+6)*f

	Function Return jext{qs} ASL 1
End Function

Function .q jcos{a.q} ;0..1
Shared sincos.l
	myang=jfrac{a}ASL 9
	ad.l=sincos+((myang&511) ASL 2)
	f=jfrac{myang}:of=1-f

;	qs=Peek.w(ad	)*of+Peek.w(ad+4)*f
	qc=Peek.w(ad+2)*of+Peek.w(ad+6)*f

	Function Return jext{qc} ASL 1
End Function


Function.q jsqr{a.q}	;worlds slowest sqr command

	If a=0 Then Function Return 0
	ntry.q=1:try=0

	While jabs{try-ntry}>0.01
		try=ntry
		fx=try*try-a
		dfx=2*try
		ntry=try-fx/dfx
	Wend
	Function Return try
End Function



Function.l GetMem32{size.l}
	CNIF #c=#j
		MOVEQ #0,d1:ADD.l #16,d0:SysJsr $c002

		ADD.l #31,d0
		AND #$ffe0,d0
		AsmExit
	CELSE
		MOVEQ #0,d1:SysJsr $c002:AsmExit
	CEND
End Function



Function.l GetMem{size.l}
	MOVEQ #0,d1:SysJsr $c002:AsmExit
End Function







;jaguar stuff

CNIF #c=#j
	Macro rungpu
		MOVE.l `1 LSL 2+$f03000,$f02110:MOVE.l #1,$ff8:MOVE.l #1,$f02114
	End Macro

	Macro waitgpu
		'w_g`@:MOVE.l $ff8,d0:BTST #0,d0:BNE 'w_g`@
	End Macro

	Macro rundsp
		MOVE.l `1 LSL 2+$f1b000,$f1a110:MOVE.l #1,$ff0:MOVE.l #1,$f1a114
	End Macro

	Macro waitdsp
		'w_d`@:MOVE.l $ff0,d0:BTST #0,d0:BNE 'w_d`@
	End Macro

	Macro waitblit
		MOVE.l $f02238,d0
		w_b`@
		MOVE.l $f02238,d0:BTST #0,d0:BEQ w_b`@
	End Macro


.JagBlitter

	Include jblit.inc

	Macro bm SizeOf .jbmap\`1(a0):End Macro
	Statement RefrBmap{*bmap.jbmap}
		;
		MOVE.l d0,a0
		;
		MOVE.l !bm{idata},d0:LSR.l#3,d0:MOVEQ#43-32,d2:ASL.l d2,d0
		MOVE.l !bm{ilink},d1:LSR.l#3,d1:MOVE.l d1,d2:LSR.l#8,d2:OR d2,d0
		MOVEQ#24,d2:LSL.ld2,d1
		MOVE !bm{dheight},d2:EXT.l d2:MOVEQ#14,d3:ASL.ld3,d2:OR.ld2,d1
		MOVE !bm{ypos},d2:ASL#3,d2:OR d2,d1:OR !bm{dtype},d1
		MOVEM.l d0-d1,!bm{firstphrase}
		;
		MOVE !bm{iscroll},d0:EXT.l d0:ASL.l#8,d0:ASL.l#3,d0
		OR !bm{flags},d0:ASL.l#6,d0
		MOVE !bm{iwidth},d1:EXT.l d1:ROR.l#4,d1:OR d1,d0
		ROL.l#8,d1:ROL.l#6,d1
		OR!bm{dwidth},d1:ASL.l#3,d1:OR!bm{pitch},d1:ASL.l#3,d1:OR!bm{depth},d1
		ASL.l#8,d1:ASL.l#4,d1:OR !bm{xpos},d1
		MOVEM.l d0-d1,!bm{secondphrase}

		MOVEQ #0,d0:MOVE.w !bm{hscale},d0:ROR.w #8,d0
		MOVE.l d0,!bm{thirdphrase+4}

		;
		AsmExit
		;
	End Statement


	Statement HeadBmap{*bmap1.jbmap}
		ADD.l #32,d0:SWAP d0:MOVE.l d0,$f00020:AsmExit
	End Statement



	Statement BlPoly{*bm.jbmap,dat.l,cols.l}
	Shared bld

		!waitblit
		!waitgpu


		Poke.l $f03f00,dat
		Poke.l $f03f04,cols

		!waitblit
		Poke.l bld		,*bm\idata											;destination
		Poke.l bld+	4,*bm\blitflags;+$10000					;
		Poke.l bld+ $8,jin{*bm\bltwidth,*bm\iheight}	;clip
		Poke.l bld+$10,jin{-24,1}	;step

		!rungpu{0}

	End Statement

	Statement BlOr{*bms.jbmap,*bmd.jbmap}
	Shared bld

		!waitblit
		wid=*bmd\bltwidth; ASR 1

		Poke.l bld	 ,*bmd\idata
		Poke.l bld+ 4,*bmd\blitflags			 ;set phrase mode
		Poke.l bld+$c,0										;start xy
		Poke.l bld+$10,jin{-wid ,1}	;along and down..
		Poke.l bld+$14,0

		Poke.l bld+$24,*bms\idata
		Poke.l bld+$28,*bms\blitflags
		Poke.l bld+$30,0									 ;startxy
		Poke.l bld+$34,jin{-wid ,1}	;along and down..

		Poke.l bld+$3c,jin{wid,*bmd\iheight}	;size..

		temp.l=9+ (1 ASL 10)	+ (1 ASL 9)
		temp.l=($e ASL 21) +temp
		Poke.l bld+$38,temp

	End Statement

	Statement BlRot{*bms.jbmap,*bmd.jbmap,xfac,yfac}	;a2=dest a1=source
	Shared bld

	;	srcxadd=3
	;	desxadd=1

		!waitblit

		Poke.l bld+$24,*bmd\idata					 ;dest
		Poke.l bld+$28,*bmd\blitflags +(1 ASL 16)			;flags
		Poke.l bld+$30,0										;start xy
		temp.l=1 LSL 16										 ;plus one y
		temp=temp+(-*bmd\bltwidth&$ffff)		;minus width
		Poke.l bld+$34,temp


		Poke.l bld,*bms\idata							 ;source
		Poke.l bld+$4,*bms\blitflags +(3 ASL 16)			 ;flags
		Poke.l bld+$8,jin{*bms\bltwidth,*bms\iheight} ;clip x
		Poke.l bld+$c,jin{30,30}										 ;start xy

		pw=*bmd\bltwidth

		xdif=-yfac-pw*xfac
		ydif=xfac-pw*yfac

		Poke.l bld+$10,jin{xdif,ydif}
		Poke.l bld+$14,jfr{xdif,ydif}

		Poke.l bld+$18,0 ;start value! HAH!

		Poke.l bld+$1c,jin{xfac,yfac}
		Poke.l bld+$20,jfr{xfac,yfac}

		Poke.l bld+$3c,(*bmd\iheight ASL 16) + *bmd\bltwidth ;counter

		temp.l=1 + (1 ASL 6)
		temp=temp + (1 ASL 8) +(1 ASL 9)
		temp=temp +(1 ASL 11)
		temp=temp + (1 ASL 23)+ ( 1 ASL 24)
		Poke.l bld+$38,temp


	End Statement


CEND


.IOStuff

	Statement GetJoy{x.l,y.l,butt.l}
		CNIF #c=#j
			MOVE.l d0,a0
			MOVE.l d1,a1
			MOVE.l d2,a2
			MOVEQ #0,d3
			MOVEQ #0,d4
			MOVEQ #0,d5

			MOVE #$800e,$f14000:MOVE $f14000,d0
			BTST	#8,d0:BNE notup:ADDQ #1,d4:notup
			BTST	#9,d0:BNE notdo:SUBQ #1,d4:notdo

			BTST #10,d0:BNE notle:ADDQ #1,d3:notle
			BTST #11,d0:BNE notri:SUBQ #1,d3:notri

			MOVE #$800e,$f14000:MOVE $f14002,d0
			BTST #1,d0:BNE notbc:ADDQ #2,d5:notbc
			MOVE #$800b,$f14000:MOVE $f14002,d0
			BTST #1,d0:BNE notba:ADDQ #1,d5:notba


			MOVE.w d3,(a0)
			MOVE.w d4,(a1)
			MOVE.w d5,(a2)
			AsmExit
		CEND
		CNIF #c=#a
			Poke.l x,Joyx(1)
			Poke.l y,Joyx(1)
			Poke.l butt,Joyb(1)
		CEND
	End Statement
;------------------------------------------------------





.
.SetUpWorld

	CNIF #c=#j
		LEA vbdb(pc),a0:MOVEQ #1,d0:BSR initvbint:BSR vbinton

		MOVE #$ffff,$f00058
		MOVE.l #$418f418f,$f00058

		MOVE #$6c7,$f00028	 ;RGB!
	CEND

	Gosub DoPal


	myang=64


	qs=0.2:qc=0.2
	delta.l=0
	deadx=2
	deady=0

	Gosub InitTris


	CNIF #c=#a
;		Stop:Stop:Stop:Stop
	CEND

Return




#bars=On;ff
.
.DoMainJ

CNIF #c=#j

	Repeat

		!waitdsp:!waitgpu:!waitblit	;wait till previous frame rendered!

		Exchange *bmr1.jbmap,*bmr2.jbmap
		MOVE framecnt,d7:'wdb:CMP framecnt,d7:BEQ 'wdb

		*bmr=*bmr1

		BlCls{*bmr,0,0};$1010101,$10101010}

		CNIF #bars
			Poke.w $f0002a,0
		CEND

		!waitgpu
		!waitblit
		!waitdsp

;		Poke.l *bmr\idata+320+8,$ffffffff

		Gosub PlaceCar

		stt=jint{(mytau-2)*2}
		For gt=stt To stt+8 ;Step 2
			t=gt

			If t<2 Then t+pts
;			If t>pts2 Then t-pts
			Exchange mapa.l,mapb.l
			map.l=mapa
			Gosub RotObj

			!waitdsp
			!waitgpu
			!waitblit
			BlCopyMem{tritemp.l,map.l,trisize.l }

			Gosub Draw
		Next

		!waitgpu
		!waitblit

		CNIF #bars
			Poke.l $f0002a,$ffff
			Poke.w $f0002a,mysilly.w:mysilly+1
		CEND

		GetJoy{&jox.w,&joy.w,&butt.w}

	Until 1=0
CEND
Return

.
CNIF #c=#a
	.DoMainA


		Repeat
			VWait
		Until Joyb(0)<>0


	Return
CEND



Macro calc
	`1=base(t)+(`2+ ((`3)*((`3)+1)) ASR 1)*SizeOf.vec
End Macro

Macro mpc
	`1=map+(`2+ ((`3)*((`3)+1)) ASR 1)*SizeOf.xy
End Macro



.trijunk

NEWTYPE .vec
	x.q:y:z
End NEWTYPE

NEWTYPE.xy
	y.w:x.w
End NEWTYPE

NEWTYPE .tri
	a.w:b.w:c.w
End NEWTYPE


DEFTYPE.vec *dest,*dest2,*dest3,*dest4

.InitTris

	mapa.l=GetMem32{65536}
	mapb.l=GetMem32{65536}

	colbase.l=GetMem32{32768}
	map.l=mapa

Dim vec.vec(10000):vecs.l=-1
Dim tri.tri(10000)
Dim base.l(100)


	sx1=-10:sy1=-30:sz1=30
	sx2=-10:sy2=30 :sz2=30
	sx3=20:sy3=0	 :sz3=30
	Gosub Generate
	For t=0 To tri.l
		base(t)=GetMem32{SizeOf.vec*9*10/2}
		a=tri(t)\a
		b=tri(t)\b
		c=tri(t)\c
		sx1=vec(a)\x; ASL 6
		sy1=vec(a)\y; ASL 6
		sz1=vec(a)\z; ASL 6
		sx2=vec(b)\x; ASL 6
		sy2=vec(b)\y; ASL 6
		sz2=vec(b)\z; ASL 6
		sx3=vec(c)\x; ASL 6
		sy3=vec(c)\y; ASL 6
		sz3=vec(c)\z; ASL 6
		Gosub Make
	Next

	For h.w=0 To 18*18
		col.q=(##[$8481](h,0)+1)*127+1:temp.l=col&255
		temp=temp ASL 8 + temp
		Poke.l colbase+h ASL 2,temp ASL 16+temp
	Next

Return




.Make
	!calc{*dst.vec,0,0}:xx=sx1:yy=sy1:zz=sz1:Gosub Split
	!calc{*dst.vec,0,8}:xx=sx2:yy=sy2:zz=sz2:Gosub Split
	!calc{*dst.vec,8,8}:xx=sx3:yy=sy3:zz=sz3:Gosub Split

	scal=8:hscal=scal ASR 1
	For cnt.w=0 To 2

		For y=hscal To 7 Step scal
			For x=hscal To y Step scal

				!calc{*dest2,x-hscal,y-hscal}
				!calc{*dest3,x-hscal,y+hscal}
				!calc{*dest4,x+hscal,y+hscal}

				x2=*dest2\x:y2=*dest2\y:z2=*dest2\z
				x3=*dest3\x:y3=*dest3\y:z3=*dest3\z
				x4=*dest4\x:y4=*dest4\y:z4=*dest4\z

				!calc{*dest,x,y}
				!calc{*dest2,x-hscal,y}
				!calc{*dest3,x,y+hscal}

				xx=(x2+x4) ASR 1
				yy=(y2+y4) ASR 1
				zz=(z2+z4) ASR 1
				*dst.vec=*dest:Gosub Split

				xx=(x2+x3) ASR 1
				yy=(y2+y3) ASR 1
				zz=(z2+z3) ASR 1
				*dst.vec=*dest2:Gosub Split

				xx=(x3+x4) ASR 1
				yy=(y3+y4) ASR 1
				zz=(z3+z4) ASR 1
				*dst.vec=*dest3:Gosub Split

			Next
		Next
		scal ASR 1:hscal ASR 1
	Next

CNIF 1=0
	For y=0 To 8
		For x=0 To y
			!calc{*dst,x,y}
			xx=*dst\x ASR 6
			yy=*dst\y ASR 6
			zz=*dst\z ASR 6
			dist=(10 ASL 2)/jsqr{xx*xx+yy*yy+zz*zz}
;			*dst\x=Sin(ang1)*10;xx*dist
;			*dst\y=Cos(ang1)*10;yy*dist
;			*dst\z=0;zz*dist



			ad.l=?sincos+((x ASL 4) ASL 2)
			qs=Peek.w(ad	)ASR 15
			qc=Peek.w(ad+2)ASR 15

			ad.l=?sincos+(((8-y) ASL 4) ASL 2)
			ps=Peek.w(ad	)ASR 15
			pc=Peek.w(ad+2)ASR 15

			*dst\x=qs*30*pc
			*dst\y=qc*30*pc
			*dst\z=-ps*30
		Next
	Next
CEND
Return


.Split
;	xx ASR 6
;	yy ASR 6
;	zz ASR 6

;	dist=40/jsqr{xx*xx+yy*yy+zz*zz};05
	*dst\x=xx;*dist
	*dst\y=yy;*dist
	*dst\z=zz;*dist
;	Stop:Stop:Stop
Return




NEWTYPE .vert
	t.q:plus.w
	dx.q:dy.q
End NEWTYPE

CNIF #c=#a
		#sc=2
CEND




.InitLatMem

	Dim latchl(31),latchr(31)
	latls.w=-1:latrs.w=-1
	Dim vert.vert(240)
	vecs.l=-1:tri.l=-1
Return


	Function.w FindNext{mmin,mmax,plus.w}
	Shared vert(),verts
		mptr=-1
		For cnt.w=0 To verts
			If vert(cnt)\plus=plus
				If mmin<vert(cnt)\t
					If vert(cnt)\t<mmax
						mmax=vert(cnt)\t
						mptr=cnt
					EndIf
				EndIf
			EndIf
		Next

		Function Return mptr
	End Function

	Function.w FindNextLat{mmin,mmax,plus.w}
	Shared latchl(),latchr(),latls.w,latrs.w
		mptr=-1
		If plus
			For cnt.w=0 To latls
				If mmin<latchl(cnt)
					If latchl(cnt)<mmax
						mmax=latchl(cnt)
						mptr=cnt
					EndIf
				EndIf
			Next
		Else
			For cnt.w=0 To latrs
				If mmin<latchr(cnt)
					If latchr(cnt)<mmax
						mmax=latchr(cnt)
						mptr=cnt
					EndIf
				EndIf
			Next
		EndIf
		Function Return mptr
	End Function



.Generate

	mystp=1 ASR 5
	For mycnt.w=0 To 7
		plusa.w=(mycnt&1=1)
		plusb.w=(mycnt&2=2)
		If mycnt>3
			tau1=31
			tau2=19
		Else
			tau1=12
			tau2=3
		EndIf

		For k=1 To 5

			FindLo tau1
			If plusa
				x1=bez\i:y1=bez\j
			Else
				x1=bez\k:y1=bez\l
			EndIf
			FindDif tau1+mystp
			If plusa
				dx1=bez\i ASL 5:dy1=bez\j ASL 5
			Else
				dx1=bez\k ASL 5:dy1=bez\l ASL 5
			EndIf

			FindLo tau2
			If plusb
				x2=bez\i:y2=bez\j
			Else
				x2=bez\k:y2=bez\l
			EndIf
			FindDif tau2+mystp
			If plusb
				dx2=bez\i ASL 5:dy2=bez\j ASL 5
			Else
				dx2=bez\k ASL 5:dy2=bez\l ASL 5
			EndIf


			mag1=jsqr{dx1*dx1+dy1*dy1}
			mag2=jsqr{dx2*dx2+dy2*dy2}
			dista=((x1-x2)*dy2-(y1-y2)*dx2)/mag2
			distb=((x2-x1)*dy1-(y2-y1)*dx1)/mag1
			tau1=jwrap{tau1+dista/mag1,2,pts3}
			tau2=jwrap{tau2-distb/mag2,2,pts3}
		Next
		If plusa
			latls+1:latchl(latls)=tau1
		Else
			latrs+1:latchr(latrs)=tau1
		EndIf
		If plusb
			latls+1:latchl(latls)=tau2
		Else
			latrs+1:latchr(latrs)=tau2
		EndIf

	CNIF #c=#a
		FindLo tau1
		If plusa
			Circle bez\i ASL #sc,bez\j ASL #sc,4,3
		Else
			Circle bez\k ASL #sc,bez\l ASL #sc,4,3
		EndIf
		FindLo tau2
		If plusb
			Circle bez\i ASL #sc,bez\j ASL #sc,4,4
		Else
			Circle bez\k ASL #sc,bez\l ASL #sc,4,4
		EndIf
	CEND

	Next

	basel=latchl(FindNextLat{2,pts4,On})
	baser=latchr(FindNextLat{2,pts4,Off})

	For hiscnt.w=0 To 6

		verts=-1
		plus.w=On
		tau1=basel;
		tau2=latchl(FindNextLat{tau1 ,pts4,plus})	:	basel=tau2
		Gosub FryIt

		plus.w=Off
		tau1=baser;latchr(FindNextLat{baser,pts4,plus})
		tau2=latchr(FindNextLat{tau1 ,pts4,plus})	:	baser=tau2
		Gosub FryIt


		Gosub MakeGoodTri
	Next

Return



.MakeGoodTri
	curl=FindNext{1,pts4,On}
	curr=FindNext{1,pts4,Off}
		mminl=vert(curl)\t
		mminr=vert(curr)\t

	FindLo mminl
	x1=bez\i:y1=bez\j
	FindLo mminr
	x2=bez\k:y2=bez\l

	done.w=Off
	Repeat
		Line x1 ASL #sc, y1 ASL #sc, x2 ASL #sc, y2 ASL #sc,5

		mminl=vert(curl)\t
		mminr=vert(curr)\t
		nxl=FindNext{mminl,pts4,On}
		nxr=FindNext{mminr,pts4,Off}

		If (nxl>-1) OR (nxr>-1)

			x3=-200:y3=-200
			x4=-200:y4=-200
			If nxl>-1
				FindLo vert(nxl)\t
				x3=bez\i:y3=bez\j
			EndIf
			If nxr>-1
				FindLo vert(nxr)\t
				x4=bez\k:y4=bez\l
			EndIf


			dx=(x4-x1) ASR 3
			dy=(y4-y1) ASR 3
			distl=dx*dx+dy*dy
			dx=(x3-x2) ASR 3
			dy=(y3-y2) ASR 3
			distr=dx*dx+dy*dy

			If distl>distr
				Line x1 ASL #sc, y1 ASL #sc, x3 ASL #sc, y3 ASL #sc,6
				x1=x3:y1=y3:curl=nxl
			Else
				Line x4 ASL #sc, y4 ASL #sc, x2 ASL #sc, y2 ASL #sc,7
				x2=x4:y2=y4:curr=nxr
			EndIf

		Else
			done.w=On
		EndIf
	Until done


Return


.FryIt

;	FindLo tau2
;	x1=bez\k ASL #sc:y1=bez\l ASL #sc
;	Line x1,y1,x1+10,y1+10,5

;	verts=0
	verts+1
	vert(verts)\t=tau1
	vert(verts)\plus=plus
	verts+1
	vert(verts)\t=tau2
	vert(verts)\plus=plus



	For pass.w=0 To 1
		dtp=tau1
		dista=0

		While dtp<tau2

			dtp+0.05
			FindLo dtp
				If plus
					newi=bez\i:newj=bez\j
				Else
					newi=bez\k:newj=bez\l
				EndIf
			FindDif dtp+0.02

			If plus
				dx=bez\i*(50*0.05)
				dy=bez\j*(50*0.05)
			Else
				dx=bez\k*(50*0.05)
				dy=bez\l*(50*0.05)
			EndIf

			dista=dista+jsqr{dx*dx+dy*dy}
			If pass=1
				If dista>myidt
					Point newi ASL #sc,newj ASL #sc,1
					dista-myidt
					verts+1:vert(verts)\t=dtp
					vert(verts)\plus=plus
				EndIf
			EndIf

		Wend

		If pass=0
			myidt=(dista+0.01)/(jint{dista/7}+1)
		EndIf

	Next



Return







.PlaceCar

;	If butt&1 Then rotang+1
;	If butt&2 Then rotang-1



	mytau=mytau+joy*0.1

	FindLo mytau
	quikx=(bez\i+bez\k) ASR 1
	quiky=(bez\j+bez\l) ASR 1
	FindDif mytau+1



	fredang=Angle((bez\i+bez\k) ASL 4,(bez\j+bez\l) ASL 4) ASR 16
	qs=-jsin{fredang} ASR 2
	qc=-jcos{fredang} ASR 2
;	rotang*0.98
;	fredang=fredang+rotang



;	ad.l=?sincos+((fredang&1023) ASL 2)
;	f=jfrac{fredang}:of=1-f
;	qs=Peek.w(ad	)*of+Peek.w(ad+4)*f
;	qc=Peek.w(ad+2)*of+Peek.w(ad+6)*f


Return



.RotObj


CNIF 1=0
	myscal=2;1.3
	qqs=jext{qs}*2*myscal
	qqc=jext{qc}*2*myscal
	*dest=base(0)
	*mp.xy=map

	For y=0 To 16
		For x=0 To y
;			!calc{*dest,x,y}
;			!mpc{*mp.xy,x,y}

			*mp\x=(*dest\x*qqc-*dest\y*qqs +160)ASL 4

			hgh=*dest\x*qqs+*dest\y*qqc +100
			If hgh<0 Then hgh=0
			*mp\y=(hgh&$ffff) ASL 2
			*dest+SizeOf.vec
			*mp+SizeOf.xy
		Next
	Next
CEND



CNIF #c=#j

	!waitdsp

;	BlCopyMem{map.l,tritemp.l,trisize.l }
	mytemp.l=$f1cf80

	Poke.l mytemp	,tritemp.l	;dest
	Poke.l mytemp+4,base(t)		;src

	Poke.l mytemp+	8,jfr{qs ASR 1,qc ASR 1}
;	quikx.q=(5-jfrac{deadx}) ASL 6
;	quiky.q=(5-jfrac{deady}) ASL 6

	Poke.q mytemp+ $c,quikx
	Poke.q mytemp+$10,quiky

	!rundsp{0}

;	!waitdsp

;	BlCopyMem{tritemp.l,map.l,trisize.l }
	Return
CEND



Return



.Draw
CNIF #c=#j

	BlPoly{*bmr,map,colbase}
CEND

	Return

	For y=0 To 15
		!mpc{*mp.xy,0,y}
		*mpn.xy=*mp+SizeOf.xy*(y+1)
		*dt2.xy=*mpn+SizeOf.xy


;		fred(0)=*mp\x:fred(1)=*mp\y
;		fred(2)=*mpn\x:fred(3)=*mpn\y
;		fred(4)=*dt2\x:fred(5)=*dt2\y
;		Polyf 3,&fred(0),*mp\c2


		For x=0 To y-1
			*mp+SizeOf.xy

;			fred(2)=*mp\x:fred(3)=*mp\y
;			Polyf 3,&fred(0),*mp\c1
			*mpn=*dt2:*dt2+SizeOf.xy

;			fred(0)=*mp\x:fred(1)=*mp\y
;			fred(2)=*mpn\x:fred(3)=*mpn\y
;			fred(4)=*dt2\x:fred(5)=*dt2\y
;			Polyf 3,&fred(0),*mp\c2

;			BlLin{*bmr,*mpn\x ASR 4,*mpn\y ASR 2,*mp\x ASR 4,*mp\y ASR 2,x+1}

		Next
	Next

Return


;			BlLin{*bmr,*dt4\x ASR 4,*dt4\y ASR 2,*dt2\x ASR 4,*dt2\y ASR 2,*mp\c}
;			BlLin{*bmr,*dt2\x ASR 4,*dt2\y ASR 2,*dt3\x ASR 4,*dt3\y ASR 2,*mp\c}































CNIF #c=#j
	;********************** JAGOS SUBS ******************************

.jagos ;(thanx mark!)
	;
	;OK, well need some zero page locations...
	;
	#allocat=$200
	#stopat=$204
	#vbint=$208
	#gpint=$20c
	#obint=$210
	#tiint=$214
	#dsint=$218
	#_INT1=$21c

	#superstacksize=256
	#userstacksize=256


	copymem		 ;a0=src, a1=srcf, a2=dest
	;
	CMP.l a1,a0:BCC 'done:MOVE.l (a0)+,(a2)+:BRA copymem
	'done:RTS

	initjagos
	;
	CLR.l $ff0:CLR.l $ff8:
	MOVE.l #$200000,allocat:MOVE.l (a7),a0
	MOVE.l allocat,a7:SUB.l #superstacksize,allocat
	MOVE #$0,sr
	MOVE.l allocat,a7:SUB.l #userstacksize,allocat:MOVE.l a0,-(a7)
	;
	MOVE #$1f00,_INT1:LEA inthandler(pc),a0:MOVE.l a0,$100
	;
	MOVEQ #8,d0:BSR alloc:CLR.l (a0):MOVE.l #4,4(a0):MOVE.l a0,stopat
	MOVE.l a0,d0:SWAP d0:MOVE.l d0,$f00020:RTS


	alloc ;d0=size, return a0=mem
	MOVE.l 4,a6:MOVEQ #0,d1:JSR -204(a6):MOVE.l d0,a0:RTS

	vbinton:OR #1,_INT1:MOVE _INT1,$f000e0:RTS
	vbintoff:ANDI #$fffe,_INT1:MOVE _INT1,$f000e0:RTS

	inthandler
	;
	MOVEM.l d0-d7/a0-a6,-(a7)
	;
	MOVE $f000e0,d2:ANDI #$1f,d2:MOVE d2,d0
	LSL #8,d0:OR d2,d0:MOVE d0,$f000e0
	;
	LSR #1,d2:BCC 'novbint:MOVE.l vbint,a0:JSR (a0):'novbint
	LSR #1,d2:BCC 'nogpint:MOVE.l gpint,a0:JSR (a0):'nogpint
	LSR #1,d2:BCC 'noobint:MOVE.l obint,a0:JSR (a0):'noobint
	LSR #1,d2:BCC 'notiint:MOVE.l tiint,a0:JSR (a0):'notiint
	LSR #1,d2:BCC 'nodsint:MOVE.l dsint,a0:JSR (a0):'nodsint
	;
	MOVE d0,$f000e2
	;
	MOVEM.l (a7)+,d0-d7/a0-a6:RTE


	initvbint	;d0=scanline, a0=address of code
	MOVE d0,$f0004e:MOVE.l a0,vbint

	If a=a
		MOVE.l a5,global
		MOVE.l a3,local
	EndIf
	RTS



	vbdb	;vertical blank double buffer...
		MOVEM.l d0/d2,-(a7)
		MOVE.l global,a5
		MOVE.l local,a4

		ADDQ #1,framecnt

		RefrBmap{*bmr2.jbmap}
		HeadBmap{*bmr2}

	;	HeadBmap{Peek.l($204)-32}

		MOVEM.l (a7)+,d0/d2
	RTS



global :Dc.l 0
local	:Dc.l 0
CEND



CNIF 1=0

.printd2
;
;RTS
;
;print d2 at d0,d1
;
MOVEM.l d2-d4/a2,-(a7)
;
MOVE.l bmap1,a0							;where it goes
MULU #320,d1:ADD.l d1,a0:LSL #2,d0:AND #$fff0,d0:ADD d0,a0
MOVE.l d2,d0
;
MOVEQ #7,d4
'loop
ROL.l #4,d0:MOVE d0,d2:AND #15,d2
LEA digs(pc),a1:LSL #4,d2:ADD d2,a1						 ;start of digit
MOVEQ #7,d3:MOVE.l a0,a2
'loop2
MOVE.l (a1),(a2):MOVE.l 4(a1),4(a2)
MOVE.l 8(a1),16(a2):MOVE.l 12(a1),20(a2)
;
LEA 576(a1),a1:LEA 1280(a2),a2
DBF d3,'loop2
LEA 32(a0),a0:DBF d4,'loop
;
MOVEM.l (a7)+,d2-d4/a2:RTS

Event
CEND





	Event

	gpu_1
	IncBin "gpu"
	gpu_1f

	dsp_1
	IncBin "dsp"
	dsp_1f

sincos
	IncBin "sincos.bin"

skidmap
	IncBin "maps:t1/format.map"
Ds.w 2048







.InitOs
	CNIF #c=#j
;		BSR initjagos

		MOVE.l #$00a600a6,$f00038:MOVE #$656,$f0003c
		;MOVE #ypos,$f00046:MOVE #ypos+hite+hite,$f00048
		MOVE #$2e,$f00046
		;MOVE #$2e+240+240,$f00048
		MOVE #$2e+199+199,$f00048

		bld.l=$f02200
		!waitgpu
		!waitdsp


		Poke.l $f1a100,(Peek.l($f1a100)&$f) OR (1 ASL 14)
		BlCopyMem{?gpu_1,$f03000,?gpu_1f-?gpu_1}
		BlCopyMem{?dsp_1,$f1b000,?dsp_1f-?dsp_1}

;				LEA gpu_1(pc),a0:LEA gpu_1f(pc),a1:LEA $f03000,a2
;				BSR copymem:!waitgpu;!rungpu(0)
;				LEA dsp_1(pc),a0:LEA dsp_1f(pc),a1:LEA $f1b000,a2
;				BSR copymem:!waitdsp;:!rundsp{0}						,

	CEND

Return

.InitMem

	trisize.l=(16*17/2)*8;SizeOf.xy
	tritemp.l=$f1cf80-8-trisize;GetMem{dist.l} ;internal dsp ram!


	CNIF #c=#j
		*bmr1.jbmap=GetMem32{SizeOf.jbmap}
		*bmr2.jbmap=GetMem32{SizeOf.jbmap}
		*bmr.jbmap=*bmr1

		CreateBmap{320,200,3,1,0,*bmr1.jbmap}
		CreateBmap{320,200,3,1,0,*bmr2.jbmap}
	CEND
	CNIF #c=#a
		Screen 0,4
		ScreensBitMap 0,0
		BitMapOutput 0:Locate 0,0
	CEND

	CNIF #c<>#s
		Gosub InitLatMem
	CEND

Return

.InitVars
	sincos.l=?sincos
	maptr.l=?skidmap
	condt.l=maptr+64*64*2 + 2
	pts.w=Peek.w(maptr+64*64*2):pts1.w=pts+1:pts2.w=pts+2:pts3=pts+3:pts4=pts+4
	SetMaptr maptr.l
	SetConDt condt.l
	SetIO &bez.ij

			For i.w=0 To 7*SizeOf.frend Step 2
				Poke.w condt+i+(pts1*SizeOf.frend),Peek.w (condt+i)
			Next
	FindLo 7



	quikx=bez\i
	quiky=bez\j

	mytau=6

Return







.DoPal
	CNIF #c=#j
			palbase.l=$f00400
			For tr.w=0 To 255
				mycol=tr ASL 1

				blah.q=(##[$8481](15*tr+2.3,tr)+1)*127:mr=blah
				blah.q=(##[$8481](tr,tr*7+3242)+1)*127:mg=blah
				blah.q=(##[$8481](tr*31+32.6,tr*9+324)+1)*127:mb=blah

				temp.l=(jint{mr ASR 3} ASL 5 + jint{mb ASR 3}) ASL 6+ jint{mg ASR 2}
		;		temp.l=$ffff;3333
				Poke.w palbase+mycol,temp
			Next
	CEND
Return






.LostCode

	CNIF 1=0


		jj=0
		If butt&1 Then jj+1
		If butt&2 Then jj-1
		myangvel=(myangvel+jj) *0.98
		myang=myang+myangvel ASR 4
		If myang<0 Then myang+1024
		If myang>=1024 Then myang-1024


		ad.l=?sincos+((myang&1023) ASL 2)
		f=jfrac{myang}:of=1-f



		qs=Peek.w(ad	)*of+Peek.w(ad+4)*f
		qc=Peek.w(ad+2)*of+Peek.w(ad+6)*f

		qqs=jext{qs}
		qqc=jext{qc}


		xvel=(xvel+jox) *0.95
		yvel=(yvel+joy) *0.95

		xdif=xvel*qqc + yvel*qqs
		ydif=xvel*-qqs + yvel*qqc
		deadx=jlimit{deadx+xdif ASR 3 ,1,63-#sqs}
		deady=jlimit{deady+ydif ASR 3 ,1,63-#sqs}

		delta.l=jint{deadx} +jint{deady}ASL 6
	CEND







	CNIF 1=0
		Use On

		SUB Init
		peat
		VWait:DisplayBitMap 0,db:db=1-db:Use BitMap db:BlockScroll
		BitMapOutput db
		 sx3=MouseX:sy3=MouseY
		Gosub Make
		Gosub Rot
		Gosub Draw

	 Until Joyb(0)<>0
	End
	CEND


	CNIF 1=0
;		If (jcos{0}<0.9) OR (jcos{0}>1.1)
			For i.w=0 To 320
				hgh=i/320
				BlLin{*bmr,i,128,i,jcos{hgh}*64+128,$ffffffff}
			Next
;		EndIf
	CEND


Return