; ascii translation of /Users/simon/Google Drive/amiga/w/sega/shit/dev/segaold.bb
+;
; sega megadrive routines
;

#vd=$c00000	;vdp data port
#cp=$c00004	;vdp control port
#hv=$c00008	;hv counter

#ram=$ff0000

#wvram=	$40000000
#wcram=	$c0000000
#wsram=	$40000010

#vram=$0
#cram=$80000000
#vsram=$40000000

#z80=$a11100
#z80sram=$a00000
#z80dram=$ff8000

NEWTYPE .sprite
	vp.w
	size.b:splink.b
	spdata.w
	hp.w
End NEWTYPE

Macro reg #$8000+`1*256:End Macro
Macro setreg:MOVE.w #$8000+`1*256+`2,cp:End Macro
Macro setmem:MOVE.l `1,cp:MOVE.w `2,vd:End Macro
Macro pokemem:MOVE.l `1,cp:Poke.w #vd,`2:End Macro

Statement dodma{src.l,dest.l,size.w}
	;
	MOVE.b#1,z80:wz:BTST.b#0,z80:BNE wz
	;
	LEA cp,a0
	;
	!setreg{1,$7c}:!setreg{15,2}	;disp+m1 & increment
	;
	MOVE !reg{19},d3:MOVE.b d2,d3:MOVE d3,(a0)							 ;size
	MOVE !reg{20},d3:LSR#8,d2:MOVE.b d2,d3:MOVE d3,(a0)
	;
	MOVE !reg{21},d3:LSR.l #1,d0:MOVE.b d0,d3:MOVE d3,(a0)	 ;src
	MOVE !reg{22},d3:LSR.l #8,d0:MOVE.b d0,d3:MOVE d3,(a0)
	MOVE !reg{23},d3:LSR.l #8,d0:MOVE.b d0,d3:MOVE d3,(a0)
	;
	ROL.l#2,d1:ROR #2,d1:SWAP d1:BSET #30,d1:BEQ nocd2		 ;dest
	BSET #4,d1:nocd2:BSET#7,d1:MOVE.l d1,-(a7)
	MOVE (a7)+,(a0):MOVE (a7)+,(a0)
	NOP
	;
	!setreg{1,$6c}:MOVE #0,z80:AsmExit
	;
End Statement


Function.w dosegaquad{verts.l,sprdata.l} ; returns ystart verts=xy xy xy xy
	;
	MOVEM.l a4-a6,-(a7):
	;
	MOVE.l d0,a0:MOVE.l d1,a5:LEA 96(a5),a6	;a2a3=spstrt/end
	LEA ptab(pc),a4
	;
	MOVEM.l (a0),d0-d3																		;getverts
	CMP d0,d1:BPL notcl2:EXG d0,d3:EXG d0,d2:EXG d0,d1
	CMP d0,d1:BPL notcl2:EXG d0,d3:EXG d0,d2:EXG d0,d1
	CMP d0,d1:BPL notcl2:EXG d0,d3:EXG d0,d2:EXG d0,d1:notcl2
	CMP d3,d0:BMI notan2:EXG d0,d1:EXG d0,d2:EXG d0,d3
	CMP d3,d0:BMI notan2:EXG d0,d1:EXG d0,d2:EXG d0,d3
	CMP d3,d0:BMI notan2:EXG d0,d1:EXG d0,d2:EXG d0,d3:notan2
	;
deltay
	MOVE d1,d4:SUB d0,d4:ADD d4,d4
	MOVE d2,d5:SUB d1,d5:ADD d5,d5
	MOVE d3,d6:SUB d2,d6:ADD d6,d6
	MOVE d0,d7:SUB d3,d7:ADD d7,d7
	MOVE d0,-(a7)
	;
deltax
	SWAP d0:SWAP d1:SWAP d2:SWAP d3:MOVE d0,a0
	SUB d1,d0:MULS dtab+64(pc,d4),d0:SWAP d4:MOVE d0,d4
	SUB d2,d1:MULS dtab+64(pc,d5),d1:SWAP d5:MOVE d1,d5
	SUB d3,d2:MULS dtab+64(pc,d6),d2:SWAP d6:MOVE d2,d6
	SUB a0,d3:MULS dtab+64(pc,d7),d3:SWAP d7:MOVE d3,d7
	;
	MOVE a0,d0:ROR#5,d0:MOVE d0,d1:SWAP d0:MOVE d1,d0
	;
	MOVEQ#2,d3:SWAP d3:SUB.l d3,d4:BRA nxwrite
	;
dtab:IncBin divtable
	;
nxwrite:
	SUB d4,d0:SWAP d0:SUB d7,d0:SWAP d0:MOVE.l d0,d1
	ROL.l#5,d1:ROR#5,d1:LSR.l#7,d1:AND#$3ff0,d1:MOVEM.l 0(a4,d1),a1-a3
	MOVE.l a3,192(a5):MOVE.l a2,96(a5):MOVE.l a1,(a5)+
	CMP.l a5,a6:BEQ dunquad
chkr
	SUB.l d3,d4:BPL chkl
	MOVE.l d5,d4:BMI dunpoly:SUB.l d3,d4:MOVE.l d6,d5
chkl:
	ADD.l d3,d7:BMI nxwrite
	MOVE.l d6,d7:BPL dunpoly:MOVE.l d5,d6:BRA nxwrite
dunpoly:
	MOVEQ#0,d0:wipe:MOVE.l d0,192(a5):MOVE.l d0,96(a5):MOVE.l d0,(a5)+
	CMP.l a5,a6:BNE wipe:dunquad:MOVE (a7)+,d0:MOVEM.l (a7)+,a4-a6:AsmExit
	;
ptab:IncBin polytable
	;
End Function

; vram
;
;		0 = $0000 = map				(4096)
; 4096 = $1000 = blocks
;
;				$e000 = window		 (2048)?
;				$f000 = sprites		(640)
;				$f200 = spdata		 (start at #$760)
;				$fc00 = scroll

mystart:

	Dim acar.b(288)

globals:
	cars.l=Peek.l($ff0004)
	track.l=Peek.l($ff0008)
	tracklen.l=Peek.l($ff000c)

	skidmap.l=track
	blocks.l=track+96*48*2
	blocklen.l=tracklen-96*48*2

test
	;
	For y=0 To 31
		dodma{?blank,#vram+y*64*2,64}		;2048 bytes
	Next
	dodma{?mypalette,#cram+0,16}
	dodma{?carpalette,#cram+32,16}
	dodma{?spdata,#vram+$f200,512}
	dodma{blocks,#vram+4096,blocklen/2}									;32 chars

	!setmem{#wvram+$3c000003,#0}						;horizontal
	!setmem{#wvram+$3c020003,#-24*8}

	!setmem{#wsram+$00000000,#0}						;vertical
	!setmem{#wsram+$00020000,#0}

	!setreg{2,0}		 ;map location=0*8192
	!setreg{4,0}		 ;map location=0*8192
	!setreg{5,$78}	 ;sprites location=$f000
	!setreg{11,0}		;scroll=entire screen + no external interupts (8)
	!setreg{12,$89}	;32 cell mode shadows no interlace
	!setreg{13,$3f}	;hs=$fc00
	!setreg{16,1}		;64x32 sized map
	!setreg{3,$38}	 ;windowpos= $e000
	!setreg{17,$0};$8a}
	!setreg{18,$0};$ff}

	vv=1


Statement doline{src.l,dest.l}
	LEA $c00000,a0
	SWAP d1:BSET#30,d1:MOVE.l d0,a1:MOVEQ#30,d0:MOVE.l #$00800000,d2
nxline:
	MOVE.l d1,4(a0)
	MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0)
	MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0)
	MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0):MOVE (a1),(a0)
	ADD#96*2-40,a1:ADD.ld2,d1:DBRA d0,nxline
	AsmExit
End Statement

Statement doscrn{src.l,dest.l}
	LEA $c00000,a0
	SWAP d1:BSET#30,d1:MOVE.l d0,a1:MOVEQ#30,d0:MOVE.l #$00800000,d2
nxline2:
	MOVE.l d1,4(a0)
	MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0)
	MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0)
	MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0)
	MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0)
	MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0):MOVE.l (a1)+,(a0)
	MOVE (a1),(a0)
	ADD#96*2-80,a1:ADD.ld2,d1:DBRA d0,nxline2
	AsmExit
End Statement

Function.w readjoy{n.w}
	LEA $a10000,a0:ADD d0,a0:MOVE.b#$40,9(a0):MOVE.b#$40,3(a0):NOP:NOP:NOP
	MOVE.b 3(a0),d0:MOVE.b #0,3(a0):NOP:NOP:NOP:MOVE.b 3(a0),d1
	ROL#2,d1:AND#$3f,d0:AND#$c0,d1:OR d1,d0:NOT d0:AsmExit
End Function

x=0:y=0:xa=1:ya=0

poka
	fr.l=fr+1:If fr>799 Then fr=0

;	x+xa:y+ya
;	If x<0 Then x=0:xa=0:ya=-1
;	If y<0 Then y=0:ya=0:xa=1
;	If x=768-319 Then x=768-320:xa=0:ya=1
;	If y=384-239 Then y=384-240:ya=0:xa=-1

	a.w=readjoy{0}:xa=0:ya=0

	If a AND 1 Then ya=-1
	If a AND 2 Then ya=1
	If a AND 4 Then xa=-1
	If a AND 8 Then xa=1

	x=QLimit(x+xa,0,768-320)
	y=QLimit(y+ya,0,384-240)

	vbwait:TST $ff0000:BEQ vbwait:MOVE#0,$ff0000

	!pokemem{#wvram+$3c000003,-(x AND 7)}						;horizontal
	!pokemem{#wsram+$00000000,(y AND 7)}						;vertical

	maptl.l=skidmap+Int(x LSR 3)ASL1+Int(y LSR 3)*96*2

	MOVE #$8704,$c00004
	dodma{?spites,#vram+$f000,256}
	MOVE #$8705,$c00004
	dodma{&acar(0),#vram+$f200,288}
	MOVE #$8706,$c00004

	doscrn {maptl,0}

;	doline {skidmap,0}
;	doline {skidmap+76*2,88}
	MOVE #$8707,$c00004
	yy.w=dosegaquad{?mypoly,&acar(0)}
	MOVE #$8710,$c00004
	BRA poka

	mypoly:Dc.w 8,0,20,10,10,20,3,6

	MOVE #$8708,$c00004

	vb+vv:If vb>16 OR vb<-16 Then vv=-vv

	!pokemem{#wsram+$00000000,vb}
	!pokemem{#wsram+$00020000,-vb}
	!pokemem{#wvram+$3c000003,vb}
	!pokemem{#wvram+$3c020003,-vb-24*8}

	While Peek.w($c00008)<$6f00:Wend
;	!setreg{1,$24}
	!pokemem{#wsram+$00000000,-vb}
	!pokemem{#wsram+$00020000,vb}
	!pokemem{#wvram+$3c000003,-vb}
	!pokemem{#wvram+$3c020003,vb-24*8}

	MOVE #$8700,$c00004

	MOVE #$8704,$c00004

	Goto poka


blank:Dcb.w 64,$80

spites:
	Dc.w $080,$a01,$e790,$f0			;palette 1
	Dc.w $090,$a02,$e790,$90
	Dc.w $0a0,$a03,$e790,$f0
	Dc.w $0b0,$a04,$e790,$90
	Dc.w $0c0,$a05,$e790,$f0
	Dc.w $0d0,$a00,$e790,$90
	Dc.w $0e0,$a07,$e790,$e0
	Dc.w $0f0,$a08,$e790,$90
	Dc.w $100,$a09,$e790,$f0
	Dc.w $110,$a0a,$e790,$90
	Dc.w $120,$a0b,$e790,$f0
	Dc.w $130,$a0c,$e790,$90
	Dc.w $140,$a0d,$c790,$f0
	Dc.w $150,$a0e,$c790,$90
	Dc.w $160,$a0f,$c790,$f0
	Dc.w $080,$a10,$c790,$120			;palette 1
	Dc.w $090,$a11,$c790,$150
	Dc.w $0a0,$a12,$c790,$120
	Dc.w $0b0,$a13,$c790,$150
	Dc.w $0c0,$a14,$c790,$120
	Dc.w $0d0,$a15,$c790,$150
	Dc.w $0e0,$a16,$c790,$120
	Dc.w $0f0,$a17,$c790,$150			;23

	Dc.w $100,$a18,$a790,$120
	Dc.w $110,$a19,$a790,$150
	Dc.w $120,$a1a,$a790,$120
	Dc.w $130,$a1b,$a790,$150

	Dc.w $140,$a1c,$a790,$120
	Dc.w $150,$a1d,$a790,$150
	Dc.w $160,$a1e,$a790,$120
	Dc.w $170,$a00,$a790,$150

spdata:
	Dc.l $ffffffff
	Dc.l $f004400f
	Dc.l $ffffffff
	Dc.l $fff00fff
	Dc.l $33300333
	Dc.l $20222202
	Dc.l $20000002
	Dc.l $22222222

;skidmap:
;	IncBin "block.map"
;blocks:
;	IncBin "blocks.dat"
;	IncBin "block.chr"
;	IncBin "f1.win"
;blocksf

mypalette:
	IncBin "palette.dat"

carpalette:
	IncBin "car.palette"

hscroll:
	Dc.w 0,-24*8
	Dc.w 0,0

	sincos
		IncBin "sincos.bin"


myvb:
	RTE
	ADD#-1,$ff0010:RTE

	MOVEM.l d0-d7/a0-a6,-(a7)
;	b+1:bb.w=$e700+(b AND 255):Poke.w #cp,bb
	 ADD.b#1,-1						 ;$ff0001
	MOVE.b #$e7,-2				 ;$ff0000
	MOVE.w -2,cp
	MOVEM.l (a7)+,d0-d7/a0-a6
	RTE

